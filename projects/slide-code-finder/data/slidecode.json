[
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 3: Introduction to CSS</h3>\n        </section>", "text": "CSE 154 Lecture 3: Introduction to CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <p>Administrivia</p>\n          <p>Introduction to CSS</p>\n          <ul>\n            <li>Review: Terminology and Syntax</li>\n            <li><code>id</code> and <code>class</code> attributes</li>\n            <li>Selectors (context, psuedo, etc.)</li>\n            <li>Overview of Useful CSS Styles</li>\n          </ul>\n        </section>", "text": "Today's Agenda Administrivia Introduction to CSS Review: Terminology and Syntax id and class attributes Selectors (context, psuedo, etc.) Overview of Useful CSS Styles", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Administrivia</h2>\n          <ul class=\"font-20pt\">\n            <li class=\"fragment\">We've gotten some great questions so far! We'll be posting a weekly pinned\n            \"Student FAQs\" post on Piazza. Take a look at these every few days or so!</li>\n            <li class=\"fragment\">Tonight we will respond to today's Lecture Poll Questions</li>\n            <li class=\"fragment\">Remember to use WPL and Office Hours!</li>\n            \n            <li class=\"fragment\">\n              HW1 is out, and Creative Project 1 is due Saturday. Any questions?\n\n\t\t        </li><li class=\"fragment\">Consider opting in for the <a href=\"../../creative/creative-projects.html\" target=\"_blank\">CP1 Showcase</a> (by\n              Sunday)!</li>\n          </ul>\n        </section>", "text": "Administrivia We've gotten some great questions so far! We'll be posting a weekly pinned \"Student FAQs\" post on Piazza. Take a look at these every few days or so! Tonight we will respond to today's Lecture Poll Questions Remember to use WPL and Office Hours! HW1 is out, and Creative Project 1 is due Saturday. Any questions?\t\t Consider opting in for the CP1 Showcase (by Sunday)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Lecture Objectives</h2>\n          <p>\n            By the end of this lecture, you should be able to:\n          </p>\n          <ul>\n            <li>Better understand the HTML and CSS connection</li>\n            <li>Know how to select different elements in CSS using selectors, ids, and classses</li>\n            <li>Know some more common CSS styles</li>\n            <li>Assign colors on webpages using different encodings (hex, rgb,\n            names)</li>\n            <li>Set font properties in CSS and be able to import Google Fonts</li>\n            <li>Use your Chrome Inspector tool to explore and test CSS properties</li>\n          </ul>\n        </section>", "text": "Lecture Objectives By the end of this lecture, you should be able to: Better understand the HTML and CSS connection Know how to select different elements in CSS using selectors, ids, and classses Know some more common CSS styles Assign colors on webpages using different encodings (hex, rgb, names) Set font properties in CSS and be able to import Google Fonts Use your Chrome Inspector tool to explore and test CSS properties", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Relative vs. Absolute Links</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Check out my other &lt;a href=\"cookie-recipes.html\"&gt;page&lt;/a&gt;!\n  It has my own recipe for delicious cookies:\n  &lt;img src=\"imgs/choc-cookies.jpg\" alt=\"my cookie recipe\" /&gt;\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>\n              Links to other files from your HTML document can be absolute (to another web site) or\n              relative (to another page on this site, <em>relative</em> to the HTML page it is\n              linked from).\n            </p>\n        </section>", "text": "Relative vs. Absolute Links <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML <p> Check out my other <a href=\"cookie-recipes.html\">page</a>! It has my own recipe for delicious cookies: <img src=\"imgs/choc-cookies.jpg\" alt=\"my cookie recipe\" /></p> HTML Links to other files from your HTML document can be absolute (to another web site) or relative (to another page on this site, relative to the HTML page it is linked from).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Recall: HTML5 Document Structure</h2>\n          <p>\n          General outline of a document body (<a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/assets/templates/html/index2.html\">template</a>):\n          </p>\n          <pre><code class=\"hljs\" data-trim>&lt;body&gt;\n  &lt;header&gt;\n    &lt;!-- Header of the webpage body (e.g. logo, navigation bar) --&gt;\n  &lt;/header&gt;\n  &lt;main&gt;\n    &lt;!-- Main section of the webpage body (where most content is) --&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;!-- Footer of the webpage body (e.g. copyright info) --&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>For different types of pages, you may have more elements (e.g. <code>nav</code>), but these are the ones you should\n          follow as a guide for most of your webpages.</p>\n        </section>", "text": "Recall: HTML5 Document Structure General outline of a document body (template): <body> <header> <!-- Header of the webpage body (e.g. logo, navigation bar) --> </header> <main> <!-- Main section of the webpage body (where most content is) --> </main> <footer> <!-- Footer of the webpage body (e.g. copyright info) --> </footer></body> HTML For different types of pages, you may have more elements (e.g. nav), but these are the ones you should follow as a guide for most of your webpages.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Review: HTML5 and Semantic Tags</h2>\n          <h3 class=\"mb-0\"><code>&lt;main&gt;</code></h3>\n          <p class=\"font-20pt\">\n            Main content of the document - unlike &lt;header&gt; and &lt;footer&gt;\n            tags, there can only be one main element in the &lt;body&gt;. The content inside\n            should be unique and <em>not</em> contain content that is repeated across pages (\n            e.g. sidebars, nav link, search bars, etc.)\n          </p>\n          <h3 class=\"mb-0\"><code>&lt;header&gt;</code></h3>\n          <p class=\"font-20pt\">\n              Header element - contains header information for page body or\n              section/article, including logos, navigation bar, etc.\n          </p>\n          <h3 class=\"mb-0\"><code>&lt;footer&gt;</code></h3>\n          <p class=\"font-20pt\">\n            Footer element - contains footer information for page boy or\n            section/article, including copyright infromation, contact, links, etc.\n          </p>\n        </section>", "text": "Review: HTML5 and Semantic Tags <main> Main content of the document - unlike <header> and <footer> tags, there can only be one main element in the <body>. The content inside should be unique and not contain content that is repeated across pages ( e.g. sidebars, nav link, search bars, etc.) <header> Header element - contains header information for page body or section/article, including logos, navigation bar, etc. <footer> Footer element - contains footer information for page boy or section/article, including copyright infromation, contact, links, etc.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Now, Let's Talk About Style.</h2>\n          <div style=\"width:25%; float: right\">\n            <div>\n              <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n              <p class=\"medium-small-font\">CSS</p>\n            </div>\n          </div>\n        </section>", "text": "Now, Let's Talk About Style. CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2><a href=\"http://www.csszengarden.com/\">CSSZenGarden</a></h2>\n          <p>\n            A project using different CSS templates to style <strong>the same</strong> HTML page.\n          </p>\n          <div class=\"fragment long-row\">\n            <div>\n              <img src=\"../img/czg116.png\" alt=\"CSS Zen Garden Screenshot\" class=\"no-space-bottom\">\n              <p class=\"small-caption\">\n                Template 116: <a target=\"_blank\" href=\"http://www.csszengarden.com/116/\">Ragged</a>\n              </p>\n            </div>\n            <div>\n              <img src=\"../img/czg143.png\" alt=\"CSS Zen Garden Screenshot\" class=\"no-space-bottom\">\n              <p class=\"small-caption\">\n                Template 143: <a target=\"_blank\" href=\"http://www.csszengarden.com/143/\">Verde Moderna</a>\n              </p>\n            </div>\n            <div>\n              <img src=\"../img/czg214.png\" alt=\"CSS Zen Garden Screenshot\" class=\"no-space-bottom\">\n              <p class=\"small-caption\">\n                Template 214: <a target=\"_blank\" href=\"http://www.csszengarden.com/214/\">Pixelisation</a>\n              </p>\n            </div>\n            <div>\n              <img src=\"../img/czg219.png\" alt=\"CSS Zen Garden Screenshot\" class=\"no-space-bottom\">\n              <p class=\"small-caption\">\n                Template 219: <a target=\"_blank\" href=\"http://www.csszengarden.com/219/\">Steel</a>\n              </p>\n            </div>\n          </div>\n\n          <p class=\"fragment\">Which style do you like the most?</p>\n        </section>", "text": "CSSZenGarden A project using different CSS templates to style the same HTML page. Template 116: Ragged Template 143: Verde Moderna Template 214: Pixelisation Template 219: Steel Which style do you like the most?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n        <h2>Sharing CSS Between Multiple HTML Files</h2>\n        <div class=\"side-by-side\">\n          <div class=\"space-right\">\n        <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n  ...\n  &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n  ...\n&lt;/head&gt;\n... rest of HTML\n        </code></pre>\n        <p class=\"code-caption\">page1.html</p>\n          </div>\n\n          <div>\n        <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n  ...\n  &lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;\n  &lt;link href=\"cookie-page.css\" rel=\"stylesheet\" /&gt;\n  ...\n&lt;/head&gt;\n... rest of HTML</code></pre>\n        <p class=\"code-caption\">page2.html</p>\n        </div>\n        </div>\n\n        <div class=\"half-width centered-figure\">\n        <pre><code class=\"hijs\" data-trim>p {\n  color: red;\n  font-family: sans-serif;\n} </code></pre>\n        <p class=\"code-caption\">style.css</p>\n        </div>\n        <p>Multiple HTML files can share the same CSS, and one HTML file can have multiple CSS files\n        (loaded in order)</p>\n        <p class=\"fragment\">Q: What do you think would happen if you have a p style for <strong>both</strong> <code>style.css</code>\n        and <code>cookie-page.css</code>?\n      </p></section>", "text": "Sharing CSS Between Multiple HTML Files <head> ... <link href=\"style.css\" rel=\"stylesheet\" /> ...</head>... rest of HTML page1.html <head> ... <link href=\"style.css\" rel=\"stylesheet\" /> <link href=\"cookie-page.css\" rel=\"stylesheet\" /> ...</head>... rest of HTML page2.html p { color: red; font-family: sans-serif;} style.css Multiple HTML files can share the same CSS, and one HTML file can have multiple CSS files (loaded in order) Q: What do you think would happen if you have a p style for both style.css and cookie-page.css?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n        <h2>Recall: Basic CSS Rule Syntax</h2>\n        <pre><code class=\"hljs\" data-trim>selector {\n  property: value;\n  property: value;\n  ...\n  property: value;\n}</code></pre>\n        <p class=\"code-caption\">CSS (template)</p>\n\n        <pre><code class=\"hijs\" data-trim>p {\n  color: red;\n  font-family: sans-serif;\n} </code></pre>\n        <p class=\"code-caption\">CSS (example)</p>\n        <p>A CSS file consists of one or more rules</p>\n        <p>\n          A rule selector specifies HTML element(s) and applies style properties\n        </p>\n        <p>\n          There are\n          currently over 200 possible style properties to choose from!\n        </p>\n      </section>", "text": "Recall: Basic CSS Rule Syntax selector { property: value; property: value; ... property: value;} CSS (template) p { color: red; font-family: sans-serif;} CSS (example) A CSS file consists of one or more rules A rule selector specifies HTML element(s) and applies style properties There are currently over 200 possible style properties to choose from!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Comments in CSS: /* ... */</h2>\n          <pre><code class=\"hijs\" data-trim>/* This is a comment.\n   It can span many lines in a CSS file. */\np {\n  color: red;\n  background-color: aqua;\n}\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n<p>CSS (like HTML) is usually not commented as much as code such as Java, but you should comment\neach of your CSS files in this class!\n          </p>\n          <p>The <code>//</code> single-line comment is <strong>NOT</strong> supported in CSS</p>\n          <p>The <code>&lt;-- ... --&gt;</code> HTML comment is also\n          <strong>NOT</strong> supported in CSS</p>\n        </section>", "text": "Comments in CSS: /* ... */ /* This is a comment. It can span many lines in a CSS file. */p { color: red; background-color: aqua;} CSSCSS (like HTML) is usually not commented as much as code such as Java, but you should commenteach of your CSS files in this class! The // single-line comment is NOT supported in CSS The <-- ... --> HTML comment is also NOT supported in CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 4: Backgrounds, Box Model, and the DOM</h3>\n        </section>", "text": "CSE 154 Lecture 4: Backgrounds, Box Model, and the DOM", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <ul>\n            <li>Administrivia</li>\n            <li>CSS\n              <ul>\n                <li>Background Images</li>\n                <li>Box Model</li>\n                <li>More Selectors (combinators, psuedo, etc.)</li>\n                <li>The DOM</li>\n              </ul>\n            </li>\n          </ul>\n        </section>", "text": "Agenda Administrivia CSS Background Images Box Model More Selectors (combinators, psuedo, etc.) The DOM", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Module 1: HTML and CSS</h2>\n          <p>By the end of this module, you should:</p>\n          <ul class=\"font-20pt\">\n            <li>Be able to write a webpage with HTML using functionally and semantically\n              appropriate tags</li>\n            <li>Understand the relationship between the browser, webpage, website, HTML,\n              and CSS</li>\n            <li>Identify the importance of accessibility on the web and some best\n              practices you can use to make accessible websites</li>\n            <li>Become familiar with basic web development tools (text editor, browser,\n              Git and GitLab)</li>\n            <li>Understand how to use different CSS layout techniques with box model and flex</li>\n            <li>Know how and where to look for HTML tags and CSS properties</li>\n            <li>Be familiar with the CSE 154 Code Quality Guidelines</li>\n          </ul>\n        </section>", "text": "Module 1: HTML and CSS By the end of this module, you should: Be able to write a webpage with HTML using functionally and semantically appropriate tags Understand the relationship between the browser, webpage, website, HTML, and CSS Identify the importance of accessibility on the web and some best practices you can use to make accessible websites Become familiar with basic web development tools (text editor, browser, Git and GitLab) Understand how to use different CSS layout techniques with box model and flex Know how and where to look for HTML tags and CSS properties Be familiar with the CSE 154 Code Quality Guidelines", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Quick Tips on How to Study in Module 1</h2>\n          <ol class=\"font-20pt\">\n            <li>\n              Attend every class (including lecture, section, and lab). Work through section\n              and lab problems if you don't finish them in class (we intentionally provide\n              more exercises than expected to complete in 50 minutes).\n            </li>\n            <li>\n              Build onto your CP work to learn new HTML tags and CSS properties (and remember to implement \n              your TAs feedback!) - you can use the same project in future CPs if you would like.\n            </li>\n            <li>\n              Ask questions! There's a lot to learn in HTML/CSS - we do not expect you to\n              learn it all in this course. Our goal is to provide guidance and motivation for\n              content, and the resources to help you filter out what's important. If\n              there is a common question from students, we can add resources to help.\n            </li>\n            <li>\n              Learn how to use your browser's inspector tool. This is super handy to explore\n              different CSS properties and values!\n            </li>\n            <li>\n              This is a great time to revisit the TA tips from their about pages!\n            </li>\n          </ol>\n        </section>", "text": "Quick Tips on How to Study in Module 1 Attend every class (including lecture, section, and lab). Work through section and lab problems if you don't finish them in class (we intentionally provide more exercises than expected to complete in 50 minutes). Build onto your CP work to learn new HTML tags and CSS properties (and remember to implement your TAs feedback!) - you can use the same project in future CPs if you would like. Ask questions! There's a lot to learn in HTML/CSS - we do not expect you to learn it all in this course. Our goal is to provide guidance and motivation for content, and the resources to help you filter out what's important. If there is a common question from students, we can add resources to help. Learn how to use your browser's inspector tool. This is super handy to explore different CSS properties and values! This is a great time to revisit the TA tips from their about pages!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>Administrivia</h2>\n            <p>HW1 is due Thursday\n            </p>\n            <ul>\n              <li>Remember to use <em>both</em> HTML and CSS validators before submitting!</li>\n            </ul>\n            <p>Last call to opt in to the <a href=\"../../creative/\" target=\"_blank\">CP1 Showcase</a>\n            by tonight!</p>\n            <p>OH after lecture!</p>\n            <p>First Exploration Session this Thursday - come hear from different TA's about their\n            web development toolbox!</p>\n        </section>", "text": "Administrivia HW1 is due Thursday Remember to use both HTML and CSS validators before submitting! Last call to opt in to the CP1 Showcase by tonight! OH after lecture! First Exploration Session this Thursday - come hear from different TA's about their web development toolbox!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>A Note About Naming in Windows</h2>\n          <p>\n            Please make sure an file names you reference (e.g. html, css, images) in your\n            HTML are all-lowercase (and have no spaces). Windows will\n            ignore casing, but they will appear as broken links on other systems!\n          </p>\n          <p>\n            Example, if you have an image under \"images/pupper.jpg\" relative to your HTML\n            file, the first image will\n            render but he second will appear broken on non-Windows systems:\n          </p>\n          <pre><code class=\"hljs\">&lt;img src=\"images/pupper.jpg\" alt=\"my pupper!\" /&gt;\n&lt;img src=\"images/pupper.JPG\" alt=\"my pupper!\" /&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n        </section>", "text": "A Note About Naming in Windows Please make sure an file names you reference (e.g. html, css, images) in your HTML are all-lowercase (and have no spaces). Windows will ignore casing, but they will appear as broken links on other systems! Example, if you have an image under \"images/pupper.jpg\" relative to your HTML file, the first image will render but he second will appear broken on non-Windows systems: <img src=\"images/pupper.jpg\" alt=\"my pupper!\" /><img src=\"images/pupper.JPG\" alt=\"my pupper!\" /> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Methods for Styling Different Elements in CSS</h2>\n          <ul>\n            <li>ids and classes</li>\n            <li>Grouping</li>\n            <li>Context selectors and combinators (More on Monday)</li>\n            <li>psuedo-selectors (Monday)</li>\n          </ul>\n        </section>", "text": "Methods for Styling Different Elements in CSS ids and classes Grouping Context selectors and combinators (More on Monday) psuedo-selectors (Monday)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2><code>id</code> and <code>class</code></h2>\n          <dl>\n            <dt><code>id</code></dt>\n            <dd>Unique identifier for an element</dd>\n            <dd>Only allowed one <code>id</code> value per page</dd>\n            <dd>Each element can only have one <code>id</code></dd>\n\n            <dt><code>class</code></dt>\n            <dd>Non-unique grouping attribute to share with many elements</dd>\n            <dd>Many elements (even of different types) can share the same <code>class</code></dd>\n            <dd>Each element can have many different <code>class</code>es</dd>\n          </dl>\n        </section>", "text": "id and class id Unique identifier for an element Only allowed one id value per page Each element can only have one id class Non-unique grouping attribute to share with many elements Many elements (even of different types) can share the same class Each element can have many different classes", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Example</h2>\n          <pre><code class=\"no-syntax-highlight\" data-noescape>&lt;p <em>id=\"doggo-cal\" class=\"product\"</em>&gt;Puppy calendar&lt;/p&gt;\n&lt;p <em>id=\"cat-mug\" class=\"product\"</em>&gt;Cat mug&lt;/p&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hljs\">.product { text-decoration: underline; /* both elements share this! */ }\n\n#doggo-cal { color: #D06613; /* only the first p has this color */ }\n\n#cat-mug { background-color: #C0FFEE; /* only the second p has this color */ }</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <div class=\"output\">\n            <p style=\"color: #D06613; text-decoration: underline;\">Puppy calendar</p>\n            <p style=\"background-color: #C0FFEE; text-decoration: underline;\">Cat mug</p>\n            <p class=\"output-caption\" style=\"margin-top: 0\">output</p>\n          </div>\n          <p>Both paragraphs have the same class (<code>product</code>), but each has its own ID</p>\n          <p class=\"fragment\">Q: Why do you think these are useful? Why do you think both were added to HTML/CSS\n          specifications?</p>\n        </section>", "text": "Example <p id=\"doggo-cal\" class=\"product\">Puppy calendar</p><p id=\"cat-mug\" class=\"product\">Cat mug</p> HTML .product { text-decoration: underline; /* both elements share this! */ }#doggo-cal { color: #D06613; /* only the first p has this color */ }#cat-mug { background-color: #C0FFEE; /* only the second p has this color */ } CSS Puppy calendar Cat mug output Both paragraphs have the same class (product), but each has its own ID Q: Why do you think these are useful? Why do you think both were added to HTML/CSS specifications?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Benefits of ids and classes</h2>\n          <p>Gives you another way to talk about your content in CSS (and later in JavaScript)</p>\n\n          <pre><code class=\"hlcss\" data-trim data-noescape>#my-id {\n  /* ... properties ... */\n}\n\n.my-class {\n  /* ... other properties ... */\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <p>\n            A mnemonic: <code>.java</code> programs compile into <code>.class</code>\n            files so... <br>try to remember <q>dot\n            (.) class</q> and <q>hash (#) id</q>\n          </p>\n\n        </section>", "text": "Benefits of ids and classes Gives you another way to talk about your content in CSS (and later in JavaScript) #my-id { /* ... properties ... */}.my-class { /* ... other properties ... */} CSS A mnemonic: .java programs compile into .class files so... try to remember dot (.) class and hash (#) id", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2><code>id</code> or <code>class</code>?</h2>\n          <p>How do you decide whether to use an <code>id</code> or a <code>class</code>?</p>\n          <p>\n            Probably prefer <code>class</code>. You can only use an <code>id</code> once per page, so it's good\n            to be a little stingy with them. <code>class</code>es are free.\n          </p>\n\n          <p>\n            On the other hand, if you know you are making a unique section or page element (e.g.,\n            submit button), <code>id</code> is the way to go.\n          </p>\n          <p>It really takes practice to figure this out - use the flexibility of your CP to ask questions about the\n          right choice if you have them!</p>\n        </section>", "text": "id or class? How do you decide whether to use an id or a class? Probably prefer class. You can only use an id once per page, so it's good to be a little stingy with them. classes are free. On the other hand, if you know you are making a unique section or page element (e.g., submit button), id is the way to go. It really takes practice to figure this out - use the flexibility of your CP to ask questions about the right choice if you have them!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>A note about over-using classes/ids:</h2>\n          <p>\n          It's easy to just make classes for everything, but don't forget that HTML is\n          <em>designed</em> to describe your content.\n            So, prefer a <code>&lt;p&gt;</code> tag over a <code>class</code> named <q>paragraph</q>.\n          </p>\n        </section>", "text": "A note about over-using classes/ids: It's easy to just make classes for everything, but don't forget that HTML is designed to describe your content. So, prefer a <p> tag over a class named paragraph.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Grouping Styles</h2>\n          <pre><code class=\"hljs\" data-trim>p, h1, h2, .product {\n  color: green;\n}\n\nh2, #doggo-cal {\n  background-color: yellow;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <div class=\"output\">\n            <p style=\"color: green\">This paragraph uses the above style.</p>\n            <h2 style=\"color: green; background-color: yellow; margin-bottom: 0\">This h2 uses the\n              above styles</h2>\n            <p class=\"output-caption\" style=\"margin-top: 0\">output</p>\n          </div>\n          <p>A style can select multiple elements separated by commas</p>\n          <p>\n          The individual elements can also have their own styles (like\n          <code>h2</code> above)\n          </p>\n        </section>", "text": "Grouping Styles p, h1, h2, .product { color: green;}h2, #doggo-cal { background-color: yellow;} CSS This paragraph uses the above style. This h2 uses the above styles output A style can select multiple elements separated by commas The individual elements can also have their own styles (like h2 above)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Body Styles</h2>\n          <pre><code class=\"hijs\" data-trim>body {\n  font-size: 16pt;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p>\n            To apply a style to the entire body of your page, write a selector\n            for the body (saves you from manually applying a style to each element)\n          </p>\n        </section>", "text": "Body Styles body { font-size: 16pt;} CSS To apply a style to the entire body of your page, write a selector for the body (saves you from manually applying a style to each element)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\r\n        <h2>Discuss</h2>\r\n          <p>While you're settling in, discuss with someone near you...  </p>\r\n          <ul>\r\n            <li>\r\n              What did you notice in the <code>about.html</code> file that you would like\r\n              to know more about?\r\n            </li>\r\n            <li>\r\n              How did it go for you in section yesterday? What did you learn in getting\r\n              your machine set up and accepting CP1?\r\n            </li>\r\n            <li>\r\n              What was the icebreaker you did in section and what were the results of the\r\n              icebreaker discussions?\r\n            </li>\r\n          </ul>\r\n      </section>", "text": "Discuss\r While you're settling in, discuss with someone near you... \r \r \r What did you notice in the about.html file that you would like\r to know more about?\r \r \r How did it go for you in section yesterday? What did you learn in getting\r your machine set up and accepting CP1?\r \r \r What was the icebreaker you did in section and what were the results of the\r icebreaker discussions?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h1>CSE 154</h1>\r\n        <h3>Lecture 2: More HTML, Accessible design</h3>\r\n      </section>", "text": "CSE 154\r Lecture 2: More HTML, Accessible design", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Today's Agenda</h2>\r\n        <p>Administrivia</p>\r\n        <p>Discuss Accessible Design</p>\r\n        <p>Finish discussing HTML</p>\r\n        <p class=\"space-left fragment\">Yes really! </p><p>\r\n        </p><p class=\"space-left fragment\">but you should not feel like you will know everything yet</p>\r\n        <p class=\"space-left fragment\">and we do learn more as we delve deeper into CSS and JS</p>\r\n        <p class=\"fragment\">Start CSS</p>\r\n      </section>", "text": "Today's Agenda\r Administrivia\r Discuss Accessible Design\r Finish discussing HTML\r Yes really! \r but you should not feel like you will know everything yet\r and we do learn more as we delve deeper into CSS and JS\r Start CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h3>But first...</h3>\r\n        <h2 class=\"fragment\">Should you take this course?!?!?</h2>\r\n        <p class=\"fragment\">Answer yes if...</p>\r\n        <ul>\r\n          <li class=\"fragment\">You are really curious about how web sites work</li>\r\n          <li class=\"fragment\">You are ready to learn several different languages and technologies\r\n            within a 10-week quarter with structure, resources, and support of a\r\n            CSE course (as opposed to resource-overload on the web)\r\n          </li>\r\n          <li class=\"fragment\">You want to learn a bit about the human connection to web development</li>\r\n        </ul>\r\n        <p class=\"fragment\">Answer no if... </p>\r\n        <ul>\r\n          <li class=\"fragment\">\r\n            You are not willing too put in the effort befitting of a\r\n            rigourous 5 credit course in computer science.\r\n          </li>\r\n          <li class=\"fragment\">\r\n            You do not plan to come to sections, use course read the course materials,\r\n            or use other resources that are available to help you succeed\r\n          </li>\r\n          <li class=\"fragment\">You only want to use this course as a way \"get into CSE\"</li>\r\n        </ul>\r\n      </section>", "text": "But first...\r Should you take this course?!?!?\r Answer yes if...\r \r You are really curious about how web sites work\r You are ready to learn several different languages and technologies\r within a 10-week quarter with structure, resources, and support of a\r CSE course (as opposed to resource-overload on the web)\r \r You want to learn a bit about the human connection to web development\r \r Answer no if... \r \r \r You are not willing too put in the effort befitting of a\r rigourous 5 credit course in computer science.\r \r \r You do not plan to come to sections, use course read the course materials,\r or use other resources that are available to help you succeed\r \r You only want to use this course as a way \"get into CSE\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Administrivia</h2>\r\n        <p><a href=\"../../calendar/wpl.html\">WPL</a> starts today after class (SIG 228)\r\n        </p><p>Sections</p>\r\n        <ul class=\"no-bullets\">\r\n          <li>Sections will reinforce learning from lectures</li>\r\n          <li>Quick checks in Tuesday section starting next week</li>\r\n          <li>Attend the section you are signed up for!</li>\r\n        </ul>\r\n        <p>\r\n          Atom with Git (and cloning!)\r\n        </p>\r\n        <ul class=\"no-bullets\">\r\n          <li>\r\n             Atom/Git Set Up guides updated (which can be found\r\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/setup.html\">here</a>)\r\n              to include git clone using ssh instead of https\r\n          </li>\r\n          <li><strong>Do not change anything you have already set up for CP 1</strong></li>\r\n          <li>Our lab staff would prefer if we use ssh </li>\r\n        </ul>\r\n\r\n        <aside class=\"notes\">\r\n          <p>If students start showing up for another TA's section, that's not fair to the other TA -\r\n            one TA (like the 8:30 am TA) may wind up with 12 people in the room and the 11:30 am\r\n            TA could wind up with 30. It's not fair to the students who ARE registered.</p>\r\n          <p>It also keeps the student from having a relationship with the TA who will be grading their work.</p>\r\n          <p>Their is also the question of grading the section or lab work. If a student\r\n            turns in a quick check to the not-registered-for-class, that TA has now extra work to\r\n            get that piece of paper to the registered-for-class TA. That paper could get lost.\r\n            Not good.</p>\r\n          <p>Students must go to their own sections. If there is a *one time* change - i.e. a\r\n            Very Important Appointment where a student has to switch, then that student must\r\n            email the existing TA AND the TA for the temporary section and get approval BEFORE\r\n            the section meets. </p>\r\n        </aside>\r\n      </section>", "text": "Administrivia\r WPL starts today after class (SIG 228)\r Sections\r \r Sections will reinforce learning from lectures\r Quick checks in Tuesday section starting next week\r Attend the section you are signed up for!\r \r \r Atom with Git (and cloning!)\r \r \r \r Atom/Git Set Up guides updated (which can be found\r here)\r to include git clone using ssh instead of https\r \r Do not change anything you have already set up for CP 1\r Our lab staff would prefer if we use ssh \r \r\r \r If students start showing up for another TA's section, that's not fair to the other TA -\r one TA (like the 8:30 am TA) may wind up with 12 people in the room and the 11:30 am\r TA could wind up with 30. It's not fair to the students who ARE registered.\r It also keeps the student from having a relationship with the TA who will be grading their work.\r Their is also the question of grading the section or lab work. If a student\r turns in a quick check to the not-registered-for-class, that TA has now extra work to\r get that piece of paper to the registered-for-class TA. That paper could get lost.\r Not good.\r Students must go to their own sections. If there is a *one time* change - i.e. a\r Very Important Appointment where a student has to switch, then that student must\r email the existing TA AND the TA for the temporary section and get approval BEFORE\r the section meets.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Think-Pair-Share</h2>\r\n        <div class=\"side-by-side\">\r\n          <h2 class=\"space-right\">What website would you build if you already knew \"enough\" about web programming? </h2>\r\n          <img class=\"simpleimg fragment\" style=\"margin-top: 20px\" src=\"img/GoodEnough.gif\" height=\"400px\" alt=\"Stamp of Good Enough\">\r\n        </div>\r\n      </section>", "text": "Think-Pair-Share\r \r What website would you build if you already knew \"enough\" about web programming?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Assignments</h2>\r\n        <h3>Creative Project 1</h3>\r\n        <p class=\"space-left\">Due: Saturday, April 6, 11:00 pm</p>\r\n        <p class=\"space-left\">GitGrade Lock: April 7, 11:00 pm</p>\r\n        <p class=\"space-left\"><a href=\"../../creative/creative-projects.html\" target=\"_blank\">Creative Project Page</a> </p>\r\n        <p class=\"space-left\"><a href=\"https://courses.cs.washington.edu/courses/cse154/18au/creative/showcase.html\" target=\"_blank\">Sample showcase from 18au</a></p>\r\n        <h3>Homework 1</h3>\r\n        <p class=\"space-left\">Due: Thursday, April 11, 11:00 pm</p>\r\n        <p class=\"space-left\">GitGrade Lock: Sunday April 14, 11:00 pm</p>\r\n        <p class=\"space-left\"><a href=\"../../homework/homework.html\" target=\"_blank\">Homework Page</a> </p>\r\n        <p class=\"fragment\">Also a reminder to sign up for\r\n          <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeCg2t80tXlrwK54vh6JGfs2AHrMo3d60eJN9xozRhLJa5Uvg/viewform\"> Mentor\r\n            Circles</a> by Friday! (but the sooner the better)</p>\r\n      </section>", "text": "Assignments\r Creative Project 1\r Due: Saturday, April 6, 11:00 pm\r GitGrade Lock: April 7, 11:00 pm\r Creative Project Page \r Sample showcase from 18au\r Homework 1\r Due: Thursday, April 11, 11:00 pm\r GitGrade Lock: Sunday April 14, 11:00 pm\r Homework Page \r Also a reminder to sign up for\r Mentor\r Circles by Friday! (but the sooner the better)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Review: Internet</h2>\r\n        <div class=\"side-by-side\">\r\n          <div>\r\n            <p>Things that are relevant</p>\r\n            <ul>\r\n              <li>There are layers</li>\r\n              <li>IP = Internet Protocol, addresses like 192.168.0.1</li>\r\n              <li>No centralized control but...\r\n                <ul>\r\n                  <li>DNS maps the numbers to names like Google.com</li>\r\n                  <li><strong>W3C Validates web pages</strong></li>\r\n                </ul>\r\n              </li>\r\n              <li>Websites use a client-server model over the Internet</li>\r\n            </ul>\r\n          </div>\r\n          <div style=\"text-align: center; \">\r\n            <img class=\"simpleimg\" style=\"margin-bottom: 0px;\" src=\"../img/Client-Server_Model.jpg\" width=\"400px\" alt=\"Client Server Model\">\r\n            <p>From <a href=\"https://commons.wikimedia.org/wiki/File:Client-Server_Model.jpg\">Wikipedia</a></p>\r\n          </div>\r\n        </div>\r\n\r\n      </section>", "text": "Review: Internet\r \r \r Things that are relevant\r \r There are layers\r IP = Internet Protocol, addresses like 192.168.0.1\r No centralized control but...\r \r DNS maps the numbers to names like Google.com\r W3C Validates web pages\r \r \r Websites use a client-server model over the Internet\r \r \r \r \r From Wikipedia", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n\r\n        <section>\r\n          <h2>Review: Websites</h2>\r\n          <div>\r\n            <div style=\"width:25%;  position:absolute; left:0%;\">\r\n              <p class=\"fragment\"><strong>Content</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">Words and images</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:25%;  position:absolute; left:25%;\">\r\n              <p class=\"fragment\"><strong>Structure</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\r\n                <p class=\"medium-small-font\">HTML</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:25%;  position:absolute; left:50%;\">\r\n              <p class=\"fragment\"><strong>Style</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">CSS</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:23.2%;  position:absolute; left:75%;\">\r\n              <p class=\"fragment\"><strong>Behavior</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section>\r\n          <div class=\"side-by-side\">\r\n            <div style=\"width:25%;  position:absolute; left: 10%;\">\r\n              <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n            </div>\r\n            <div>\r\n              <h1 style=\"margin-top: 400px\">HTML</h1>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section>\r\n          <h2>Hypertext Markup Language (<a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\">HTML</a>)</h2>\r\n\r\n          <p>\r\n            Describes the <em>content</em> and <em>structure</em> of information on a web page\r\n            </p><ul>\r\n              <li>Not the same as the <em>presentation</em> (appearance on screen)</li>\r\n            </ul>\r\n          \r\n\r\n          <p>Surrounds text content with opening and closing <strong>tags</strong></p>\r\n          <p>\r\n            Each tag's name is called an <strong>element</strong>\r\n            </p><ul>\r\n              <li>Syntax:\r\n                <code>\r\n  \t\t\t\t\t\t\t\t\t<strong>&lt;element&gt;</strong> content <strong>&lt;/element&gt;</strong>\r\n  \t\t\t\t\t\t\t\t</code>\r\n              </li>\r\n              <li>Example:\r\n                <code>\r\n  \t\t\t\t\t\t\t\t\t<strong>&lt;p&gt;</strong>This is a paragraph<strong>&lt;/p&gt;</strong>\r\n  \t\t\t\t\t\t\t\t</code>\r\n              </li>\r\n            </ul>\r\n          \r\n          <p>Most whitespace is insignificant in HTML (ignored or collapsed to a single space)</p>\r\n          <p>We will use a newer version called HTML5</p>\r\n        </section>\r\n\r\n        <section>\r\n          <h2>Structure of an HTML Page</h2>\r\n          <pre><code class=\"hljs\" data-trim>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    information about the page\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    page contents\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n<p class=\"code-caption\">HTML</p>\r\n\r\n          <p>\r\n            The <code>&lt;head&gt;</code> tag describes the page and the <code>&lt;body&gt;</code> tag contains the page's content\r\n          </p>\r\n          <p>An HTML page is saved into a file ending with extension <code>.html</code></p>\r\n          <p>\r\n            The <code>DOCTYPE</code> tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language\r\n          </p>\r\n        </section>\r\n\r\n        <section>\r\n          <h2>HTML Tags</h2>\r\n          <p> There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). </p>\r\n          <p>A comprehensive list is\r\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a> (it's a great bookmark page for reference this quarter!) </p>\r\n          <p>Unless otherwise specified, all of the tags listed are required to be in the <code>&lt;body&gt;</code> of an HTML page rather than the <code>&lt;head&gt;</code>\r\n          </p>\r\n          <p>Our compiled list is <a href=\"../lec01-intro-html/#/36\">here</a> and\r\n            <a href=\"../lec01-intro-html/#/36/1\">here</a>\r\n            </p><p>\r\n        </p></section>\r\n\r\n      </section>", "text": "Review: Websites\r \r \r Content\r \r \r Words and images\r \r \r \r Structure\r \r \r HTML\r \r \r \r Style\r \r \r CSS\r \r \r \r Behavior\r \r \r Javascript & Server programs\r \r \r \r \r\r \r \r \r \r \r \r HTML\r \r \r \r\r \r Hypertext Markup Language (HTML)\r\r \r Describes the content and structure of information on a web page\r \r Not the same as the presentation (appearance on screen)\r \r \r\r Surrounds text content with opening and closing tags\r \r Each tag's name is called an element\r \r Syntax:\r \r \t\t\t\t\t\t\t\t\t<element> content </element>\r \t\t\t\t\t\t\t\t\r \r Example:\r \r \t\t\t\t\t\t\t\t\t<p>This is a paragraph</p>\r \t\t\t\t\t\t\t\t\r \r \r \r Most whitespace is insignificant in HTML (ignored or collapsed to a single space)\r We will use a newer version called HTML5\r \r\r \r Structure of an HTML Page\r <!DOCTYPE html>\r<html>\r <head>\r information about the page\r </head>\r <body>\r page contents\r </body>\r</html>\rHTML\r\r \r The <head> tag describes the page and the <body> tag contains the page's content\r \r An HTML page is saved into a file ending with extension .html\r \r The DOCTYPE tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language\r \r \r\r \r HTML Tags\r There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). \r A comprehensive list is\r here (it's a great bookmark page for reference this quarter!) \r Unless otherwise specified, all of the tags listed are required to be in the <body> of an HTML page rather than the <head>\r \r Our compiled list is here and\r here", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\n          <h2>\"Gots and Needs\" Notecards</h2>\n          <div style=\"display: flex; align-items: end\">\n          <img src=\"../img/got.jpg\" width=\"190px\">\n          <p class=\"space-left\">On one side of the notecard, write what you feel like\n          you've \"got\" regarding JavaScript this week.</p>\n          </div>\n          <div style=\"display: flex; align-items: end\">\n            <img src=\"../img/need.jpg\" width=\"190px\">\n           <p class=\"space-left\">On the other side of the notecard, write 1-2\n           things you feel\n             you still need to understand, or that would help you understand\n             this material (update if it was covered by end of lecture!)\n           </p>\n          </div>\n        </section>", "text": "\"Gots and Needs\" Notecards On one side of the notecard, write what you feel like you've \"got\" regarding JavaScript this week. On the other side of the notecard, write 1-2 things you feel you still need to understand, or that would help you understand this material (update if it was covered by end of lecture!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 8: JS with the Document Object Model (DOM) and UI Events</h3>\n        </section>", "text": "CSE 154 Lecture 8: JS with the Document Object Model (DOM) and UI Events", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <ul>\n            <li>Administrivia:\n              <ul>\n                <li>Exploration Session on Bootstrap and Other CSS Tricks tomorrow (4:30PM at MGH 389)</li>\n              </ul>\n            </li>\n            <li>Modular JavaScript with HTML/CSS</li>\n            <li>Case Study: Connecting JS to HTML/CSS with DOM/Events</li>\n          </ul>\n        </section>", "text": "Today's Agenda Administrivia: Exploration Session on Bootstrap and Other CSS Tricks tomorrow (4:30PM at MGH 389) Modular JavaScript with HTML/CSS Case Study: Connecting JS to HTML/CSS with DOM/Events", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Unobtrusive JavaScript</h2>\n          <p>\n            Recall our goal was to keep our web site code \"modular\" and\n            <a href=\"http://alistapart.com/articles/behavioralseparation\">separated</a>\n            into 3 major categories:\n          </p>\n          <ul>\n            <li><span class=\"term\">content</span> (HTML) - what is it?</li>\n            <li><span class=\"term\">presentation</span> (CSS) - how does it look?</li>\n            <li><span class=\"term\">behavior</span> (JavaScript) - how does it respond to user interaction?</li>\n          </ul>\n          <p>What does this mean?</p>\n          <ul>\n            <li>HTML with a link to a JavaScript file (in the module pattern) with\n              no JavaScript <em>code</em> inside the <code>&lt;script&gt;</code> tags</li>\n            <li>Initialize your JS with a window <code>load</code> event handler</li>\n            <li>Use the JS and DOM to attach and execute all JavaScript event handlers</li>\n          </ul>\n        </section>", "text": "Unobtrusive JavaScript Recall our goal was to keep our web site code \"modular\" and separated into 3 major categories: content (HTML) - what is it? presentation (CSS) - how does it look? behavior (JavaScript) - how does it respond to user interaction? What does this mean? HTML with a link to a JavaScript file (in the module pattern) with no JavaScript code inside the <script> tags Initialize your JS with a window load event handler Use the JS and DOM to attach and execute all JavaScript event handlers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>JavaScript File Skeleton</h2>\n\n          <div class=\"code-example\">\n            <pre><code class=\"hljs\" data-trim>/**\n * Name, section, date, etc.\n * Description of program\n */\n(function() {\n  \"use strict\";\n\n  // any module-global variables/constants\n\n  window.addEventListener(\"load\", init);\n\n  // phew! your functions goes here\n\n})();</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n          <p>Reference template <a href=\"../../resources/assets/templates/js/module-template.js\">here</a>!</p>\n        </section>", "text": "JavaScript File Skeleton /** * Name, section, date, etc. * Description of program */(function() { \"use strict\"; // any module-global variables/constants window.addEventListener(\"load\", init); // phew! your functions goes here})(); JS Reference template here!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>A Note about JavaScript \"strict\" mode</h2>\n\n          <pre><code class=\"hljs\" data-trim>\"use strict\";\n\n...your code...\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>\n            Writing <code>\"use strict\";</code> at the very top of your JS file turns\n            on strict syntax checking:\n          </p>\n          <ul>\n            <li>Shows an error if you try to assign to an undeclared variable</li>\n            <li>Stops you from overwriting key JS system libraries</li>\n            <li>Forbids some unsafe or error-prone language features</li>\n          </ul>\n          <p>You should <em>always</em> turn on strict mode for your code in this class!</p>\n        </section>", "text": "A Note about JavaScript \"strict\" mode \"use strict\";...your code... JS Writing \"use strict\"; at the very top of your JS file turns on strict syntax checking: Shows an error if you try to assign to an undeclared variable Stops you from overwriting key JS system libraries Forbids some unsafe or error-prone language features You should always turn on strict mode for your code in this class!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h2>Lecture 6: Flexbox and Forms</h2>\n          <div class=\"side-by-side\" style=\"justify-content: unset\">\n            <div class=\"half-width space-right space-left no-space-top\">\n              <pre><code class=\"hljs\" data-trim>.fireplace {\n  border-right: 0;\n}\n\n.archway {\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-end;\n}</code></pre>\n              <p class=\"code-caption\">CSS IRL</p>\n              <p>From: <a href=\"https://www.reddit.com/r/css_irl/comments/82wq1g/fireplace_borderright_0_archway_display_flex/\">reddit.com/r/css_irl/</a>\n              </p>\n            </div>\n            <img height=\"400px\" class=\"simpleimg mb-0 space-above\" src=\"https://i.redd.it/xu0y3bzarik01.jpg\" alt=\"Archway oops\">\n\n\n          </div>\n\n        </section>", "text": "CSE 154 Lecture 6: Flexbox and Forms .fireplace { border-right: 0;}.archway { display: flex; justify-content: flex-end; align-items: flex-end;} CSS IRL From: reddit.com/r/css_irl/", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <ul class=\"no-bullets\">\n            <li>Part 0: Notecards!\n              <ol>\n                <li>Create groups of 2-4 people</li>\n                <li>On the notecard write the first name/last initial of each person in the group</li>\n                <li>Select a school appropriate team name and write it at the top of the card</li>\n                <li>Give the card to a TA who is walking around</li>\n              </ol>\n            </li>\n            <li>Part 1: Complex Flex</li>\n            <li>Part 2: Homework 2: Set!</li>\n            <li>Part 3: HTML forms with input</li>\n        </ul></section>", "text": "Agenda Part 0: Notecards! Create groups of 2-4 people On the notecard write the first name/last initial of each person in the group Select a school appropriate team name and write it at the top of the card Give the card to a TA who is walking around Part 1: Complex Flex Part 2: Homework 2: Set! Part 3: HTML forms with input", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Lecture Objectives</h2>\n          <p>\n            By the end of this lecture, you should be able to:\n          </p>\n          <ul>\n            <li>Identify nested flex containers </li>\n            <li>Understand the expectations for next assignment</li>\n            <li>Develop a wire frame diagram for the design of a web site</li>\n            <li>Know different types of HTML input tags and where to find them</li>\n          </ul>\n        </section>", "text": "Lecture Objectives By the end of this lecture, you should be able to: Identify nested flex containers Understand the expectations for next assignment Develop a wire frame diagram for the design of a web site Know different types of HTML input tags and where to find them", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Part 1: More complicated Flexbox solutions</h2>\n        </section>", "text": "Part 1: More complicated Flexbox solutions", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Think...and Vote: Flexbox Review</h2>\n          <p class=\"font-18pt\">\n            What would be the flexbox rules necessary to accomplish this with our\n            <a href=\"../lec05/examples/boxes7.html\">boxes.html</a> example? (Box 5 is at the top, 0 at the bottom)\n          </p>\n          <div class=\"side-by-side\">\n            <div class=\"one-third-width space-right\">\n                <img src=\"hidden/stacked-boxes.png\" class=\"simpleimg\" alt=\"Stacked boxes\">\n              \n            </div>\n            <div>\n              <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/6g0yiBQ7GYZxu0KTUWbSc?controls=none&amp;short_poll=true\" width=\"900\" height=\"500\" frameborder=\"0\"></iframe>\n            </div>\n          </div>\n        </section>", "text": "Think...and Vote: Flexbox Review What would be the flexbox rules necessary to accomplish this with our boxes.html example? (Box 5 is at the top, 0 at the bottom)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Exercise 9: Flexing in Flex</h2>\n          <p class=\"font-18pt\">Layout boxes into two 3-box columns using flex.</p>\n          <p class=\"font-18pt\"> First: How would you change the HTML slightly as well to get the columns grouped?</p>\n          <div class=\"side-by-side\" style=\"align-items: center\">\n            <a href=\"examples/boxes9.html\" target=\"_blank\">\n              <img src=\"hidden/boxes9.png\" class=\"simpleimg\" style=\"margin-right: 10px;\" alt=\"Box Model 9\">\n            </a>\n            <ul class=\"font-18pt\">\n              <li>Click on the image to start!</li>\n              <li>From Exercise 8, change the HTML to group boxes into two 3-box columns.</li>\n              <li>From Exercise 8, the <code>#boxes-container</code> was changed to 500px</li>\n              <li>The column numbers should be in reverse order</li>\n              <li>Distribute the two columns on both left/ends of the <code>#box-container.</code></li>\n              <li>Distribute the boxes spaced evenly in the columns</li>\n            </ul>\n          </div>\n          <p class=\"right-align\">\n            <a href=\"examples/boxes9-solution.html\" target=\"_blank\">Solution</a>\n          </p>\n        </section>", "text": "Exercise 9: Flexing in Flex Layout boxes into two 3-box columns using flex. First: How would you change the HTML slightly as well to get the columns grouped? Click on the image to start! From Exercise 8, change the HTML to group boxes into two 3-box columns. From Exercise 8, the #boxes-container was changed to 500px The column numbers should be in reverse order Distribute the two columns on both left/ends of the #box-container. Distribute the boxes spaced evenly in the columns Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Flex in Flex in Flex... </h2>\n          <p class=\"font-18pt\">How many flex containers do you think are on this example website?\n          </p>\n          <div class=\"side-by-side\">\n            <div class=\"two-thirds-width space-right\">\n              <a href=\"hidden/duckify.png\">\n                <img src=\"hidden/duckify.png\" class=\"simpleimg\" alt=\"Duckify home screen\">\n              </a>\n            </div>\n            <div>\n              <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/RZOMkyBQ6Bh7y8w676nks?controls=none&amp;short_poll=true\" width=\"600\" height=\"400\" frameborder=\"0\"></iframe>\n            </div>\n          </div>\n        </section>", "text": "Flex in Flex in Flex... How many flex containers do you think are on this example website?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Part 2: Set!</h2>\n          <h3><a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/homework/homework.html\">HW2</a>\n            is out!\n          </h3>\n          <p>Description of the game</p>\n          <p>Demo of the website</p>\n          <p>Logistics</p>\n          <ul>\n            <li>Milestone 1 due Tuesday April 16, 11:00 pm (NO LATE DAYS)</li>\n            <li>Completed project\n              <ul>\n                <li>Due Wednesday April 24, 11:00 pm</li>\n                <li>GitGrade lock Saturday April 27, 11:00 pm</li>\n              </ul>\n            </li>\n          </ul>\n        </section>", "text": "Part 2: Set! HW2 is out! Description of the game Demo of the website Logistics Milestone 1 due Tuesday April 16, 11:00 pm (NO LATE DAYS) Completed project Due Wednesday April 24, 11:00 pm GitGrade lock Saturday April 27, 11:00 pm", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Lecture Objectives</h2>\n          <p>\n            By the end of this lecture, you should be able to:\n          </p>\n          <ul>\n            <li>Use CSS to set background images to elements in a few different ways</li>\n            <li>Know the box model and the difference between margin, padding, and border</li>\n            <li>Position text and other elements on the page using the box model</li>\n            <li>Know the relationship between HTML and the \"Document Object Model\" (DOM)</li>\n            <li>Learn a bit more about different selectors</li>\n          </ul>\n        </section>", "text": "Lecture Objectives By the end of this lecture, you should be able to: Use CSS to set background images to elements in a few different ways Know the box model and the difference between margin, padding, and border Position text and other elements on the page using the box model Know the relationship between HTML and the \"Document Object Model\" (DOM) Learn a bit more about different selectors", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Review: Basic CSS Rule Syntax</h2>\n          <pre><code class=\"hljs\" data-trim>selector {\n  property: value;\n  property: value;\n  ...\n  property: value;\n}</code></pre>\n        <p class=\"code-caption\">CSS (template)</p>\n\n        <pre><code class=\"hijs\" data-trim>p {\n  color: red;\n  font-family: sans-serif;\n} </code></pre>\n        <p class=\"code-caption\">CSS (example)</p>\n        <p>A CSS file consists of one or more \"rule sets\"</p>\n        <p>\n          A rule selector specifies HTML element(s) and applies style properties\n        </p>\n      </section>", "text": "Review: Basic CSS Rule Syntax selector { property: value; property: value; ... property: value;} CSS (template) p { color: red; font-family: sans-serif;} CSS (example) A CSS file consists of one or more \"rule sets\" A rule selector specifies HTML element(s) and applies style properties", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n        <h2>Terminology Clarifications</h2>\n        <pre><code class=\"hljs\" data-trim>h1, p {\n  color: blue;\n  background-color: rgb(30, 30, 30);\n}\n\nh1 {\n  font-style: italic;\n}\n        \nnav ul {\n  list-style-type: none;\n  color: gray;\n}\n</code></pre>\n<p class=\"code-caption\">CSS</p>\n        <div class=\"side-by-side space-between\">\n          <div>\n            <p>How many different rule sets?</p>\n            <p>How many different rules?</p>\n            <p>How many different properties?</p>\n            <p>How many different selectors?</p>\n          </div>\n          <div>\n            <p class=\"fragment\">3</p>\n            <p class=\"fragment\">5</p>\n            <p class=\"fragment\">4</p>\n            <p class=\"fragment\">3</p>\n          </div>\n        </div>\n      </section>", "text": "Terminology Clarifications h1, p { color: blue; background-color: rgb(30, 30, 30);}h1 { font-style: italic;} nav ul { list-style-type: none; color: gray;}CSS How many different rule sets? How many different rules? How many different properties? How many different selectors? 3 5 4 3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section id=\"background-styles\">\n            <h2>CSS Properties for Backgrounds</h2>\n            <table>\n              <tr>\n                <th><strong>Property</strong></th>\r\n                <th><strong>Description</strong></th>\r\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-color\" target=\"_blank\">background-color</a>\n                  </code>\n                </td>\n                <td>color to fill background (previously mentioned)</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\" target=\"_blank\">background-image</a>\n                  </code>\n                </td>\n                <td>image to place in background</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\" target=\"_blank\">background-position</a>\n                  </code>\n                </td>\n                <td>placement of background image within element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\" target=\"_blank\">background-repeat</a>\n                  </code>\n                </td>\n                <td>how background image should be repeated</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment\" target=\"_blank\">background-attachment</a>\n                  </code>\n                </td>\n                <td>whether background image scrolls with page</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-size\" target=\"_blank\">background-size</a>\n                  </code>\n                </td>\n                <td>how large the background appears behind the element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background\" target=\"_blank\">background</a>\n                  </code>\n                </td>\n                <td>shorthand to set all backgroud properties</td>\n              </tr>\n              <tr>\n                <td colspan=\"2\" style=\"text-align: right;\">\n                  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders\">More background\n                    properties and examples</a>\n                </td>\n              </tr>\n            </table>\n          </section>", "text": "CSS Properties for Backgrounds Property\r Description\r background-color color to fill background (previously mentioned) background-image image to place in background background-position placement of background image within element background-repeat how background image should be repeated background-attachment whether background image scrolls with page background-size how large the background appears behind the element background shorthand to set all backgroud properties More background properties and examples", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section id=\"background-image\">\n            <h2>\n              <code>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\" target=\"_blank\">background-image</a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>body {\n  background-image: url(\"coffee-ascii.png\");\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\" style=\"background-size: 200px 200px; background-image:\n              url('../img/coffee-ascii.png')\">\r\n              <p>This is the first paragraph</p>\r\n              <p>This is the second paragraph...<br>It occupies 2 lines</p>\r\n              <p class=\"output-caption\">output</p>\r\n            </div>\r\n            <p>Background image/color fills the element's content area</p>\r\n            <p>Inspect and experiment with example code <a href=\"resources/background-example.html\">here</a>!</p>\n          </section>", "text": "background-image body { background-image: url(\"coffee-ascii.png\");} CSS \r This is the first paragraph\r This is the second paragraph...It occupies 2 lines\r output\r \r Background image/color fills the element's content area\r Inspect and experiment with example code here!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section id=\"background-repeat\">\n            <h2>\n              <code>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\" target=\"_blank\">background-repeat</a>\n              </code>\n            </h2>\n           <pre><code class=\"hijs\" data-trim>body {\n  background-image: url(\"coffee-ascii.png\");\r\n  background-repeat: no-repeat;\r\n}</code></pre>\r\n           <p class=\"code-caption\">CSS</p>\r\n           <div class=\"output\" style=\"background-size: 200px 200px; background-repeat: repeat-y;\n             background-image: url('../img/coffee-ascii.png')\">\r\n             <p>This is the first paragraph</p>\r\n             <p>This is the second paragraph...<br>It occupies 2 lines</p>\r\n             <p class=\"output-caption\">output</p>\r\n           </div>\r\n           <p>Can be <code>repeat</code> (default), <code>repeat-x</code>,\r\n           <code>repeat-y</code>, or <code>no-repeat</code></p>\r\n          </section>", "text": "background-repeat body { background-image: url(\"coffee-ascii.png\");\r background-repeat: no-repeat;\r}\r CSS\r \r This is the first paragraph\r This is the second paragraph...It occupies 2 lines\r output\r \r Can be repeat (default), repeat-x,\r repeat-y, or no-repeat", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section id=\"background-position\">\n            <h2>\n              <code>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\" target=\"_blank\">background-position</a>\n              </code>\n            </h2>\n            <pre class=\"no-margin\"><code class=\"hijs\" data-trim>body {\r\n  background-image: url(\"coffee-ascii.png\");\n  background-repeat: no-repeat;\n  background-position: 370px 20px;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\r\n          <div class=\"output\">\r\n            <div style=\"background-image: url('../img/coffee-ascii.png'); background-repeat:\n              no-repeat; background-position: 500px 20px;\">\n              <p>This is the first paragraph</p>\n              <p>This is the second paragraph...<br> It occupies 2 lines</p>\n            </div>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            Value consists of two tokens, each of which can be <code>top</code>,\n            <code>left</code>, <code>right</code>, <code>bottom</code>,\n            <code>center</code>, a percentage, or a length value in px, pt, etc.\n          </p>\n          <p>Value can be negative to shift left/up by a given amount</p>\n          </section>", "text": "background-position body {\r background-image: url(\"coffee-ascii.png\"); background-repeat: no-repeat; background-position: 370px 20px;} CSS\r \r This is the first paragraph This is the second paragraph... It occupies 2 lines output Value consists of two tokens, each of which can be top, left, right, bottom, center, a percentage, or a length value in px, pt, etc. Value can be negative to shift left/up by a given amount", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <div class=\"side-by-side\">\n            <div style=\"width:25%;  position:absolute; left: 10%; margin-top:200px;\">\n              <img class=\"simpleimg\" src=\"../img/cssisawesome.jpg\" alt=\"CSS is Awesome mug\">\n              <p><a href=\"https://www.amazon.com/CSS-Awesome-Mug-Programmer-Developer/dp/B06Y13QC8N\">from Amazon.com</a></p>\n            </div>\n            <div style=\"position:absolute; left: 40%;\">\n              <h1 style=\"margin-top: 400px\">CSS and Layout</h1>\n            </div>\n          </div>\n        </section>", "text": "from Amazon.com CSS and Layout", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h1>The Box Model</h1>\n          <p>\n            <img src=\"../img/box-model-inspector.png\" alt=\"Box Model Example\">\n          </p>\n        </section>", "text": "The Box Model", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Starting with the Basics: <a href=\"https://www.developer.mozilla.org/en-US/docs/Web/CSS/width\" target=\"_blank\">width</a>\n            and <a href=\"https://www.developer.mozilla.org/en-US/docs/Web/CSS/height\" target=\"_blank\">height</a></h2>\n          <p>\n            Height:\n          </p>\n          <p style=\"margin-left: 30px\">\n            Block and inline elements normally have the height of their content\n          </p>\n          <p> Width: </p>\n          <p style=\"margin-left: 30px\">\n            Inline elements have the width of their content\n          </p>\n          <p style=\"margin-left: 30px\">\n            Block elements have a width that stretches across the whole page\n          </p>\n        </section>", "text": "Starting with the Basics: width and height Height: Block and inline elements normally have the height of their content Width: Inline elements have the width of their content Block elements have a width that stretches across the whole page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2><code>width</code> and <code>height</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;div class=\"block\"&gt;&lt;/div&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim>.block {\n  height: 200px;\n  width: 200px;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <div class=\"output\">\n            <div style=\"width: 200px; height: 200px; background-color: greenyellow\">\n            </div>\n            <p class=\"output-caption\">output</p>\n          </div>\n        </section>", "text": "width and height Example <div class=\"block\"></div> HTML .block { height: 200px; width: 200px;} CSS output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>A Box: (Inspect me!)</h2>\n\n          <style>\n            #box-container {\n              width: 600px;\n              height: 500px;\n              background-color: white;\n            }\n\n            #box-model {\n              width: 300px;\n              height: 200px;\n              padding: 60px 20px 30px 75px;\n              border: 10px solid #42affa;\n              margin: 20px 30px 40px 50px;\n              font-size: 14pt;\n              background-color: lightsteelblue;\n            }\n\n            .neighbor {\n              background-color: lightgreen;\n            }\n          </style>\n          <div class=\"side-by-side\">\n          <div id=\"box-container\">\n            <div class=\"neighbor\">Top neighbor</div>\n\n            <div id=\"box-model\">what's in the booooox?</div>\n\n            <div class=\"neighbor\">Bottom neighbor</div>\n          </div>\n          </div>\n        </section>", "text": "A Box: (Inspect me!) #box-container { width: 600px; height: 500px; background-color: white; } #box-model { width: 300px; height: 200px; padding: 60px 20px 30px 75px; border: 10px solid #42affa; margin: 20px 30px 40px 50px; font-size: 14pt; background-color: lightsteelblue; } .neighbor { background-color: lightgreen; } Top neighbor what's in the booooox? Bottom neighbor", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Wait, what?</h2>\n          <div class=\"side-by-side\">\n            <div class=\"panel-left two-panel\">\n              <dl>\n                <dt>margin</dt><dd>(outside) space between different elements</dd>\n                <dt>border</dt><dd>(optionally visible) line that separates elements</dd>\n                <dt>padding</dt><dd>(inside) space between element content and border</dd>\n              </dl>\n            </div>\n            <div class=\"panel-right two-panel\">\n              <img width=\"320px\" src=\"../img/box-model.png\" alt=\"the box model\">\n            </div>\n          </div>\n        </section>", "text": "Wait, what? margin(outside) space between different elements border(optionally visible) line that separates elements padding(inside) space between element content and border", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>CSS Properties for Margins</h2>\n          <p>\n            Specified in <code>px</code>, <code>pt</code>, <code>em</code>, <code>rem</code>,\n            <code>%</code> (or <code>ex</code>, or even in <code>in</code>, <code>cm</code>,\n            <code>mm</code>, <code>pc</code>...but don't :)\n          </p>\n          <table class=\"standard\">\n            <tr>\n              <th>Property</th>\n              <th>Description</th>\n            </tr>\n\n            <tr>\n              <td>\n                  <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/margin\">margin</a></code>\n              </td>\n              <td>margin on all 4 sides</td>\n            </tr>\n\n            <tr>\n              <td>\n                  <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom\">margin-bottom</a></code>\n              </td>\n              <td>margin on bottom side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                  <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/margin-left\">margin-left</a></code>\n              </td>\n              <td>margin on left side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/margin-right\">margin-right</a></code>\n              </td>\n              <td>margin on right side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/margin-top\">margin-top</a></code>\n              </td>\n              <td>margin on top side only</td>\n            </tr>\n          </table>\n        </section>", "text": "CSS Properties for Margins Specified in px, pt, em, rem, % (or ex, or even in in, cm, mm, pc...but don't :) Property Description margin margin on all 4 sides margin-bottom margin on bottom side only margin-left margin on left side only margin-right margin on right side only margin-top margin on top side only", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>CSS Properties for Borders</h2>\n\n          <pre><code class=\"hljs\" data-trim>h4 { border: 5px solid red; }\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <style>\n            #border-example-1 h4 { border: 5px solid red; margin-bottom: 0px; /* to fit on slide */ }\n          </style>\n\n          <div class=\"output\" id=\"border-example-1\">\n            <h4>This is a heading.</h4>\n            <p class=\"output-caption\">output</p>\n          </div>\n\n          <table style=\"margin-bottom: 20px\">\n            <tr>\n              <th>Property</th>\n              <th>Description</th>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border\">border</a></code>\n              </td>\n              <td>\n                thickness/style/color of border on all 4 sides\n              </td>\n            </tr>\n          </table>\n\n          <p>\n            <span class=\"term\">Thickness</span> (specified in <code>px</code>, <code>pt</code>, <code>em</code>, or\n            <code style=\"border: thin solid #DDDDDD;\">thin</code>, <code style=\"border: medium solid #DDDDDD;\">medium</code>,\n            <code style=\"border: thick solid #DDDDDD;\">thick</code>)\n          </p>\n          <p style=\"line-height: 2em\">\n              <span class=\"term\">Style</span>\n              (<code style=\"border: 5px none #DDDDDD;\">none</code>,\n              <code style=\"border: 5px hidden #DDDDDD;\">hidden</code>,\n              <code style=\"border: 5px dotted #DDDDDD;\">dotted</code>,\n              <code style=\"border: 5px dashed #DDDDDD;\">dashed</code>,\n              <code style=\"border: 5px double #DDDDDD;\">double</code>,\n              <code style=\"border: 5px groove #DDDDDD;\">groove</code>,\n              <code style=\"border: 5px inset #DDDDDD;\">inset</code>,\n              <code style=\"border: 5px outset #DDDDDD;\">outset</code>,\n              <code style=\"border: 5px ridge #DDDDDD;\">ridge</code>,\n              <code style=\"border: 5px solid #DDDDDD;\">solid</code>)\n            </p>\n            <p><span class=\"term\">Color</span> (specified as seen previously for text and background\n            colors)</p>\n            <p>Tip: Use the Chrome Inspector to check out different styles!</p>\n        </section>", "text": "CSS Properties for Borders h4 { border: 5px solid red; } CSS #border-example-1 h4 { border: 5px solid red; margin-bottom: 0px; /* to fit on slide */ } This is a heading. output Property Description border thickness/style/color of border on all 4 sides Thickness (specified in px, pt, em, or thin, medium, thick) Style (none, hidden, dotted, dashed, double, groove, inset, outset, ridge, solid) Color (specified as seen previously for text and background colors) Tip: Use the Chrome Inspector to check out different styles!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>More Border Properties</h2>\n\n          <table class=\"standard\">\n            <tr>\n              <th>Property</th>\n              <th>Description</th>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-color\">border-color</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-width\">border-width</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-style\">border-style</a></code>\n              </td>\n              <td>specific properties of border on all 4 sides</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-bottom\">border-bottom</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-left\">border-left</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-right\">border-right</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-top\">border-top</a></code>\n              </td>\n              <td>all properties of border on a particular side</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color\">border-bottom-color</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style\">border-bottom-style</a></code>, <br>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width\">border-bottom-width</a></code>,\n\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-left-color\">border-left-color</a></code>, <br>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-left-style\">border-left-style</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-left-width\">border-left-width</a></code>, <br>\n\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-right-color\">border-right-color</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-right-style\">border-right-style</a></code>, <br>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-right-width\">border-right-width</a></code>,\n\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-top-color\">border-top-color</a></code>, <br>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-top-style\">border-top-style</a></code>,\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-top-width\">border-top-width</a></code>\n              </td>\n              <td>properties of border on a particular side</td>\n            </tr>\n          </table>\n        </section>", "text": "More Border Properties Property Description border-color, border-width, border-style specific properties of border on all 4 sides border-bottom, border-left, border-right, border-top all properties of border on a particular side border-bottom-color, border-bottom-style, border-bottom-width, border-left-color, border-left-style, border-left-width, border-right-color, border-right-style, border-right-width, border-top-color, border-top-style, border-top-width properties of border on a particular side", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>\n            Rounded corners with <a class=\"popup\" href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/border-radius\">\n            <code>border-radius</code></a>\n          </h2>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>p {\n  border: 3px solid lightsalmon;\n  <em>border-radius: 12px;</em>\n  padding: 0.5em;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <style>\n            #rounded-border-1 p {\n              border: 3px solid lightsalmon;\n              border-radius: 12px;\n              padding: 0.5em;\n            }\n          </style>\n          <div id=\"rounded-border-1\" class=\"output\">\n            <p>This is a paragraph.</p>\n            <p>This is another paragraph.<br>It spans multiple lines.</p>\n          </div>\n          <p class=\"output-caption\">output</p>\n\n          <p>Each side's border radius can be set individually, separated by spaces</p>\n        </section>", "text": "Rounded corners with border-radius p { border: 3px solid lightsalmon; border-radius: 12px; padding: 0.5em;} CSS #rounded-border-1 p { border: 3px solid lightsalmon; border-radius: 12px; padding: 0.5em; } This is a paragraph. This is another paragraph.It spans multiple lines. output Each side's border radius can be set individually, separated by spaces", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>CSS Properties for Padding\n          </h2><p>\n            Again, prefer <code>px</code>, <code>pt</code>, <code>em</code>, <code>rem</code>,\n            or <code>%</code> for units\n          </p>\n\n          <table class=\"standard\">\n            <tr>\n              <th>Property</th>\n              <th>Description</th>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/padding\">padding</a></code>\n              </td>\n              <td>padding on all 4 sides</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom\">padding-bottom</a></code>\n              </td>\n              <td>padding on bottom side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/padding-left\">padding-left</a></code>\n              </td>\n              <td>padding on left side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/padding-right\">padding-right</a></code>\n              </td>\n              <td>padding on right side only</td>\n            </tr>\n\n            <tr>\n              <td>\n                <code><a href=\"http://www.developer.mozilla.org/en-US/docs/Web/CSS/padding-top\">padding-top</a></code>\n              </td>\n              <td>padding on top side only</td>\n            </tr>\n          </table>\n        </section>", "text": "CSS Properties for Padding Again, prefer px, pt, em, rem, or % for units Property Description padding padding on all 4 sides padding-bottom padding on bottom side only padding-left padding on left side only padding-right padding on right side only padding-top padding on top side only", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h1>Alignment</h1>\n          <p>How do we align text? How about block elements (e.g. page sections)?</p>\n        </section>", "text": "Alignment How do we align text? How about block elements (e.g. page sections)?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Horizontal and Vertical Alignment</h2>\n          <dl>\n            <dt>\n              <a href=\"https://www.developer.mozilla.org/en-US/docs/Web/CSS/text-align\">\n                <code>text-align</code>:\n              </a> (center | left | right | justify)\n            </dt>\n            <dd>Align inline elements horizontally inside a parent container</dd>\n            <dt>\n              <a href=\"https://www.developer.mozilla.org/en-US/docs/Web/CSS/vertical-align\">\n                <code>vertical-align</code>:\n              </a> (baseline | text-top | text-bottom | sub | super)\n            </dt>\n            <dd>Align inline elements vertically relative to the text</dd>\n          </dl>\n        </section>", "text": "Horizontal and Vertical Alignment text-align: (center | left | right | justify) Align inline elements horizontally inside a parent container vertical-align: (baseline | text-top | text-bottom | sub | super) Align inline elements vertically relative to the text", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>Text and Image Alignment Examples</h2>\n            <div class=\"side-by-side two-panel\">\n              <div>\n            <pre><code class=\"hljs\" data-trim style=\"max-height: 540px\">&lt;div&gt;\n  &lt;p&gt;\n    Some text!\n    &lt;img id=\"cup1\" src=\"cup.png\"&gt;\n    &lt;img id=\"cup2\" src=\"cup.png\"&gt;\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n              </div>\n              <div>\n            <style>\n              #alignment-example div {\n                text-align: right;\n              }\n              #alignment-example #cup1 {\n                vertical-align: middle;\n\n                /** override slide styles: */\n                margin: 0;\n              }\n              #alignment-example #cup2 {\n                vertical-align: text-top;\n                /** override slide styles: */\n                margin: 0;\n              }\n            </style>\n\n            <pre><code class=\"hljs\">#container {\n  text-align: right;\n}\n\n#cup1 { vertical-align: middle; }\n\n#cup2 { vertical-align: text-top; }\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n              </div>\n\n            </div>\n\n            <div id=\"alignment-example\" class=\"output\">\n              <div>\n                <p>\n                  This is some text!\n                  <img id=\"cup1\" src=\"../img/coffee-ascii.png\">\n                  <img id=\"cup2\" src=\"../img/coffee-ascii.png\">\n                </p>\n              </div>\n            </div>\n            <p class=\"output-caption\">output</p>\n          </section>", "text": "Text and Image Alignment Examples <div> <p> Some text! <img id=\"cup1\" src=\"cup.png\"> <img id=\"cup2\" src=\"cup.png\"> </p></div> HTML #alignment-example div { text-align: right; } #alignment-example #cup1 { vertical-align: middle; /** override slide styles: */ margin: 0; } #alignment-example #cup2 { vertical-align: text-top; /** override slide styles: */ margin: 0; } #container { text-align: right;}#cup1 { vertical-align: middle; }#cup2 { vertical-align: text-top; } CSS This is some text! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>But what about Alignment for Block Elements?</h2>\n          </section>", "text": "But what about Alignment for Block Elements?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>Centering Page Elements: An Attempt</h2>\n            <div class=\"side-by-side two-panel\">\n              <div style=\"width: 40%\">\n            <pre><code class=\"hljs\" data-trim>&lt;body&gt;\n  &lt;div class=\"block\"&gt;\n&lt;/body&gt;\n\n\n\n\n\n\n\n</code></pre>\n            <p class=\"code-caption\">HTML</p>\n              </div>\n              <div style=\"width: 59%\">\n            <pre><code class=\"hljs\" data-trim style=\"max-height: 540px\">body {\n  /* Doesn't work on block elements! */\n  text-align: center; \n}\n\n.block {\n  background-color: #42affa;\n  height: 100px;\n  width: 100px;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n              </div>\n              </div>\n            <style>\n              #centering-example .block {\n                width: 100px;\n                height: 100px;\n                background-color: #42affa;\n              }\n\n              #centering-example2 .block {\n                width: 100px;\n                height: 100px;\n                background-color: #42affa;\n                margin-left: auto;\n                margin-right: auto;\n              }\n            </style>\n\n            <div id=\"centering-example\" class=\"output\">\n              <div class=\"block\"></div>\n            </div>\n            <p class=\"output-caption\">output</p>\n\n            <p>\n            Inspect <a href=\"resources/box-example.html\" target=\"_blank\">this page</a> and use <code>margin-right: auto;</code> and <code>margin-left: auto;</code> on the blue block to center.\n            </p>\n          </section>", "text": "Centering Page Elements: An Attempt <body> <div class=\"block\"></body> HTML body { /* Doesn't work on block elements! */ text-align: center; }.block { background-color: #42affa; height: 100px; width: 100px;} CSS #centering-example .block { width: 100px; height: 100px; background-color: #42affa; } #centering-example2 .block { width: 100px; height: 100px; background-color: #42affa; margin-left: auto; margin-right: auto; } output Inspect this page and use margin-right: auto; and margin-left: auto; on the blue block to center.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>Centering Page Elements: A Solution</h2>\n            <div class=\"side-by-side two-panel\">\n              <div style=\"width: 40%\">\n            <pre><code class=\"hljs\" data-trim>&lt;body&gt;\n  &lt;div class=\"block\"&gt;\n&lt;/body&gt;\n\n\n\n\n</code></pre>\n            <p class=\"code-caption\">HTML</p>\n              </div>\n              <div style=\"width: 59%\">\n            <pre><code class=\"hljs\" data-trim style=\"max-height: 540px\">.block {\n  background-color: #42affa;\n  height: 100px;\n  width: 100px;\n  margin-left: auto;\n  margin-right: auto;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n              </div>\n              </div>\n\n            <div id=\"centering-example2\" class=\"output\">\n              <div class=\"block\"></div>\n            </div>\n            <p class=\"output-caption\">output</p>\n\n            <p>This margin approach \"fills in\" the left and right margins of the block based on the width\n            (<strong>which must be defined!</strong>)\n          </p></section>", "text": "Centering Page Elements: A Solution <body> <div class=\"block\"></body> HTML .block { background-color: #42affa; height: 100px; width: 100px; margin-left: auto; margin-right: auto;} CSS output This margin approach \"fills in\" the left and right margins of the block based on the width (which must be defined!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Confusing Stuff</h2>\n\n          <p>\n            <code>text-align</code>-- apply to a parent container to align the <em>inline</em> content within\n          </p>\n\n          <p>\n            <code>vertical-align</code>-- apply to inline items (usually those with a height, like an image)\n            to vertically align them relative to other inline elements nearby\n          </p>\n\n          <p>\n            <code>margin-left: auto;</code>, <code>margin-right: auto</code>-- use auto margins and a\n            width to center a block element in its parent\n          </p>\n          <p>\n          Later this week we'll learn flex layout - this can often be used instead of setting\n          the margin (and also makes vertical alignment <em>much</em> easier)\n          </p>\n        </section>", "text": "Confusing Stuff text-align-- apply to a parent container to align the inline content within vertical-align-- apply to inline items (usually those with a height, like an image) to vertically align them relative to other inline elements nearby margin-left: auto;, margin-right: auto-- use auto margins and a width to center a block element in its parent Later this week we'll learn flex layout - this can often be used instead of setting the margin (and also makes vertical alignment much easier)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Back to CSS Selectors</h2>\n          <p>\n            Now that we know what the \"DOM\" is, note that we can use this structure to help us\n            choose appropriate selectors!\n          </p>\n        </section>", "text": "Back to CSS Selectors Now that we know what the \"DOM\" is, note that we can use this structure to help us choose appropriate selectors!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">CSS\n              Combinator Selectors</a></h2>\n          <p>Combinator selectors are used to selectively style page elements</p>\n          <p><strong>Examples:</strong></p>\n          <pre><code class=\"hljs\" data-trim>selector1 selector2 {\n  properties\n}\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p>... applies the given properties to selector2 only if it is inside a selector1 on the page</p>\n          <pre><code class=\"hljs\" data-trim>selector1 &gt; selector2 {\n  properties\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p>\n            ... applies the given properties to <code>selector2</code> only if it is <em>directly</em> inside a <code>selector1</code>\n            on the page with no tags in between\n          </p>\n          <p>Check out this <a href=\"https://flukeout.github.io\" target=\"_blank\">neat game</a> for some\n          motivating practice :)</p>\n        </section>", "text": "CSS Combinator Selectors Combinator selectors are used to selectively style page elements Examples: selector1 selector2 { properties} CSS ... applies the given properties to selector2 only if it is inside a selector1 on the page selector1 > selector2 { properties} CSS ... applies the given properties to selector2 only if it is directly inside a selector1 on the page with no tags in between Check out this neat game for some motivating practice :)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h3>Combinator Selector Example (without &gt;)</h3>\n          <pre><code class=\"hljs\" data-noescape data-trim>&lt;p&gt;Shop at <em>&lt;strong&gt;</em>Hardwick's Hardware<em>&lt;/strong&gt;</em>...&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;The <em>&lt;strong&gt;</em>best<em>&lt;/strong&gt;</em> prices in town!&lt;/li&gt;\n  &lt;li&gt;&lt;em&gt;<em>&lt;strong&gt;</em>Act<em>&lt;/strong&gt;</em>&lt;/em&gt; while supplies last!&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-noescape data-trim><em>li strong</em> { text-decoration: underline; }\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <style type=\"text/css\">\n            #context-selector-1 li strong { text-decoration: underline; }\n          </style>\n\n          <p>Produces:</p>\n\n          <div class=\"output no-space-top\" id=\"context-selector-1\">\n            <p>Shop at <strong>Hardwick's Hardware</strong>...</p>\n            <ul>\n              <li>The <strong>best</strong> prices in town!</li>\n              <li><em><strong style=\"color: #3f3f3f\">Act</strong></em> while supplies last!</li>\n            </ul>\n            <p class=\"output-caption\">output</p>\n          </div>\n        </section>", "text": "Combinator Selector Example (without >) <p>Shop at <strong>Hardwick's Hardware</strong>...</p><ul> <li>The <strong>best</strong> prices in town!</li> <li><em><strong>Act</strong></em> while supplies last!</li></ul> HTML li strong { text-decoration: underline; } CSS #context-selector-1 li strong { text-decoration: underline; } Produces: Shop at Hardwick's Hardware... The best prices in town! Act while supplies last! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h3>Combinator Selector Example (with &gt;)</h3>\n\n          <pre><code class=\"hljs\" data-noescape data-trim>&lt;p&gt;Shop at <em>&lt;strong&gt;</em>Hardwick's Hardware<em>&lt;/strong&gt;</em>...&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;The <em>&lt;strong&gt;</em>best<em>&lt;/strong&gt;</em> prices in town!&lt;/li&gt;\n  &lt;li&gt;&lt;em&gt;<del><em>&lt;strong&gt;</em></del>Act<del><em>&lt;/strong&gt;</em></del>&lt;/em&gt; while supplies last!&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-noescape data-trim>li &gt; strong { text-decoration: underline; }\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <style type=\"text/css\">\n             #context-selector-2 li > strong { text-decoration: underline; }\n          </style>\n\n          <p>Produces:</p>\n          <div class=\"output no-space-top\" id=\"context-selector-2\">\n            <p>Shop at <strong>Hardwick's Hardware</strong>...</p>\n            <ul>\n              <li>The <strong>best</strong> prices in town!</li>\n              <li><em><strong style=\"color: #3f3f3f\">Act</strong></em> while supplies last!</li>\n            </ul>\n          </div>\n          <p class=\"output-caption\">output</p>\n        </section>", "text": "Combinator Selector Example (with >) <p>Shop at <strong>Hardwick's Hardware</strong>...</p><ul> <li>The <strong>best</strong> prices in town!</li> <li><em><strong>Act</strong></em> while supplies last!</li></ul> HTML li > strong { text-decoration: underline; } CSS #context-selector-2 li > strong { text-decoration: underline; } Produces: Shop at Hardwick's Hardware... The best prices in town! Act while supplies last! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>CSS\n            <code>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Pseudo-classes_and_pseudo-elements\" target=\"_blank\">pseudo-classes</a>\n            </code>\n          </h2>\n          <pre>\n          <code class=\"hljs\" data-trim>a:link    { color: #FF0000; } /* unvisited link */\na:visited { color: #00FF00; } /* visited link */\na:hover   { color: #FF00FF; } /* mouse over link */</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p><a href=\"resources/link-example.html\" target=\"_blank\">Example</a> (HTML)</p>\n          <table class=\"small-font-table\" style=\"margin-top: 10px\">\n            <tr><th><strong>Class</strong></th><th><strong>Description</strong></th></tr>\n            <tr>\n              <td>:active</td>\n              <td>an activated or selected element</td>\n            </tr>\n            <tr>\n              <td>:focus</td>\n              <td>an element that has the keyboard focus</td>\n            </tr>\n            <tr>\n              <td>:hover</td>\n              <td>an element that has the mouse over it</td>\n            </tr>\n            <tr>\n              <td>:link</td>\n              <td>a link that has not been visited</td>\n            </tr>\n            <tr>\n              <td>:visited</td>\n              <td>a link that has already been visited</td>\n            </tr>\n            <tr>\n              <td>:first-child</td>\n              <td>an element that is the first one to appear inside another</td>\n            </tr>\n            <tr>\n              <td>:nth-child(N)</td>\n              <td>applies to every Nth child of a given parent</td>\n            </tr>\n          </table>\n        </section>", "text": "CSS pseudo-classes a:link { color: #FF0000; } /* unvisited link */a:visited { color: #00FF00; } /* visited link */a:hover { color: #FF00FF; } /* mouse over link */ CSS Example (HTML) ClassDescription :active an activated or selected element :focus an element that has the keyboard focus :hover an element that has the mouse over it :link a link that has not been visited :visited a link that has already been visited :first-child an element that is the first one to appear inside another :nth-child(N) applies to every Nth child of a given parent", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Parents? Children? Is HTML some kind of family tree?\n        </h2></section>", "text": "Parents? Children? Is HTML some kind of family tree?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>DOM Exercise</h2>\n          <p>\n            Exercise <a href=\"resources/dom-exercise.pdf\">handout</a> and \n            <a href=\"resources/dom-exercise-solution.pdf\">solution</a>\n          </p>\n        </section>", "text": "DOM Exercise Exercise handout and solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h2>Module 2: Interactive Webpages with JS</h2>\n          <iframe src=\"https://embed.polleverywhere.com/free_text_polls/8TrWwWSTraihK3sLKDcx4?controls=none&amp;short_poll=true\" width=\"1000\" height=\"500\" frameborder=\"0\"></iframe>\n        </section>", "text": "Module 2: Interactive Webpages with JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Motivating Module 2: Think, Pair, Share</h2>\n          <p>On your lecture handouts, discuss and respond to the following question (and optionally include a sketch):</p>\n          <ul>\n            <li>\n              What's one feature involving user interaction on a webpage you would like\n              to learn how to implement (be specific or general)?<br>Example: <em>\"I would like to\n                learn how to implement a todo-list manager on my webpage!\"</em></li>\n            \n          </ul>\n          <p style=\"margin-top: 25px\">\n            <strong>Note:</strong> We will collect these at the end of the class (optional) - we might add some creative ideas to\n            additional section exercises!\n          </p>\n        </section>", "text": "Motivating Module 2: Think, Pair, Share On your lecture handouts, discuss and respond to the following question (and optionally include a sketch): What's one feature involving user interaction on a webpage you would like to learn how to implement (be specific or general)?Example: \"I would like to learn how to implement a todo-list manager on my webpage!\" Note: We will collect these at the end of the class (optional) - we might add some creative ideas to additional section exercises!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 7: Intro to JavaScript</h3>\n          <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" width=\"225px\" style=\"float: right; margin-top: -150px\">\n        </section>", "text": "CSE 154 Lecture 7: Intro to JavaScript", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>Administrivia</p>\n          <p>Introduction to Module 2</p>\n          <p>JavaScript Basics</p>\n          <ul>\n            <li>Overview</li>\n            <li>Introduction to data types, conditionals, and loops</li>\n            <li>Introduction to JS functions</li>\n            <li>Getting started with JS on a webpage and handling a click event!</li>\n          </ul>\n        </section>", "text": "Agenda Administrivia Introduction to Module 2 JavaScript Basics Overview Introduction to data types, conditionals, and loops Introduction to JS functions Getting started with JS on a webpage and handling a click event!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Notes about HW2/CP2</h2>\n          <p>Milestone due Tuesday (remember, no late days!)</p>\n          <p>For full credit, the Main Menu View (Part A) <em>must be stylistically complete</em>.\n          This includes some requirements listed in Overall Appearance and example screenshot.</p>\n          <p>The Game View should be hidden - make sure to implement the <code>.hidden</code>\n          class to achieve this for Part A.</p>\n          <p>\n            CP1 Showcase is up and CP2 out today! Checkout previous showcases (linked from CP2 spec)\n            for some inspiration of how students explored JS in different ways.\n          </p>\n          <p>\n            <strong>Important:</strong> Moving forward (CP2 and later) we are enforcing a\n            requirement that all files follow lower-cased naming conventions. Please refer to\n            CP2 spec and Code Quality Guide for more information.\n          </p>\n        </section>", "text": "Notes about HW2/CP2 Milestone due Tuesday (remember, no late days!) For full credit, the Main Menu View (Part A) must be stylistically complete. This includes some requirements listed in Overall Appearance and example screenshot. The Game View should be hidden - make sure to implement the .hidden class to achieve this for Part A. CP1 Showcase is up and CP2 out today! Checkout previous showcases (linked from CP2 spec) for some inspiration of how students explored JS in different ways. Important: Moving forward (CP2 and later) we are enforcing a requirement that all files follow lower-cased naming conventions. Please refer to CP2 spec and Code Quality Guide for more information.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>What We've Learned So Far</h2>\n          <p>How to write <strong>content</strong> for a webpage using <code>HTML5</code></p>\n          <p>\n            How to add <strong>styles</strong> to a webpage using <code>CSS</code> and linking a <code>CSS</code> file to an\n            <code>HTML</code> file\n          </p>\n          <p>How to inspect the <code>HTML</code> and <code>CSS</code> of web pages in the browser</p>\n          <p>Git!</p>\n        </section>", "text": "What We've Learned So Far How to write content for a webpage using HTML5 How to add styles to a webpage using CSS and linking a CSS file to an HTML file How to inspect the HTML and CSS of web pages in the browser Git!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>CSE 154 Modules</h2>\n          <ol>\n            <li>\n              Webpage structure and appearance with HTML5 and CSS. <i class=\"fa fa-check\n                good fragment\" aria-hidden=\"true\"></i>\n            </li>\n            <li class=\"bolded\">\n              Client-side interactivity with JS DOM and events.\n            </li>\n            <li class=\"faded\">\n              Using web services (API's) as a client with JS.\n            </li>\n            <li class=\"faded\">\n              Writing JSON-based web services with PHP.\n            </li>\n            <li class=\"faded\">\n              Storing and retreiving information in a database with MySQL and server-side\n              programs.\n            </li>\n          </ol>\n        </section>", "text": "CSE 154 Modules Webpage structure and appearance with HTML5 and CSS. Client-side interactivity with JS DOM and events. Using web services (API's) as a client with JS. Writing JSON-based web services with PHP. Storing and retreiving information in a database with MySQL and server-side programs.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Webpage Behavior with JavaScript</h2>\n          <p>\n            Now that we know how to add <em><strong>content</strong></em> and <em><strong>styles</strong></em>\n            to a web page, lets explore how to add responsive <em><strong>behavior</strong></em>\n          </p>\n          <p>These slides will introduce the basics of the JavaScript language:</p>\n          <ul>\n            <li>As a client-side scripting language</li>\n            <li>Variables and Types</li>\n            <li>Conditional statements and Loops</li>\n            <li>Functions</li>\n            <li>Simple click event handling</li>\n          </ul>\n          <p>\n            Soon, we'll use these building blocks to dynamically update what you see on a web page in\n            response to clicks, text input, timers, etc.\n          </p>\n        </section>", "text": "Webpage Behavior with JavaScript Now that we know how to add content and styles to a web page, lets explore how to add responsive behavior These slides will introduce the basics of the JavaScript language: As a client-side scripting language Variables and Types Conditional statements and Loops Functions Simple click event handling Soon, we'll use these building blocks to dynamically update what you see on a web page in response to clicks, text input, timers, etc.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Terminology: Client-Side Scripting</h2>\n          <div style=\"margin: auto; width: 60%;\">\n            <img src=\"../img/Client-Server_Model.jpg\" alt=\"client-side scripting\">\n          </div>\n          <p>\n            <strong>Client-side script</strong>: Code that runs on the user's computer and does not\n            need a server to run (just a browser!).\n          </p>\n          <p>\n            Client-side JavaScript is usually run <em>after</em> HTML and CSS have been loaded on the\n            browser (e.g. from a server response).\n          </p>\n          <p>\n            Often, this JavaScript manipulates the page\n            or responds to user actions through \"event handlers\".\n          </p>\n        </section>", "text": "Terminology: Client-Side Scripting Client-side script: Code that runs on the user's computer and does not need a server to run (just a browser!). Client-side JavaScript is usually run after HTML and CSS have been loaded on the browser (e.g. from a server response). Often, this JavaScript manipulates the page or responds to user actions through \"event handlers\".", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>What is JavaScript?</h2>\n          <div class=\"font-20pt\">\n          <p>A lightweight \"scripting\" programming language</p>\n          <p>Created in 1995 by Brendan Eich (original prototype created in 10 days and called LiveScript)</p>\n\n          <p>Used to make web pages interactive:</p>\n          <ul>\n            <li>Insert dynamic text into HTML (ex: username)</li>\n            <li>React to events (ex: page load, user's mouse click)</li>\n            <li>Get information about a user's computer (ex: what browser they are using)</li>\n            <li>Perform calculations on user's computer (ex: form validation)</li>\n          </ul>\n          <p>A <a target=\"_blank\" href=\"http://www.webstandards.org/\">web standard</a>\n            (but not supported identically by\n            <a target=\"_blank\" href=\"https://www.wired.com/2016/01/the-sorry-legacy-of-microsoft-internet-explorer/\">\n              all browsers</a>)\n          </p>\n          <p>NOT related to Java other than name and some syntactic similarities...</p>\n          <p>\n            Can be used in the browser, as well as Adobe Photoshop, embedded\n            computers, the Unix terminal, etc. (we will be using it in the browser)\n          </p>\n          </div>\n        </section>", "text": "What is JavaScript? A lightweight \"scripting\" programming language Created in 1995 by Brendan Eich (original prototype created in 10 days and called LiveScript) Used to make web pages interactive: Insert dynamic text into HTML (ex: username) React to events (ex: page load, user's mouse click) Get information about a user's computer (ex: what browser they are using) Perform calculations on user's computer (ex: form validation) A web standard (but not supported identically by all browsers) NOT related to Java other than name and some syntactic similarities... Can be used in the browser, as well as Adobe Photoshop, embedded computers, the Unix terminal, etc. (we will be using it in the browser)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Today: Following Along</h2>\n          <p>As an interpreted programming language, JS is great to interact with\n          a line at a time (similar to Python, but very different than Java). Where do you\n          start?</p>\n          <p>\n            The easiest way to dive in is with the Chrome browser's\n            Console tab <strong>in the same inspector tool you've used to inspect your\n              HTML/CSS</strong>.\n          </p>\n          <img class=\"centered-figure\" width=\"40%\" src=\"../img/chrome-console.png\" alt=\"Chrome Console\">\n          <p>\n            Until we learn functions to interact with the HTML DOM with JS, we recommend\n            experimenting with the following code examples using this console to get\n            comfortable with the fundamental syntax and behavior of the language.\n          </p>\n        </section>", "text": "Today: Following Along As an interpreted programming language, JS is great to interact with a line at a time (similar to Python, but very different than Java). Where do you start? The easiest way to dive in is with the Chrome browser's Console tab in the same inspector tool you've used to inspect your HTML/CSS. Until we learn functions to interact with the HTML DOM with JS, we recommend experimenting with the following code examples using this console to get comfortable with the fundamental syntax and behavior of the language.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">CSS\n              Context Selectors</a></h2>\n          <p>Context selectors are used to selectively style page elements</p>\n          <p><strong>Examples:</strong></p>\n          <pre><code class=\"hljs\" data-trim>p .important {\n  text-transform: uppercase;\n}\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p>... applies the given properties to elements with class <code>important</code> if they\n          are somewhere inside a <code>p</code> on the page</p>\n          <pre><code class=\"hljs\" data-trim>p &gt; .important {\n  text-transform: uppercase;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <p>\n            ... applies the given properties to elements with class <code>important</code> only if\n            they are <em>directly</em> inside a <code>p</code>\n            on the page\n          </p>\n          <p>Check out yesterday's <a href=\"../../sections/week01-thurs/slides/index.html#/9\">extra section resource</a> for more practice!</p>\n        </section>", "text": "CSS Context Selectors Context selectors are used to selectively style page elements Examples: p .important { text-transform: uppercase;} CSS ... applies the given properties to elements with class important if they are somewhere inside a p on the page p > .important { text-transform: uppercase;} CSS ... applies the given properties to elements with class important only if they are directly inside a p on the page Check out yesterday's extra section resource for more practice!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Digging into the CSS \"Wardrobe\"</h2>\n          <p>Some common styles and tips to explore with the Chrome Inspector!</p>\n        </section>", "text": "Digging into the CSS \"Wardrobe\" Some common styles and tips to explore with the Chrome Inspector!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n            <h2>Table of Common Text/Color/Background CSS Rules (more <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\" target=\"_blank\">here</a>)</h2>\n            <table class=\"two-to-one-width\">\n              <tr>\n                <th>CSS Rules</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#colors\"><code>color</code></a>,\n                  <a href=\"#colors\"><code>background-color</code></a>\n                </td>\n                <td>Foreground (text) color and background color styles</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#font-family\"><code>font-family</code></a>,\n                  <a href=\"#font-size\"><code>font-size</code></a>,\n                  <a href=\"#font-weight-style\"><code>font-style</code></a>,\n                  <a href=\"#font-weight-style\"><code>font-weight</code></a>\n                </td>\n                <td>Various font styles</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#text-align\"><code>text-align</code></a>,\n                  <a href=\"#text-decoration\"><code>text-decoration</code></a>,\n                  <a href=\"#text-styles\"><code>text-indent</code></a>,\n                  <a href=\"#text-shadow\"><code>text-shadow</code></a>,\n                  <a href=\"#text-transform\"><code>text-transform</code></a>\n                </td>\n                <td>Various text styles</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#text-styles\"><code>line-height</code></a>,\n                  <a href=\"#text-styles\"><code>word-spacing</code></a>,\n                  <a href=\"#text-styles\"><code>letter-spacing</code></a>\n                </td>\n                <td>Line/word/letter spacing styles</td>\n              </tr>\n              <tr>\n                <td><a href=\"#list-style-type\"><code>list-style-type</code></a></td>\n                <td>List item styling (e.g. bullet styles)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#background-image\"><code>background-image</code></a>,\n                  <a href=\"#background-repeat\"><code>background-repeat</code></a>,\n                  <a href=\"#background-position\"><code>background-position</code></a>,\n                  <a href=\"#background-styles\"><code>background-attachment</code></a>,\n                  <a href=\"#background-styles\"><code>background-size</code></a>\n                </td>\n                <td>Various background styles</td>\n              </tr>\n            </table>\n          </section>", "text": "Table of Common Text/Color/Background CSS Rules (more here) CSS Rules Description color, background-color Foreground (text) color and background color styles font-family, font-size, font-style, font-weight Various font styles text-align, text-decoration, text-indent, text-shadow, text-transform Various text styles line-height, word-spacing, letter-spacing Line/word/letter spacing styles list-style-type List item styling (e.g. bullet styles) background-image, background-repeat, background-position, background-attachment, background-size Various background styles", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"colors\">\n            <h2>CSS Properties for Colors</h2>\n            <pre>\n            <code class=\"hijs\" data-trim>p {\n  color: red;\n  background-color: yellow;\n}\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"background-color: yellow; color: red;\">This paragraph uses the style above.</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <table>\n              <tr>\n                <th><strong>Property</strong></th>\n                <th><strong>Description</strong></th>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\">color</a></td>\n                <td>color of an element's text</td>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-color\">background-color</a></td>\n                <td>background color that will appear behind the element</td>\n              </tr>\n            </table>\n            <p>A great MDN reference page for different color values <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">here</a>!\n            </p>\n          </section>", "text": "CSS Properties for Colors p { color: red; background-color: yellow;} CSS This paragraph uses the style above. output Property Description color color of an element's text background-color background color that will appear behind the element A great MDN reference page for different color values here!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n        <h2>More about Colors in CSS</h2>\n        <pre><code class=\"hljs\" data-trim>p { color: red }\nh2 { color: rgb(128, 0, 196); }\nh4 { color: #FF8800; }\n</code></pre>\n        <p class=\"code-caption\">CSS</p>\n\n        <div class=\"output\">\n          <p style=\"color: red;\">This paragraph uses the first style above</p>\n          <h2 style=\"color: rgb(128, 0, 196); text-transform: none; font-size: 24pt;\">This h2 uses the second style\n            above</h2>\n          <h4 style=\"color: #FF8800; text-transform: none; font-size: 20pt;\">This h4 uses the third style above</h4>\n          <p class=\"output-caption\">output</p>\n        </div>\n        <p><a target=\"_blank\" href=\"https://www.w3schools.com/cssref/css_colors.asp\">Color\n          names</a>:\n        <span style=\"color: aqua\">aqua</span>,\n        <span style=\"color: black\">black</span>,\n        <span style=\"color: blue\">blue</span>,\n        <span style=\"color: fuchsia\">fuchsia</span>,\n        <span style=\"color: gray\">gray</span>,\n        <span style=\"color: green\">green</span>,\n        <span style=\"color: lime\">lime</span>,\n        <span style=\"color: maroon\">maroon</span>,\n        <span style=\"color: navy\">navy</span>,\n        <span style=\"color: olive\">olive</span>,\n        <span style=\"color: purple\">purple</span>,\n        <span style=\"color: red\">red</span>,\n        <span style=\"color: silver\">silver</span>,\n        <span style=\"color: teal\">teal</span>,\n        <span style=\"color: white\">white</span>,\n        <span style=\"color: yellow\">yellow</span>\n        </p>\n        <p>RGB codes: red, green, and blue values from 0 (none) to 255 (full)</p>\n        <p>Hex codes: RGB values in base-16 from 00 (0, none) to FF (255, full)</p>\n        <p>Example: To get red font, you can use either \"red\", \"rgb(255, 0, 0)\", or\n        \"#FF0000\".</p>\n      </section>", "text": "More about Colors in CSS p { color: red }h2 { color: rgb(128, 0, 196); }h4 { color: #FF8800; } CSS This paragraph uses the first style above This h2 uses the second style above This h4 uses the third style above output Color names: aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow RGB codes: red, green, and blue values from 0 (none) to 255 (full) Hex codes: RGB values in base-16 from 00 (0, none) to FF (255, full) Example: To get red font, you can use either \"red\", \"rgb(255, 0, 0)\", or \"#FF0000\".", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"font-styles\">\n            <h2>CSS Properties for <a href=\"http://www.theonion.com/article/helvetica-bold-oblique-sweeps-fontys-263\">Fonts</a></h2>\n            <table>\n              <tr>\n                <th><strong>Property</strong></th>\n                <th><strong>Description</strong></th>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\">font-family</a></td>\n                <td>which font will be used</td>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\">font-size</a></td>\n                <td>how large the letters will be drawn</td>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\">font-style</a></td>\n                <td>used to enable/disable italic style</td>\n              </tr>\n              <tr>\n                <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\">font-weight</a></td>\n                <td>used to enable/disable bold style</td>\n              </tr>\n              <tr>\n                <td colspan=\"2\" style=\"text-align: right\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font\">Complete list of font properties</a></td>\n              </tr>\n            </table>\n          </section>", "text": "CSS Properties for Fonts Property Description font-family which font will be used font-size how large the letters will be drawn font-style used to enable/disable italic style font-weight used to enable/disable bold style Complete list of font properties", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"font-family\">\n            <h2><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\">font-family</a></code></h2>\n            <pre><code class=\"hijs\" data-trim>h4 {\n  font-family: \"Courier New\", monospace;\n}\n\np {\n  font-family: Georgia, serif;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n\n            <div class=\"output\">\n              <h4 style=\"font-family: 'Courier New'; font-size: 20pt;\">This h4 uses the second style above</h4>\n              <p style=\"font-family: Georgia;\">This paragraph uses the first style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Enclose multi-world font names in quotes!</p>\n          </section>", "text": "font-family h4 { font-family: \"Courier New\", monospace;}p { font-family: Georgia, serif;} CSS This h4 uses the second style above This paragraph uses the first style above output Enclose multi-world font names in quotes!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n            <h2>More about <code>font-family</code></h2>\n            <pre><code class=\"hijs\" data-trim>p {\n  font-family: Garamond, \"Times New Roman\", serif;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"font-family: Georgia, 'Times New Roman', serif\">This paragraph uses the above style</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Can specifiy multiple fonts from highest to lowest priority</p>\n            <p>Generic font names:</p>\n            <ul>\n              <li>\n                <span style=\"font-family: serif;\">serif</span>,\n                <span style=\"font-family: sans-serif;\">sans-serif</span>,\n                <span style=\"font-family: cursive;\">cursive</span>,\n                <span style=\"font-family: fantasy;\">fantasy</span>,\n                <span style=\"font-family: monospace;\">monospace</span>\n              </li>\n            </ul>\n            <p>If the first font is not found on the user's computer, the next is tried\n            </p>\n            <p>Generally should specify similar fonts</p>\n            <p>Placing a generic font name at the end of your\n            <code>font-family</code> value ensures that every computer will use a valid font</p>\n          </section>", "text": "More about font-family p { font-family: Garamond, \"Times New Roman\", serif;} CSS This paragraph uses the above style output Can specifiy multiple fonts from highest to lowest priority Generic font names: serif, sans-serif, cursive, fantasy, monospace If the first font is not found on the user's computer, the next is tried Generally should specify similar fonts Placing a generic font name at the end of your font-family value ensures that every computer will use a valid font", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n            <h2>Using Google Fonts</h2>\n            <div class=\"side-by-side\">\n              <ol>\n                <li>Go to <a href=\"https://fonts.googlecom\">https://fonts.google.com</a></li>\n                <li>Find the font(s) you like. Press the <code>+</code> button for each</li>\n                <li>Click on the black bar that says the number of families you have selected</li>\n                <li>Click on @import and copy the text between the <code>&lt;style&gt;</code> and <code>&lt;style&gt;</code> tags</li>\n                <li>Paste the code into your <code>.css</code> document (see example <a href=\"lecture3source/font-example.css\" target=\"_blank\">here</a>)</li>\n              </ol>\n                <a href=\"../img/googlefonts.png\" target=\"_blank\">\n                  <img src=\"../img/googlefonts.png\" alt=\"Google Font screen\">\n                </a>\n            </div>\n          </section>", "text": "Using Google Fonts Go to https://fonts.google.com Find the font(s) you like. Press the + button for each Click on the black bar that says the number of families you have selected Click on @import and copy the text between the <style> and <style> tags Paste the code into your .css document (see example here)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"font-size\">\n            <h2>\n              <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\">font-size</a></code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p {\n  font-size: 14pt;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n\n            <div class=\"output\">\n              <p style=\"font-size: 14pt;\">This paragraph uses the above style</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Common Units: (see more details on MDN's font-size page):\n            </p><ul>\n              <li>Pixels (px) - e.g., <span style=\"font-size: 16px\">16px</span></li>\n              <li>Point (pt) - e.g., <span style=\"font-size: 16pt\">16pt</span></li>\n              <li>m-size (em) - e.g., <span style=\"font-size: 1.16em\">1.16em</span></li>\n            </ul>\n            \n            <p>Vague font sizes:\n            <span style=\"font-size: xx-small\">xx-small</span>,\n            <span style=\"font-size: x-small\">x-small</span>,\n            <span style=\"font-size: small\">small</span>,\n            <span style=\"font-size: medium\">medium</span>,\n            <span style=\"font-size: large\">large</span>,\n            <span style=\"font-size: x-large\">x-large</span>,\n            <span style=\"font-size: smaller\">smaller</span>,\n            <span style=\"font-size: larger\">larger</span>,\n            </p>\n            <p>Percentage font sizes: <span style=\"font-size: 90%;\">90%</span>,\n            <span style=\"font-size: 120%\">120%</span></p>\n          </section>", "text": "font-size p { font-size: 14pt;} CSS This paragraph uses the above style output Common Units: (see more details on MDN's font-size page): Pixels (px) - e.g., 16px Point (pt) - e.g., 16pt m-size (em) - e.g., 1.16em Vague font sizes: xx-small, x-small, small, medium, large, x-large, smaller, larger, Percentage font sizes: 90%, 120%", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"font-weight-style\">\n            <h2>\n              <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\">font-style</a></code>,\n              <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\">font-weight</a></code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p {\n  font-style: italic;\n  font-weight: bold;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n\n            <div class=\"output\">\n              <p style=\"font-weight: bold; font-style: italic\">This paragraph uses the above style</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              Either of the above can be set to normal to turn them off (e.g., headings)\n            </p>\n          </section>", "text": "font-style, font-weight p { font-style: italic; font-weight: bold;} CSS This paragraph uses the above style output Either of the above can be set to normal to turn them off (e.g., headings)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <section id=\"text-styles\">\n            <h2>CSS properties for text</h2>\n            <table>\n              <tr><th><strong>Property</strong></th><th><strong>Description</strong></th></tr>\n              <tr>\n                <td>\n                  <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-align\">text-align</a></code>\n                </td>\n                <td>alignment of text within its element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\">text-decoration</a></code>\n                </td>\n                <td>decorations such as underlining</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent\">text-indent</a></code>\n                </td>\n                <td>indents the first letter of each paragraph</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow\">text-shadow</a></code>\n                </td>\n                <td>a colored shadow near an existing piece of text (CSS3)</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\">text-transform</a></code>\n                </td>\n                <td>controls capitalization of text</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\">line-height</a></code>,\n                  <code><a target=\"_blank\" href=\"https://www.w3schools.com/cssref/pr_text_word-spacing.asp\">word-spacing</a></code>,\n                  <code><a target=\"_blank\" href=\"https://www.w3schools.com/cssref/pr_text_letter-spacing.asp\">letter-spacing</a></code>\n                </td>\n                <td>gaps between the various portions of the text</td>\n                </tr><tr>\n                  <td colspan=\"2\" style=\"text-align: right;\">\n                    <a href=\"https://www.w3schools.com/css/css_text.asp\" target=\"_blank\">\n                      Complete list of text properties\n                    </a>\n                  </td>\n                </tr>\n              \n            </table>\n            <p>Dive down for more examples below!</p>\n          </section>\n\n          <section id=\"text-align\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-align.asp\" target=\"_blank\">text-align</a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>blockquote { text-align: justify; }\nh2 { text-align: center; }</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <h3 style=\"text-align: center;\">The Emperor's Quote</h3>\n              <blockquote style=\"text-align: justify; font-size: 20pt; box-shadow: none;\">\n                [TO LUKE SKYWALKER] The alliance... will die.\n                As will your friends. Good, I can feel your anger. I am unarmed.\n                Take your weapon. Strike me down with all of your hatred and your\n                journey towards the dark side will be complete.\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              Can be <code>left</code>, <code>right</code>, <code>center</code>,\n              or <code>justify</code> (which widens all full lines of the element so that they occupy\n              its entire width)\n            </p>\n          </section>\n\n          <section id=\"text-decoration\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-decoration.asp\" target=\"_blank\">\n                  text-decoration\n                </a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p { text-decoration: underline; }\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-decoration: underline\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              Can also be <span style=\"text-decoration:overline\">overline</span>,\n              <span style=\"text-decoration: line-through\">line through</span>,\n              <span style=\"text-decoration: blink\">blink</span> or none\n            </p>\n            <p>Effects can be combined:</p>\n            <pre><code class=\"hijs\" data-trim>p { text-decoration: overline underline; }</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-decoration: overline underline; padding-top: 5px\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"text-shadow\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/css3_pr_text-shadow.asp\" target=\"_blank\">text-shadow</a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p {\n  font-weight: bold;\n  text-shadow: -2px 5px gray;\n}\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-shadow: -2px 5px gray; font-weight: bold\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p><code>shadow</code> is specified as an X-offset, a Y-offset, or an optional color</p>\n            <p>Tip: Use the Chrome Inspector to help!</p>\n          </section>\n          <section id=\"text-transform\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-transform.asp\" target=\"_blank\">text-transform</a>\n              </code>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  I &lt;span&gt;just&lt;/span&gt; just &lt;em&gt;CAN'T&lt;/em&gt; &lt;strong&gt;make up my mind!&lt;/strong&gt;\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <pre><code class=\"hijs\" data-trim>em {\n  text-transform: lowercase;\n}\n\nspan {\n  text-transform: capitalize;\n}\n\nstrong {\n  text-transform: uppercase;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p>\n                I <span style=\"text-transform: capitalize\">just</span> just\n                <em style=\"color: #3f3f3f; text-transform:lowercase\">CAN'T</em>\n                <strong style=\"text-transform: uppercase\">make up my mind!</strong>\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n          </section>", "text": "CSS properties for text PropertyDescription text-align alignment of text within its element text-decoration decorations such as underlining text-indent indents the first letter of each paragraph text-shadow a colored shadow near an existing piece of text (CSS3) text-transform controls capitalization of text line-height, word-spacing, letter-spacing gaps between the various portions of the text Complete list of text properties Dive down for more examples below! text-align blockquote { text-align: justify; }h2 { text-align: center; } CSS The Emperor's Quote [TO LUKE SKYWALKER] The alliance... will die. As will your friends. Good, I can feel your anger. I am unarmed. Take your weapon. Strike me down with all of your hatred and your journey towards the dark side will be complete. output Can be left, right, center, or justify (which widens all full lines of the element so that they occupy its entire width) text-decoration p { text-decoration: underline; } CSS This paragraph uses the style above output Can also be overline, line through, blink or none Effects can be combined: p { text-decoration: overline underline; } CSS This paragraph uses the style above output text-shadow p { font-weight: bold; text-shadow: -2px 5px gray;} CSS This paragraph uses the style above output shadow is specified as an X-offset, a Y-offset, or an optional color Tip: Use the Chrome Inspector to help! text-transform <p> I <span>just</span> just <em>CAN'T</em> <strong>make up my mind!</strong></p> HTML em { text-transform: lowercase;}span { text-transform: capitalize;}strong { text-transform: uppercase;} CSS I just just CAN'T make up my mind! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 5: Different Layout Methods with CSS</h3>\n          <div>\n            <div class=\"font-18pt\">\n              <img width=\"75%\" class=\"simpleimg mb-0\" src=\"../img/css-to-save-the-world.png\" alt=\"CSS...\">\n\n              <p>Source: <a class=\"font-18pt\" href=\"https://www.reddit.com/r/ProgrammerHumor/comments/4jbo5v/xkcd_tar_fixed/\">reddit.com/r/ProgrammerHumor</a>\n              </p>\n            <p>Moral of the story: CSS has a notorious reputation (mostly pre-flex), but it <em>is</em> important and\n            you bring a lot of value to a full-stack team if you can figure out responsive\n            layout (with good practices).\n            </p>\n            <p>Meanwhile... you can now appreciate some CSS in-real-life: <a href=\"https://www.reddit.com/r/css_irl\">r/css_irl</a>\n            </p>\n            </div>\n          </div>\n        </section>", "text": "CSE 154 Lecture 5: Different Layout Methods with CSS Source: reddit.com/r/ProgrammerHumor Moral of the story: CSS has a notorious reputation (mostly pre-flex), but it is important and you bring a lot of value to a full-stack team if you can figure out responsive layout (with good practices). Meanwhile... you can now appreciate some CSS in-real-life: r/css_irl", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <ul class=\"no-bullets\">\n            <li>Announcements:\n              <ul>\n                <li>HW1 due Thursday 11pm - don't forget\n                  <ul>\n                    <li>By the command line\n                      <ul>\n                        <li><code>git add .</code></li>\n                        <li><code>git commit -m \"my awesome message\"</code></li>\n                        <li><code>git push origin master</code></li>\n                      </ul>\n                    </li>\n                    <li>Or through your\n                      <a href=\"../../resources/assets/atomgit/gitatom.gif\">Atom if Git</a>\n                     is connected correctly\n                   </li>\n                    <li>Then <strong><a href=\"https://gitgrade.cs.washington.edu/student/assignment/44/turnin\">TURN IN!</a></strong></li>\n                  </ul>\n                </li>\n                <li>Exploration session thursday 4:30pm in MGH 389</li>\n              </ul>\n            </li>\n            <li>CSS Inheritance</li>\n            <li>Layout</li>\n        </ul></section>", "text": "Agenda Announcements: HW1 due Thursday 11pm - don't forget By the command line git add . git commit -m \"my awesome message\" git push origin master Or through your Atom if Git is connected correctly Then TURN IN! Exploration session thursday 4:30pm in MGH 389 CSS Inheritance Layout", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Going Deeper into CSS Inheritance</h2>\n        </section>", "text": "Going Deeper into CSS Inheritance", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Reminder: Content vs. Presentation</h2>\n          <p>HTML is for <strong>content</strong>; <em>what</em> is on the page\n          (heading; list; code; etc.)</p>\n          <p>CSS is for <strong>presentation</strong>; how to display the page\n          (bold; centered; 20px margin, etc.)</p>\n          <ul>\n            <li>\n              Keeping content separate from presentation is a very important web\n              design principle (DRY principle, good for accessiblity)</li>\n            <li>\n              If the HTML contains no styles, its entire appearance can be changed\n              by swapping <code>.css</code> files (recall CSSZenGarden)\n            </li>\n          </ul>\n        </section>", "text": "Reminder: Content vs. Presentation HTML is for content; what is on the page (heading; list; code; etc.) CSS is for presentation; how to display the page (bold; centered; 20px margin, etc.) Keeping content separate from presentation is a very important web design principle (DRY principle, good for accessiblity) If the HTML contains no styles, its entire appearance can be changed by swapping .css files (recall CSSZenGarden)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Inline styles: the <code>style</code> attribute (BAD)</h2>\n          <p>\n            This is <em>bad code quality</em>; DO NOT DO THIS\n          </p>\n          <p>\n\n          </p><pre><code class=\"hljs\" data-trim>&lt;p style=\"font-family: sans-serif; color: red\"&gt;\n  This is a paragraph\n&lt;/p&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"fragment\">\n            <p>You will unfortunately see this on some sites like W3Schools</p>\n            <p>It does work render as you would expect though...</p>\n            <div class=\"output\">\n              <p style=\"font-family: sans-serif; color: red;\">\n                This is a paragraph\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </div>\n        </section>", "text": "Inline styles: the style attribute (BAD) This is bad code quality; DO NOT DO THIS <p style=\"font-family: sans-serif; color: red\"> This is a paragraph</p> HTML You will unfortunately see this on some sites like W3Schools It does work render as you would expect though... This is a paragraph output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Think... </h2>\n          <p>\n            What color do you think the text of the paragraph will render in?\n          </p>\n          <pre><code class=\"hljs\" data-trim>&lt;p style=\"font-family: sans-serif; color: red\"&gt;\n  This is a paragraph\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <pre><code class=\"hljs\" data-trim>p {\n  color: purple;\n}</code></pre>\n          <p class=\"code-caption\">Connected CSS file</p>\n          <div class=\"fragment\">\n            <p>Were you correct?</p>\n            <div class=\"output\">\n              <p style=\"font-family: sans-serif; color: red;\">\n                This is a paragraph\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </div>\n          <p class=\"fragment\">Inline styles have higher \"precedence\" styles linked in with a\n            <code>.css</code> file</p>\n          <p class=\"fragment\">Used for one-time overrides and styling a particular element</p>\n        </section>", "text": "Think... What color do you think the text of the paragraph will render in? <p style=\"font-family: sans-serif; color: red\"> This is a paragraph</p> HTML p { color: purple;} Connected CSS file Were you correct? This is a paragraph output Inline styles have higher \"precedence\" styles linked in with a .css file Used for one-time overrides and styling a particular element", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n        <h2>Internal Style Sheets</h2>\n        <p>\n          Another way to include style in your web page, a style sheet in your\n          <code>&lt;head&gt;</code>\n        </p>\n        <p>\n          Also DO NOT DO THIS, but you may see this in code you find on line\n        </p>\n        <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"precedence.css\"&gt;\n  &lt;style&gt;\n    &lt;-- internal style sheet, the linked style has color: purple rule --&gt;\n    p { color: green; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;This is another paragraph&lt;/p&gt;\n&lt;/body&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\">\n            <p style=\"color: green;\">\n              This is a paragraph\n            </p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            Internal style takes precedence whether it is before or after the linked style in the head\n          </p>\n      </section>", "text": "Internal Style Sheets Another way to include style in your web page, a style sheet in your <head> Also DO NOT DO THIS, but you may see this in code you find on line <head> <link rel=\"stylesheet\" href=\"precedence.css\"> <style> <-- internal style sheet, the linked style has color: purple rule --> p { color: green; } </style></head><body> <p>This is another paragraph</p></body> HTML This is a paragraph output Internal style takes precedence whether it is before or after the linked style in the head", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n        <section>\n          <h2>Think... Pair... Share...</h2>\n          <p>\n            What color do you think the text of the paragraph will render in? <br> (answer below)\n          </p>\n          <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"precedence.css\"&gt;\n  &lt;style&gt;\n    p { color: green; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p style=\"font-family: sans-serif; color: red;\"&gt;\n    This is another paragraph\n  &lt;/p&gt;\n&lt;/body&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <pre><code class=\"hljs\" data-trim>p {\n  color: purple;\n}</code></pre>\n          <p class=\"code-caption\">Connected CSS file</p>\n        </section>\n        <section>\n          <h2>Were you correct?</h2>\n          <div class=\"output\">\n            <p style=\"font-family: sans-serif; color: red;\">\n              This is a paragraph\n            </p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            Inline styles have higher \"precedence\" than\n            internal styles which has higher precedence than styles linked in with a\n            <code>.css</code> file\n          </p>\n        </section>\n      </section>", "text": "Think... Pair... Share... What color do you think the text of the paragraph will render in? (answer below) <head> <link rel=\"stylesheet\" href=\"precedence.css\"> <style> p { color: green; } </style></head><body> <p style=\"font-family: sans-serif; color: red;\"> This is another paragraph </p></body> HTML p { color: purple;} Connected CSS file Were you correct? This is a paragraph output Inline styles have higher \"precedence\" than internal styles which has higher precedence than styles linked in with a .css file", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Think... Pair... Share...</h2>\n          <p>\n            What color do you think the text of the paragraph will render in? <br> (answer below)\n          </p>\n          <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"precedence.css\"&gt;\n  &lt;style&gt;\n    p { color: green; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p style=\"font-family: sans-serif; color: red;\"&gt;\n    This is another paragraph\n  &lt;/p&gt;\n&lt;/body&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <pre><code class=\"hljs\" data-trim>p {\n  color: purple;\n}</code></pre>\n          <p class=\"code-caption\">Connected CSS file</p>\n        </section>", "text": "Think... Pair... Share... What color do you think the text of the paragraph will render in? (answer below) <head> <link rel=\"stylesheet\" href=\"precedence.css\"> <style> p { color: green; } </style></head><body> <p style=\"font-family: sans-serif; color: red;\"> This is another paragraph </p></body> HTML p { color: purple;} Connected CSS file", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Were you correct?</h2>\n          <div class=\"output\">\n            <p style=\"font-family: sans-serif; color: red;\">\n              This is a paragraph\n            </p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            Inline styles have higher \"precedence\" than\n            internal styles which has higher precedence than styles linked in with a\n            <code>.css</code> file\n          </p>\n        </section>", "text": "Were you correct? This is a paragraph output Inline styles have higher \"precedence\" than internal styles which has higher precedence than styles linked in with a .css file", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2><em>Cascading</em> Style Sheets</h2>\n          <p>\n            It's called Cascading Style Sheets because the properties of an\n            element <em><a target=\"_blank\" href=\"https://www.merriam-webster.com/dictionary/cascade\">cascade</a></em>\n            together in this order:\n          </p>\n          <ol>\n            <li>\n              Browser's <a href=\"https://www.w3.org/TR/CSS/#css\" target=\"_blank\">default styles</a>\n              (<a href=\"https://meiert.com/en/blog/20070922/user-agent-style-sheets/\" target=\"_blank\">reference</a>)\n            </li>\n            <li>External style sheets (in a <code>&lt;link&gt;</code> tag)</li>\n            <li>Internal style sheets (in a <code>&lt;style&gt;</code> tag in the page header)</li>\n            <li>Inline style (the <code>style</code> attribute of an HTML element)</li>\n          </ol>\n          <p><strong>Reminder</strong>: You should never use 3. or 4. to accomplish styles in your webpages\n          for this course.</p>\n        </section>", "text": "Cascading Style Sheets It's called Cascading Style Sheets because the properties of an element cascade together in this order: Browser's default styles (reference) External style sheets (in a <link> tag) Internal style sheets (in a <style> tag in the page header) Inline style (the style attribute of an HTML element) Reminder: You should never use 3. or 4. to accomplish styles in your webpages for this course.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>\n            Inheriting styles\n            (<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance\">explanation</a>)\n          </h2>\n          <pre><code class=\"hljs\" data-trim>body { font-family: sans-serif; background-color: beige; color: green; }\np { color: red; background-color: aqua; }\na { text-decoration: overline underline; }\nh2 { font-weight: bold; text-align: center; }</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <div class=\"output\">\n            <div style=\"font-family: sans-serif; background-color: beige; margin-bottom: 0; color: green;\">\n              <h2 style=\"font-weight: bold; text-align: center; color: unset;\">This is a heading.</h2>\n              <p style=\"margin-bottom: 0; color: red; background-color: aqua;\">\n              A styled paragraph. <a style=\"text-decoration: overline underline;\" target=\"_blank\" href=\"../lec04/\">Previous slides</a> are available on\n                                   the web site.</p>\n              <ul><li>a bulleted list</li></ul>\n            \n            </div>\n            <p class=\"output-caption\" style=\"margin-top: -15px\">output</p>\n          </div>\n          <p>\n          When multiple styles apply to an element, they are\n          <strong>inherited</strong>\n          </p>\n          <p>\n          A more tightly-matching rule can override a more general inherited\n          rule\n          </p>\n          <p>Not all properties are inherited (notice link's color above)</p>\n        </section>", "text": "Inheriting styles (explanation) body { font-family: sans-serif; background-color: beige; color: green; }p { color: red; background-color: aqua; }a { text-decoration: overline underline; }h2 { font-weight: bold; text-align: center; } CSS This is a heading. A styled paragraph. Previous slides are available on the web site. a bulleted list output When multiple styles apply to an element, they are inherited A more tightly-matching rule can override a more general inherited rule Not all properties are inherited (notice link's color above)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Think... Pair...: What Happens When Styles Conflict?</h2>\n          <pre><code class=\"hljs\" data-trim>body { color: green; }\np, h1, h2 { color: blue; font-style: italic; }\nh2 { color: red; background-color: yellow; }\n</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <pre><code class=\"hljs\" data-trim>&lt;body&gt;\n  ...\n  &lt;p&gt;This paragraph uses the first style above&lt;/p&gt;\n  &lt;h2&amp;gtThis heading uses both styles above&lt;/h4&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n\n          <div class=\"fragment\">\n            <div class=\"output \">\n              <div style=\"color: green;\">\n                <p style=\"color: blue; font-style: italic\">This paragraph uses the first style above</p>\n                <h2 style=\"margin-bottom: 0; color: red; background-color: yellow; font-style: italic;\">This heading uses both styles above</h2>\n              </div>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              When two styles set conflicting values for the same property, the latter style takes precedence\n            </p>\n          </div>\n        </section>", "text": "Think... Pair...: What Happens When Styles Conflict? body { color: green; }p, h1, h2 { color: blue; font-style: italic; }h2 { color: red; background-color: yellow; } CSS <body> ... <p>This paragraph uses the first style above</p> <h2&gtThis heading uses both styles above</h4> HTML This paragraph uses the first style above This heading uses both styles above output When two styles set conflicting values for the same property, the latter style takes precedence", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Reminder: The DOM (Document Object Model)</h2>\n          <p>\n            A tree-shaped structure built out of all of the HTML elements in a\n            page.\n          </p>\n          <p>\n            The browser uses the DOM defined by your HTML page to apply CSS properties\n            and precedence.\n          </p>\n          <p>\n            Next week, we'll see how the DOM is used with JavaScript to attach behavior to different page\n            elements (and to add/remove elements to the page dynamically!)\n          </p>\n        </section>", "text": "Reminder: The DOM (Document Object Model) A tree-shaped structure built out of all of the HTML elements in a page. The browser uses the DOM defined by your HTML page to apply CSS properties and precedence. Next week, we'll see how the DOM is used with JavaScript to attach behavior to different page elements (and to add/remove elements to the page dynamically!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Visualizing the DOM tree</h2>\n            <div class=\"side-by-side\">\n                <div>\n                    <pre><code class=\"hljs\" data-trim>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt; ... &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt; ... &lt;/h1&gt;\n    &lt;div&gt;\n      &lt;p&gt; ... &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n                    <p class=\"code-caption\">HTML</p>\n                </div>\n                <img src=\"../img/dom.png\" alt=\"DOM\">\n            </div>\n        </section>", "text": "Visualizing the DOM tree <html> <head> <title> ... </title> </head> <body> <h1> ... </h1> <div> <p> ... </p> </div> </body></html> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\r\n          <h2>Review: Websites</h2>\r\n          <div>\r\n            <div style=\"width:25%;  position:absolute; left:0%;\">\r\n              <p class=\"fragment\"><strong>Content</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">Words and images</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:25%;  position:absolute; left:25%;\">\r\n              <p class=\"fragment\"><strong>Structure</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\r\n                <p class=\"medium-small-font\">HTML</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:25%;  position:absolute; left:50%;\">\r\n              <p class=\"fragment\"><strong>Style</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">CSS</p>\r\n              </div>\r\n            </div>\r\n            <div style=\"width:23.2%;  position:absolute; left:75%;\">\r\n              <p class=\"fragment\"><strong>Behavior</strong></p>\r\n              <div class=\"fragment\">\r\n                <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\r\n                <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>", "text": "Review: Websites\r \r \r Content\r \r \r Words and images\r \r \r \r Structure\r \r \r HTML\r \r \r \r Style\r \r \r CSS\r \r \r \r Behavior\r \r \r Javascript & Server programs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <div class=\"side-by-side\">\r\n            <div style=\"width:25%;  position:absolute; left: 10%;\">\r\n              <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n            </div>\r\n            <div>\r\n              <h1 style=\"margin-top: 400px\">HTML</h1>\r\n            </div>\r\n          </div>\r\n        </section>", "text": "HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2>Hypertext Markup Language (<a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\">HTML</a>)</h2>\r\n\r\n          <p>\r\n            Describes the <em>content</em> and <em>structure</em> of information on a web page\r\n            </p><ul>\r\n              <li>Not the same as the <em>presentation</em> (appearance on screen)</li>\r\n            </ul>\r\n          \r\n\r\n          <p>Surrounds text content with opening and closing <strong>tags</strong></p>\r\n          <p>\r\n            Each tag's name is called an <strong>element</strong>\r\n            </p><ul>\r\n              <li>Syntax:\r\n                <code>\r\n  \t\t\t\t\t\t\t\t\t<strong>&lt;element&gt;</strong> content <strong>&lt;/element&gt;</strong>\r\n  \t\t\t\t\t\t\t\t</code>\r\n              </li>\r\n              <li>Example:\r\n                <code>\r\n  \t\t\t\t\t\t\t\t\t<strong>&lt;p&gt;</strong>This is a paragraph<strong>&lt;/p&gt;</strong>\r\n  \t\t\t\t\t\t\t\t</code>\r\n              </li>\r\n            </ul>\r\n          \r\n          <p>Most whitespace is insignificant in HTML (ignored or collapsed to a single space)</p>\r\n          <p>We will use a newer version called HTML5</p>\r\n        </section>", "text": "Hypertext Markup Language (HTML)\r\r \r Describes the content and structure of information on a web page\r \r Not the same as the presentation (appearance on screen)\r \r \r\r Surrounds text content with opening and closing tags\r \r Each tag's name is called an element\r \r Syntax:\r \r \t\t\t\t\t\t\t\t\t<element> content </element>\r \t\t\t\t\t\t\t\t\r \r Example:\r \r \t\t\t\t\t\t\t\t\t<p>This is a paragraph</p>\r \t\t\t\t\t\t\t\t\r \r \r \r Most whitespace is insignificant in HTML (ignored or collapsed to a single space)\r We will use a newer version called HTML5", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2>Structure of an HTML Page</h2>\r\n          <pre><code class=\"hljs\" data-trim>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    information about the page\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    page contents\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n<p class=\"code-caption\">HTML</p>\r\n\r\n          <p>\r\n            The <code>&lt;head&gt;</code> tag describes the page and the <code>&lt;body&gt;</code> tag contains the page's content\r\n          </p>\r\n          <p>An HTML page is saved into a file ending with extension <code>.html</code></p>\r\n          <p>\r\n            The <code>DOCTYPE</code> tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language\r\n          </p>\r\n        </section>", "text": "Structure of an HTML Page\r <!DOCTYPE html>\r<html>\r <head>\r information about the page\r </head>\r <body>\r page contents\r </body>\r</html>\rHTML\r\r \r The <head> tag describes the page and the <body> tag contains the page's content\r \r An HTML page is saved into a file ending with extension .html\r \r The DOCTYPE tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2>HTML Tags</h2>\r\n          <p> There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). </p>\r\n          <p>A comprehensive list is\r\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a> (it's a great bookmark page for reference this quarter!) </p>\r\n          <p>Unless otherwise specified, all of the tags listed are required to be in the <code>&lt;body&gt;</code> of an HTML page rather than the <code>&lt;head&gt;</code>\r\n          </p>\r\n          <p>Our compiled list is <a href=\"../lec01-intro-html/#/36\">here</a> and\r\n            <a href=\"../lec01-intro-html/#/36/1\">here</a>\r\n            </p><p>\r\n        </p></section>", "text": "HTML Tags\r There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). \r A comprehensive list is\r here (it's a great bookmark page for reference this quarter!) \r Unless otherwise specified, all of the tags listed are required to be in the <body> of an HTML page rather than the <head>\r \r Our compiled list is here and\r here", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>A few details</h2>\r\n        <ol>\r\n          <li>\r\n            HTML is a subset of Extensible Markup Language (XML)\r\n            (<a href=\"https://softwareengineering.stackexchange.com/questions/93296/relation-and-differences-between-sgml-xml-html-and-xhtml\">more info</a>)\r\n          </li>\r\n          <li>Tags that start with <code>&lt;! </code> like is <code>&lt;!DOCTYPE html&gt;</code> is considered\r\n            <a href=\"https://teamtreehouse.com/community/what-is-the-bang-for-at-the-beginning-of-the-html-5-doctype\"> Markup\r\n                Declaration</a>\r\n          </li>\r\n          <li>\r\n            Self-closing tags like Horizontal Rule\r\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a>\r\n            can either have the slash in the tag or not, but <strong>BE CONSISTENT IN YOUR\r\n              CODE</strong>.\r\n          </li>\r\n        \r\n            <pre><code class=\"hljs\">&lt;hr /&gt;\r\n\r\n&lt;hr&gt;</code></pre>\r\n            <p class=\"code-caption\">Two (equivalent) examples of the self-closing horizontal rule\r\n            tag (HTML)</p>\r\n        <p>\r\n          Q: The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\">img</a> tag is \r\n          another self-closing tag. What characteristics do these two\r\n          tags have that make them appropriate as \"self-closing\" compared to content-holding tags\r\n          like the paragraph tag?\r\n        </p>\r\n      </ol></section>", "text": "A few details\r \r \r HTML is a subset of Extensible Markup Language (XML)\r (more info)\r \r Tags that start with <! like is <!DOCTYPE html> is considered\r Markup\r Declaration\r \r \r Self-closing tags like Horizontal Rule\r <hr>\r can either have the slash in the tag or not, but BE CONSISTENT IN YOUR\r CODE.\r \r \r <hr />\r\r<hr>\r Two (equivalent) examples of the self-closing horizontal rule\r tag (HTML)\r \r Q: The img tag is \r another self-closing tag. What characteristics do these two\r tags have that make them appropriate as \"self-closing\" compared to content-holding tags\r like the paragraph tag?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>HTML vs Rendered Web Page</h2>\r\n        <div class=\"side-by-side\">\r\n          <pre><code class=\"hljs\" data-trim>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;About Me: Nicole Riley&lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    &lt;header&gt;\r\n      &lt;h1&gt;About Me: Nicole Riley&lt;/h1&gt;\r\n    &lt;/header&gt;\r\n    &lt;main&gt;\r\n      &lt;article&gt;\r\n        &lt;p&gt;Hello, everyone! My name is ......&lt;/p&gt;\r\n      &lt;/article&gt;\r\n    &lt;/main&gt;\r\n\r\n      ...\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n          <img class=\"simpleimg space-left\" src=\"../img/sampleaboutme.png\" alt=\"Sample About Me\" style=\"margin-top: 15px \" width=\"300px\" height=\"400px\">\r\n        </div>\r\n      </section>", "text": "HTML vs Rendered Web Page\r \r <!DOCTYPE html>\r<html>\r <head>\r <title>About Me: Nicole Riley</title>\r </head>\r <body>\r <header>\r <h1>About Me: Nicole Riley</h1>\r </header>\r <main>\r <article>\r <p>Hello, everyone! My name is ......</p>\r </article>\r </main>\r\r ...\r </body>\r</html>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Attributes</h2>\r\n        <p>Some tags can contain additional information called <strong>attributes</strong></p>\r\n        <ul>\r\n          <li>Syntax: <br><code class=\"medium-small-font\">&lt;element\r\n                    attribute=\"value\"\r\n                    attribute=\"value\"&gt;\r\n                    <var>content</var> &lt;/<var>element</var>&gt;</code></li>\r\n          <li>Example: <br>\r\n            <code class=\"medium-small-font\">&lt;a href=\"page2.html\"&gt;Next page&lt;/a&gt;</code></li>\r\n        </ul>\r\n        <p class=\"fragment\">Where else did you see attributes yesterday?</p>\r\n\r\n        <pre class=\"fragment\"><code class=\"hljs\">&lt;html lang=\"en\"&gt;\r\n&lt;meta charset=\"UTF-8\"&gt;\r\n&lt;img src=\"\" alt=\"insert descriptive text for screenreaders\" /&gt;\r\n&lt;img src=\"\" alt=\"insert descriptive text for screenreaders\" /&gt;\r\n</code></pre>\r\n      </section>", "text": "Attributes\r Some tags can contain additional information called attributes\r \r Syntax: <element\r attribute=\"value\"\r attribute=\"value\">\r content </element>\r Example: \r <a href=\"page2.html\">Next page</a>\r \r Where else did you see attributes yesterday?\r\r <html lang=\"en\">\r<meta charset=\"UTF-8\">\r<img src=\"\" alt=\"insert descriptive text for screenreaders\" />\r<img src=\"\" alt=\"insert descriptive text for screenreaders\" />", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h1>Accessible Design</h1>\r\n        <h3>Slides based on content from Profs. Richard Ladner, Jake Wobbrock, and Andy Ko.</h3>\r\n      </section>", "text": "Accessible Design\r Slides based on content from Profs. Richard Ladner, Jake Wobbrock, and Andy Ko.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Disabilities</h2>\r\n        <p>Everyone has different abilities</p>\r\n        <p>Nearly 1 in 5 people have a disability in the U.S. (from the <a href=\"https://www.census.gov/newsroom/releases/archives/miscellaneous/cb12-134.html\">U.S. Census</a>)</p>\r\n\r\n      </section>", "text": "Disabilities\r Everyone has different abilities\r Nearly 1 in 5 people have a disability in the U.S. (from the U.S. Census)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>(Some) kinds of disabilities</h2>\r\n        <p>from <a href=\"https://www.w3.org/WAI/people-use-web/abilities-barriers/\">W3C\r\n          Web Accessiblity Initiative (WAI)</a></p>\r\n        <div style=\"float:left;\">\r\n          <ul>\r\n            <li>Visual\r\n              <ul>\r\n                <li>Blind</li>\r\n                <li>Low-Vision</li>\r\n                <li>Color Blind</li>\r\n              </ul>\r\n            </li>\r\n            <li>Auditory\r\n              <ul>\r\n                <li>Deaf</li>\r\n                <li>Hard of Hearing</li>\r\n              </ul>\r\n            </li>\r\n            <li>Speech\r\n              <ul>\r\n                <li>Ability to speak</li>\r\n                <li>Speech impediments</li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div style=\"float:right;\">\r\n          <ul>\r\n            <li>Physical\r\n              <ul>\r\n                <li>Ability to Walk</li>\r\n                <li>Ability to use limbs</li>\r\n              </ul>\r\n            </li>\r\n            <li>Cognitive, learning, and neurological\r\n              <ul>\r\n                <li>Dyslexia, dysgraphia, dyscalculia</li>\r\n                <li>ADHD</li>\r\n                <li>Memory loss</li>\r\n                <li>Learning disabilities</li>\r\n              </ul>\r\n            </li>\r\n            <li>Behavioral\r\n              <ul>\r\n                <li>Bipolar</li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </section>", "text": "(Some) kinds of disabilities\r from W3C\r Web Accessiblity Initiative (WAI)\r \r \r Visual\r \r Blind\r Low-Vision\r Color Blind\r \r \r Auditory\r \r Deaf\r Hard of Hearing\r \r \r Speech\r \r Ability to speak\r Speech impediments\r \r \r \r \r \r \r Physical\r \r Ability to Walk\r Ability to use limbs\r \r \r Cognitive, learning, and neurological\r \r Dyslexia, dysgraphia, dyscalculia\r ADHD\r Memory loss\r Learning disabilities\r \r \r Behavioral\r \r Bipolar", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Temporary and Situational Disability</h2>\r\n        <p>Disabilties can be temporary</p>\r\n        <ul>\r\n          <li>having a broken arm in a cast</li>\r\n          <li>difficulty hearing after a loud concert</li>\r\n        </ul>\r\n        <p>Disabilties can be situational</p>\r\n          <ul>\r\n            <li>trying to open your door while carrying groceries</li>\r\n            <li>trying to talk on the phone in a noisy room</li>\r\n            <li>trying to read your phone under direct sunlight</li>\r\n          </ul>\r\n        <p>Disability affects all of us</p>\r\n      </section>", "text": "Temporary and Situational Disability\r Disabilties can be temporary\r \r having a broken arm in a cast\r difficulty hearing after a loud concert\r \r Disabilties can be situational\r \r trying to open your door while carrying groceries\r trying to talk on the phone in a noisy room\r trying to read your phone under direct sunlight\r \r Disability affects all of us", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Accessible Design</h2>\r\n        <p>Designs that account for all abilities are called accessible designs</p>\r\n      </section>", "text": "Accessible Design\r Designs that account for all abilities are called accessible designs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Try your phone's screen reader!</h2>\r\n        <p>Enable your phone's screen reader</p>\r\n        <ul>\r\n          <li>iOS: Settings &gt; General &gt; Accessibility &gt; VoiceOver &gt; Hit the switch</li>\r\n          <li>Android: Settings &gt; Accessibility &gt; Talkback &gt; Hit the switch</li>\r\n        </ul>\r\n        <p>Input works differently now. For example, tap now reads the screen and double-tap selects. Use two or three fingers to scroll by page. Play with it for a minute.</p>\r\n        <p>Try closing your eyes and reading a webpage or a social networking site. Try writing an email.</p>\r\n      </section>", "text": "Try your phone's screen reader!\r Enable your phone's screen reader\r \r iOS: Settings > General > Accessibility > VoiceOver > Hit the switch\r Android: Settings > Accessibility > Talkback > Hit the switch\r \r Input works differently now. For example, tap now reads the screen and double-tap selects. Use two or three fingers to scroll by page. Play with it for a minute.\r Try closing your eyes and reading a webpage or a social networking site. Try writing an email.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Views of disabilities</h2>\r\n        <p>Medical view</p>\r\n          <ul>\r\n            <li>Disabled people are patients who need treatment and/or cure.</li>\r\n          </ul>\r\n          <p> Legal view</p>\r\n          <ul>\r\n            <li>Disabled people have rights and responsibilities, such as access to public buildings, voting, education, etc.</li>\r\n            <li>\r\n              <a href=\"https://www.nytimes.com/2019/02/18/arts/design/blind-lawsuits-art-galleries.html\">Lawsuits</a>\r\n               can occur, but they should not be the motivating factor for making a system\r\n              accessible\r\n          </li></ul>\r\n          <p> Sociocultural view</p>\r\n          <ul>\r\n            <li>Variation in ability is natural. \"Disability\" is caused by how society is designed, not by nature.</li>\r\n            <li>Building for inclusion builds innovation (e.g., curb cuts, close captioning)</li>\r\n          </ul>\r\n      </section>", "text": "Views of disabilities\r Medical view\r \r Disabled people are patients who need treatment and/or cure.\r \r Legal view\r \r Disabled people have rights and responsibilities, such as access to public buildings, voting, education, etc.\r \r Lawsuits\r can occur, but they should not be the motivating factor for making a system\r accessible\r \r Sociocultural view\r \r Variation in ability is natural. \"Disability\" is caused by how society is designed, not by nature.\r Building for inclusion builds innovation (e.g., curb cuts, close captioning)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <section>\r\n          <h2><a href=\"https://en.wikipedia.org/wiki/Universal_design\">Universal Design</a></h2>\r\n          <p>Design for as many users as possible, not just the average user</p>\r\n          <p>Example: Airplane cockpits:</p>\r\n          <ul>\r\n            <li>In 1952, the U.S. Air Force redesigned seats to fit the average pilot.</li>\r\n            <li>They fit nobody (nobody is actually average), training results dropped.</li>\r\n            <li>Redesigned seat to be configurable for any pilot; training results rose above previous levels.</li>\r\n          </ul>\r\n          <p>Universal Design is often used in architecture</p>\r\n        </section>\r\n        <section>\r\n          <h2><a href=\"http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/\">Universal Design Principles</a></h2>\r\n          <ol>\r\n            <li>Equitable use</li>\r\n            <li>Flexibilty in use</li>\r\n            <li>Simple and intuitive</li>\r\n            <li>Perceptible information</li>\r\n            <li>Tolerance for error</li>\r\n            <li>Low physical effort</li>\r\n            <li>Size and space for approach and use</li>\r\n          </ol>\r\n        </section>\r\n\r\n\r\n        <section>\r\n          <h2><a href=\"https://www.eecs.harvard.edu/~kgajos/papers/2011/wobbrock11abd.pdf\">Ability Based Design</a></h2>\r\n          <p>Instead of focusing on the abilities that someone lacks (<em>dis</em>-ability), and trying to compensate</p>\r\n          <p>Focus on making systems work with what abilities people have</p>\r\n          <p>Don't make people adapt to the system <br><img src=\"../img/Typing-Aid-250x277.jpg\"></p>\r\n          <p>Make the system adapt to the abilities of the user</p>\r\n        </section>\r\n\r\n        <section>\r\n          <h2><a href=\"http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/\">Ability Based Design Principles</a></h2>\r\n          <ol>\r\n            <li>Focus on <strong>Ability</strong>, not dis-ability.</li>\r\n            <li><strong>Accountability</strong>: If user has difficulty, system changes.</li>\r\n            <li><strong>Adaptation</strong>: Interface may be self-adaptive or user-adaptable.</li>\r\n            <li><strong>Transparency</strong>: Give user awareness of adaptations</li>\r\n            <li><strong>Performance</strong>: System may monitor users' performance</li>\r\n            <li><strong>Context</strong>: System may sense context</li>\r\n            <li><strong>Commodity</strong>: System may be affordable</li>\r\n          </ol>\r\n          <p>First two are required, other five are recommended</p>\r\n        </section>\r\n      </section>", "text": "Universal Design\r Design for as many users as possible, not just the average user\r Example: Airplane cockpits:\r \r In 1952, the U.S. Air Force redesigned seats to fit the average pilot.\r They fit nobody (nobody is actually average), training results dropped.\r Redesigned seat to be configurable for any pilot; training results rose above previous levels.\r \r Universal Design is often used in architecture\r \r \r Universal Design Principles\r \r Equitable use\r Flexibilty in use\r Simple and intuitive\r Perceptible information\r Tolerance for error\r Low physical effort\r Size and space for approach and use\r \r \r\r\r \r Ability Based Design\r Instead of focusing on the abilities that someone lacks (dis-ability), and trying to compensate\r Focus on making systems work with what abilities people have\r Don't make people adapt to the system \r Make the system adapt to the abilities of the user\r \r\r \r Ability Based Design Principles\r \r Focus on Ability, not dis-ability.\r Accountability: If user has difficulty, system changes.\r Adaptation: Interface may be self-adaptive or user-adaptable.\r Transparency: Give user awareness of adaptations\r Performance: System may monitor users' performance\r Context: System may sense context\r Commodity: System may be affordable\r \r First two are required, other five are recommended", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2><a href=\"https://en.wikipedia.org/wiki/Universal_design\">Universal Design</a></h2>\r\n          <p>Design for as many users as possible, not just the average user</p>\r\n          <p>Example: Airplane cockpits:</p>\r\n          <ul>\r\n            <li>In 1952, the U.S. Air Force redesigned seats to fit the average pilot.</li>\r\n            <li>They fit nobody (nobody is actually average), training results dropped.</li>\r\n            <li>Redesigned seat to be configurable for any pilot; training results rose above previous levels.</li>\r\n          </ul>\r\n          <p>Universal Design is often used in architecture</p>\r\n        </section>", "text": "Universal Design\r Design for as many users as possible, not just the average user\r Example: Airplane cockpits:\r \r In 1952, the U.S. Air Force redesigned seats to fit the average pilot.\r They fit nobody (nobody is actually average), training results dropped.\r Redesigned seat to be configurable for any pilot; training results rose above previous levels.\r \r Universal Design is often used in architecture", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\n          <h2>Check Your Understanding</h2>\n          <p>\n            Page Event Flow Exercise: <a href=\"cyu/two-btn-mystery.js\">JS Source Code</a> and linked\n            <a href=\"cyu/two-btn-mystery.html\">HTML</a> \n          </p>\n        </section>", "text": "Check Your Understanding Page Event Flow Exercise: JS Source Code and linked HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>So, when does my code run?</h2>\n\n            <div class=\"example\">\n              <pre><code class=\"hljs\" data-trim>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"ex1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt; ... &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n\n                  <pre><code class=\"hljs\" data-trim data-escape>let x = 3;\nfunction f(n) { return n + 1; }\nfunction g(n) { return n - 1; }\nx = f(x);</code></pre>\n              <p class=\"code-caption\"><code>ex1.js</code> -- JavaScript</p>\n              </div>\n\n              <div class=\"font-18pt\">\n              <p>\n                Your file's JS code runs the moment the browser loads the <code>script</code>\n                tag\n              </p>\n              <ul>\n                <li>Any variables are declared immediately</li>\n                <li>\n                  Any functions are declared but not called, unless your global code explicitly calls them\n                </li>\n              </ul>\n              <p>Important! At this point in time, the browser has not yet read your page's <code>body</code>\n              </p>\n              <ul>\n                <li>None of the DOM objects for tags on the page have been created yet</li>\n              </ul>\n              </div>\n          </section>", "text": "So, when does my code run? <html> <head> <script src=\"ex1.js\"></script> </head> <body> ... </body></html> HTML let x = 3;function f(n) { return n + 1; }function g(n) { return n - 1; }x = f(x); ex1.js -- JavaScript Your file's JS code runs the moment the browser loads the script tag Any variables are declared immediately Any functions are declared but not called, unless your global code explicitly calls them Important! At this point in time, the browser has not yet read your page's body None of the DOM objects for tags on the page have been created yet", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>A failed attempt at being unobtrusive</h2>\n            <p>\n            The following example <em>does</em> factor out JS code into a .js file, linked from\n            ex1.html. But what's wrong with it?</p> \n          <pre><code class=\"hijs\" data-trim>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"ex1-bad.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;button id=\"my-btn\"&gt;Click me!&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n  <p class=\"code-caption\"><a href=\"samplecode/ex1.html\">ex1.html</a></p>\n            <pre><code>let btn = document.getElementById(\"my-btn\");\nbtn.addEventListener(\"click\", responseFunction);\n\nfunction responseFunction() {\n  console.log(\"Hi!\");\n}</code></pre>\n            <p class=\"code-caption\"><a href=\"samplecode/ex1-bad.js\">ex1-bad.js</a></p>\n          </section>", "text": "A failed attempt at being unobtrusive The following example does factor out JS code into a .js file, linked from ex1.html. But what's wrong with it? <html> <head> <script src=\"ex1-bad.js\"></script> </head> <body> <button id=\"my-btn\">Click me!</button> </body></html> ex1.html let btn = document.getElementById(\"my-btn\");btn.addEventListener(\"click\", responseFunction);function responseFunction() { console.log(\"Hi!\");} ex1-bad.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>Problem with Example Code</h2>\n<pre><code>let btn = document.getElementById(\"my-btn\");\n// this is bad: btn is null at this point\nbtn.addEventListener(\"click\", responseFunction);\n\nfunction responseFunction() {\n  console.log(\"Hi!\");\n}</code></pre>\n            <p>\n                Script in <code>head</code> is processed before page's <code>body</code> has\n                loaded\n            </p>\n            <p>No elements are available yet or can be accessed yet via the DOM</p>\n            <p>This problem is solved by attaching a function to the global window load\n            event, <strong>which fires once everything in the page has been loaded</strong>.\n            </p>\n            <p>Solution: <a href=\"samplecode/ex1-good.js\">ex1-good.js</a> (this one doesn't use the\n            module pattern though, so it's not <a href=\"samplecode/ex1-best.js\">best</a>!)</p>\n          </section>", "text": "Problem with Example Codelet btn = document.getElementById(\"my-btn\");// this is bad: btn is null at this pointbtn.addEventListener(\"click\", responseFunction);function responseFunction() { console.log(\"Hi!\");} Script in head is processed before page's body has loaded No elements are available yet or can be accessed yet via the DOM This problem is solved by attaching a function to the global window load event, which fires once everything in the page has been loaded. Solution: ex1-good.js (this one doesn't use the module pattern though, so it's not best!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>Thinking about Page Behavior</h2>\n            <p>\n              There are different types of behaviors on a page. But when you're first\n              learning JavaScript, it may seem like there are a ton of different things to\n              keep track of, and connecting the dots can be tricky when staring at code.\n            </p>\n            <p>\n              But it's <em>really</em> not that complicated if you break it down before\n              starting the code.\n            </p>\n          </section>", "text": "Thinking about Page Behavior There are different types of behaviors on a page. But when you're first learning JavaScript, it may seem like there are a ton of different things to keep track of, and connecting the dots can be tricky when staring at code. But it's really not that complicated if you break it down before starting the code.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>What's involved in a page event?</h2>\n            <pre><code>source.addEventListener(\"event\", response);\n\nfunction response() {\n  // response behavior with possible output/document elements changed\n}</code></pre>\n            <ol>\n              <li>The <strong>source</strong> listening to the event. Most sources of an event\n                will be document elements (a button, a dropdown, paragraph, etc.) but you can\n                also have the window as a source to listen (always for the <code>load</code>\n                event, sometimes for various key events like <code>keyPress</code>).\n              </li>\n              <li>The <strong>event</strong> listened to by a soure object (e.g. click, load, mouseover,\n                keypress).</li>\n              <li>The <strong>response</strong> for the event</li>\n              <li>The <strong>output/elements changed</strong> in the\n                <strong>response</strong>\n            </li></ol>\n          </section>", "text": "What's involved in a page event? source.addEventListener(\"event\", response);function response() { // response behavior with possible output/document elements changed} The source listening to the event. Most sources of an event will be document elements (a button, a dropdown, paragraph, etc.) but you can also have the window as a source to listen (always for the load event, sometimes for various key events like keyPress). The event listened to by a soure object (e.g. click, load, mouseover, keypress). The response for the event The output/elements changed in the response", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>Another Event Handler Binding (mouseover)</h2>\n            <pre><code class=\"hljs\" data-trim>window.addEventListener(\"load\", init);\n\n// called when the window's load event is fired and we have access\n// to elements on the DOM\nfunction init() {\n  let msgP = document.getElementById(\"msgP\");\n  msgP.addEventListener(\"mouseover\", showMsg);\n}\n\nfunction showMsg() {\n  this.innerText = \"You moved the mouse over me!\";\n  // same as document.getElementById(\"msgP\").innerText = \"...\";\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p>Event handlers attached unobtrusively are bound to the element</p>\n            <p>Inside the handler, that bound element becomes <code>this</code></p>\n        </section>", "text": "Another Event Handler Binding (mouseover) window.addEventListener(\"load\", init);// called when the window's load event is fired and we have access// to elements on the DOMfunction init() { let msgP = document.getElementById(\"msgP\"); msgP.addEventListener(\"mouseover\", showMsg);}function showMsg() { this.innerText = \"You moved the mouse over me!\"; // same as document.getElementById(\"msgP\").innerText = \"...\";} JS Event handlers attached unobtrusively are bound to the element Inside the handler, that bound element becomes this", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Extra Practice (At Home)</h2>\n          <p>\n            The following worksheet/code is another example we used in a previous quarter. We\n            have provided it as an extra resource to work through at home to solidify your \n            understanding of event flow!\n          </p>\n          <p>\n            <a href=\"extra-practice/lec8.pdf\" target=\"_blank\">Practice Worksheet</a>\n            (<a href=\"extra-practice/lec8solution.pdf\" target=\"_blank\">Key</a>)\n          </p>\n          <p>\n            <a href=\"extra-practice/events-demo.html\" target=\"_blank\">Running HTML</a>\n            and <a href=\"extra-practice/events-demo.js\" target=\"_blank\">JS Implementation</a>\n            (with comments!)\n          </p>\n        </section>", "text": "Extra Practice (At Home) The following worksheet/code is another example we used in a previous quarter. We have provided it as an extra resource to work through at home to solidify your understanding of event flow! Practice Worksheet (Key) Running HTML and JS Implementation (with comments!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Remember Friday?</h2>\n          <p>We introduced different form element tags offered in HTML</p>\n          <p>But they're not too helpful if we can't do anything with them!</p>\n          <p>In general, to add interactivity to our HTML/CSS websites we need to:</p>\n          <ol>\n            <li>Link a JS program to our HTML (in the <code>&lt;head&gt;</code>)</li>\n            <li>Identify user/page <em>events</em> we want to respond to</li>\n            <li>Identify what <em>each response function is</em></li>\n            <li>Get the HTML DOM elements we want to be interactive, and \"assign\" the element its\n              own event(s) to listen to\n            </li>\n          </ol>\n        </section>", "text": "Remember Friday? We introduced different form element tags offered in HTML But they're not too helpful if we can't do anything with them! In general, to add interactivity to our HTML/CSS websites we need to: Link a JS program to our HTML (in the <head>) Identify user/page events we want to respond to Identify what each response function is Get the HTML DOM elements we want to be interactive, and \"assign\" the element its own event(s) to listen to", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Groupizer Demo</h2>\n          <p>Starter HTML/CSS/JS: <a href=\"groupizer-starter.zip\">groupizer-starter.zip</a></p>\n          <p>\n            Commented solution for where we left off at the end of lecture: \n            <a href=\"groupizer-v1-solution.zip\">groupizer-v1-solution.zip</a>\n          </p>\n        </section>", "text": "Groupizer Demo Starter HTML/CSS/JS: groupizer-starter.zip Commented solution for where we left off at the end of lecture: groupizer-v1-solution.zip", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section id=\"select-example\">\n          <h2>The &lt;select&gt; dropdown</h2>\n          <p>Recall the &lt;select&gt; dropdown for choosing the member count in a new group:</p>\n          <pre><code class=\"hljs\">&lt;select id=\"group-size\"&gt;\n  &lt;option&gt;2&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;3&lt;/option&gt;\n  &lt;option&gt;4&lt;/option&gt;\n&lt;/select&gt;</code></pre>\n          <p class=\"code-caption\">groupizer.html</p>\n          <div class=\"output\">\n              <select id=\"group-size\">\n                <option>2</option>\n                <option selected>3</option>\n                <option>4</option>\n              </select>\n              <p class=\"output-caption\">output</p>\n          </div>\n          \n\n        </section>", "text": "The <select> dropdown Recall the <select> dropdown for choosing the member count in a new group: <select id=\"group-size\"> <option>2</option> <option selected=\"selected\">3</option> <option>4</option></select> groupizer.html 2 3 4 output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Getting a Newly-Selected Group Size</h2>\n          <p>\n          In Groupizer, when a user\n          changes the number of members possible in the new group, we wanted to update the number of\n          inputs for new member names according to the current value.\n          </p>\n          <p>\n          To get the value of the &lt;select&gt;, you can access its <code>.value</code> attribute,\n          which returns the value of the &lt;option&gt; currently selected.\n          </p>\n          <pre><code class=\"hljs font-14pt\">function init() {\n  // ... other setup code\n  // the \"change\" event is fired whenever a user changes the dropdown selection\n  id(\"group-size\").addEventListener(\"change\", updateMemberCount);\n}\n\nfunction updateMemberCount() {\n  // can use .value on a select element to get currently-selected option \n  let currentCount = id(\"group-size\").value; \n  // ... use currentCount to update number of member name inputs\n}</code></pre>\n          <p class=\"code-caption\">groupizer.js</p>\n        </section>", "text": "Getting a Newly-Selected Group Size In Groupizer, when a user changes the number of members possible in the new group, we wanted to update the number of inputs for new member names according to the current value. To get the value of the <select>, you can access its .value attribute, which returns the value of the <option> currently selected. function init() { // ... other setup code // the \"change\" event is fired whenever a user changes the dropdown selection id(\"group-size\").addEventListener(\"change\", updateMemberCount);}function updateMemberCount() { // can use .value on a select element to get currently-selected option let currentCount = id(\"group-size\").value; // ... use currentCount to update number of member name inputs} groupizer.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Extra Resource Slides</h2>\n        </section>", "text": "Extra Resource Slides", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Recall the <a href=\"https://www.w3schools.com/tags/tag_button.asp\"><code>&lt;button&gt;</code></a></h2>\n          <pre><code class=\"hijs\" data-trim>&lt;button id=\"my-btn\"&gt;Click me!&lt;/button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\">\n            <button style=\"font-size: 18pt; margin-left: 5px;\" onclick=\"alert('Whooaaaaaaaa...');\">Click me!</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>Button's text appears inside tag; can also contain images</p>\n          <p>To make a responsive button or other UI control:</p>\n          <ol>\n            <li>Choose the control (e.g., button) and event (e.g., mouse click) of interest</li>\n            <li>Write a JavaScript function to run when the event occurs</li>\n            <li>Attach the function to the event on the control</li>\n          </ol>\n        </section>", "text": "Recall the <button> <button id=\"my-btn\">Click me!</button> HTML Click me! output Button's text appears inside tag; can also contain images To make a responsive button or other UI control: Choose the control (e.g., button) and event (e.g., mouse click) of interest Write a JavaScript function to run when the event occurs Attach the function to the event on the control", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>So how did that happen?</h2>\n        </section>", "text": "So how did that happen?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>First you get the button from the HTML Page</h2>\n          <p>To access an element you use <code>document.getElementById</code></p>\n          <pre><code class=\"hijs\" data-trim>let element = document.getElementById(\"id\");\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p><code>document.getElementById</code> returns an object for an element\n            with a given uniqute <code>id</code> in the document. </p>\n          <p>Note that you omit the <code>#</code> when giving an id in JS</p>\n        </section>", "text": "First you get the button from the HTML Page To access an element you use document.getElementById let element = document.getElementById(\"id\"); JS document.getElementById returns an object for an element with a given uniqute id in the document. Note that you omit the # when giving an id in JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Then handle the click event</h2>\n          <pre><code class=\"hijs\" data-trim>// attaching a named function\nelement.addEventListener(\"click\", handleFunction);\n\nfunction handleFunction() {\n  // event handler code\n}\n</code></pre>\n            <p class=\"code-caption\">JS (click event template)</p>\n\n            <pre><code class=\"hijs\" data-trim>\n// (alternative) attaching an \"anonymous\" function\nelement.addEventListener(\"click\", function() {\n  // event handler code\n});\n</code></pre>\n          <p class=\"code-caption\">JS (click event template)</p>\n          <p>JavaScript functions can be set as <strong>event handlers</strong></p>\n          <p>When you interact with the element, the function will execute</p>\n        </section>", "text": "Then handle the click event // attaching a named functionelement.addEventListener(\"click\", handleFunction);function handleFunction() { // event handler code} JS (click event template) // (alternative) attaching an \"anonymous\" functionelement.addEventListener(\"click\", function() { // event handler code}); JS (click event template) JavaScript functions can be set as event handlers When you interact with the element, the function will execute", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n                    <h2>So how do I get started with adding interactivity to my page?</h2>\n                    <p>\n                      Tips for meeting CP2 External Requirements:\n                    </p>\n                    <ul>\n                      <li>Add event listener to a source element, and respond\n                        <ul>\n                          <li>What is your source?</li>\n                          <li>What is your event(s)?</li>\n                          <li>What is the response behavior?</li>\n                          <li>What elements change as a result?</li>\n                        </ul>\n                        </li><li>Add/remove elements in the DOM (you can do this as part of a\n                          response function!</li>\n                      \n                    </ul>\n                  </section>", "text": "So how do I get started with adding interactivity to my page? Tips for meeting CP2 External Requirements: Add event listener to a source element, and respond What is your source? What is your event(s)? What is the response behavior? What elements change as a result? Add/remove elements in the DOM (you can do this as part of a response function!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>GitGrade worflow for Set!</h2>\n          <p><strong>Important</strong>: To accept and submit for both submissions you will:</p>\n          <ol>\n            <li>\n              Click \"Accept\" button for the\n              <a href=\"https://gitgrade.cs.washington.edu/student/assignment/45\"><strong>Milestone</strong></a>\n              assignment\n            </li>\n            <li>Clone this hw2-set-&lt;username&gt; repo</li>\n            <li>\n              Add/commit/push your work (NIGHTLY!!!) until ready to submit for\n              Milestone checkpoint\n            </li>\n            <li>\n              Click \"Turnin\" button for\n              <a href=\"https://gitgrade.cs.washington.edu/student/assignment/45/turnin\"><strong>Milestone</strong></a>\n              assignment before due date (Remember, no late days! No exceptions!)\n            </li>\n            <li>\n              Click \"Accept\" button for\n              <a href=\"https://gitgrade.cs.washington.edu/student/assignment/46\"><strong>Set</strong></a>\n              assignment\n            </li>\n            <li>\n              Continue working on the same repository as you have from the Milestone\n            </li>\n            <li>\n              Add/commit/push your work (NIGHTLY!) until ready to submit for Final submission\n            </li>\n            <li>\n              Click \"Turnin\" button for Final submission of\n              <a href=\"https://gitgrade.cs.washington.edu/student/assignment/46/turnin\"><strong>Set</strong></a>\n               assignment\n            </li>\n          </ol>\n        </section>", "text": "GitGrade worflow for Set! Important: To accept and submit for both submissions you will: Click \"Accept\" button for the Milestone assignment Clone this hw2-set-<username> repo Add/commit/push your work (NIGHTLY!!!) until ready to submit for Milestone checkpoint Click \"Turnin\" button for Milestone assignment before due date (Remember, no late days! No exceptions!) Click \"Accept\" button for Set assignment Continue working on the same repository as you have from the Milestone Add/commit/push your work (NIGHTLY!) until ready to submit for Final submission Click \"Turnin\" button for Final submission of Set assignment", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Part 3:  HTML Forms and Input</h2>\n          <h3>Randomizer Case Study</h3>\n        </section>", "text": "Part 3: HTML Forms and Input Randomizer Case Study", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Case study motivation</h2>\n          <p>Background</p>\n          <ul>\n            <li>\n              <a href=\"https://www.pnas.org/content/111/23/8410\">\n                Active learning increases student performance in science, engineering, and mathematics\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5132353/\">\n                Group Random Call Can Positively Affect Student In-Class Clicker Discussions\n              </a>\n            </li>\n          </ul>\n          <p>\n            Last term we collected student names and groups on note cards like we did earlier\n          </p>\n          <p>\n            We were afraid of losing the cards so we wrote\n            the <a href=\"../../tools/randomizer/randomizer.html\">Randomizer</a> (demo).\n          </p>\n          <p>\n            A student mentioned after the class was over that the group they\n            sat with on Day 2 never sat together again, so random group call ... wasn't effective\n          </p>\n          <h3>\n            Question: How can we create a site where we can dynamically collect group information\n            that can then be used in the Randomizer in lecture?\n          </h3>\n        </section>", "text": "Case study motivation Background Active learning increases student performance in science, engineering, and mathematics Group Random Call Can Positively Affect Student In-Class Clicker Discussions Last term we collected student names and groups on note cards like we did earlier We were afraid of losing the cards so we wrote the Randomizer (demo). A student mentioned after the class was over that the group they sat with on Day 2 never sat together again, so random group call ... wasn't effective Question: How can we create a site where we can dynamically collect group information that can then be used in the Randomizer in lecture?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Step 1: Wireframing</h2>\n          <p>\n            A <a href=\"https://en.wikipedia.org/wiki/Website_wireframe\" target=\"_blank\"><em>Wireframe</em></a><sup>*</sup>\n            diagram of your site is a very low fidelty sketch of what you think\n            your website will look like</p>\n          <p>\n            The idea is not to worry about colors or even filling in any text, you want to get a\n            feel for what the site will look like overall (proportions and locations of key elements)\n            and how it will function.\n          </p>\n          <p>\n            Recall: Students must be able to enter a group name and some number of students\n          </p>\n          <h3>\n            What key pieces might you want on a wireframe for this site? <br> (Take 2 minutes to draw it out)\n          </h3>\n\n          <p class=\"small-font\">\n            <sup>*</sup><a href=\"https://jesmingonzales.wordpress.com/2012/02/27/assignment-3-wireframes-basics-of-the-internet-design-methodology-assignment-2-review/\">Jesmine\n              Gonzales, Assignment 3</a>\n          </p>\n        </section>", "text": "Step 1: Wireframing A Wireframe* diagram of your site is a very low fidelty sketch of what you think your website will look like The idea is not to worry about colors or even filling in any text, you want to get a feel for what the site will look like overall (proportions and locations of key elements) and how it will function. Recall: Students must be able to enter a group name and some number of students What key pieces might you want on a wireframe for this site? (Take 2 minutes to draw it out) *Jesmine Gonzales, Assignment 3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Step 2: learn about HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Your_first_HTML_form#What_are_HTML_forms\" target=\"_blank\"><code>&lt;form&gt;</code></a></h2>\n          <p><code>&lt;form&gt;</code>s are a way to group objects that allow users to\n            input information into a web page to add interactivity. </p>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;form&gt;\n  &lt;input type=\"text\" size=\"10\" maxlength=\"8\" /&gt; Your name &lt;br /&gt;\n  &lt;input type=\"text\" size=\"16\" /&gt; Your favorite color &lt;br /&gt;\n  &lt;input type=\"number\" size=\"4\" min=0 /&gt; The airspeed wing velocity of a swallow\n  &lt;button type=\"submit\" value=\"submit\" /&gt;Submit&lt;button&gt;\n&lt;/form&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <form>\n                <input type=\"text\" size=\"10\" maxlength=\"8\"> Your name\n                <input type=\"text\" size=\"16\"> Your favorite color\n                <input type=\"number\" size=\"4\" min=\"0\"> The airspeed wing velocity of a swallow\n                <button type=\"submit\" value=\"submit\"></button>Submit\n              </form>\n            </div>\n            <p class=\"output-caption\">output</p>\n        </section>", "text": "Step 2: learn about HTML <form> <form>s are a way to group objects that allow users to input information into a web page to add interactivity. <form> <input type=\"text\" size=\"10\" maxlength=\"8\" /> Your name <br /> <input type=\"text\" size=\"16\" /> Your favorite color <br /> <input type=\"number\" size=\"4\" min=0 /> The airspeed wing velocity of a swallow <button type=\"submit\" value=\"submit\" />Submit<button></form> HTML Your name Your favorite color The airspeed wing velocity of a swallow Submit output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <section>\n            <h2>Table of HTML Form Elements</h2>\n            <p>\n              The following is a (partial) list of HTML form elements (with examples in the slides\n              <strong>below</strong>). For more\n              information on form elements, make sure to check\n              <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets\">MDN</a>.\n            </p>\n            <ul>\n              <li><a href=\"#buttons\"><code>&lt;button&gt;</code></a></li>\n              <li><a href=\"#input\"><code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#text-field\">Text Fields with <code>&lt;input&gt; </code></a></li>\n              <li><a href=\"#textarea\"><code>&lt;textarea&gt;</code></a></li>\n              <li><a href=\"#checkbox\">Checkboxes with <code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#radiobuttons\">Radio buttons: <code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#text-labels\">Text labels: <code>&lt;label&gt;</code></a></li>\n              <li><a href=\"#select-option\">Drop-down list: <code>&lt;select&gt;</code>,\n              <li><a href=\"#lists\">Using &lt;select&gt; For Lists</a></li>\n              <li><a href=\"#option-groups\">Option Groups <code>&lt;optgroup&gt;</code></a></li>\n            </a></li></ul>\n          </section>\n\n          <section id=\"buttons\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Text_input_fields\" target=\"_blank\"><code>&lt;button&gt;</code></a></h2>\n            <p>\n              Performs an action, usually submitting data or resetting a form to\n              the original values.\n            </p>\n              <pre><code class=\"hijs\" data-trim>&lt;button id=\"my-btn\"&gt;Click me!&lt;/button&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n              <div class=\"output\">\n                <button style=\"font-size: 18pt; margin-left: 5px;\" onclick=\"alert('Whooaaaaaaaa...');\">Click me!</button>\n                <p class=\"output-caption\">output</p>\n              </div>\n              <p>Button's text appears inside tag; can also contain images</p>\n              <p>We will learn how to make a button responsive in Module 2</p>\n            </section>\n\n          <section id=\"input\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Text_input_fields\" target=\"_blank\"><code>&lt;input&gt;</code></a></h2>\n            <pre>\n              <code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;!-- 'q' happens to be the\n              name of Google's required parameter --&gt;\n&lt;input type=\"text\" name=\"q\" value=\"Colbert Report\" /&gt;\n&lt;input type=\"submit\" value=\"Booyah!\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <script>\n              function sayHi() {\n                let name = document.getElementById(\"namebox\");\n                alert(\"Hello \" + name.value);\n              }\n            </script>\n            <div class=\"output\">\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"text\" id=\"namebox\" name=\"q\" value=\"Colbert Report\">\n              <button style=\"font-size: 14pt; margin-left: 5px;\" type=\"submit\" value=\"Booyah!\" onclick=\"sayHi();\">Say Hi!</button>\n\n            </div>\n            <p>Input element is used to create many UI controls (an inline element that <strong>must</strong> be self-closed</p>\n            <p><code>name</code> attribute specifies name of query parameter to pass to server</p>\n            <p><code>type</code> can be <code>button</code>, <code>checkbox</code>, <code>file</code>, <code>hidden</code>, <code>password</code>, <code>radio</code>, <code>reset</code>, <code>submit</code>, <code>text</code>, ...</p>\n            <p><code>value</code> attribute specifies control's initial text</p>\n          </section>\n\n          <section id=\"text-field\">\n            <h2><code>&lt;input&gt; Text Fields</code></h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;input type=\"text\" size=\"10\" maxlength=\"8\" /&gt; NetID &lt;br /&gt;\n&lt;input type=\"password\" size=\"16\" /&gt; Password\n&lt;input type=\"submit\" value=\"Log In!\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"text\" size=\"10\" maxlength=\"8\"> NetID <br>\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"password\" size=\"16\"> Password\n              <input type=\"submit\" value=\"Log In\">\n\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p><code>input</code> attributes: <code>disabled</code>, <code>maxLength</code>, <code>readonly</code>, <code>size</code>, <code>value</code></p>\n            <p><code>size</code> attribute controls onscreen width of text field</p>\n            <p><code>maxlength</code> limits how many characters the user is able to type into the field</p>\n          </section>\n\n          <section id=\"textarea\">\n            <h2>Text boxes: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Multi-line_text_fields%20%20target=\" _blank><code>&lt;textarea&gt;</code></a></h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;textarea rows=\"4\" cols=\"20\"&gt;\n  Type your comments here.\n&lt;/textarea&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <textarea rows=\"4\" cols=\"20\">Type your comments here.\n              </textarea>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Initial text is placed inside <code>textarea</code> tag (optional)</p>\n            <p>Required <code>rows</code> and <code>cols</code> attributes specify height/width in characters</p>\n            <p>optional <code>readonly</code> attribute means text cannot be modified</p>\n          </section>\n\n          <section id=\"checkbox\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Check_box\" target=\"_blank\">Checkboxes</a>: <code>&lt;input&gt;</code></h2>\n            <p class=\"term-definition\">yes/no choices that can be checked and unchecked (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;input type=\"checkbox\" name=\"lettuce\" /&gt; Lettuce\n&lt;input type=\"checkbox\" name=\"tomato\" checked=\"checked\" /&gt; Tomato\n&lt;input type=\"checkbox\" name=\"pickles\" checked=\"checked\" /&gt; Pickles</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <input type=\"checkbox\" name=\"lettuce\"> Lettuce\n              <input type=\"checkbox\" name=\"tomato\" checked> Tomato\n              <input type=\"checkbox\" name=\"pickles\" checked> Pickles\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>None, 1, or many checkboxes can be checked at same time</p>\n            <p>Use <code>checked=\"checked\"</code> attribute in HTML to initially check the box</p>\n          </section>\n\n          <section id=\"radiobuttons\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Radio_button\" target=\"_blank\">Radio\n              buttons</a>: <code>&lt;input&gt;</code></h2>\n            <p class=\"term-definition\">sets of mutually exclusive choices (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /&gt; Visa\n&lt;input type=\"radio\" name=\"cc\" value=\"mastercard\"/&gt; MasterCard\n&lt;input type=\"radio\" name=\"cc\" value=\"amex\"/&gt; American Express</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <input type=\"radio\" name=\"cc\" value=\"visa\" checked> Visa\n              <input type=\"radio\" name=\"cc\" value=\"mastercard\"> MasterCard\n              <input type=\"radio\" name=\"cc\" value=\"amex\"> American Express\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Grouped by name attribute (only one can be checked at a time)</p>\n            <p>Must specify a value for each one or else it will be sent as value on</p>\n          </section>\n\n          <section id=\"text-labels\">\n            <h2><a href=\"https://www.w3schools.com/tags/tag_label.asp\">Text labels</a>: <code>&lt;label&gt;</code></h2>\n            <pre><code class=\"hljs\" data-trim>&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /&gt; Visa\n&lt;/label&gt;\n&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"mastercard\"/&gt; MasterCard\n&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"amex\"/&gt; American Express\n&lt;/label&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"visa\" checked> Visa\n              </label>\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"mastercard\"> MasterCard\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"amex\"> American Express\n              </label>\n              <p class=\"output-caption\">output</p>\n            </label></div>\n            <p>Grouped by name attribute (only one can be checked at a time)</p>\n            <p>Must specify a value for each one or else it will be sent as value on</p>\n          </section>\n\n          <section id=\"select-option\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Drop-down_content\" target=\"_blank\">Drop-down list</a>: <code>&lt;select&gt;</code>,\n              <code>&lt;option&gt;</code>\n            </h2>\n            <p class=\"term-definition\">menus of choices that collapse and expand (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character\"&gt;\n  &lt;option&gt;Rob&lt;/option&gt;\n  &lt;option&gt;John&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;option&gt;Sansa&lt;/option&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\">\n                <option>Rob</option>\n                <option>John</option>\n                <option selected>Ayra</option>\n                <option>Sansa</option>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Option element represents each choice</p>\n            <p>Select optional attributes: disabled, multiple, size</p>\n            <p>Optional selected attribute sets which one is initially chosen</p>\n          </section>\n\n          <section id=\"lists\">\n            <h2>\n              Used &lt;select&gt; For <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Multiple_choice_select_box\" target=\"_blank\">Lists</a>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character[]\" size=\"3\" multiple=\"multiple\"&gt;\n  &lt;option&gt;Rob&lt;/option&gt;\n  &lt;option&gt;John&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;option&gt;Sansa&lt;/option&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\" size=\"3\" multiple>\n                <option>Rob</option>\n                <option>John</option>\n                <option selected>Ayra</option>\n                <option>Sansa</option>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Optional multiple attribute allows selecting multiple items with shift- or ctrl-click</p>\n            <p>Must declare parameter's name with <code>[]</code> if you allow multiple selections</p>\n            <p>Option tags can be set to be initially selected</p>\n          </section>\n\n          <section id=\"option-groups\">\n            <h2>Review\n              <a href=\"https://www.w3schools.com/tags/tag_optgroup.asp\">Option Groups</a>&lt;optgroup&gt;\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character\"&gt;\n  &lt;optgroup label=\"Major Characters\"&gt;\n    &lt;option&gt;John&lt;/option&gt;\n    &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;/optgroup&gt;\n  &lt;optgroup label=\"Minor Characters\"&gt;\n    &lt;option&gt;Rob&lt;/option&gt;\n    &lt;option&gt;Sansa&lt;/option&gt;\n  &lt;/optgroup&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\">\n                <optgroup label=\"Major Characters\">\n                  <option>John</option>\n                  <option selected>Ayra</option>\n                </optgroup>\n                <optgroup label=\"Minor Characters\">\n                  <option>Rob</option>\n                  <option>Sansa</option>\n                </optgroup>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>What should we do if we don't like the bold appearance of the optgroups?</p>\n          </section>\n\n        </section>", "text": "Table of HTML Form Elements The following is a (partial) list of HTML form elements (with examples in the slides below). For more information on form elements, make sure to check MDN. <button> <input> Text Fields with <input> <textarea> Checkboxes with <input> Radio buttons: <input> Text labels: <label> Drop-down list: <select>, Using <select> For Lists Option Groups <optgroup> <button> Performs an action, usually submitting data or resetting a form to the original values. <button id=\"my-btn\">Click me!</button> HTML Click me! output Button's text appears inside tag; can also contain images We will learn how to make a button responsive in Module 2 <input> <!-- 'q' happens to be the name of Google's required parameter --><input type=\"text\" name=\"q\" value=\"Colbert Report\" /><input type=\"submit\" value=\"Booyah!\" /> HTML function sayHi() { let name = document.getElementById(\"namebox\"); alert(\"Hello \" + name.value); } Say Hi! Input element is used to create many UI controls (an inline element that must be self-closed name attribute specifies name of query parameter to pass to server type can be button, checkbox, file, hidden, password, radio, reset, submit, text, ... value attribute specifies control's initial text <input> Text Fields <input type=\"text\" size=\"10\" maxlength=\"8\" /> NetID <br /><input type=\"password\" size=\"16\" /> Password<input type=\"submit\" value=\"Log In!\" /> HTML NetID Password output input attributes: disabled, maxLength, readonly, size, value size attribute controls onscreen width of text field maxlength limits how many characters the user is able to type into the field Text boxes: <textarea> <textarea rows=\"4\" cols=\"20\"> Type your comments here.</textarea> HTML Type your comments here. output Initial text is placed inside textarea tag (optional) Required rows and cols attributes specify height/width in characters optional readonly attribute means text cannot be modified Checkboxes: <input> yes/no choices that can be checked and unchecked (inline) <input type=\"checkbox\" name=\"lettuce\" /> Lettuce<input type=\"checkbox\" name=\"tomato\" checked=\"checked\" /> Tomato<input type=\"checkbox\" name=\"pickles\" checked=\"checked\" /> Pickles HTML Lettuce Tomato Pickles output None, 1, or many checkboxes can be checked at same time Use checked=\"checked\" attribute in HTML to initially check the box Radio buttons: <input> sets of mutually exclusive choices (inline) <input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /> Visa<input type=\"radio\" name=\"cc\" value=\"mastercard\"/> MasterCard<input type=\"radio\" name=\"cc\" value=\"amex\"/> American Express HTML Visa MasterCard American Express output Grouped by name attribute (only one can be checked at a time) Must specify a value for each one or else it will be sent as value on Text labels: <label> <label> <input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /> Visa</label><label> <input type=\"radio\" name=\"cc\" value=\"mastercard\"/> MasterCard<label> <input type=\"radio\" name=\"cc\" value=\"amex\"/> American Express</label> HTML Visa MasterCard American Express output Grouped by name attribute (only one can be checked at a time) Must specify a value for each one or else it will be sent as value on Drop-down list: <select>, <option> menus of choices that collapse and expand (inline) <select name=\"favorite-character\"> <option>Rob</option> <option>John</option> <option selected=\"selected\">Ayra</option> <option>Sansa</option></select> HTML Rob John Ayra Sansa output Option element represents each choice Select optional attributes: disabled, multiple, size Optional selected attribute sets which one is initially chosen Used <select> For Lists <select name=\"favorite-character[]\" size=\"3\" multiple=\"multiple\"> <option>Rob</option> <option>John</option> <option selected=\"selected\">Ayra</option> <option>Sansa</option></select> HTML Rob John Ayra Sansa output Optional multiple attribute allows selecting multiple items with shift- or ctrl-click Must declare parameter's name with [] if you allow multiple selections Option tags can be set to be initially selected Review Option Groups<optgroup> <select name=\"favorite-character\"> <optgroup label=\"Major Characters\"> <option>John</option> <option selected=\"selected\">Ayra</option> </optgroup> <optgroup label=\"Minor Characters\"> <option>Rob</option> <option>Sansa</option> </optgroup></select> HTML John Ayra Rob Sansa output What should we do if we don't like the bold appearance of the optgroups?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n            <h2>Table of HTML Form Elements</h2>\n            <p>\n              The following is a (partial) list of HTML form elements (with examples in the slides\n              <strong>below</strong>). For more\n              information on form elements, make sure to check\n              <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets\">MDN</a>.\n            </p>\n            <ul>\n              <li><a href=\"#buttons\"><code>&lt;button&gt;</code></a></li>\n              <li><a href=\"#input\"><code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#text-field\">Text Fields with <code>&lt;input&gt; </code></a></li>\n              <li><a href=\"#textarea\"><code>&lt;textarea&gt;</code></a></li>\n              <li><a href=\"#checkbox\">Checkboxes with <code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#radiobuttons\">Radio buttons: <code>&lt;input&gt;</code></a></li>\n              <li><a href=\"#text-labels\">Text labels: <code>&lt;label&gt;</code></a></li>\n              <li><a href=\"#select-option\">Drop-down list: <code>&lt;select&gt;</code>,\n              <li><a href=\"#lists\">Using &lt;select&gt; For Lists</a></li>\n              <li><a href=\"#option-groups\">Option Groups <code>&lt;optgroup&gt;</code></a></li>\n            </a></li></ul>\n          </section>", "text": "Table of HTML Form Elements The following is a (partial) list of HTML form elements (with examples in the slides below). For more information on form elements, make sure to check MDN. <button> <input> Text Fields with <input> <textarea> Checkboxes with <input> Radio buttons: <input> Text labels: <label> Drop-down list: <select>, Using <select> For Lists Option Groups <optgroup>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"buttons\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Text_input_fields\" target=\"_blank\"><code>&lt;button&gt;</code></a></h2>\n            <p>\n              Performs an action, usually submitting data or resetting a form to\n              the original values.\n            </p>\n              <pre><code class=\"hijs\" data-trim>&lt;button id=\"my-btn\"&gt;Click me!&lt;/button&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n              <div class=\"output\">\n                <button style=\"font-size: 18pt; margin-left: 5px;\" onclick=\"alert('Whooaaaaaaaa...');\">Click me!</button>\n                <p class=\"output-caption\">output</p>\n              </div>\n              <p>Button's text appears inside tag; can also contain images</p>\n              <p>We will learn how to make a button responsive in Module 2</p>\n            </section>", "text": "<button> Performs an action, usually submitting data or resetting a form to the original values. <button id=\"my-btn\">Click me!</button> HTML Click me! output Button's text appears inside tag; can also contain images We will learn how to make a button responsive in Module 2", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"input\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Text_input_fields\" target=\"_blank\"><code>&lt;input&gt;</code></a></h2>\n            <pre>\n              <code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;!-- 'q' happens to be the\n              name of Google's required parameter --&gt;\n&lt;input type=\"text\" name=\"q\" value=\"Colbert Report\" /&gt;\n&lt;input type=\"submit\" value=\"Booyah!\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <script>\n              function sayHi() {\n                let name = document.getElementById(\"namebox\");\n                alert(\"Hello \" + name.value);\n              }\n            </script>\n            <div class=\"output\">\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"text\" id=\"namebox\" name=\"q\" value=\"Colbert Report\">\n              <button style=\"font-size: 14pt; margin-left: 5px;\" type=\"submit\" value=\"Booyah!\" onclick=\"sayHi();\">Say Hi!</button>\n\n            </div>\n            <p>Input element is used to create many UI controls (an inline element that <strong>must</strong> be self-closed</p>\n            <p><code>name</code> attribute specifies name of query parameter to pass to server</p>\n            <p><code>type</code> can be <code>button</code>, <code>checkbox</code>, <code>file</code>, <code>hidden</code>, <code>password</code>, <code>radio</code>, <code>reset</code>, <code>submit</code>, <code>text</code>, ...</p>\n            <p><code>value</code> attribute specifies control's initial text</p>\n          </section>", "text": "<input> <!-- 'q' happens to be the name of Google's required parameter --><input type=\"text\" name=\"q\" value=\"Colbert Report\" /><input type=\"submit\" value=\"Booyah!\" /> HTML function sayHi() { let name = document.getElementById(\"namebox\"); alert(\"Hello \" + name.value); } Say Hi! Input element is used to create many UI controls (an inline element that must be self-closed name attribute specifies name of query parameter to pass to server type can be button, checkbox, file, hidden, password, radio, reset, submit, text, ... value attribute specifies control's initial text", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"text-field\">\n            <h2><code>&lt;input&gt; Text Fields</code></h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;input type=\"text\" size=\"10\" maxlength=\"8\" /&gt; NetID &lt;br /&gt;\n&lt;input type=\"password\" size=\"16\" /&gt; Password\n&lt;input type=\"submit\" value=\"Log In!\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"text\" size=\"10\" maxlength=\"8\"> NetID <br>\n              <input style=\"font-size: 14pt; margin-left: 5px;\" type=\"password\" size=\"16\"> Password\n              <input type=\"submit\" value=\"Log In\">\n\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p><code>input</code> attributes: <code>disabled</code>, <code>maxLength</code>, <code>readonly</code>, <code>size</code>, <code>value</code></p>\n            <p><code>size</code> attribute controls onscreen width of text field</p>\n            <p><code>maxlength</code> limits how many characters the user is able to type into the field</p>\n          </section>", "text": "<input> Text Fields <input type=\"text\" size=\"10\" maxlength=\"8\" /> NetID <br /><input type=\"password\" size=\"16\" /> Password<input type=\"submit\" value=\"Log In!\" /> HTML NetID Password output input attributes: disabled, maxLength, readonly, size, value size attribute controls onscreen width of text field maxlength limits how many characters the user is able to type into the field", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"textarea\">\n            <h2>Text boxes: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Multi-line_text_fields%20%20target=\" _blank><code>&lt;textarea&gt;</code></a></h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt\">&lt;textarea rows=\"4\" cols=\"20\"&gt;\n  Type your comments here.\n&lt;/textarea&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <textarea rows=\"4\" cols=\"20\">Type your comments here.\n              </textarea>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Initial text is placed inside <code>textarea</code> tag (optional)</p>\n            <p>Required <code>rows</code> and <code>cols</code> attributes specify height/width in characters</p>\n            <p>optional <code>readonly</code> attribute means text cannot be modified</p>\n          </section>", "text": "Text boxes: <textarea> <textarea rows=\"4\" cols=\"20\"> Type your comments here.</textarea> HTML Type your comments here. output Initial text is placed inside textarea tag (optional) Required rows and cols attributes specify height/width in characters optional readonly attribute means text cannot be modified", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"checkbox\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Check_box\" target=\"_blank\">Checkboxes</a>: <code>&lt;input&gt;</code></h2>\n            <p class=\"term-definition\">yes/no choices that can be checked and unchecked (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;input type=\"checkbox\" name=\"lettuce\" /&gt; Lettuce\n&lt;input type=\"checkbox\" name=\"tomato\" checked=\"checked\" /&gt; Tomato\n&lt;input type=\"checkbox\" name=\"pickles\" checked=\"checked\" /&gt; Pickles</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <input type=\"checkbox\" name=\"lettuce\"> Lettuce\n              <input type=\"checkbox\" name=\"tomato\" checked> Tomato\n              <input type=\"checkbox\" name=\"pickles\" checked> Pickles\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>None, 1, or many checkboxes can be checked at same time</p>\n            <p>Use <code>checked=\"checked\"</code> attribute in HTML to initially check the box</p>\n          </section>", "text": "Checkboxes: <input> yes/no choices that can be checked and unchecked (inline) <input type=\"checkbox\" name=\"lettuce\" /> Lettuce<input type=\"checkbox\" name=\"tomato\" checked=\"checked\" /> Tomato<input type=\"checkbox\" name=\"pickles\" checked=\"checked\" /> Pickles HTML Lettuce Tomato Pickles output None, 1, or many checkboxes can be checked at same time Use checked=\"checked\" attribute in HTML to initially check the box", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"radiobuttons\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Radio_button\" target=\"_blank\">Radio\n              buttons</a>: <code>&lt;input&gt;</code></h2>\n            <p class=\"term-definition\">sets of mutually exclusive choices (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /&gt; Visa\n&lt;input type=\"radio\" name=\"cc\" value=\"mastercard\"/&gt; MasterCard\n&lt;input type=\"radio\" name=\"cc\" value=\"amex\"/&gt; American Express</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <input type=\"radio\" name=\"cc\" value=\"visa\" checked> Visa\n              <input type=\"radio\" name=\"cc\" value=\"mastercard\"> MasterCard\n              <input type=\"radio\" name=\"cc\" value=\"amex\"> American Express\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Grouped by name attribute (only one can be checked at a time)</p>\n            <p>Must specify a value for each one or else it will be sent as value on</p>\n          </section>", "text": "Radio buttons: <input> sets of mutually exclusive choices (inline) <input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /> Visa<input type=\"radio\" name=\"cc\" value=\"mastercard\"/> MasterCard<input type=\"radio\" name=\"cc\" value=\"amex\"/> American Express HTML Visa MasterCard American Express output Grouped by name attribute (only one can be checked at a time) Must specify a value for each one or else it will be sent as value on", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"text-labels\">\n            <h2><a href=\"https://www.w3schools.com/tags/tag_label.asp\">Text labels</a>: <code>&lt;label&gt;</code></h2>\n            <pre><code class=\"hljs\" data-trim>&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /&gt; Visa\n&lt;/label&gt;\n&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"mastercard\"/&gt; MasterCard\n&lt;label&gt;\n  &lt;input type=\"radio\" name=\"cc\" value=\"amex\"/&gt; American Express\n&lt;/label&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"visa\" checked> Visa\n              </label>\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"mastercard\"> MasterCard\n              <label>\n                <input type=\"radio\" name=\"cc\" value=\"amex\"> American Express\n              </label>\n              <p class=\"output-caption\">output</p>\n            </label></div>\n            <p>Grouped by name attribute (only one can be checked at a time)</p>\n            <p>Must specify a value for each one or else it will be sent as value on</p>\n          </section>", "text": "Text labels: <label> <label> <input type=\"radio\" name=\"cc\" value=\"visa\" checked=\"checked\" /> Visa</label><label> <input type=\"radio\" name=\"cc\" value=\"mastercard\"/> MasterCard<label> <input type=\"radio\" name=\"cc\" value=\"amex\"/> American Express</label> HTML Visa MasterCard American Express output Grouped by name attribute (only one can be checked at a time) Must specify a value for each one or else it will be sent as value on", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"select-option\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Drop-down_content\" target=\"_blank\">Drop-down list</a>: <code>&lt;select&gt;</code>,\n              <code>&lt;option&gt;</code>\n            </h2>\n            <p class=\"term-definition\">menus of choices that collapse and expand (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character\"&gt;\n  &lt;option&gt;Rob&lt;/option&gt;\n  &lt;option&gt;John&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;option&gt;Sansa&lt;/option&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\">\n                <option>Rob</option>\n                <option>John</option>\n                <option selected>Ayra</option>\n                <option>Sansa</option>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Option element represents each choice</p>\n            <p>Select optional attributes: disabled, multiple, size</p>\n            <p>Optional selected attribute sets which one is initially chosen</p>\n          </section>", "text": "Drop-down list: <select>, <option> menus of choices that collapse and expand (inline) <select name=\"favorite-character\"> <option>Rob</option> <option>John</option> <option selected=\"selected\">Ayra</option> <option>Sansa</option></select> HTML Rob John Ayra Sansa output Option element represents each choice Select optional attributes: disabled, multiple, size Optional selected attribute sets which one is initially chosen", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"lists\">\n            <h2>\n              Used &lt;select&gt; For <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Multiple_choice_select_box\" target=\"_blank\">Lists</a>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character[]\" size=\"3\" multiple=\"multiple\"&gt;\n  &lt;option&gt;Rob&lt;/option&gt;\n  &lt;option&gt;John&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;option&gt;Sansa&lt;/option&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\" size=\"3\" multiple>\n                <option>Rob</option>\n                <option>John</option>\n                <option selected>Ayra</option>\n                <option>Sansa</option>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Optional multiple attribute allows selecting multiple items with shift- or ctrl-click</p>\n            <p>Must declare parameter's name with <code>[]</code> if you allow multiple selections</p>\n            <p>Option tags can be set to be initially selected</p>\n          </section>", "text": "Used <select> For Lists <select name=\"favorite-character[]\" size=\"3\" multiple=\"multiple\"> <option>Rob</option> <option>John</option> <option selected=\"selected\">Ayra</option> <option>Sansa</option></select> HTML Rob John Ayra Sansa output Optional multiple attribute allows selecting multiple items with shift- or ctrl-click Must declare parameter's name with [] if you allow multiple selections Option tags can be set to be initially selected", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>The DOM</h2>\n          <p>\n            A tree-shaped structure built out of all of the HTML elements in a\n            page\n          </p>\n        </section>", "text": "The DOM A tree-shaped structure built out of all of the HTML elements in a page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n            <h2>Visualizing the DOM Tree</h2>\n            <div class=\"side-by-side\">\n                <div style=\"width: 50%\">\n                    <pre><code class=\"hljs\" data-trim>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt; ... &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt; ... &lt;/h1&gt;\n    &lt;div&gt;\n      &lt;p&gt; ... &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n                    <p class=\"code-caption\">HTML</p>\n                </div>\n                <img src=\"../img/dom.png\" style=\"width: 30%; height: 100%;\" alt=\"DOM\">\n            </div>\n            <p>A very useful representation to use when choosing CSS selectors and understanding\n            style inheritance. We will be revisiting the DOM when we introduce JavaScript!</p>\n        </section>", "text": "Visualizing the DOM Tree <html> <head> <title> ... </title> </head> <body> <h1> ... </h1> <div> <p> ... </p> </div> </body></html> HTML A very useful representation to use when choosing CSS selectors and understanding style inheritance. We will be revisiting the DOM when we introduce JavaScript!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec04-css-ii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h2>Lecture 1: Introductions, the Internet, and Basic HTML</h2>\n        </section>", "text": "CSE 154 Lecture 1: Introductions, the Internet, and Basic HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"agenda\">\n          <h2>Today's Agenda</h2>\n          <p>Introductions</p>\n          <p>Course Overview</p>\n          <p>Syllabus</p>\n          <p>The Internet</p>\n          <p>HTML</p>\n        </section>", "text": "Today's Agenda Introductions Course Overview Syllabus The Internet HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>What This Class is About:</h2>\n          <p>An overview of how the Internet works</p>\n          <p class=\"fragment\">What is a website and how to create one from scratch</p>\n          <p class=\"space-right fragment\">...with interactivity through client- and server-side programs</p>\n          <p class=\"space-right fragment\">...with up to five different languages</p>\n          <p class=\"space-right fragment\">...by searching through online documentation</p>\n          <p class=\"space-right fragment\">...and by following detailed specifications</p>\n          <p class=\"fragment\">The end result? A portfolio for you to show!</p>\n        </section>", "text": "What This Class is About: An overview of how the Internet works What is a website and how to create one from scratch ...with interactivity through client- and server-side programs ...with up to five different languages ...by searching through online documentation ...and by following detailed specifications The end result? A portfolio for you to show!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"instructors\">\n          <h1>Your Instructors and TAs</h1>\n        </section>", "text": "Your Instructors and TAs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"lauren\">\n          <h2>Instructor: Lauren Bricker</h2>\n          <div class=\"side-by-side\">\n            <div style=\"width: 30%;\">\n              <img class=\"simpleimg\" style=\"margin-top: 30px\" src=\"img/lauren.jpg\" width=\"300px\" alt=\"Lauren's UW Mug shot\">\n              <img class=\"simpleimg\" src=\"img/path.gif\" alt=\"Lauren work path\" width=\"300px\" style=\" margin:20px 20px 0px 0px;\" align=\"left\">\n            </div>\n            <div style=\"width: 65%; margin-left: 20px;\">\n                <p>Faculty in the Paul G. Allen School of Computer Science And Engineering</p>\n                <p>Other roles include </p>\n                <ul class=\"no-bullets\">\n                  <li>K-12 outreach</li>\n                  <li>STARS instructor</li>\n                  <li>Code.org facilitator</li>\n                </ul>\n                <p>Path to this role was not very traditional</p>\n                <p>\n                  ... theoretical math... Boeing... UW PhD in CSE... lots of jobs at small companies...\n                  ... two kids... two cats... Lakeside HS... Code.org... here!\n                </p>\n            </div>\n          </div>\n        </section>", "text": "Instructor: Lauren Bricker Faculty in the Paul G. Allen School of Computer Science And Engineering Other roles include K-12 outreach STARS instructor Code.org facilitator Path to this role was not very traditional ... theoretical math... Boeing... UW PhD in CSE... lots of jobs at small companies... ... two kids... two cats... Lakeside HS... Code.org... here!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"melissa\">\n          <h2>Instructor: Melissa Hovik</h2>\n          <div class=\"side-by-side\">\n            <div style=\"width: 30%;\">\n              <img class=\"simpleimg\" style=\"margin-top: 30px\" src=\"../../staff/photos/melissa-hovik.jpg\" alt=\"Melissa's mug shot\">\n            </div>\n            <div style=\"width: 65%; margin-left: 20px;\">\n                <p>Fifth year masters student in the Paul G. Allen School of Computer Science And Engineering</p>\n                <p>\n                  Has been a TA'd over 17 classes since Spring 2015 (CSE 143, 154, 190,\n                  311, 332, and 341)\n                </p>\n                <p>\n                  Is pursuing CS education fulltime after her studies, and is <em>very</em> excited\n                  to be co-teaching CSE 154 this quarter!\n                </p>\n                <p>\n                  Has a dog named Mowgli.\n                </p>\n            </div>\n          </div>\n        </section>", "text": "Instructor: Melissa Hovik Fifth year masters student in the Paul G. Allen School of Computer Science And Engineering Has been a TA'd over 17 classes since Spring 2015 (CSE 143, 154, 190, 311, 332, and 341) Is pursuing CS education fulltime after her studies, and is very excited to be co-teaching CSE 154 this quarter! Has a dog named Mowgli.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Our First JavaScript Statement: <code>console.log</code></h2>\n          <p>\n            Used to output values to the browser console, most often used to debug JS programs.\n          </p>\n          <pre><code class=\"hljs\" data-trim>console.log(\"message\");</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n\n          <pre><code class=\"hljs\" data-trim>console.log(\"The answer is: \" + 42);\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n\n          <p>\n            <img src=\"../img/console-log.png\" alt=\"console.log example\">\n          </p>\n        </section>", "text": "Our First JavaScript Statement: console.log Used to output values to the browser console, most often used to debug JS programs. console.log(\"message\"); JS (template) console.log(\"The answer is: \" + 42); JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>The <code>alert</code> Function</h2>\n          <pre><code class=\"hijs\" data-trim>alert(\"message\");\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <pre>\n            <code class=\"hijs\" data-trim>alert(\"IE6 detected. Suck-mode enabled.\");\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <div class=\"output\">\n            <img src=\"../img/alert.png\" alt=\"never use internet explorer\">\n          </div>\n          <p>\n            A JS function that pops up a dialog box with a message - not ideal in practice, but\n            sometimes a recommended debugging tool when first learning JS. <strong>Don't include\n            alert statements in any of your assignments.</strong>\n          </p>\n        </section>", "text": "The alert Function alert(\"message\"); JS (template) alert(\"IE6 detected. Suck-mode enabled.\"); JS (example) A JS function that pops up a dialog box with a message - not ideal in practice, but sometimes a recommended debugging tool when first learning JS. Don't include alert statements in any of your assignments.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Comments (<em>similar to Java</em>)</h2>\n          <pre><code class=\"hijs\" data-trim>// single-line comment\n\n/**\n * multi-line\n * comment\n */\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Identical to Java's comment syntax</p>\n          <p>Recall: 3 comment syntaxes\n            </p><ul>\n              <li><code>HTML: &lt;!-- comment --&gt;</code></li>\n              <li><code>CSS/Java/JS: /* comment */</code></li>\n              <li><code>Java/JS: // comment</code></li>\n            </ul>\n          \n          <p>\n          For functions and program files, we'll use JSDoc commenting with <code>@param</code> and\n          <code>@returns</code>, which is covered\n            in the Code Quality Guide <a href=\"https://courses.cs.washington.edu/courses/cse154/codequalityguide/_site/javascript/#comments-function-header\">here</a>.\n          </p>\n        </section>", "text": "Comments (similar to Java) // single-line comment/** * multi-line * comment */ JS Identical to Java's comment syntax Recall: 3 comment syntaxes HTML: <!-- comment --> CSS/Java/JS: /* comment */ Java/JS: // comment For functions and program files, we'll use JSDoc commenting with @param and @returns, which is covered in the Code Quality Guide here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\">Variables</a></h2>\n          <pre><code class=\"hijs\" data-trim>let name = expression;\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <pre><code class=\"hijs\" data-trim>let level = 23;\nlet accuracyRate = 0.99;\nlet name = \"Pikachu\";\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p>Variables are declared with the <code>let</code> keyword (case-sensitive).\n          You may also see <code>var</code> used instead of <code>let</code> - this is an\n          older convention with\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variable_scope\" target=\"_blank\">weaker scope</a> - <strong>DO NOT USE <code>var</code> anywhere</strong></p>\n          <p><a href=\"https://courses.cs.washington.edu/courses/cse154/codequalityguide/_site/javascript/#naming-descriptive\">CQG</a>: Use camelCasing for variable (and function) names</p>\n          </section>", "text": "Variables let name = expression; JS (template) let level = 23;let accuracyRate = 0.99;let name = \"Pikachu\"; JS (example) Variables are declared with the let keyword (case-sensitive). You may also see var used instead of let - this is an older convention with weaker scope - DO NOT USE var anywhere CQG: Use camelCasing for variable (and function) names", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n            <h2>\"Types\" in JavaScript</h2>\n          <pre><code class=\"hijs\" data-trim>let level = 23; // Number\nlet accuracyRate = 0.99; // Number\nlet name = \"Pikachu\"; // String\nlet temps = [55, 60, 57.5]; // Array\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p>Types are not specified, but JS <em>does</em> have types (\"loosely-typed\")</p>\n            <ul>\n            <li><code>Number</code>, <code>Boolean</code>, <code>String</code>,\n                <code>Array</code>, <code>Object</code>, <code>Function</code>, <code>Null</code>,\n                <code>Undefined</code></li>\n            <li>Can find out a variable's type by calling <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a>,\n            but usually this is poor practice (why?)</li>\n            <li>Note: Type conversion <a href=\"https://stackoverflow.com/questions/7202157/why-does-return-the-string-10\">isn't always what you expect... </a></li>\n          </ul>\n        </section>", "text": "\"Types\" in JavaScript let level = 23; // Numberlet accuracyRate = 0.99; // Numberlet name = \"Pikachu\"; // Stringlet temps = [55, 60, 57.5]; // Array JS (example) Types are not specified, but JS does have types (\"loosely-typed\") Number, Boolean, String, Array, Object, Function, Null, Undefined Can find out a variable's type by calling typeof, but usually this is poor practice (why?) Note: Type conversion isn't always what you expect...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>A Note about Declaring Types in JavaScript</h2>\n          <p>\n          If you've programmed in a <em>statically-typed</em> language like Java, you will recall\n          that when declaring variables, you <strong>must</strong> specify their type which must\n          always stay the same.\n          </p>\n          <pre><code class=\"hljs\" data-trim>boolean isValid = \"hello!\"; // error</code></pre>\n          <p class=\"code-caption\">Java</p>\n          <p>In a <em>dynamically-typed</em> language like JavaScript, you don't need to specify the\n          type (just use <code>let</code> or <code>const</code>) and you <em>may</em> change the type the variable refers to later in execution.\n          </p>\n          <pre><code class=\"hljs\" data-trim>let isValid = true; // no error\nisValid = \"hello!\";\nisValid = 1;\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n            This may seem to imply fewer errors in JS, but it's not uncommon to run into subtle\n            (silent) bugs in your JS programs as a result!\n          </p>\n        </section>", "text": "A Note about Declaring Types in JavaScript If you've programmed in a statically-typed language like Java, you will recall that when declaring variables, you must specify their type which must always stay the same. boolean isValid = \"hello!\"; // error Java In a dynamically-typed language like JavaScript, you don't need to specify the type (just use let or const) and you may change the type the variable refers to later in execution. let isValid = true; // no errorisValid = \"hello!\";isValid = 1; JS This may seem to imply fewer errors in JS, but it's not uncommon to run into subtle (silent) bugs in your JS programs as a result!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>\"Constants\" in JavaScript</h2>\n          <p>\n            Since ECMA6, JavaScript has a special keyword to declare \"constant\" values. You should\n            use these over the <code>let</code> keyword for variables that are not intended to ever\n            be updated (similar to constants in Java).\n          </p>\n          <p>\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/codequalityguide/_site/javascript/#variables-const\">CGQ</a>: Use <code>UPPER_CASING</code> naming conventions to\n            denote <code>const</code> in JS.\n          </p>\n          <pre><code class=\"hljs\" data-trim>let month = 12;\nmonth = 1; // no error\n\nconst COOLEST_CLASS = \"CSE154\";\nCOOLEST_CLASS = \"clazz\"; // error\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>\n            These can help avoid some of the bugs\n            mentioned on the previous slide (an error occurs when trying to reassign a\n            <code>const</code>).\n          </p>\n        </section>", "text": "\"Constants\" in JavaScript Since ECMA6, JavaScript has a special keyword to declare \"constant\" values. You should use these over the let keyword for variables that are not intended to ever be updated (similar to constants in Java). CGQ: Use UPPER_CASING naming conventions to denote const in JS. let month = 12;month = 1; // no errorconst COOLEST_CLASS = \"CSE154\";COOLEST_CLASS = \"clazz\"; // error JS These can help avoid some of the bugs mentioned on the previous slide (an error occurs when trying to reassign a const).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Number Type</h2>\n          <pre><code class=\"hijs\" data-trim>let enrollment = 99;\nlet medianGrade = 2.8;\nlet credits = 5 + 4 + (2 * 3);</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Integers and real numbers are the same type (no <code>int</code> vs.\n          <code>double</code>). All numbers in JS are floating point numbers.\n          </p><p>Same operators: <code>+ - * / % ++ -- = += -= *= /= %=</code></p>\n          <p>Similar <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">precedence</a> to Java</p>\n          <p>Many operators auto-convert types: <code>\"2\" * 3</code> is <code>6</code></p>\n          <p><a href=\"https://www.codestepbystep.com/problem/view/javascript/basics/numberTypes\" target=\"_blank\">Practice</a>!</p>\n        </section>", "text": "Number Type let enrollment = 99;let medianGrade = 2.8;let credits = 5 + 4 + (2 * 3); JS Integers and real numbers are the same type (no int vs. double). All numbers in JS are floating point numbers. Same operators: + - * / % ++ -- = += -= *= /= %= Similar precedence to Java Many operators auto-convert types: \"2\" * 3 is 6 Practice!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>String type</h2>\n          <pre><code class=\"hijs\" data-trim>let nickName = \"Sparky O'Sparkz\";                  // \"Sparky O'Sparks\"\nlet fName = nickName.substring(0, s.indexOf(\" \")); // \"Sparky\"\nlet len = nickName.length;                         // 15\nlet name = 'Pikachu';                              // can use \"\" or ''</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Methods:\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\"><code>charAt</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>charCodeAt</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharcode\"><code>fromCharCode</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>indexOf</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>lastIndexOf</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\"><code>substring</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>toLowerCase</code></a>,\n            <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>toUpperCase</code></a>\n          </p>\n        </section>", "text": "String type let nickName = \"Sparky O'Sparkz\"; // \"Sparky O'Sparks\"let fName = nickName.substring(0, s.indexOf(\" \")); // \"Sparky\"let len = nickName.length; // 15let name = 'Pikachu'; // can use \"\" or '' JS Methods: charAt, charCodeAt, fromCharCode, indexOf, lastIndexOf, replace, split, substring, toLowerCase, toUpperCase", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section id=\"text-styles\">\n            <h2>CSS properties for text</h2>\n            <table>\n              <tr><th><strong>Property</strong></th><th><strong>Description</strong></th></tr>\n              <tr>\n                <td>\n                  <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-align\">text-align</a></code>\n                </td>\n                <td>alignment of text within its element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration\">text-decoration</a></code>\n                </td>\n                <td>decorations such as underlining</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-indent\">text-indent</a></code>\n                </td>\n                <td>indents the first letter of each paragraph</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow\">text-shadow</a></code>\n                </td>\n                <td>a colored shadow near an existing piece of text (CSS3)</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform\">text-transform</a></code>\n                </td>\n                <td>controls capitalization of text</td>\n              </tr>\n              <tr>\n                <td>\n                  <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\">line-height</a></code>,\n                  <code><a target=\"_blank\" href=\"https://www.w3schools.com/cssref/pr_text_word-spacing.asp\">word-spacing</a></code>,\n                  <code><a target=\"_blank\" href=\"https://www.w3schools.com/cssref/pr_text_letter-spacing.asp\">letter-spacing</a></code>\n                </td>\n                <td>gaps between the various portions of the text</td>\n                </tr><tr>\n                  <td colspan=\"2\" style=\"text-align: right;\">\n                    <a href=\"https://www.w3schools.com/css/css_text.asp\" target=\"_blank\">\n                      Complete list of text properties\n                    </a>\n                  </td>\n                </tr>\n              \n            </table>\n            <p>Dive down for more examples below!</p>\n          </section>", "text": "CSS properties for text PropertyDescription text-align alignment of text within its element text-decoration decorations such as underlining text-indent indents the first letter of each paragraph text-shadow a colored shadow near an existing piece of text (CSS3) text-transform controls capitalization of text line-height, word-spacing, letter-spacing gaps between the various portions of the text Complete list of text properties Dive down for more examples below!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"text-align\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-align.asp\" target=\"_blank\">text-align</a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>blockquote { text-align: justify; }\nh2 { text-align: center; }</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <h3 style=\"text-align: center;\">The Emperor's Quote</h3>\n              <blockquote style=\"text-align: justify; font-size: 20pt; box-shadow: none;\">\n                [TO LUKE SKYWALKER] The alliance... will die.\n                As will your friends. Good, I can feel your anger. I am unarmed.\n                Take your weapon. Strike me down with all of your hatred and your\n                journey towards the dark side will be complete.\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              Can be <code>left</code>, <code>right</code>, <code>center</code>,\n              or <code>justify</code> (which widens all full lines of the element so that they occupy\n              its entire width)\n            </p>\n          </section>", "text": "text-align blockquote { text-align: justify; }h2 { text-align: center; } CSS The Emperor's Quote [TO LUKE SKYWALKER] The alliance... will die. As will your friends. Good, I can feel your anger. I am unarmed. Take your weapon. Strike me down with all of your hatred and your journey towards the dark side will be complete. output Can be left, right, center, or justify (which widens all full lines of the element so that they occupy its entire width)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"text-decoration\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-decoration.asp\" target=\"_blank\">\n                  text-decoration\n                </a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p { text-decoration: underline; }\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-decoration: underline\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n              Can also be <span style=\"text-decoration:overline\">overline</span>,\n              <span style=\"text-decoration: line-through\">line through</span>,\n              <span style=\"text-decoration: blink\">blink</span> or none\n            </p>\n            <p>Effects can be combined:</p>\n            <pre><code class=\"hijs\" data-trim>p { text-decoration: overline underline; }</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-decoration: overline underline; padding-top: 5px\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "text-decoration p { text-decoration: underline; } CSS This paragraph uses the style above output Can also be overline, line through, blink or none Effects can be combined: p { text-decoration: overline underline; } CSS This paragraph uses the style above output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"text-shadow\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/css3_pr_text-shadow.asp\" target=\"_blank\">text-shadow</a>\n              </code>\n            </h2>\n            <pre><code class=\"hijs\" data-trim>p {\n  font-weight: bold;\n  text-shadow: -2px 5px gray;\n}\n</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p style=\"text-shadow: -2px 5px gray; font-weight: bold\">\n                This paragraph uses the style above\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p><code>shadow</code> is specified as an X-offset, a Y-offset, or an optional color</p>\n            <p>Tip: Use the Chrome Inspector to help!</p>\n          </section>", "text": "text-shadow p { font-weight: bold; text-shadow: -2px 5px gray;} CSS This paragraph uses the style above output shadow is specified as an X-offset, a Y-offset, or an optional color Tip: Use the Chrome Inspector to help!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"text-transform\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_text_text-transform.asp\" target=\"_blank\">text-transform</a>\n              </code>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  I &lt;span&gt;just&lt;/span&gt; just &lt;em&gt;CAN'T&lt;/em&gt; &lt;strong&gt;make up my mind!&lt;/strong&gt;\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <pre><code class=\"hijs\" data-trim>em {\n  text-transform: lowercase;\n}\n\nspan {\n  text-transform: capitalize;\n}\n\nstrong {\n  text-transform: uppercase;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\">\n              <p>\n                I <span style=\"text-transform: capitalize\">just</span> just\n                <em style=\"color: #3f3f3f; text-transform:lowercase\">CAN'T</em>\n                <strong style=\"text-transform: uppercase\">make up my mind!</strong>\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "text-transform <p> I <span>just</span> just <em>CAN'T</em> <strong>make up my mind!</strong></p> HTML em { text-transform: lowercase;}span { text-transform: capitalize;}strong { text-transform: uppercase;} CSS I just just CAN'T make up my mind! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"background-styles\">\n            <h2>CSS Properties for Backgrounds</h2>\n            <table>\n              <tr>\n                <th><strong>Property</strong></th>\n                <th><strong>Description</strong></th>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/pr_background-color.asp\" target=\"_blank\">background-color</a>\n                  </code>\n                </td>\n                <td>color to fill background</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/pr_background-image.asp\" target=\"_blank\">background-image</a>\n                  </code>\n                </td>\n                <td>image to place in background</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/pr_background-position.asp\" target=\"_blank\">background-position</a>\n                  </code>\n                </td>\n                <td>placement of background image within element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/pr_background-repeat.asp\" target=\"_blank\">background-repeat</a>\n                  </code>\n                </td>\n                <td>how background image should be repeated</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/pr_background-attachment.asp\" target=\"_blank\">background-attachment</a>\n                  </code>\n                </td>\n                <td>whether background image scrolls with page</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/css3_pr_background-size.asp\" target=\"_blank\">background-size</a>\n                  </code>\n                </td>\n                <td>how large the background appears behind the element</td>\n              </tr>\n              <tr>\n                <td>\n                  <code>\n                    <a href=\"https://www.w3schools.com/cssref/css3_pr_background.asp\" target=\"_blank\">background</a>\n                  </code>\n                </td>\n                <td>shorthand to set all backgroud properties</td>\n              </tr>\n              <tr>\n                <td colspan=\"2\" style=\"text-align: right;\">\n                  <a href=\"https://www.w3schools.com/cssref/css3_pr_background.asp\">More background properties</a>\n                </td>\n              </tr>\n            </table>\n            <p>Dive down for more examples below!</p>\n          </section>", "text": "CSS Properties for Backgrounds Property Description background-color color to fill background background-image image to place in background background-position placement of background image within element background-repeat how background image should be repeated background-attachment whether background image scrolls with page background-size how large the background appears behind the element background shorthand to set all backgroud properties More background properties Dive down for more examples below!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"background-image\">\n            <h2><code><a href=\"https://www.w3schools.com/cssref/pr_background-image.asp\" target=\"_blank\">background-image</a></code></h2>\n            <pre><code class=\"hijs\" data-trim>body {\n  background-image: url(\"paw.jpg\");\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            <div class=\"output\" style=\"background-size: 200px 200px; background-image: url('../img/paw.jpg')\">\n              <p>This is the first paragraph</p>\n              <p>This is the second paragraph...<br>It occupies 2 lines</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Background image/color fills the element's content area</p>\n          </section>", "text": "background-image body { background-image: url(\"paw.jpg\");} CSS This is the first paragraph This is the second paragraph...It occupies 2 lines output Background image/color fills the element's content area", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"background-repeat\">\n            <h2><code><a href=\"https://www.w3schools.com/cssref/pr_background-repeat.asp\" target=\"_blank\">background-repeat</a></code></h2>\n           <pre><code class=\"hijs\" data-trim>body {\n  background-image: url(\"paw.jpg\");\n  background-repeat: no-repeat;\n}</code></pre>\n           <p class=\"code-caption\">CSS</p>\n           <div class=\"output\" style=\"background-size: 200px 200px; background-repeat: no-repeat; background-image: url('../img/paw.jpg')\">\n             <p>This is the first paragraph</p>\n             <p>This is the second paragraph...<br>It occupies 2 lines</p>\n             <p class=\"output-caption\">output</p>\n           </div>\n           <p>Can be <code>repeat</code> (default), <code>repeat-x</code>,\n           <code>repeat-y</code>, or <code>no-repeat</code></p>\n          </section>", "text": "background-repeat body { background-image: url(\"paw.jpg\"); background-repeat: no-repeat;} CSS This is the first paragraph This is the second paragraph...It occupies 2 lines output Can be repeat (default), repeat-x, repeat-y, or no-repeat", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section id=\"background-position\">\n            <h2>\n              <code>\n                <a href=\"https://www.w3schools.com/cssref/pr_background-position.asp\" target=\"_blank\">background-position</a>\n              </code>\n            </h2>\n            <pre class=\"no-margin\"><code class=\"hijs\" data-trim>body {\n  background-image: url(\"paw.jpg\");\n  background-repeat: no-repeat;\n  background-position: 370px 20px;\n}</code></pre>\n          <p class=\"code-caption\">CSS</p>\n          <div class=\"output\">\n            <div style=\"background-image: url('../img/paw.jpg'); background-repeat: no-repeat; background-size: 200px 200px; background-position: 370px 20px;\">\n              <p>This is the first paragraph</p>\n              <p>This is the second paragraph...<br> It occupies 2 lines</p>\n            </div>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            Value consists of two tokens, each of which can be <code>top</code>,\n            <code>left</code>, <code>right</code>, <code>bottom</code>,\n            <code>center</code>, a percentage, or a length value in px, pt, etc.\n          </p>\n          <p>Value can be negative to shift left/up by a given amount</p>\n        </section>", "text": "background-position body { background-image: url(\"paw.jpg\"); background-repeat: no-repeat; background-position: 370px 20px;} CSS This is the first paragraph This is the second paragraph... It occupies 2 lines output Value consists of two tokens, each of which can be top, left, right, bottom, center, a percentage, or a length value in px, pt, etc. Value can be negative to shift left/up by a given amount", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n        <section>\n          <h2>Last Reminders for CP1 This Weekend</h2>\n          <p>Use the W3C validators for HTML and CSS (copy/paste option is recommended)</p>\n          <p>Review the Code Quality Guide for HTML/CSS, and check the spec carefully to make sure\n          you've met all of the requirements</p>\n          <p><strong>Remember to add, commit, push and then click the Turn-In button in order to\n            submit your final version</strong></p>\n          <p>Use Piazza to ask questions</p>\n          <p>Have fun and be creative!</p>\n        </section>\n      </section>", "text": "Last Reminders for CP1 This Weekend Use the W3C validators for HTML and CSS (copy/paste option is recommended) Review the Code Quality Guide for HTML/CSS, and check the spec carefully to make sure you've met all of the requirements Remember to add, commit, push and then click the Turn-In button in order to submit your final version Use Piazza to ask questions Have fun and be creative!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n          <h2>Last Reminders for CP1 This Weekend</h2>\n          <p>Use the W3C validators for HTML and CSS (copy/paste option is recommended)</p>\n          <p>Review the Code Quality Guide for HTML/CSS, and check the spec carefully to make sure\n          you've met all of the requirements</p>\n          <p><strong>Remember to add, commit, push and then click the Turn-In button in order to\n            submit your final version</strong></p>\n          <p>Use Piazza to ask questions</p>\n          <p>Have fun and be creative!</p>\n        </section>", "text": "Last Reminders for CP1 This Weekend Use the W3C validators for HTML and CSS (copy/paste option is recommended) Review the Code Quality Guide for HTML/CSS, and check the spec carefully to make sure you've met all of the requirements Remember to add, commit, push and then click the Turn-In button in order to submit your final version Use Piazza to ask questions Have fun and be creative!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec03-intro-css/"},
{"html": "<section>\n\t\t\t\t\t<h1>CSE 154</h1>\n\t\t\t\t\t<h3>Lecture 9: More DOM/Events in JS</h3>\n        </section>", "text": "CSE 154\t\t\t\t\tLecture 9: More DOM/Events in JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Back to Layout</h2>\n          <p>\n            The DOM is important to have as a model when thinking about layout. Many\n            techniques rely on the idea of \"parents\" and \"children\" elements, and how they\n            are laid out relative to another.\n          </p>\n          <p>\n            Visualizing the document tree can save you a <em>lot of headache</em> as you're writing\n            CSS to achieve desired layout.\n          </p>\n        </section>", "text": "Back to Layout The DOM is important to have as a model when thinking about layout. Many techniques rely on the idea of \"parents\" and \"children\" elements, and how they are laid out relative to another. Visualizing the document tree can save you a lot of headache as you're writing CSS to achieve desired layout.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Layout Techniques in CSS</h2>\n            <ul>\n              <li class=\"fragment\">Appropriate use of Block vs. Inline elements and\n                nesting in HTML</li>\n              <li class=\"fragment\">Box Model (margin/padding/border)</li>\n              <li class=\"fragment\">Flex</li>\n              <li class=\"fragment\">Positioning</li>\n              <li class=\"fragment\">Float (less common today, but still good to know)</li>\n            </ul>\n            <p class=\"fragment\">\n              These are what we expect you to focus on, roughly\n              in order of prioritization\n            </p>\n        </section>", "text": "Layout Techniques in CSS Appropriate use of Block vs. Inline elements and nesting in HTML Box Model (margin/padding/border) Flex Positioning Float (less common today, but still good to know) These are what we expect you to focus on, roughly in order of prioritization", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Layout Strategies</h2>\n            <h3>Today: Practice different layout strategies and understand tradeoffs</h3>\n            <p>\n              Our toy page (starter HTML <a href=\"examples/starter.html\" target=\"_blank\">here</a>):\n            </p>\n            <pre><code class=\"hljs\" data-trim>&lt;div id=\"boxes-container\"&gt;\n  &lt;div&gt;0&lt;/div&gt;\n  &lt;div&gt;1&lt;/div&gt;\n  &lt;div&gt;2&lt;/div&gt;\n  &lt;div&gt;3&lt;/div&gt;\n  &lt;div&gt;4&lt;/div&gt;\n  &lt;div&gt;5&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n          <p>Question: What does this look like on a webpage by default?</p>\n          </section>", "text": "Layout Strategies Today: Practice different layout strategies and understand tradeoffs Our toy page (starter HTML here): <div id=\"boxes-container\"> <div>0</div> <div>1</div> <div>2</div> <div>3</div> <div>4</div> <div>5</div></div> Question: What does this look like on a webpage by default?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h3>Uh... Why are we playing with boxes?</h3>\n            <p>When learning CSS layout, you'll find there are many ways to layout your\n            pages.\n            </p>\n            <p>\"Boxes\" are great to practice with for comparing different layout\n            strategies and better understanding the box model.\n            </p>\n            <p>We are working with text\n            inside of each div to additionally demonstrate the difference between block vs. inline\n            layout.</p>\n            <p>\n            In practice, it's useful to:\n            </p><ol>\n              <li>Treat page elements as boxes/rectangle areas to\n            figure out the page layout, and then\n              </li>\n              <li>Focus on more specific CSS styling</li>\n            </ol>\n          </section>", "text": "Uh... Why are we playing with boxes? When learning CSS layout, you'll find there are many ways to layout your pages. \"Boxes\" are great to practice with for comparing different layout strategies and better understanding the box model. We are working with text inside of each div to additionally demonstrate the difference between block vs. inline layout. In practice, it's useful to: Treat page elements as boxes/rectangle areas to figure out the page layout, and then Focus on more specific CSS styling", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Exercise 1: Box Model</h2>\n            <div class=\"side-by-side\" style=\"align-items: center;\">\n              <a href=\"examples/boxes1.html\" style=\"margin-right: 20px\" width=\"40%\" target=\"_blank\">\n              <img src=\"images/boxes1.png\" alt=\"Box Model\">\n              </a>\n                <ul class=\"font-20pt\">\n                  <li>Give each of the 6 boxes and the outermost container a 2pt\n                solid black border.</li>\n                  <li>Each box should be 80px wide/tall. </li>\n                <li>The outermost container of boxes should have a gray background and have a width\n                50% of the page.</li>\n                <li>Even-valued boxes should have a darkgreen\n                  background - odd ones should have a gray background.</li>\n                <li>Font size of numbers should be 20pt.</li>\n                </ul>\n              </div>\n            <p class=\"right-align\">\n              <a href=\"examples/boxes1.html\" target=\"_blank\">Solution</a> (click source code for HTML/CSS):\n            </p>\n          </section>", "text": "Exercise 1: Box Model Give each of the 6 boxes and the outermost container a 2pt solid black border. Each box should be 80px wide/tall. The outermost container of boxes should have a gray background and have a width 50% of the page. Even-valued boxes should have a darkgreen background - odd ones should have a gray background. Font size of numbers should be 20pt. Solution (click source code for HTML/CSS):", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Exercise 2: Border Radius, Margin/Padding</h2>\n            <div class=\"side-by-side\" style=\"align-items: flex-start;\">\n              <div style=\"width: 100%\">\n              <a href=\"examples/boxes2.html\" target=\"_blank\">\n                <img src=\"images/boxes2.png\" alt=\"Box Model\">\n              </a>\n              </div>\n            <p class=\"space-left\">Make the outermost container have a 5px border radius on all sides with\n            10px of spacing separating its top/bottom borders from the borders of the\n            inner boxes.\n            </p>\n            </div>\n            <p class=\"right-align\">\n              <a href=\"examples/boxes2.html\" target=\"_blank\">Solution</a>\n            </p>\n            </section>", "text": "Exercise 2: Border Radius, Margin/Padding Make the outermost container have a 5px border radius on all sides with 10px of spacing separating its top/bottom borders from the borders of the inner boxes. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Exercise 3: Text Alignment</h2>\n            <div class=\"side-by-side\" style=\"align-items: flex-start;\">\n              <a href=\"examples/boxes3.html\" width=\"40%;\" target=\"_blank\">\n              <img src=\"images/boxes3.png\" alt=\"Box Model\">\n              </a>\n            <p>Make text horizontally centered in each box.</p>\n            </div>\n            <p class=\"right-align\">\n              <a href=\"examples/boxes3.html\" target=\"_blank\">Solution</a>\n            </p>\n\n          </section>", "text": "Exercise 3: Text Alignment Make text horizontally centered in each box. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Exercise 4: Float Layout</h2>\n              <a href=\"examples/boxes4.html\" target=\"_blank\">\n            <img src=\"images/boxes4.png\" width=\"100%;\" style=\"margin-right: 10px\" alt=\"Box Model\">\n              </a>\n            <p>Make boxes into a row instead of a column</p>\n            <p>\n              One possible solution: \"Float\" the boxes left or right.\n            </p>\n            <p class=\"fragment\">What happened when we just add float: left?</p>\n            <p class=\"fragment\">Hint: Use <code>overflow: auto</code> to ensure container adjusts height if\n      contents \"overflow\" outside of the borders.</p>\n            <p class=\"fragment right-align\">\n              <a href=\"examples/boxes4.html\" target=\"_blank\">Solution</a>\n            </p>\n          </section>", "text": "Exercise 4: Float Layout Make boxes into a row instead of a column One possible solution: \"Float\" the boxes left or right. What happened when we just add float: left? Hint: Use overflow: auto to ensure container adjusts height if contents \"overflow\" outside of the borders. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Back to Boxes...</h2>\n            <p>Exercise 5: Center the box container on the page and change width to 75%.</p>\n              <a href=\"examples/boxes5.html\" target=\"_blank\">\n            <img src=\"images/boxes5.png\" width=\"100%;\" style=\"margin-right: 10px\" alt=\"Box Model\">\n              </a>\n            <p>Can we float? Unfortunately, can't center float element cleanly.</p>\n            <p>Idea: Use block property that the container spans width of the page. But if\n            the container is 75% of the page width... where does that extra spacing come\n            from?</p>\n            <p class=\"fragment\">For block elements that have a specified width, you can center\n            them by setting left and right margins to <code>auto</code>.\n            </p><p class=\"fragment right-align\">\n              <a href=\"examples/boxes5.html\" target=\"_blank\">Solution</a>\n            </p>\n          </section>", "text": "Back to Boxes... Exercise 5: Center the box container on the page and change width to 75%. Can we float? Unfortunately, can't center float element cleanly. Idea: Use block property that the container spans width of the page. But if the container is 75% of the page width... where does that extra spacing come from? For block elements that have a specified width, you can center them by setting left and right margins to auto. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Distributing Boxes Evenly in a Container</h2>\n            <p>Exercise 6: Distribute boxes across box container evenly (equal space\n            between each box).</p>\n              <a href=\"examples/boxes6.html\" target=\"_blank\">\n            <img src=\"images/boxes6.png\" width=\"100%;\" style=\"margin-right: 10px\" alt=\"Box Model\">\n              </a>\n            <p class=\"fragment\">... what should the margins be set to now?</p>\n          </section>", "text": "Distributing Boxes Evenly in a Container Exercise 6: Distribute boxes across box container evenly (equal space between each box). ... what should the margins be set to now?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h3>Flexbox</h3>\n            <p>\n              Flexbox is a set of CSS properties for aligning block level content.\n            </p>\n\n            <p>\n              Flexbox defines two types of content - \"containers\" and \"items\".\n            </p>\n\n            <p>\n              Anything directly nested inside of a flex container becomes a flex item.\n            </p>\n\n            <p>\n              Various properties on the container determine how its items are layed out.\n            </p>\n          </section>", "text": "Flexbox Flexbox is a set of CSS properties for aligning block level content. Flexbox defines two types of content - \"containers\" and \"items\". Anything directly nested inside of a flex container becomes a flex item. Various properties on the container determine how its items are layed out.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h3>Basic properties for the flex container</h3>\n            <dl style=\"font-size: 60%;\">\n              <dt><code>display: flex;</code> </dt>\n              <dd>makes an element a \"container\", items inside automatically become \"items\"</dd>\n\n              <dt><code>justify-content: flex-end; (flex-start, space-around,...)</code></dt>\n              <dd>indicates how to space the items inside the container along the main axis</dd>\n\n              <dt><code>align-items: flex-end; (flex-start, center, baseline,...)</code></dt>\n              <dd>indicates how to space the items inside the container along the cross axis</dd>\n\n              <dt><code>flex-direction: row; (column)</code></dt>\n              <dd>indicates whether the container flows horizontally or vertically</dd>\n            </dl>\n          </section>", "text": "Basic properties for the flex container display: flex; makes an element a \"container\", items inside automatically become \"items\" justify-content: flex-end; (flex-start, space-around,...) indicates how to space the items inside the container along the main axis align-items: flex-end; (flex-start, center, baseline,...) indicates how to space the items inside the container along the cross axis flex-direction: row; (column) indicates whether the container flows horizontally or vertically", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h3>Basic properties for the flex items</h3>\n            <ul>\n              <li>It is less common to add flex properties to flex items, but on occasion you will need to.</li>\n            </ul>\n            <dl style=\"font-size: 60%;\">\n              <dt><code>flex-basis: 20%; (3em, 50px,...)</code></dt>\n              <dd>\n                indicates the default size of an element before the extra space is distributed\n                among the items\n              </dd>\n              <dt><code>align-self: flex-end; (flex-start, center, stretch,...)</code></dt>\n              <dd>indicates where to place this specific item along the cross axis</dd>\n            </dl>\n          </section>", "text": "Basic properties for the flex items It is less common to add flex properties to flex items, but on occasion you will need to. flex-basis: 20%; (3em, 50px,...) indicates the default size of an element before the extra space is distributed among the items align-self: flex-end; (flex-start, center, stretch,...) indicates where to place this specific item along the cross axis", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\r\n          <h2><a href=\"http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/\">Universal Design Principles</a></h2>\r\n          <ol>\r\n            <li>Equitable use</li>\r\n            <li>Flexibilty in use</li>\r\n            <li>Simple and intuitive</li>\r\n            <li>Perceptible information</li>\r\n            <li>Tolerance for error</li>\r\n            <li>Low physical effort</li>\r\n            <li>Size and space for approach and use</li>\r\n          </ol>\r\n        </section>", "text": "Universal Design Principles\r \r Equitable use\r Flexibilty in use\r Simple and intuitive\r Perceptible information\r Tolerance for error\r Low physical effort\r Size and space for approach and use", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2><a href=\"https://www.eecs.harvard.edu/~kgajos/papers/2011/wobbrock11abd.pdf\">Ability Based Design</a></h2>\r\n          <p>Instead of focusing on the abilities that someone lacks (<em>dis</em>-ability), and trying to compensate</p>\r\n          <p>Focus on making systems work with what abilities people have</p>\r\n          <p>Don't make people adapt to the system <br><img src=\"../img/Typing-Aid-250x277.jpg\"></p>\r\n          <p>Make the system adapt to the abilities of the user</p>\r\n        </section>", "text": "Ability Based Design\r Instead of focusing on the abilities that someone lacks (dis-ability), and trying to compensate\r Focus on making systems work with what abilities people have\r Don't make people adapt to the system \r Make the system adapt to the abilities of the user", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n          <h2><a href=\"http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/\">Ability Based Design Principles</a></h2>\r\n          <ol>\r\n            <li>Focus on <strong>Ability</strong>, not dis-ability.</li>\r\n            <li><strong>Accountability</strong>: If user has difficulty, system changes.</li>\r\n            <li><strong>Adaptation</strong>: Interface may be self-adaptive or user-adaptable.</li>\r\n            <li><strong>Transparency</strong>: Give user awareness of adaptations</li>\r\n            <li><strong>Performance</strong>: System may monitor users' performance</li>\r\n            <li><strong>Context</strong>: System may sense context</li>\r\n            <li><strong>Commodity</strong>: System may be affordable</li>\r\n          </ol>\r\n          <p>First two are required, other five are recommended</p>\r\n        </section>", "text": "Ability Based Design Principles\r \r Focus on Ability, not dis-ability.\r Accountability: If user has difficulty, system changes.\r Adaptation: Interface may be self-adaptive or user-adaptable.\r Transparency: Give user awareness of adaptations\r Performance: System may monitor users' performance\r Context: System may sense context\r Commodity: System may be affordable\r \r First two are required, other five are recommended", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Tools and Resources</h2>\r\n        <p>From the A11y Project</p>\r\n        <ul class=\"medium-small-font\">\r\n          <li>\r\n            A really great <a href=\"https://a11yproject.com/resources\" onkeyup=\"\">compendium of\r\n            resources</a>\r\n          </li>\r\n          <li>\r\n            An <a href=\"https://ghc-2018-web-a11y.github.io\">accessibility workshop</a> from GHC'18\r\n          </li>\r\n        </ul>\r\n        <p>Tools</p>\r\n        <ul class=\"medium-small-font\">\r\n          <li>Web Accessability Evaluation Tool:\r\n            <a href=\"http://wave.webaim.org/\">http://wave.webaim.org/</a>\r\n          </li>\r\n          <li>Color Schemes:\r\n            <a href=\"http://colorbrewer2.org/\">http://colorbrewer2.org/</a>\r\n          </li>\r\n          <li>Color blindness checker:\r\n            <a href=\"http://www.color-blindness.com/coblis-color-blindness-simulator/\">http://www.color-blindness.com/coblis-color-blindness-simulator/</a>\r\n          </li>\r\n          <li>Text readability:\r\n            <a href=\"http://juicystudio.com/services/readability.php\">http://juicystudio.com/services/readability.php</a>\r\n          </li>\r\n        </ul>\r\n        <p>Resources</p>\r\n        <ul class=\"medium-small-font\">\r\n          <li>Web Content Accessibility Guidelines (something to know about when you apply for jobs):\r\n            <a href=\"https://www.w3.org/WAI/intro/wcag\">https://www.w3.org/WAI/intro/wcag</a>\r\n          </li>\r\n          <li>Teach Access Tutorial (general background and covers an important standard called ARIA).\r\n            <a href=\"http://teachaccess.org/initiatives/tutorial/\">http://teachaccess.org/initiatives/tutorial/</a>\r\n          </li>\r\n          <li>Web design and development course by AccessComputing\r\n            <a href=\"http://www.washington.edu/accesscomputing/webd2/\">http://www.washington.edu/accesscomputing/webd2/</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"https://www.youtube.com/watch?v=HtTyRajRuyY&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g&amp;index=30\">A11ycast </a> -\r\n              YouTube Videos to teach developers how accessibility works.\r\n        </li></ul>\r\n      </section>", "text": "Tools and Resources\r From the A11y Project\r \r \r A really great compendium of\r resources\r \r \r An accessibility workshop from GHC'18\r \r \r Tools\r \r Web Accessability Evaluation Tool:\r http://wave.webaim.org/\r \r Color Schemes:\r http://colorbrewer2.org/\r \r Color blindness checker:\r http://www.color-blindness.com/coblis-color-blindness-simulator/\r \r Text readability:\r http://juicystudio.com/services/readability.php\r \r \r Resources\r \r Web Content Accessibility Guidelines (something to know about when you apply for jobs):\r https://www.w3.org/WAI/intro/wcag\r \r Teach Access Tutorial (general background and covers an important standard called ARIA).\r http://teachaccess.org/initiatives/tutorial/\r \r Web design and development course by AccessComputing\r http://www.washington.edu/accesscomputing/webd2/\r \r \r A11ycast -\r YouTube Videos to teach developers how accessibility works.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h1>Back to HTML</h1>\r\n      </section>", "text": "Back to HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Semantic Tags</h2>\r\n        <h3>Discuss</h3>\r\n        <p>What did you learn from the readings?</p>\r\n        <ul>\r\n          <li>Name some of the HTML5 semantic tags</li>\r\n          <li>Why would we want to use a semantic tag for structuring our HTML document?</li>\r\n          <li>Did you see any semantic tags in your aboutme.html?</li>\r\n          <li>\r\n            Did you see anything in your aboutme.html that would help make your site\r\n            accessible?\r\n          </li>\r\n        </ul>\r\n      </section>", "text": "Semantic Tags\r Discuss\r What did you learn from the readings?\r \r Name some of the HTML5 semantic tags\r Why would we want to use a semantic tag for structuring our HTML document?\r Did you see any semantic tags in your aboutme.html?\r \r Did you see anything in your aboutme.html that would help make your site\r accessible?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2><code>article</code> vs <code>section</code></h2>\r\n        <p>We get this question a LOT</p>\r\n        <p>Others ask this <a href=\"https://stackoverflow.com/questions/7549561/section-vs-article-html5\">too</a> </p>\r\n        <p>Here are two resources to help you:</p>\r\n        <ul>\r\n          <li>\r\n            <a href=\"https://iandevlin.com/blog/2011/04/html5/html5-section-or-article/\">Ian Devlin article</a>\r\n            (a course reading)\r\n          </li>\r\n          <li>\r\n            <a href=\"https://www.youtube.com/watch?v=swWeWesZVZU\">Youtube video</a>\r\n          </li>\r\n        </ul>\r\n        <p>Basically: <strong>Article should be standalone content. Section is not.</strong></p>\r\n        <p>\r\n          <strong>And remember:</strong> <code>div</code> div has no semantic meaning,\r\n          should only be added for selecting content in CSS/JS, and should be your \"last resort\"\r\n        </p>\r\n      </section>", "text": "article vs section\r We get this question a LOT\r Others ask this too \r Here are two resources to help you:\r \r \r Ian Devlin article\r (a course reading)\r \r \r Youtube video\r \r \r Basically: Article should be standalone content. Section is not.\r \r And remember: div div has no semantic meaning,\r should only be added for selecting content in CSS/JS, and should be your \"last resort\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Accessible Web Design Principles</h2>\r\n        <ul>\r\n          <li>Use document structure (Semantic) tags: e.g., <code>&lt;article&gt;</code>,\r\n            <code>&lt;strong&gt;</code></li>\r\n          <li>Don't use deprecated style tags like <code>&lt;b&gt;</code></li>\r\n          <li>Provide metadata: e.g., <code>&lt;html lang=\"en\"&gt;</code></li>\r\n          <li>Provide alternatives: e.g., img alt tag, video captions, transcripts, allow both keyboard and mouse input</li>\r\n          <li>Avoid directional text: eg. \"the diagram on the right shows...\"</li>\r\n        </ul>\r\n        <p>Note: These design principles help in other ways as well</p>\r\n        <ul>\r\n          <li>Captions allow people to watch your video without turning sound on.</li>\r\n          <li>Transcripts help people find your page through Google.</li>\r\n          <li>Structure and metadata help programs understand your page.</li>\r\n        </ul>\r\n      </section>", "text": "Accessible Web Design Principles\r \r Use document structure (Semantic) tags: e.g., <article>,\r <strong>\r Don't use deprecated style tags like <b>\r Provide metadata: e.g., <html lang=\"en\">\r Provide alternatives: e.g., img alt tag, video captions, transcripts, allow both keyboard and mouse input\r Avoid directional text: eg. \"the diagram on the right shows...\"\r \r Note: These design principles help in other ways as well\r \r Captions allow people to watch your video without turning sound on.\r Transcripts help people find your page through Google.\r Structure and metadata help programs understand your page.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Use alt attributes on images</h2>\r\n\r\n        <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\r\n        <p class=\"code-caption\">HTML</p>\r\n        <div class=\"output\">\r\n          <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\r\n        <p class=\"output-caption\">output</p>\r\n        </div>\r\n\r\n        <p>The <code>src</code> attribute specifies the image URL</p>\r\n        <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\r\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\">improves the web page\r\n          experience for all (if the image doesn't load)\r\n      </a></p></section>", "text": "Use alt attributes on images\r\r <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" />\r HTML\r \r \r output\r \r\r The src attribute specifies the image URL\r HTML5 also requires an alt attribute describing the image, which\r improves the web page\r experience for all (if the image doesn't load)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Images and Links</h2>\r\n\r\n        <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\r\n&lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\r\n     title=\"dumbo!\" /&gt;\r\n&lt;/a&gt;</code></pre>\r\n        <p class=\"code-caption\">HTML</p>\r\n\r\n        <div class=\"output\">\r\n          <a href=\"http://en.wikipedia.org/wiki/Koala\">\r\n            <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\r\n          </a>\r\n          <p class=\"output-caption\">output</p>\r\n        </div>\r\n\r\n        <p><strong>What's the title attribute?</strong></p>\r\n        <ul>\r\n          <li title=\"See? Even this bullet right here.\">\r\n            <code>title</code> attribute is an optional tooltip (on ANY element)\r\n          </li>\r\n          <li title=\"Wah wahhhn programming is hard :(\">\r\n            BUT the <code>title</code> attribute doesn't always work well for mobile and accessibility, so its usage and future are debated\r\n          </li>\r\n        </ul>\r\n      </section>", "text": "Images and Links\r\r <a href=\"http://en.wikipedia.org/wiki/Koala/\">\r<img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\r title=\"dumbo!\" />\r</a>\r HTML\r\r \r \r \r \r output\r \r\r What's the title attribute?\r \r \r title attribute is an optional tooltip (on ANY element)\r \r \r BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>A note about images that are links</h2>\r\n          <div>\r\n            <p>White space usually doesn't matter in HTML pages, except apparently here</p>\r\n            <img src=\"../img/imagelinktest.png\" alt=\"image link test results\">\r\n            <p>Preview of <a href=\"lecture2source/imagelinktest.html\">imagelinktext.html</a></p>\r\n          </div>\r\n      </section>", "text": "A note about images that are links\r \r White space usually doesn't matter in HTML pages, except apparently here\r \r Preview of imagelinktext.html", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Review: Websites</h2>\r\n        <div>\r\n          <div style=\"width:25%;  position:absolute; left:0%;\">\r\n            <p class=\"fragment\"><strong>Content</strong></p>\r\n            <div class=\"fragment\">\r\n              <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\r\n              <p class=\"medium-small-font\">Words and images</p>\r\n            </div>\r\n          </div>\r\n          <div style=\"width:25%;  position:absolute; left:25%;\">\r\n            <p class=\"fragment\"><strong>Structure</strong></p>\r\n            <div class=\"fragment\">\r\n              <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\r\n              <p class=\"medium-small-font\">HTML</p>\r\n            </div>\r\n          </div>\r\n          <div style=\"width:25%;  position:absolute; left:50%;\">\r\n            <p class=\"fragment\"><strong>Style</strong></p>\r\n            <div class=\"fragment\">\r\n              <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n              <p class=\"medium-small-font\">CSS</p>\r\n            </div>\r\n          </div>\r\n          <div style=\"width:23.2%;  position:absolute; left:75%;\">\r\n            <p class=\"fragment\"><strong>Behavior</strong></p>\r\n            <div class=\"fragment\">\r\n              <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\r\n              <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>", "text": "Review: Websites\r \r \r Content\r \r \r Words and images\r \r \r \r Structure\r \r \r HTML\r \r \r \r Style\r \r \r CSS\r \r \r \r Behavior\r \r \r Javascript & Server programs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <div class=\"side-by-side\">\r\n          <div style=\"width:25%;  position:absolute; left: 5%;\">\r\n            <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\r\n          </div>\r\n          <div>\r\n            <h1 style=\"margin-top: 400px\">CSS (preview)</h1>\r\n          </div>\r\n        </div>\r\n      </section>", "text": "CSS (preview)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>The Bad Way to Produce Styles</h2>\r\n        <pre>\r\n            <code class=\"hljs\" data-trim>&lt;p&gt;\r\n  &lt;font face=\"Arial\"&gt;Welcome to Greasy Joe's.&lt;/font&gt;\r\n  You will &lt;b&gt;never&lt;/b&gt;, &lt;i&gt;ever&lt;/i&gt;, &lt;u&gt;EVER&lt;/u&gt; beat\r\n  &lt;font size=\"+4\" color=\"red\"&gt;OUR&lt;/font&gt; prices!\r\n&lt;/p&gt;</code></pre>\r\n        <p class=\"code-caption\">HTML</p>\r\n        <div class=\"output\">\r\n          <p>\r\n            <font face=\"Arial\">Welcome to Greasy Joe's.</font>\r\n            You will <b>never</b>, <i>ever</i>, <u>EVER</u> beat\r\n            <font size=\"+4\" color=\"red\">OUR</font> prices!\r\n          </p>\r\n          <p class=\"output-caption\">output</p>\r\n        </div>\r\n        <p>\r\n          Tags such as <code>b, i, u</code> and <code>font</code> are discouraged in strict HTML</p>\r\n        <p>Why is this bad?</p>\r\n        <ul class=\"medium-small-font\">\r\n          <li class=\"fragment\">Accessibility</li>\r\n          <li class=\"fragment\">Code organization</li>\r\n          <li class=\"fragment\">Changing style easily</li>\r\n        </ul>\r\n      </section>", "text": "The Bad Way to Produce Styles\r \r <p>\r <font face=\"Arial\">Welcome to Greasy Joe's.</font>\r You will <b>never</b>, <i>ever</i>, <u>EVER</u> beat\r <font size=\"+4\" color=\"red\">OUR</font> prices!\r</p>\r HTML\r \r \r Welcome to Greasy Joe's.\r You will never, ever, EVER beat\r OUR prices!\r \r output\r \r \r Tags such as b, i, u and font are discouraged in strict HTML\r Why is this bad?\r \r Accessibility\r Code organization\r Changing style easily", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Cascading Style Sheets (CSS):\r\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\">&lt;link&gt;</a>\r\n        </h2>\r\n        <pre><code class=\"hljs\" data-trim>&lt;head&gt;\r\n  ...\r\n  &lt;link href=\"filename\" rel=\"stylesheet\" /&gt;\r\n  ...\r\n&lt;/head&gt;</code></pre>\r\n        <p class=\"code-caption\">HTML (template)</p>\r\n\r\n        <pre><code class=\"hljs\" data-trim>&lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;</code></pre>\r\n        <p class=\"code-caption\">HTML (example)</p>\r\n        <p>\r\n          <strong>CSS</strong> describes the appearance and layout of information on a\r\n          web page (as opposed to HTML, which describes the content)\r\n        </p>\r\n        <p>\r\n          Can be embedded in HTML or placed into separate <code>.css</code>\r\n          file (preferred)\r\n        </p>\r\n      </section>", "text": "Cascading Style Sheets (CSS):\r <link>\r \r <head>\r ...\r <link href=\"filename\" rel=\"stylesheet\" />\r ...\r</head>\r HTML (template)\r\r <link href=\"style.css\" rel=\"stylesheet\" />\r HTML (example)\r \r CSS describes the appearance and layout of information on a\r web page (as opposed to HTML, which describes the content)\r \r \r Can be embedded in HTML or placed into separate .css\r file (preferred)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\r\n        <h2>Basic CSS Rule Syntax</h2>\r\n        <pre><code class=\"hljs\" data-trim>selector {\r\n  property: value;\r\n  property: value;\r\n  ...\r\n  property: value;\r\n}</code></pre>\r\n        <p class=\"code-caption\">CSS (template)</p>\r\n\r\n        <pre><code class=\"hijs\" data-trim>p {\r\n  color: red;\r\n  font-family: sans-serif;\r\n} </code></pre>\r\n        <p class=\"code-caption\">CSS (example)</p>\r\n        <p>A CSS file consists of one or more rules</p>\r\n        <p>\r\n          A rule selector specifies HTML element(s) and applies style properties\r\n        </p>\r\n        <ul>\r\n          <li>A selector of <code>*</code> selects all elements</li>\r\n        </ul>\r\n      </section>", "text": "Basic CSS Rule Syntax\r selector {\r property: value;\r property: value;\r ...\r property: value;\r}\r CSS (template)\r\r p {\r color: red;\r font-family: sans-serif;\r} \r CSS (example)\r A CSS file consists of one or more rules\r \r A rule selector specifies HTML element(s) and applies style properties\r \r \r A selector of * selects all elements", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec02-html-css/"},
{"html": "<section>\n          <h2>Accessing Properties of a DOM object (Example)</h2>\n          <div class=\"code-example\">\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;See our &lt;a href=\"sale.html\" id=\"saleslink\"&gt;Sales&lt;/a&gt; today!&lt;/p&gt;\n&lt;img id=\"icon\" src=\"images/shop.jpg\" alt=\"Shop Icon\" /&gt;\n&lt;p class=\"photo user-upload\"&gt;Beauty.&lt;/p&gt;\n</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </div>\n\n          <div class=\"code-example\">\n            <pre><code class=\"hljs\" data-trim>let theIcon = document.getElementById(\"icon\");\nlet theLink = document.getElementById(\"saleslink\");\nlet paragraphs = document.querySelector(\"p\");\n</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n\n          <table class=\"standard\">\n            <tbody>\n              <tr class=\"evenrow\">\n                <th>Property</th>\n                <th>Description</th>\n                <th>Example</th>\n              </tr>\n\n              <tr>\n                  <td>\n                      <code>tagName</code>\n                  </td>\n                  <td>\n                      element's HTML tag\n                  </td>\n                  <td>\n                      <code>icon.tagName</code> is <code>\"IMG\"</code>\n                  </td>\n              </tr>\n\n              <tr class=\"evenrow\">\n                  <td>\n                      <code>className</code>\n                  </td>\n                  <td>\n                      CSS classes of element\n                  </td>\n                  <td>\n                      <code>caption.className</code> is <code>\"photo user-upload\"</code>\n                  </td>\n              </tr>\n\n              <tr class=\"evenrow\">\n                  <td>\n                      <code>src</code>\n                  </td>\n                  <td>\n                      URL target of an image\n                  </td>\n                  <td>\n                      <code>icon.src</code> is <code>\"images/shop.jpg\"</code>\n                  </td>\n              </tr>\n\n              <tr>\n                  <td><code>href</code></td>\n                  <td>\n                      URL target of a link\n                  </td>\n                  <td>\n                      <code>theLink.href</code> is <code>\"sale.html\"</code>\n                  </td>\n              </tr>\n            </tbody>\n          </table>\n        </section>", "text": "Accessing Properties of a DOM object (Example) <p>See our <a href=\"sale.html\" id=\"saleslink\">Sales</a> today!</p><img id=\"icon\" src=\"images/shop.jpg\" alt=\"Shop Icon\" /><p class=\"photo user-upload\">Beauty.</p> HTML let theIcon = document.getElementById(\"icon\");let theLink = document.getElementById(\"saleslink\");let paragraphs = document.querySelector(\"p\"); JS Property Description Example tagName element's HTML tag icon.tagName is \"IMG\" className CSS classes of element caption.className is \"photo user-upload\" src URL target of an image icon.src is \"images/shop.jpg\" href URL target of a link theLink.href is \"sale.html\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n          <h2>Changing Text with <code>innerText</code></h2>\n          <pre>\n            <code class=\"hljs\" data-trim>let paragraph = document.getElementById(\"welcome\");\nparagraph.innerText = \"text!\";\n</code></pre>\n\n          <p class=\"code-caption\">JS</p>\n\n          <p><code>innerText</code> should be used to replace text to a DOM element (can also use\n          <code>textContent</code>, which is another common solution)</p>\n          <p>Can't add HTML tags this way, but soon, we'll see a better way to add HTML\n          tags to our page.</p>\n        </section>", "text": "Changing Text with innerText let paragraph = document.getElementById(\"welcome\");paragraph.innerText = \"text!\"; JS innerText should be used to replace text to a DOM element (can also use textContent, which is another common solution) Can't add HTML tags this way, but soon, we'll see a better way to add HTML tags to our page.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section>\n            <h2>Summary: What can we do with DOM objects so far?</h2>\n            <p>Set their properties, and the page changes in response</p>\n            <p>This is how give behavior to web pages: use JavaScript to manipulate the DOM by changing the properties of DOM elements</p>\n            <p>\n              In the rest of Module 2, we'll learn how to add/remove nodes from the DOM,\n              do more with different types of events, and delay/repeat functions on our page with\n              timers!\n            </p>\n        </section>", "text": "Summary: What can we do with DOM objects so far? Set their properties, and the page changes in response This is how give behavior to web pages: use JavaScript to manipulate the DOM by changing the properties of DOM elements In the rest of Module 2, we'll learn how to add/remove nodes from the DOM, do more with different types of events, and delay/repeat functions on our page with timers!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec08-dom-events/"},
{"html": "<section id=\"option-groups\">\n            <h2>Review\n              <a href=\"https://www.w3schools.com/tags/tag_optgroup.asp\">Option Groups</a>&lt;optgroup&gt;\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;select name=\"favorite-character\"&gt;\n  &lt;optgroup label=\"Major Characters\"&gt;\n    &lt;option&gt;John&lt;/option&gt;\n    &lt;option selected=\"selected\"&gt;Ayra&lt;/option&gt;\n  &lt;/optgroup&gt;\n  &lt;optgroup label=\"Minor Characters\"&gt;\n    &lt;option&gt;Rob&lt;/option&gt;\n    &lt;option&gt;Sansa&lt;/option&gt;\n  &lt;/optgroup&gt;\n&lt;/select&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <select name=\"favorite-character\">\n                <optgroup label=\"Major Characters\">\n                  <option>John</option>\n                  <option selected>Ayra</option>\n                </optgroup>\n                <optgroup label=\"Minor Characters\">\n                  <option>Rob</option>\n                  <option>Sansa</option>\n                </optgroup>\n              </select>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>What should we do if we don't like the bold appearance of the optgroups?</p>\n          </section>", "text": "Review Option Groups<optgroup> <select name=\"favorite-character\"> <optgroup label=\"Major Characters\"> <option>John</option> <option selected=\"selected\">Ayra</option> </optgroup> <optgroup label=\"Minor Characters\"> <option>Rob</option> <option>Sansa</option> </optgroup></select> HTML John Ayra Rob Sansa output What should we do if we don't like the bold appearance of the optgroups?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Step 3: Building the HTML form\n          </h2><p>\n            Starting with\n            <a href=\"examples/groupizer/groupizer.html\" target=\"_blank\"><code>groupizer.html</code></a>\n            (and the given <code>groupizer.css</code>)\n            and the form elements on the previous slides, let's build the form.\n          </p>\n          <p class=\"right-align\">\n            <a href=\"examples/groupizer/groupizer-solution.html\" target=\"_blank\">Solution</a>\n          </p>\n        </section>", "text": "Step 3: Building the HTML form Starting with groupizer.html (and the given groupizer.css) and the form elements on the previous slides, let's build the form. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section>\n          <h2>Next up! how to add actual responsiveness to the forms with JavaScript.\n          <h1>On to Module 2!!!</h1>\n        </h2></section>", "text": "Next up! how to add actual responsiveness to the forms with JavaScript. On to Module 2!!!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec06-css-iv-flex-and-forms/"},
{"html": "<section id=\"support-tas\">\n          <div class=\"side-by-side\">\n            <div style=\"width: 45%;\">\n              <h2>Head TA: <br>Conner Ardman</h2>\n              <img class=\"simpleimg\" width=\"200px\" style=\"margin-top: 10px\" src=\"../../staff/photos/conner-ardman.jpg\" alt=\"Conner's mug shot\">\n              <p>Junior in Informatics</p>\n              <p>\n                Has been a TA for CSE 154 four times.\n              </p>\n              <p>\n                Has two dogs back in Texas named Bailey and Roxy\n              </p>\n            </div>\n            <div style=\"width: 45%; margin-left: 20px;\">\n              <h2>Infrastructure TA: Jeremy Zhang</h2>\n              <img class=\"simpleimg\" width=\"200px\" style=\"margin-top: 10px\" src=\"../../staff/photos/jeremy-zhang.png\" alt=\"Jeremy's mug shot\">\n              <p>Technically a sophomore we think</p>\n              <p>\n                Wrote this amazing system we'll be using for turning in assignments\n              </p>\n              <p>\n                Does not have a pet, but his parents own an amazing restaurant on the ave.\n              </p>\n            </div>\n          </div>\n        </section>", "text": "Head TA: Conner Ardman Junior in Informatics Has been a TA for CSE 154 four times. Has two dogs back in Texas named Bailey and Roxy Infrastructure TA: Jeremy Zhang Technically a sophomore we think Wrote this amazing system we'll be using for turning in assignments Does not have a pet, but his parents own an amazing restaurant on the ave.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"tas\">\n          <h2>Classroom TAs</h2>\n          <div style=\"width: 900px\">\n            <img src=\"../../staff/photos/olga-andreeva.jpg\" width=\"100px\" alt=\"Olga's mug shot\">\n            <img src=\"../../staff/photos/will-bigelow.jpg\" width=\"100px\" alt=\"Will's mug shot\">\n            <img src=\"../../staff/photos/hudson-gilmore.jpg\" width=\"100px\" alt=\"Hudson's mug shot\">\n            <img src=\"../../staff/photos/mark-guan.jpg\" width=\"100px\" alt=\"Mark's mug shot\">\n            <img src=\"../../staff/photos/sven-hansen.jpg\" width=\"100px\" alt=\"Sven's mug shot\">\n            <img src=\"../../staff/photos/daniel-hsu.jpg\" width=\"100px\" alt=\"Daniel's mug shot\">\n            <img src=\"../../staff/photos/manchen-jin.jpg\" width=\"100px\" alt=\"Manchen's mug shot\">\n            <img src=\"../../staff/photos/chao-hsu-lin.jpg\" width=\"100px\" alt=\"Chao's mug shot\">\n            <img src=\"../../staff/photos/kevin-pham.jpg\" width=\"100px\" alt=\"Kevin's mug shot\">\n            <img src=\"../../staff/photos/kyle-roland.png\" width=\"100px\" alt=\"Kyle's mug shot\">\n            <img src=\"../../staff/photos/ann-shan.jpg\" width=\"100px\" alt=\"Ann's mug shot\">\n            <img src=\"../../staff/photos/jack-venberg.png\" width=\"100px\" alt=\"Jack's mug shot\">\n            <img src=\"../../staff/photos/tal-wolman.png\" width=\"100px\" alt=\"Tal's mug shot\">\n            <img src=\"../../staff/photos/zach-wu.jpg\" width=\"100px\" alt=\"Zach's mug shot\">\n          </div>\n          <h2>Mentor, Website, and Grading TAs</h2>\n          <div>\n            <img src=\"../../staff/photos/sweekruthi-raghunathan.jpg\" width=\"100px\" alt=\"Sweekruthi's mug shot\">\n            <img src=\"../../staff/photos/hawk-ticehurst.jpg\" width=\"100px\" alt=\"Hawk's mug shot\">\n            <img src=\"../../staff/photos/jeffrey-worley.jpg\" width=\"100px\" alt=\"Jeff's mug shot\">\n            <img src=\"../../staff/photos/kelley-chen.jpg\" width=\"100px\" alt=\"Kelley's mug shot\">\n            <img src=\"../../staff/photos/james-eck.jpg\" width=\"100px\" alt=\"James' mug shot\">\n          </div>\n        </section>", "text": "Classroom TAs Mentor, Website, and Grading TAs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"syllabus\">\n          <h2>Course Resources</h2>\n          <p><a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/\" target=\"_blank\">Course Website</a></p>\n          <p>\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/syllabus/syllabus.html\">Syllabus</a>\n          </p>\n          <p>List of\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/resources.html\">Resources</a>\n          </p>\n          <p>Pre-lecture Readings (replacement for a textbook)</p>\n          <p><a href=\"https://piazza.com/class/jt6ey8l0m1p7b3\">Piazza Message Board</a></p>\n        </section>", "text": "Course Resources Course Website Syllabus List of Resources Pre-lecture Readings (replacement for a textbook) Piazza Message Board", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Course Structure</h2>\n          <p>Lectures 3x per week</p>\n          <p>Tuesday and Thursday Sections</p>\n          <ul>\n            <li>Part of the course, new material may be introduced</li>\n            <li>Bring a computer with the development environment\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/setup.html\">installed</a>\n              to section. (This is Homework 0 due tomorrow!)\n            </li>\n            <li>You <strong>may</strong> be in a computer lab on Thursday, but it is not guaranteed</li>\n            <li>\n              The University has a <a href=\"https://stlp.uw.edu/\">short term loan</a> program if\n              you do not have a computer of your own to bring\n            </li>\n          </ul>\n          <p>Extra help and assistance</p>\n          <ul>\n            <li>Instructor and Head TA Office Hours</li>\n            <li>Web Programming Lab (WPL)</li>\n            <li>\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/mentorship/mentorship.html\">Mentor\n                Circles</a> - Commit to 1 extra hour a week to focus on section material and CPs!\n            </li>\n          </ul>\n        </section>", "text": "Course Structure Lectures 3x per week Tuesday and Thursday Sections Part of the course, new material may be introduced Bring a computer with the development environment installed to section. (This is Homework 0 due tomorrow!) You may be in a computer lab on Thursday, but it is not guaranteed The University has a short term loan program if you do not have a computer of your own to bring Extra help and assistance Instructor and Head TA Office Hours Web Programming Lab (WPL) Mentor Circles - Commit to 1 extra hour a week to focus on section material and CPs!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Your \"deliverables\"</h2>\n          <p>Participation in class</p>\n          <p>Creative projects every other week<sup>*</sup></p>\n          <p>Homework assignments every other week<sup>*</sup></p>\n          <p>Midterm exam (Time/Date/Location TBD)</p>\n          <p>Final exam (Time/Location TBD)</p>\n          <p>\u00a0</p>\n          <p>\u00a0</p>\n          <p><sup>*</sup>More or less</p>\n        </section>", "text": "Your \"deliverables\" Participation in class Creative projects every other week* Homework assignments every other week* Midterm exam (Time/Date/Location TBD) Final exam (Time/Location TBD) \u00a0 \u00a0 *More or less", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Oh about those lectures...</h2>\n          <div class=\"side-by-side\">\n            <div style=\"width: 65%;\">\n              <p>The course is being recorded using Panopto</p>\n              <p style=\"margin-left:30px; margin-right: 30px;\">And I know that usually means this ------ &gt; </p>\n              <div class=\"fragment\">\n                <p>\n                  However, this will be an Active Learning course that will use\n                  <a href=\"https://www.polleverywhere.com\" target=\"_blank\">Polling software</a>, Think-Pair-Share\n                  questions (group answers), Worksheets, Note cards, etc.\n                </p>\n                <p>\n                  So...\n                </p>\n              </div>\n                <ul class=\"fragment\">\n                  <li>\n                    Sit near to 2-3 other people so you can have conversations\n                    with them during discussion opportunities in lecture\n                  </li>\n                  <li>\n                    You will get more out of being engaged in class then watching on a video\n                  </li>\n                </ul>\n            </div>\n            <div>\n              <img class=\"simpleimg\" src=\"../img/panopto.png\" alt=\"Haha Panaopto funny\" width=\"300px\" height=\"400px\" style=\" margin:0px 0px 20px 0px;\">\n            </div>\n          </div>\n          <aside class=\"notes\">\n            <p><a href=\"https://www.polleverywhere.com/multiple_choice_polls/QExcdtdpbJHGtRT\" target=\"_blank\">Experience Poll</a></p>\n            <p><a href=\"https://www.polleverywhere.com/multiple_choice_polls/aLzDsYjC4zE0rvY\" target=\"_blank\">Classes poll</a></p>\n          </aside>\n\n        </section>", "text": "Oh about those lectures... The course is being recorded using Panopto And I know that usually means this ------ > However, this will be an Active Learning course that will use Polling software, Think-Pair-Share questions (group answers), Worksheets, Note cards, etc. So... Sit near to 2-3 other people so you can have conversations with them during discussion opportunities in lecture You will get more out of being engaged in class then watching on a video Experience Poll Classes poll", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Classroom conduct</h2>\n          <p>\n            Please read the syllabus section on\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/syllabus/syllabus.html#technology\" target=\"_blank\">Technology\n              in the classroom</a>\n          </p>\n          <p>Audio clutter</p>\n        </section>", "text": "Classroom conduct Please read the syllabus section on Technology in the classroom Audio clutter", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h1>The Internet and the World Wide Web</h1>\n        </section>", "text": "The Internet and the World Wide Web", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>What is a web page, really?</h2>\n          <div>\n            <div style=\"width:25%;  position:absolute; left:0%;\">\n              <p class=\"fragment\"><strong>Content</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Words and images</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:25%;\">\n              <p class=\"fragment\"><strong>Structure</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\n                <p class=\"medium-small-font\">HTML</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:50%;\">\n              <p class=\"fragment\"><strong>Style</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">CSS</p>\n              </div>\n            </div>\n            <div style=\"width:23.2%;  position:absolute; left:75%;\">\n              <p class=\"fragment\"><strong>Behavior</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\n              </div>\n            </div>\n          </div>\n        </section>", "text": "What is a web page, really? Content Words and images Structure HTML Style CSS Behavior Javascript & Server programs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>More about Strings</h2>\n          <p><a href=\"https://codestepbystep.com/problem/view/javascript/basics/escapeRoom\" target=\"_blank\">Escape sequences</a> behave as in Java: <code>\\' \\\" \\&amp; \\n \\t \\\\</code></p>\n          <p>To convert between Numbers and Strings:\n          </p><pre><code class=\"hijs\" data-trim>let count = 10;                              // 10\nlet stringedCount = \"\" + count;              // \"10\"\nlet puppyCount = count + \" puppies, yay!\";   // \"10 puppies, yay!\"\nlet magicNum = parseInt(\"42 is the answer\"); // 42\nlet mystery = parseFloat(\"Am I a number?\");  // NaN          </code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>To access characters of a String <code>s</code>, use <code>s[index]</code> or\n          <code>s.charAt(index)</code>:</p>\n          <pre><code class=\"hijs\" data-trim style=\"font-size: 14pt;\">let firstLetter  = puppyCount[0];                            // \"1\"\nlet fourthLetter = puppyCount.charAt(3);                     // \"p\"\nlet lastLetter   = puppyCount.charAt(puppyCount.length - 1); // \"!\"\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "More about Strings Escape sequences behave as in Java: \\' \\\" \\& \\n \\t \\\\ To convert between Numbers and Strings: let count = 10; // 10let stringedCount = \"\" + count; // \"10\"let puppyCount = count + \" puppies, yay!\"; // \"10 puppies, yay!\"let magicNum = parseInt(\"42 is the answer\"); // 42let mystery = parseFloat(\"Am I a number?\"); // NaN JS To access characters of a String s, use s[index] or s.charAt(index): let firstLetter = puppyCount[0]; // \"1\"let fourthLetter = puppyCount.charAt(3); // \"p\"let lastLetter = puppyCount.charAt(puppyCount.length - 1); // \"!\" JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Common Bugs when Using Strings</h2>\n          <p>While Strings in JS are fairly similar to those you'd use in Java, there are a few special\n          cases that you should be aware of.</p>\n          <ul>\n          <li>Remember that <code>length</code> is a property (not a method, as it is in Java)</li>\n          <li>\n            Concatenation with <code>+</code>: <code>1 + 1</code> is <code>2</code>, but <code>\"1\" +\n              1</code> and <code>1 + \"1\"</code> are both <code>\"11\"</code>!\n          </li>\n          </ul>\n          <p>Practice: <code><a href=\"https://www.codestepbystep.com/problem/view/javascript/strings/repeat\">repeat</a></code>, <code><a href=\"https://www.codestepbystep.com/problem/view/javascript/strings/repeat\">containsTwice</a></code></p>\n        </section>", "text": "Common Bugs when Using Strings While Strings in JS are fairly similar to those you'd use in Java, there are a few special cases that you should be aware of. Remember that length is a property (not a method, as it is in Java) Concatenation with +: 1 + 1 is 2, but \"1\" + 1 and 1 + \"1\" are both \"11\"! Practice: repeat, containsTwice", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math object</a></h2>\n          <pre>\n            <code class=\"hijs\" data-trim>let rand1to10 = Math.floor(Math.random() * 10 + 1);\nlet three = Math.floor(Math.PI);</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Methods: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>abs</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>ceil</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"><code>cos</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>floor</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"><code>log</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>max</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>min</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>pow</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>random</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>round</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>sin</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>sqrt</code></a>,\n                        <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>tan</code></a></p>\n          <p>Properties: <code>E</code>, <code>PI</code></p>\n        </section>", "text": "Math object let rand1to10 = Math.floor(Math.random() * 10 + 1);let three = Math.floor(Math.PI); JS Methods: abs, ceil, cos, floor, log, max, min, pow, random, round, sin, sqrt, tan Properties: E, PI", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Loops and Conditionals</h2>\n\n          <div class=\"side-by-side\">\n            <div>\n          <pre><code class=\"hijs\" data-trim>function mystery(a, b) {\n  if (a &gt; b) {\n    return 0;\n  } else {\n    let result = 0;\n    for (let i = a; i &lt;= b; i++) {\n      result += i;\n    }\n    return result;\n  }\n}\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n            </div>\n          <p class=\"space-left\" style=\"width: 48%\">\n            <img src=\"hidden/js-vs-java-morpheus.jpg\" alt=\"Morpheus Java vs. JS Meme\">\n          </p>\n          </div>\n\n            <p>Q: What does this code do? What does <code>mystery(4, 6)</code> return? How would you\n            use the function to get a result of 10?</p>\n          <p class=\"small-font\">*Image created by Lauren using <a href=\"https://imgflip.com/i/2ylt91\">imgflip</a></p>\n        </section>", "text": "Loops and Conditionals function mystery(a, b) { if (a > b) { return 0; } else { let result = 0; for (let i = a; i <= b; i++) { result += i; } return result; }} JS (template) Q: What does this code do? What does mystery(4, 6) return? How would you use the function to get a result of 10? *Image created by Lauren using imgflip", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <section>\n            <h2><code>for</code> Loops (same as Java)</h2>\n          <pre><code class=\"hijs\" data-trim>for (initialization; condition; update) {\n  statements;\n}\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <div id=\"loop-examples\">\n          <pre>\n            <code class=\"hijs\" data-trim>let sum = 0;\nfor (let i = 0; i &lt; 100; i++) {\n  sum = sum + i; // same as sum += i;\n}</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hijs no-syntax-highlight\" data-trim>let s1 = \"It's a-me, Mario!\";\nlet s2 = \"\";\nfor (let i = 0; i &lt; s.length; i++) {\n  s2 += s1[i] + s1[i];\n}\n// s2 stores \"IItt''ss  aa--mmee,,  MMaarriioo!!\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          </div>\n          <p>See below slides for comparisons in Java/Python</p>\n          </section>\n          <section>\n            <h2><code>for</code> Loop Comparisons</h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>let s1 = \"It's a-me, Mario!\";\nlet s2 = \"\";\nfor (let i = 0; i &lt; s.length; i++) {\n  s2 += s1[i] + s1[i];\n}\n// s2 stores \"IItt''ss  aa--mmee,,  MMaarriioo!!\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hijs font-14pt\" data-trim>String s1 = \"It's a-me, Mario!\";\nString s2 = \"\";\nfor (int i = 0; i &lt; s.length(); i++) {\n  s2 += s1.charAt(i) + s1.charAt(i);\n}\n</code></pre>\n          <p class=\"code-caption\">Java (example)</p>\n          <pre><code class=\"hijs font-14pt\" data-trim>s1 = \"It's a-me, Mario!\";\ns2 = \"\";\nfor i in range(len(s1)):\n    s2 += s1[i] + s1[i];\n</code></pre>\n          <p class=\"code-caption\">Python (example)</p>\n\n          </section>\n        </section>", "text": "for Loops (same as Java) for (initialization; condition; update) { statements;} JS (template) let sum = 0;for (let i = 0; i < 100; i++) { sum = sum + i; // same as sum += i;} JS (example) let s1 = \"It's a-me, Mario!\";let s2 = \"\";for (let i = 0; i < s.length; i++) { s2 += s1[i] + s1[i];}// s2 stores \"IItt''ss aa--mmee,, MMaarriioo!!\" JS (example) See below slides for comparisons in Java/Python for Loop Comparisons let s1 = \"It's a-me, Mario!\";let s2 = \"\";for (let i = 0; i < s.length; i++) { s2 += s1[i] + s1[i];}// s2 stores \"IItt''ss aa--mmee,, MMaarriioo!!\" JS (example) String s1 = \"It's a-me, Mario!\";String s2 = \"\";for (int i = 0; i < s.length(); i++) { s2 += s1.charAt(i) + s1.charAt(i);} Java (example) s1 = \"It's a-me, Mario!\";s2 = \"\";for i in range(len(s1)): s2 += s1[i] + s1[i]; Python (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>CP2 Due this weekend - <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/creative/creative-projects.html\">new\n        feature</a> to opt-in in the GitGrade turn-in process!</p>\n          <p>Finish Groupizer</p>\n          <p>Notion of Objects in JS</p>\n          <p>More DOM Manipulation/Events</p>\n          <ul>\n            <li>appendChild/removeChild</li>\n            <li>Working with radio buttons</li>\n            <li>Changing styles of the DOM: style vs. classList</li>\n          </ul>\n          <p>Monday will return to the module pattern and page event flow with\n          setTimeout/setInterval</p>\n        </section>", "text": "Agenda CP2 Due this weekend - new feature to opt-in in the GitGrade turn-in process! Finish Groupizer Notion of Objects in JS More DOM Manipulation/Events appendChild/removeChild Working with radio buttons Changing styles of the DOM: style vs. classList Monday will return to the module pattern and page event flow with setTimeout/setInterval", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Wrapping up Groupizer V1</h2>\n          <p>From the pre-lecture activity:</p>\n          <ol>\n            <li>What bug do we have?</li>\n            <li>Do you know how to fix it?</li>\n            <li>How would you comment <code>updateMemberCount</code>?</li>\n          </ol>\n        </section>", "text": "Wrapping up Groupizer V1 From the pre-lecture activity: What bug do we have? Do you know how to fix it? How would you comment updateMemberCount?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>The Notion of \"Objects\" in JavaScript</h2>\n          <p>\n            Anything you interact with on the page is an object. An object in JavaScript has:\n          </p>\n          <ol>\n            <li>a set of properties (e.g. innerText for DOM\n              objects)</li>\n            <li>built-in functions (e.g. <code>addEventListener</code>). Some\n            objects have different properties/functions than others.\n            </li>\n          </ol>\n          <p>It is helpful to think of the following \"types\" of objects in JavaScript:</p>\n          <ol>\n            <li>Global DOM objects</li>\n            <li>Objects inside the <code>document</code> (which is a Global DOM object)</li>\n            <li>Event objects (yes, events are objects!)</li>\n          </ol>\n        </section>", "text": "The Notion of \"Objects\" in JavaScript Anything you interact with on the page is an object. An object in JavaScript has: a set of properties (e.g. innerText for DOM objects) built-in functions (e.g. addEventListener). Some objects have different properties/functions than others. It is helpful to think of the following \"types\" of objects in JavaScript: Global DOM objects Objects inside the document (which is a Global DOM object) Event objects (yes, events are objects!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>The Six Global DOM Objects</h2>\n          <p>Every JavaScript program can refer to the following global objects:</p>\n          <table>\n            <tr>\n              <th>object</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td>document</td>\n              <td>current HTML page and its content</td>\n            </tr>\n            <tr>\n              <td>history</td>\n              <td>list of pages the user has visited</td>\n            </tr>\n            <tr>\n              <td>location</td>\n              <td>URL of the current HTML page</td>\n            </tr>\n            <tr>\n              <td>navigator</td>\n              <td>info about the web browser you are using</td>\n            </tr>\n            <tr>\n              <td>screen</td>\n              <td>info about the screen area occupied by the browser</td>\n            </tr>\n            <tr>\n              <td>window</td>\n              <td>the browser window</td>\n            </tr>\n          </table>\n          <p>\n          You will usually just use <code>window</code> and <code>document</code>.\n          </p>\n        </section>", "text": "The Six Global DOM Objects Every JavaScript program can refer to the following global objects: object description document current HTML page and its content history list of pages the user has visited location URL of the current HTML page navigator info about the web browser you are using screen info about the screen area occupied by the browser window the browser window You will usually just use window and document.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>What's inside a DOM object?</h2>\n          <p>For starters, the HTML attributes. This HTML:</p>\n          <div class=\"code-example\">\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"images/puppy.png\" alt=\"A fantastic puppy photo\"/&gt;\n&lt;p&gt;A paragraph!&lt;/p&gt;</code></pre><p class=\"code-caption\">HTML</p>\n          </div>\n\n          <p>\n          Has two objects (let's call them <code>puppyImg</code> and <code>p</code>) with these properties:\n          </p>\n          <ul>\n            <li><code>puppyImg.<em>src</em></code> -- set by the browser to <code>images/puppy.png</code></li>\n            <li><code>puppyImg.<em>alt</em></code> -- set by the browser to <code>\"A fantastic puppy photo\"</code></li>\n            <li><code>p.<em>innerText</em></code> -- set by the browser to <code>\"A paragraph!\"</code></li>\n          </ul>\n          <p>Note: You will also often see <code>textContent</code> as an alternative to\n          <code>innerText</code> - you may use either.</p>\n        </section>", "text": "What's inside a DOM object? For starters, the HTML attributes. This HTML: <img src=\"images/puppy.png\" alt=\"A fantastic puppy photo\"/><p>A paragraph!</p>HTML Has two objects (let's call them puppyImg and p) with these properties: puppyImg.src -- set by the browser to images/puppy.png puppyImg.alt -- set by the browser to \"A fantastic puppy photo\" p.innerText -- set by the browser to \"A paragraph!\" Note: You will also often see textContent as an alternative to innerText - you may use either.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Creating New Node Objects</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>document.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">createElement</a>(\"tag\")</td>\n              <td>creates and returns a new empty DOM node representing an element of that type</td>\n            </tr>\n          </table>\n          <pre><code class=\"hljs\" data-trim>// create a new &lt;h2&gt; node\nlet newHeading = document.createElement(\"h2\");\nnewHeading.innerText = \"This is a new heading!\";</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>Note: Merely creating an element does not add it to the page</p>\n          <p>You must add the new element as a child of an existing element on the page...</p>\n        </section>", "text": "Creating New Node Objects Name Description document.createElement(\"tag\") creates and returns a new empty DOM node representing an element of that type // create a new <h2> nodelet newHeading = document.createElement(\"h2\");newHeading.innerText = \"This is a new heading!\"; JS Note: Merely creating an element does not add it to the page You must add the new element as a child of an existing element on the page...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Adding/Removing Nodes to the DOM</h2>\n          <p>\n            When you have a parent DOM node, you can add or remove a child DOM node using\n            the following functions:\n          </p>\n          <table class=\"code-table half-width-columns\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\" target=\"_blank\">\n                parentNode.appendChild</a>(node)</td>\n              <td>places the given node at end of this node's child list</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/jsref/met_node_insertbefore.asp\" target=\"_blank\">parentNode.insertBefore</a>(new, old)</td>\n              <td>places the given node in this node's child list just before old child</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\" target=\"_blank\">parentNode.removeChild</a>(node)</td>\n              <td>removes the given node from this node's child list</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/jsref/met_node_remove.asp\" target=\"_blank\">node.remove()</a></td>\n              <td>removes the node from the page</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/jsref/met_node_replacechild.asp\" target=\"_blank\">parentNode.replaceChild</a>(new, old)</td>\n              <td>replaces given child with new nodes</td>\n            </tr>\n          </table>\n\n          <pre><code class=\"hljs\" data-trim>let li = document.createElement(\"li\");\nli.innerText = \"A list item!\";\nid(\"my-list\").appendChild(li);</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Adding/Removing Nodes to the DOM When you have a parent DOM node, you can add or remove a child DOM node using the following functions: Name Description parentNode.appendChild(node) places the given node at end of this node's child list parentNode.insertBefore(new, old) places the given node in this node's child list just before old child parentNode.removeChild(node) removes the given node from this node's child list node.remove() removes the node from the page parentNode.replaceChild(new, old) replaces given child with new nodes let li = document.createElement(\"li\");li.innerText = \"A list item!\";id(\"my-list\").appendChild(li); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Events are also Objects!</h2>\n          <p>\n            Recall that the event handler function can be attached to objects (window, DOM\n            elements, etc.)\n          </p>\n          <pre><code class=\"hijs\">sourceEl.addEventListener(\"click\", responseFunction);\n\nfunction responseFunction(e) {\n  // we can access the click Event object here!\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n            When the event occurs, <strong>an Event object is created</strong> and passed to the\n            event listener. You can optionally \"catch\" this argument as an optional parameter to get\n            more information about the event.\n          </p>\n        </section>", "text": "Events are also Objects! Recall that the event handler function can be attached to objects (window, DOM elements, etc.) sourceEl.addEventListener(\"click\", responseFunction);function responseFunction(e) { // we can access the click Event object here!} JS When the event occurs, an Event object is created and passed to the event listener. You can optionally \"catch\" this argument as an optional parameter to get more information about the event.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h3>Event Object Properties</h3>\n          <p>Event objects contain properties about an event that occurred</p>\n          <p>What types of properties do you think an Event object has?</p>\n          <div class=\"side-by-side two-panel\" style=\"align-items: start\">\n          <!--\n          <p>JavaScript gives us a really useful way to get more information about an\n          event that fired the <a\n                     href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#The_event_listener_callback\">callback\n                     function</a> by accepting an optional parameter to the\n          attached function representing the event object.\n          </p>\n          <p>Conventionally this event object is given the name \"e\" or \"evt\"</p>\n          -->\n            <div>\n          <pre><code class=\"hijs font-12pt\">addBtn.addEventListener(\"click\", addGroup);\n\nfunction addGroup(e) {\n  console.log(\"Add button clicked!\");\n  console.log(e);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n            </div>\n          <img src=\"hidden/event-properties.png\" class=\"fragment\" alt=\"Event Properties\">\n          </div>\n        </section>", "text": "Event Object Properties Event objects contain properties about an event that occurred What types of properties do you think an Event object has? <!-- JavaScript gives us a really useful way to get more information about an event that fired the callback function by accepting an optional parameter to the attached function representing the event object. Conventionally this event object is given the name \"e\" or \"evt\" --> addBtn.addEventListener(\"click\", addGroup);function addGroup(e) { console.log(\"Add button clicked!\"); console.log(e);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <!-- Lauren: I think I can touch on this in the Groupizer discussion recap, but it's good\n            to go over in more depth next week. I do want to keep it in the slides though for\n            students after lecture. Thoughts?\n            -->\n          <h2>The Keyword <code>this</code></h2>\n        <!--\n          <pre><code class=\"hljs\" data-trim>this.fieldName                 // access field\nthis.fieldName = value;        // modify field\nthis.functionName(parameters); // call method\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>All JavaScript code actually runs inside of an object</p>\n          -->\n          <p>By default, code runs in the global <code>window</code> object (so <code>this === window</code>)</p>\n          <ul>\n            <li>All global variables and functions you declare become part of <code>window</code></li>\n          </ul>\n          <p>The <code>this</code> keyword refers to the current object</p>\n          <p>For response functions atteched in <code>addEventListener</code>,\n          <code>this</code> refers to the source element of the event.</p>\n        </section>", "text": "The Keyword this <!-- this.fieldName // access fieldthis.fieldName = value; // modify fieldthis.functionName(parameters); // call method JS All JavaScript code actually runs inside of an object --> By default, code runs in the global window object (so this === window) All global variables and functions you declare become part of window The this keyword refers to the current object For response functions atteched in addEventListener, this refers to the source element of the event.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n\t\t\t\t\t<h2>Using \"this\" with Event Handler Binding</h2>\n          <img class=\"w-66\" src=\"hidden/this-screenshot-output.png\" alt=\"output of this binding\">\n          <pre><code class=\"hljs\" data-trim>id(\"group-size\").addEventListener(\"change\", logMsg);\n\nfunction logMsg() {\n  console.log(\"&lt;select&gt; changed!\");\n  console.log(this);\n  console.log(this.value);\n  // same as console.log(id(\"group-size\").value);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Event handlers attached in an event listener are <strong>bound to the element</strong></p>\n          <p>Inside the handler, that element becomes <code>this</code></p>\n        </section>", "text": "Using \"this\" with Event Handler Binding id(\"group-size\").addEventListener(\"change\", logMsg);function logMsg() { console.log(\"<select> changed!\"); console.log(this); console.log(this.value); // same as console.log(id(\"group-size\").value);} JS Event handlers attached in an event listener are bound to the element Inside the handler, that element becomes this", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Skittles!</h2>\n          <p>Starter code: <a href=\"skittles-lec09-starter/skittles.html\">skittles.html</a> (<a href=\"skittles-lec09-starter.zip\">skittles-lec09-starter.zip</a>)\n          </p>\n          <p>Your are encouraged to have the HTML open on your computer for reference through lecture!</p>\n        </section>", "text": "Skittles! Starter code: skittles.html (skittles-lec09-starter.zip) Your are encouraged to have the HTML open on your computer for reference through lecture!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Breaking Down a UI Spec</h2>\n          <p class=\"font-18pt\">\n              Today, we will take what we've learned about JavaScript, events, and the DOM,\n              to implement <a href=\"skittles-v1-solution/skittles.html\">a game</a> for a user to guess the correct number of\n              Skittles in a jar having a certain color.\n            </p>\n            <div class=\"side-by-side\">\n              <div width=\"80%\">\n              <img src=\"hidden/skittlesv1-demo.gif\" width=\"100%\" class=\"centered-figure\" alt=\"Skittles demo\">\n              </div>\n            <div class=\"font-18pt\">\n            <p>Think about the following questions:</p>\n            <ol>\n              <li>What elements in this demo should be listening to different events?</li>\n              <li>For each of those elements, what events are they listening to?</li>\n              <li>For each of those events, what behavior do you see happen as a result?</li>\n            </ol>\n          </div>\n            </div>\n        </section>", "text": "Breaking Down a UI Spec Today, we will take what we've learned about JavaScript, events, and the DOM, to implement a game for a user to guess the correct number of Skittles in a jar having a certain color. Think about the following questions: What elements in this demo should be listening to different events? For each of those elements, what events are they listening to? For each of those events, what behavior do you see happen as a result?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n            <h3>More Flexbox Resources</h3>\n            <p>\n              There are great tutorials out in the world to help learn flexbox. This\n              <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks</a> one\n              goes into a deeper explanation of the flex properties and has some great examples to\n              compare each - it's a great bookmark resource to reference for this class!\n            </p>\n          </section>", "text": "More Flexbox Resources There are great tutorials out in the world to help learn flexbox. This CSS-Tricks one goes into a deeper explanation of the flex properties and has some great examples to compare each - it's a great bookmark resource to reference for this class!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Back to our Boxes</h2>\n            <p>Exercise 6: Distribute boxes across box container evenly (equal space\n            between each box).</p>\n            <a href=\"examples/boxes6.html\" target=\"_blank\">\n              <img src=\"images/boxes6.png\" width=\"100%;\" style=\"margin-right: 10px\" alt=\"Box Model\">\n            </a>\n            <p class=\"fragment right-align\">\n              <a href=\"examples/boxes6.html\" target=\"_blank\">Solution</a>\n            </p>\n          </section>", "text": "Back to our Boxes Exercise 6: Distribute boxes across box container evenly (equal space between each box). Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h3>Exercise 7: Responsive Page Layout - Wrapping</h3>\n            <p>Set boxes to wrap when box container gets too small in the\n            browser so that they keep their square widths (what happens when you shrink\n            the browser width in the previous exercise?).</p>\n              <a href=\"examples/boxes7.html\" target=\"_blank\">\n            <img src=\"images/boxes7.png\" width=\"80%;\" class=\"centered-figure\" alt=\"Box Model\">\n              </a>\n            <p class=\"right-align\">\n              <a href=\"examples/boxes7.html\" target=\"_blank\">Solution</a>\n            </p>\n          </section>", "text": "Exercise 7: Responsive Page Layout - Wrapping Set boxes to wrap when box container gets too small in the browser so that they keep their square widths (what happens when you shrink the browser width in the previous exercise?). Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>Exercise 8: A bunch more fancy flex stuff</h2>\n            <p class=\"font-18pt\">Layout boxes into two 3-box columns using flex (use screenshot with given\n            details). Note: don't rely too much on previous CSS solutions - you'll need to\n            change the HTML slightly as well to get the columns grouped)</p>\n            <div class=\"side-by-side\" style=\"align-items: center\">\n              <a href=\"examples/boxes8.html\" width=\"40%;\" target=\"_blank\">\n                <img src=\"images/boxes8.png\" style=\"margin-right: 10px\" alt=\"Box Model\">\n              </a>\n              <ul class=\"font-18pt\">\n                <li>In the HTML, make boxes grouped in two 3-box columns (hint: add a class\n                  to both groupings called \"column\").</li>\n                <li>Change height of <code>#boxes-container</code> to 500px and center the columns\n                  vertically</li>\n                <li>Distribute the two columns on both left/ends of the <code>#box-container.</code></li>\n              </ul>\n            </div>\n            <p class=\"right-align\">\n              <a href=\"examples/boxes8.html\" target=\"_blank\">Solution</a>\n            </p>\n          </section>", "text": "Exercise 8: A bunch more fancy flex stuff Layout boxes into two 3-box columns using flex (use screenshot with given details). Note: don't rely too much on previous CSS solutions - you'll need to change the HTML slightly as well to get the columns grouped) In the HTML, make boxes grouped in two 3-box columns (hint: add a class to both groupings called \"column\"). Change height of #boxes-container to 500px and center the columns vertically Distribute the two columns on both left/ends of the #box-container. Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n              <h2>To recap: Layout Techniques</h2>\n              <ul>\n                <li>Appropriate use of Block vs. Inline elements and\n                  nesting in HTML</li>\n                <li>Box Model (margin/padding/border)</li>\n                <li>Flex</li>\n                <li>Positioning</li>\n                <li>Float (less common today, but still good to know)</li>\n              </ul>\n              <p>\n                These are what we expect you to focus on, roughly\n                in order of prioritization\n              </p>\n              <p class=\"fragment\"> But wait! there's one more....</p>\n          </section>", "text": "To recap: Layout Techniques Appropriate use of Block vs. Inline elements and nesting in HTML Box Model (margin/padding/border) Flex Positioning Float (less common today, but still good to know) These are what we expect you to focus on, roughly in order of prioritization But wait! there's one more....", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n           <h2><a href=\"https://www.w3schools.com/cssref/pr_class_position.asp\">position</a>ing Elements</h2>\n           <dl>\n             <dt><code>position: static</code></dt>\n               <dd>\n                 Default value. Elements render in order, as they appear in the\n                 document flow\n               </dd>\n             <dt><code>position: fixed</code></dt>\n               <dd>\n                 Puts an element at an exact position within the browser window\n               </dd>\n             <dt><code>position: absolute</code></dt>\n               <dd>\n                 Puts an element at an absolute position based on the location of\n                 the element's parent container\n               </dd>\n               <dt><code>position: relative</code></dt>\n               <dd>Makes children positioned relative to the parent container</dd>\n               <dd>Handy for sticking a footer to the bottom of a page, for example</dd>\n\n           </dl>\n           <p>Another good explanation is\n             <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">here</a></p>\n         </section>", "text": "positioning Elements position: static Default value. Elements render in order, as they appear in the document flow position: fixed Puts an element at an exact position within the browser window position: absolute Puts an element at an absolute position based on the location of the element's parent container position: relative Makes children positioned relative to the parent container Handy for sticking a footer to the bottom of a page, for example Another good explanation is here", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n           <h2>Positioning Example</h2>\n           <pre><code class=\"hljs\" data-trim style=\"max-height: 540px\">#menubar {\n  position: absolute; /** fixed */\n  left: 450px;\n  top: 60px;\n}</code></pre>\n           <p class=\"code-caption\">CSS</p>\n\n           <pre><code class=\"hljs\" data-trim style=\"max-height: 540px\">&lt;div id=\"menubar\"&gt;Menu stuff!&lt;/div&gt;\n</code></pre>\n           <p class=\"code-caption\">HTML</p>\n\n           <p>Puts a menu bar on the screen 450px from the left, and 60px down from the top.</p>\n\n           <style>\n#menubar {\n  position: absolute;\n  left: 450px;\n  top: 60px;\n\n  width: 500px;\n  height: 100px;\n  background-color: #42affa;\n}\n           </style>\n           <div id=\"menubar\">Menu stuff!</div>\n         </section>", "text": "Positioning Example #menubar { position: absolute; /** fixed */ left: 450px; top: 60px;} CSS <div id=\"menubar\">Menu stuff!</div> HTML Puts a menu bar on the screen 450px from the left, and 60px down from the top. #menubar { position: absolute; left: 450px; top: 60px; width: 500px; height: 100px; background-color: #42affa;} Menu stuff!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n            <h2>From Boxes to \"Real\" Example</h2>\n            <p>\n              How can we use these different layout methods in pages with components like\n              header, main, footer? What about side-by-side sections? Inline navigations\n              with lists?\n            </p>\n            <p>\n              You can use all of these strategies to accomplish page layout methods. For\n              responsive design, it is best to prioritize default block/inline or flex\n              layout. But there are some cases where we want to be specific with the\n              position of our elements, such as when we have a fixed nav bar or footer.\n            </p>\n          </section>", "text": "From Boxes to \"Real\" Example How can we use these different layout methods in pages with components like header, main, footer? What about side-by-side sections? Inline navigations with lists? You can use all of these strategies to accomplish page layout methods. For responsive design, it is best to prioritize default block/inline or flex layout. But there are some cases where we want to be specific with the position of our elements, such as when we have a fixed nav bar or footer.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2><a href=\"https://www.w3schools.com/cssref/pr_class_display.asp\" target=\"_blank\"><code>display</code></a> Property</h2>\n          <p>The display property specifies the display behavior (the type of\n            rendering box) of an element. The four types you most often will see are:\n          </p>\n          <ul>\n            <li><code>inline</code>: Displays an element as an inline element.\n              Any height and width properties will have no effect. </li>\n            <li><code>block</code>: Displays an element as a block element. It\n              starts on a new line, and takes up the whole width of a page. </li>\n            <li><code>none</code>: The element is completely removed. </li>\n            <li><code>flex</code>: Displays an element as a block-level flex container</li>\n          </ul>\n        </section>", "text": "display Property The display property specifies the display behavior (the type of rendering box) of an element. The four types you most often will see are: inline: Displays an element as an inline element. Any height and width properties will have no effect. block: Displays an element as a block element. It starts on a new line, and takes up the whole width of a page. none: The element is completely removed. flex: Displays an element as a block-level flex container", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Summary: Layout</h2>\n          <p>Height and Width of an object are pretty intuitive</p>\n          <p style=\"margin-left: 30px\">\n            Inline elements have the width of their <strong>content</strong>,\n            block elements stretch across the width of their parent element (by default,\n            the width of the page). Both generally have the height of their content.\n          </p>\n          <p>The box model is relatively intuitive, especially if you play with the inspector </p>\n          <p style=\"margin-left: 30px\">\n            All objects on a page have padding, a border, and a margin. There are a lot of\n            properties for each.</p>\n          <p>Flexbox is <strong>AWESOME!!!</strong></p>\n          <p style=\"margin-left: 30px\">\n            You will practice more with flex in tomorrow's section, Friday we will go deeper into best practices.\n          </p>\n          <p>Positioning is just TOUGH and confusing</p>\n          <p style=\"margin-left: 30px\">\n              Well text-align is ok if you have text inside a block but rest of it?\n              Like float and positioning? Oy. Try flex first.\n          </p>\n      </section>", "text": "Summary: Layout Height and Width of an object are pretty intuitive Inline elements have the width of their content, block elements stretch across the width of their parent element (by default, the width of the page). Both generally have the height of their content. The box model is relatively intuitive, especially if you play with the inspector All objects on a page have padding, a border, and a margin. There are a lot of properties for each. Flexbox is AWESOME!!! You will practice more with flex in tomorrow's section, Friday we will go deeper into best practices. Positioning is just TOUGH and confusing Well text-align is ok if you have text inside a block but rest of it? Like float and positioning? Oy. Try flex first.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec05-css-iii-more-layout/"},
{"html": "<section>\n          <h2>Web Languages / Technologies</h2>\n          <p><strong>Content</strong>: Hypertext Markup Language (<a href=\"https://en.wikipedia.org/wiki/HTML\">HTML</a>): used for writing web pages</p>\n          <p><strong>Style</strong>: Cascading Style Sheets (<a href=\"https://en.wikipedia.org/wiki/CSS\">CSS</a>): stylistic info for web pages</p>\n          <p><strong>Behavior</strong>: <a href=\"https://en.wikipedia.org/wiki/javascript\">JavaScript</a>: interactive and\n          programmable web pages</p>\n          <p>Asynchronous JavaScript and XML (<a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">AJAX</a>): accessing data for web\n                                         applications using fetch requests and promises</p>\n          <p>JavaScript Object Notation (<a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a>): file format for organizing human-readable data</p>\n          <p>PHP Hypertext Processor (<a href=\"https://en.wikipedia.org/wiki/PHP\">PHP</a>):\n              web services for handling and responding to client requests\n            </p>\n          <p>Structured Query Language (<a href=\"https://en.wikipedia.org/wiki/SQL\">SQL</a>): interaction with databases</p>\n        </section>", "text": "Web Languages / Technologies Content: Hypertext Markup Language (HTML): used for writing web pages Style: Cascading Style Sheets (CSS): stylistic info for web pages Behavior: JavaScript: interactive and programmable web pages Asynchronous JavaScript and XML (AJAX): accessing data for web applications using fetch requests and promises JavaScript Object Notation (JSON): file format for organizing human-readable data PHP Hypertext Processor (PHP): web services for handling and responding to client requests Structured Query Language (SQL): interaction with databases", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n\n          <section>\n            <h2>The Internet</h2>\n            <div>\n              <img class=\"simpleimg\" src=\"../img/tubes.png\" alt=\"Internet iz tubez\" style=\"margin: 25px 20px 0px 0px;\" height=\"300\" align=\"left\">\n              <p style=\"padding-top: 20px;\">Wikipedia: <a href=\"http://en.wikipedia.org/wiki/internet\">http://en.wikipedia.org/wiki/internet</a></p>\n              <p>A connection of computer networks built on the Internet Protocol (IP)</p>\n              <p>Layers of communication protocols (click the down arrow to see more)</p>\n            </div>\n            <p class=\"fragment\" style=\"float:left;padding-top: 20px;\">So's the difference between the Internet and the World Wide Web (WWW)?</p>\n          </section>\n\n          <section>\n            <h2>Layered Architecture</h2>\n            <div class=\"side-by-side\">\n              <div>\n                <p><strong>Physical layer</strong>: devices such as ethernet, coaxial cables, fiber-optic\n                lines, modems</p>\n                <p><strong>Data Link Layer</strong>: basic hardware protocols (ethernet,\n                wifi, DSL PPP)</p>\n                <p><strong>Network/Internet Layer</strong>: basic software protocol (IP)</p>\n                <p><strong>Transport Layer</strong>: adds reliability to network layer\n                (TCP, UDP)</p>\n                <p><strong>Application Layer</strong>: implements specific\n                communications for each kind of program (HTTP, POP3/IMAP, SSH, FTP)</p>\n              </div>\n              <div>\n                <img src=\"../img/osi-model.png\" height=\"400px\" width=\"500px\" alt=\"OSI model\">\n              </div>\n            </div>\n            <p> From <a href=\"http://www.webstepbook.com/supplements/slides/ch01-internet.shtml\"> Web Stepp Book Chapter 1</a></p>\n          </section>\n        </section>", "text": "The Internet Wikipedia: http://en.wikipedia.org/wiki/internet A connection of computer networks built on the Internet Protocol (IP) Layers of communication protocols (click the down arrow to see more) So's the difference between the Internet and the World Wide Web (WWW)? Layered Architecture Physical layer: devices such as ethernet, coaxial cables, fiber-optic lines, modems Data Link Layer: basic hardware protocols (ethernet, wifi, DSL PPP) Network/Internet Layer: basic software protocol (IP) Transport Layer: adds reliability to network layer (TCP, UDP) Application Layer: implements specific communications for each kind of program (HTTP, POP3/IMAP, SSH, FTP) From Web Stepp Book Chapter 1", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>The Internet</h2>\n            <div>\n              <img class=\"simpleimg\" src=\"../img/tubes.png\" alt=\"Internet iz tubez\" style=\"margin: 25px 20px 0px 0px;\" height=\"300\" align=\"left\">\n              <p style=\"padding-top: 20px;\">Wikipedia: <a href=\"http://en.wikipedia.org/wiki/internet\">http://en.wikipedia.org/wiki/internet</a></p>\n              <p>A connection of computer networks built on the Internet Protocol (IP)</p>\n              <p>Layers of communication protocols (click the down arrow to see more)</p>\n            </div>\n            <p class=\"fragment\" style=\"float:left;padding-top: 20px;\">So's the difference between the Internet and the World Wide Web (WWW)?</p>\n          </section>", "text": "The Internet Wikipedia: http://en.wikipedia.org/wiki/internet A connection of computer networks built on the Internet Protocol (IP) Layers of communication protocols (click the down arrow to see more) So's the difference between the Internet and the World Wide Web (WWW)?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2><code>for</code> Loops (same as Java)</h2>\n          <pre><code class=\"hijs\" data-trim>for (initialization; condition; update) {\n  statements;\n}\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <div id=\"loop-examples\">\n          <pre>\n            <code class=\"hijs\" data-trim>let sum = 0;\nfor (let i = 0; i &lt; 100; i++) {\n  sum = sum + i; // same as sum += i;\n}</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hijs no-syntax-highlight\" data-trim>let s1 = \"It's a-me, Mario!\";\nlet s2 = \"\";\nfor (let i = 0; i &lt; s.length; i++) {\n  s2 += s1[i] + s1[i];\n}\n// s2 stores \"IItt''ss  aa--mmee,,  MMaarriioo!!\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          </div>\n          <p>See below slides for comparisons in Java/Python</p>\n          </section>", "text": "for Loops (same as Java) for (initialization; condition; update) { statements;} JS (template) let sum = 0;for (let i = 0; i < 100; i++) { sum = sum + i; // same as sum += i;} JS (example) let s1 = \"It's a-me, Mario!\";let s2 = \"\";for (let i = 0; i < s.length; i++) { s2 += s1[i] + s1[i];}// s2 stores \"IItt''ss aa--mmee,, MMaarriioo!!\" JS (example) See below slides for comparisons in Java/Python", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n            <h2><code>for</code> Loop Comparisons</h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>let s1 = \"It's a-me, Mario!\";\nlet s2 = \"\";\nfor (let i = 0; i &lt; s.length; i++) {\n  s2 += s1[i] + s1[i];\n}\n// s2 stores \"IItt''ss  aa--mmee,,  MMaarriioo!!\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hijs font-14pt\" data-trim>String s1 = \"It's a-me, Mario!\";\nString s2 = \"\";\nfor (int i = 0; i &lt; s.length(); i++) {\n  s2 += s1.charAt(i) + s1.charAt(i);\n}\n</code></pre>\n          <p class=\"code-caption\">Java (example)</p>\n          <pre><code class=\"hijs font-14pt\" data-trim>s1 = \"It's a-me, Mario!\";\ns2 = \"\";\nfor i in range(len(s1)):\n    s2 += s1[i] + s1[i];\n</code></pre>\n          <p class=\"code-caption\">Python (example)</p>\n\n          </section>", "text": "for Loop Comparisons let s1 = \"It's a-me, Mario!\";let s2 = \"\";for (let i = 0; i < s.length; i++) { s2 += s1[i] + s1[i];}// s2 stores \"IItt''ss aa--mmee,, MMaarriioo!!\" JS (example) String s1 = \"It's a-me, Mario!\";String s2 = \"\";for (int i = 0; i < s.length(); i++) { s2 += s1.charAt(i) + s1.charAt(i);} Java (example) s1 = \"It's a-me, Mario!\";s2 = \"\";for i in range(len(s1)): s2 += s1[i] + s1[i]; Python (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>if/else Statements (same as Java)</h2>\n          <pre><code class=\"hijs\" data-trim>if (condition) {\n  statements;\n} else if (condition) {\n  statements;\n} else {\n  statements;\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Identical structure to Java's <code>if/else</code> statements</p>\n          <p>JavaScript allows almost anything as a <em>condition</em></p>\n          <p>\n            Practice:\n            <a href=\"https://practiceit.cs.washington.edu/problem/view/javascript/ifelse/rockPaperScissors\">\n              <code>rockPaperScissors</code>\n            </a>\n          </p>\n        </section>", "text": "if/else Statements (same as Java) if (condition) { statements;} else if (condition) { statements;} else { statements;} JS Identical structure to Java's if/else statements JavaScript allows almost anything as a condition Practice: rockPaperScissors", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>while loops (same as Java)</h2>\n          <pre><code class=\"hijs\" data-trim>while (condition) {\n  statements;\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hijs\" data-trim>do {\n  statements;\n} while (condition);\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p><code>break</code> and <code>continue</code> keywords also behave as in Java but do not\n          use them in this class!</p>\n          <p>\n            Practice:\n            <a href=\"https://practiceit.cs.washington.edu/problem/view/javascript/loops/loopMystery6\">\n              <code>loopMystery6</code>\n            </a>\n          </p>\n        </section>", "text": "while loops (same as Java) while (condition) { statements;} JS do { statements;} while (condition); JS break and continue keywords also behave as in Java but do not use them in this class! Practice: loopMystery6", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Logical Operators</h2>\n          <p>Relational: <code>&gt; &lt; &gt;= &lt;=</code>, Logical: <code>&amp;&amp; || !</code>,\n             Equality: <code>=== !== == !=</code></p>\n          <ul>\n            <li>Most logical operators automatically convert types. These are all true:\n              <ul>\n                <li><code>5 &lt; \"7\"</code></li>\n                <li><code>42 == 42.0</code></li>\n                <li><code>\"5.0\" == 5</code></li>\n              </ul>\n            </li>\n            <li>\n              The <code>===</code> and <code>!==</code> are strict equality tests; checks <strong>both\n                type and value</strong>: <code>\"5.0\" === 5</code> is <code>false</code>. <strong>It's\n                almost always best to use <code>===</code> instead of <code>==</code></strong>.\n            </li>\n            <li>What does <code>154 === 154.0</code> evaluate to?</li>\n          </ul>\n          <p>Helpful JavaScript <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\">equality table</a>!</p>\n        </section>", "text": "Logical Operators Relational: > < >= <=, Logical: && || !, Equality: === !== == != Most logical operators automatically convert types. These are all true: 5 < \"7\" 42 == 42.0 \"5.0\" == 5 The === and !== are strict equality tests; checks both type and value: \"5.0\" === 5 is false. It's almost always best to use === instead of ==. What does 154 === 154.0 evaluate to? Helpful JavaScript equality table!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Data_types\">Boolean</a> Type</h2>\n          <pre>\n            <code class=\"hijs\" data-trim>let iLikeJS = true;\nlet ieIsGood = \"IE6\" &gt; 0; // false\nif (\"web dev is great\") { /* true */ }\nif (0) { /* false */ }\nif (1) { /* true */ }</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Any value can be used as a <code>Boolean</code></p>\n          <ul>\n            <li>\"falsey\" values: <code>false</code>, <code>0</code>, <code>NaN</code>,\n            <code>\"\"</code>, <code>null</code>, and <code>undefined</code></li>\n            <li>\"truthy\" values: anything else</li>\n          </ul>\n          <p>\n            Understanding what is \"falsey\" vs. \"truthy\" takes patience and practice.\n          </p>\n          <p>\n            When in doubt, check in the browser console!\n          </p>\n        </section>", "text": "Boolean Type let iLikeJS = true;let ieIsGood = \"IE6\" > 0; // falseif (\"web dev is great\") { /* true */ }if (0) { /* false */ }if (1) { /* true */ } JS Any value can be used as a Boolean \"falsey\" values: false, 0, NaN, \"\", null, and undefined \"truthy\" values: anything else Understanding what is \"falsey\" vs. \"truthy\" takes patience and practice. When in doubt, check in the browser console!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_object\" target=\"_blank\">Arrays</a></h2>\n          <pre><code class=\"hijs\" data-trim>let name = [];                          // empty array\nlet names = [value, value, ..., value]; // pre-filled\nnames[index] = value;                   // store element\n</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <pre>\n            <code class=\"hijs\" data-trim>let types = [\"Electric\", \"Water\", \"Fire\"];\nlet pokemon = [];        // []\npokemon[0] = \"Pikachu\";  // [\"Pikachu\"]\npokemon[1] = \"Squirtle\"; // [\"Pikachu\", \"Sqiurtle\"]\npokemon[3] = \"Magikarp\"; // [\"Pikachu\", \"Sqiurtle\", undefined, \"Magikarp\"]\npokemon[3] = \"Gyarados\"; // [\"Pikachu\", \"Sqiurtle\", undefined, \"Gyarados\"]\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p>Two ways to initialize an array</p>\n          <p><code>length</code> property (grows as needed when elements are added)</p>\n        </section>", "text": "Arrays let name = []; // empty arraylet names = [value, value, ..., value]; // pre-fillednames[index] = value; // store element JS (template) let types = [\"Electric\", \"Water\", \"Fire\"];let pokemon = []; // []pokemon[0] = \"Pikachu\"; // [\"Pikachu\"]pokemon[1] = \"Squirtle\"; // [\"Pikachu\", \"Sqiurtle\"]pokemon[3] = \"Magikarp\"; // [\"Pikachu\", \"Sqiurtle\", undefined, \"Magikarp\"]pokemon[3] = \"Gyarados\"; // [\"Pikachu\", \"Sqiurtle\", undefined, \"Gyarados\"] JS (example) Two ways to initialize an array length property (grows as needed when elements are added)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Array <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_methods\">methods</a></h2>\n          <pre><code class=\"hijs\" data-trim>let a = [\"Mario\", \"Luigi\"]; // [Mario, Luigi]\na.push(\"Koopatroopa\");      // [Mario, Luigi, Koopatroopa]\na.unshift(\"Bowser\");        // [Bowser, Mario, Luigi, Koopatroopa]\na.pop();                    // [Bowser, Mario, Luigi]\na.shift();                  // [Mario, Luigi]\na.sort();                   // [Luigi, Mario]\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Array serves as many data structures: list, queue, stack, ...</p>\n          <p>Methods: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"><code>pop</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>shift</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>toString</code></a>,\n                      <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\"><code>unshift</code></a></p>\n          <ul>\n            <li><code>push</code> and <code>pop</code> add/remove from back</li>\n            <li><code>shift</code> and <code>unshift</code> add/remove from front</li>\n            <li><code>shift</code> and <code>pop</code> return the element that is removed</li>\n          </ul>\n          <p>\n            Practice:\n            <a href=\"https://codestepbystep.com/problem/view/javascript/arrays/findMin\">\n              <code>findMin</code>\n            </a>,\n            <a href=\"https://codestepbystep.com/problem/view/javascript/arrays/switchPairs\">\n              <code>switchPairs</code>\n            </a>\n          </p>\n        </section>", "text": "Array methods let a = [\"Mario\", \"Luigi\"]; // [Mario, Luigi]a.push(\"Koopatroopa\"); // [Mario, Luigi, Koopatroopa]a.unshift(\"Bowser\"); // [Bowser, Mario, Luigi, Koopatroopa]a.pop(); // [Bowser, Mario, Luigi]a.shift(); // [Mario, Luigi]a.sort(); // [Luigi, Mario] JS Array serves as many data structures: list, queue, stack, ... Methods: concat, join, pop, push, reverse, shift, slice, sort, splice, toString, unshift push and pop add/remove from back shift and unshift add/remove from front shift and pop return the element that is removed Practice: findMin , switchPairs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Splitting strings: <code>split</code> and <code>join</code></h2>\n          <pre><code class=\"hijs\" data-trim>let s = \"the quick brown fox\";\nlet a = s.split(\" \"); // [\"the\", \"quick\", \"brown\", \"fox\"]\na.reverse();          // [\"fox\", \"brown\", \"quick\", \"the\"]\ns = a.join(\"!\");      // \"fox!brown!quick!the\"\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p><code>split</code> breaks apart a String into an array using a delimiter</p>\n          <ul>\n            <li>Can also be used with regular expressions surrounded by /:\n            <br><code>let a = s.split(/[ \\t]+/);</code></li>\n          </ul>\n          <p>\n            <code>join</code> merges an array into a single String, placing a delimiter between\n            them\n          </p>\n        </section>", "text": "Splitting strings: split and join let s = \"the quick brown fox\";let a = s.split(\" \"); // [\"the\", \"quick\", \"brown\", \"fox\"]a.reverse(); // [\"fox\", \"brown\", \"quick\", \"the\"]s = a.join(\"!\"); // \"fox!brown!quick!the\" JS split breaks apart a String into an array using a delimiter Can also be used with regular expressions surrounded by /: let a = s.split(/[ \\t]+/); join merges an array into a single String, placing a delimiter between them", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Defining Functions</h2>\n          <pre><code class=\"hijs\" data-trim>function name(params) {\n  statement;\n  statement;\n  ...\n  statement;\n}</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <pre>\n            <code class=\"hijs\" data-trim>function myFunction() {\n  console.log(\"Hello!\");\n  alert(\"Your browser says hi!\");\n}\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p>The above could be the contents of <code>basics.js</code> linked to our\n          <code>HTML</code> page</p>\n          <p>Statements placed into functions can be evaluated in response to user events</p>\n          <p>Practice:\n            <a target=\"_blank\" href=\"https://codestepbystep.com/problem/view/javascript/basics/fixErrors2\">\n              <code>fixErrors2</code>\n            </a>,\n            <a target=\"_blank\" href=\"https://codestepbystep.com/problem/view/javascript/strings/containsTwice\">\n              <code>containsTwice</code>\n            </a>,\n            <a target=\"_blank\" href=\"https://codestepbystep.com/problem/view/javascript/basics/functionMystery1\">\n              <code>functionMystery1</code>\n            </a>,\n            <a target=\"_blank\" href=\"https://codestepbystep.com/problem/view/javascript/parameters/sumUpTo\">\n              <code>sumUpTo</code>\n            </a>,\n            <a target=\"_blank\" href=\"https://codestepbystep.com/problem/view/javascript/basics/veryBestSong\">\n              <code>veryBestSong</code>\n            </a>\n          </p>\n        </section>", "text": "Defining Functions function name(params) { statement; statement; ... statement;} JS (template) function myFunction() { console.log(\"Hello!\"); alert(\"Your browser says hi!\");} JS (example) The above could be the contents of basics.js linked to our HTML page Statements placed into functions can be evaluated in response to user events Practice: fixErrors2 , containsTwice , functionMystery1 , sumUpTo , veryBestSong", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>JS Function vs. Java Method</h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>function repeat(str, n) {\n  let result = str;\n  for (let i = 1; i &lt; n; i++) {\n    result += str;\n  }\n  return result;\n}\nlet repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hljs font-14pt\" data-trim>public static String repeat(String str, int n) {\n  String result = str;\n  for (int i = 1; i &lt; n; i++) {\n    result += str;\n  }\n  return result;\n}\nString repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\"\n</code></pre>\n          <p class=\"code-caption\">Java (example)</p>\n        </section>", "text": "JS Function vs. Java Method function repeat(str, n) { let result = str; for (let i = 1; i < n; i++) { result += str; } return result;}let repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\" JS (example) public static String repeat(String str, int n) { String result = str; for (int i = 1; i < n; i++) { result += str; } return result;}String repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\" Java (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>JS Function vs. Python Function</h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>function repeat(str, n) {\n  let result = str;\n  for (let i = 1; i &lt; n; i++) {\n    result += str;\n  }\n  return result;\n}\nlet repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\"\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <pre><code class=\"hijs font-14pt\" data-trim>def repeat(str, n):\n  result = str;\n  for i in range(1, n):\n    result = result + str;\n  return result;\n\nrepeatedStr = repeat(\"echo...\", 3) // \"echo...echo...echo...\"\n</code></pre>\n          <p class=\"code-caption\">Python (example)</p>\n        </section>", "text": "JS Function vs. Python Function function repeat(str, n) { let result = str; for (let i = 1; i < n; i++) { result += str; } return result;}let repeatedStr = repeat(\"echo...\", 3); // \"echo...echo...echo...\" JS (example) def repeat(str, n): result = str; for i in range(1, n): result = result + str; return result;repeatedStr = repeat(\"echo...\", 3) // \"echo...echo...echo...\" Python (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>From the Console to a .js File</h2>\n          <p>Now, we'll use these building blocks of a new programming language to <em>control</em>\n          the behavior of our pages (which we don't get with HTML/CSS!).</p>\n        </section>", "text": "From the Console to a .js File Now, we'll use these building blocks of a new programming language to control the behavior of our pages (which we don't get with HTML/CSS!).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Remember Friday?</h2>\n          <p>We introduced different form element tags offered in HTML</p>\n          <p>But they're not too helpful if we can't do anything with them!</p>\n          <p>In general, to add interactivity to our HTML/CSS websites we need to:</p>\n          <ol>\n            <li>Link a JS program to our HTML (in the <code>&lt;head&gt;</code>)</li>\n            <li>Identify user/page <em>events</em> we want to respond to</li>\n            <li>Identify what <em>each response function is</em></li>\n            <li>Get the HTML DOM elements we want to be interactive, and \"assign\" the element its\n              own event(s) to listen to\n            </li>\n          </ol>\n        </section>", "text": "Remember Friday? We introduced different form element tags offered in HTML But they're not too helpful if we can't do anything with them! In general, to add interactivity to our HTML/CSS websites we need to: Link a JS program to our HTML (in the <head>) Identify user/page events we want to respond to Identify what each response function is Get the HTML DOM elements we want to be interactive, and \"assign\" the element its own event(s) to listen to", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n            <h2>Skittles V1 Specification</h2>\n            <p>\n              We will implement a \"game\" to fill a jar with Skittles. For now, we just want\n              to:\n            </p>\n            <ol>\n              <li>Switch views when Start/Reset buttons are clicked</li>\n              <li>Get the number of colors in a new game (from selected radio buttons)</li>\n              <li>Use this number to fill the jar with random number of Skittles and colors!</li>\n              <li>Remove Skittles from the jar</li>\n            \n            <p>\n              <img class=\"centered-figure\" width=\"40%\" src=\"hidden/skittles-wrong-guess.png\" alt=\"skittles page expected output\">\n            </p>\n          </ol></section>", "text": "Skittles V1 Specification We will implement a \"game\" to fill a jar with Skittles. For now, we just want to: Switch views when Start/Reset buttons are clicked Get the number of colors in a new game (from selected radio buttons) Use this number to fill the jar with random number of Skittles and colors! Remove Skittles from the jar", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n            <h2>Step 1: Hiding/Showing Views</h2>\n            <p>How can we hide display an HTML element?</p>\n            <div class=\"fragment\">\n            <pre><code>.hidden {\n  display: none;\n}</code></pre>\n            <p class=\"code-caption\">CSS</p>\n            </div>\n            <p class=\"fragment\">How can we add/remove CSS classes with JS?</p>\n          </section>", "text": "Step 1: Hiding/Showing Views How can we hide display an HTML element? .hidden { display: none;} CSS How can we add/remove CSS classes with JS?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n        <h2>Modifying the <code>classList</code></h2>\n        <p>You can manipulate the DOM element's\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\">classList</a>\n          with the following methods:\n        </p>\n        <table class=\"code-table half-width-columns\">\n          <tr>\n            <th>Name</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>add(classname)</td>\n            <td>\n              Adds the specified class(es) to the list of classes on this element. Any that are\n              already in the classList are ignored.\n            </td>\n          </tr>\n          <tr>\n            <td>remove(classname)</td>\n            <td>\n              Removes the specified class(es) to the list of classes from this element. Any that are\n              already not in the classList are ignored without an error\n            </td>\n          </tr>\n          <tr>\n            <td>toggle(classname)</td>\n            <td>\n              Removes a class that is in the list, adds a class that is not in the list.\n            </td>\n          </tr>\n          <tr>\n            <td>contains(classname)</td>\n            <td>\n              Returns true if the class is in the the DOM element's classList, false if not.\n            </td>\n          </tr>\n          <tr>\n            <td>replace(oldclass, newclass)</td>\n            <td>\n              Replaces the old class with the new class.\n            </td>\n          </tr>\n        </table>\n      </section>", "text": "Modifying the classList You can manipulate the DOM element's classList with the following methods: Name Description add(classname) Adds the specified class(es) to the list of classes on this element. Any that are already in the classList are ignored. remove(classname) Removes the specified class(es) to the list of classes from this element. Any that are already not in the classList are ignored without an error toggle(classname) Removes a class that is in the list, adds a class that is not in the list. contains(classname) Returns true if the class is in the the DOM element's classList, false if not. replace(oldclass, newclass) Replaces the old class with the new class.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n        <h2>Examples</h2>\n        <p>There were examples of this used in the Skittles code, eg, when a\n          skittle was created, or when the game view was changed.\n        </p><p>\n\n        </p><pre><code class=\"hljs\">\nfunction gameView() {\n  id(\"game-view\").classList.remove(\"hidden\");\n  id(\"menu-view\").classList.add(\"hidden\");\n  id(\"results\").innerText = \"\";\n}\n...\nfunction addSkittle() {\n  let skittle = document.createElement(\"div\");\n  skittle.classList.add(\"skittle\");\n  let randomColor = getRandomColor();\n  skittle.classList.add(randomColor);\n  id(\"jar\").appendChild(skittle);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n      </section>", "text": "Examples There were examples of this used in the Skittles code, eg, when a skittle was created, or when the game view was changed. function gameView() { id(\"game-view\").classList.remove(\"hidden\"); id(\"menu-view\").classList.add(\"hidden\"); id(\"results\").innerText = \"\";}...function addSkittle() { let skittle = document.createElement(\"div\"); skittle.classList.add(\"skittle\"); let randomColor = getRandomColor(); skittle.classList.add(randomColor); id(\"jar\").appendChild(skittle);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n        <h2>Why Not .style?</h2>\n\n        <pre><code class=\"hljs\">\n// suppose we have a skittle div we want to give our \"pikachuyellow\" color\n// which is better? why?\nskittle.style.backgroundColor = \"#f3d77b\";\n\n// or\nskittle.classList.add(\"pikachuyellow\");</code></pre>\n          <p class=\"code-caption\">JS</p>\n      </section>", "text": "Why Not .style? // suppose we have a skittle div we want to give our \"pikachuyellow\" color// which is better? why?skittle.style.backgroundColor = \"#f3d77b\";// orskittle.classList.add(\"pikachuyellow\"); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n            <h2>Step 2: How Many Colors?</h2>\n            <p>How do we determine what radio button value is selected?</p>\n            <p>How do we use this value when starting a game?</p>\n          </section>", "text": "Step 2: How Many Colors? How do we determine what radio button value is selected? How do we use this value when starting a game?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section id=\"radiobuttons\">\n            <h2>Review: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Radio_button\" target=\"_blank\">Radio\n              buttons</a>: <code>&lt;input&gt;</code></h2>\n            <p class=\"term-definition\">sets of mutually exclusive choices (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;input type=\"radio\" name=\"color-count\" value=\"3\" checked /&gt; 3\n&lt;input type=\"radio\" name=\"color-count\" value=\"6\"/&gt; 6\n&lt;input type=\"radio\" name=\"color-count\" value=\"9\"/&gt; 9</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n        <label><input type=\"radio\" name=\"color-count\" value=\"3\" checked> 3</label>\n        <label><input type=\"radio\" name=\"color-count\" value=\"6\"> 6</label>\n        <label><input type=\"radio\" name=\"color-count\" value=\"9\"> 9</label>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>Grouped by name attribute (only one can be checked at a time)</p>\n            <p>Must specify a value for each one or else it will be sent as value on</p>\n          </section>", "text": "Review: Radio buttons: <input> sets of mutually exclusive choices (inline) <input type=\"radio\" name=\"color-count\" value=\"3\" checked /> 3<input type=\"radio\" name=\"color-count\" value=\"6\"/> 6<input type=\"radio\" name=\"color-count\" value=\"9\"/> 9 HTML 3 6 9 output Grouped by name attribute (only one can be checked at a time) Must specify a value for each one or else it will be sent as value on", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n\t\t\t\t\t<h2>Useful Selectors for Form/UI Elements</h2>\n          <div class=\"side-by-side two-panel\">\n            <div>\n          <pre><code class=\"hljs\" data-trim>element[attribute=\"value\"] {\n  property: value;\n  ...\n}</code></pre>\n          <p class=\"code-caption\">CSS (template)</p>\n          </div>\n\n            <div>\n          <pre><code class=\"hljs\">input[name='color-count'] {\n  opacity: 0.5;\n}\n          </code></pre>\n          <p class=\"code-caption\">CSS (example)</p>\n            </div>\n            </div>\n\n          <div class=\"output\">\n        <label><input style=\"opacity: 0.5;\" type=\"radio\" name=\"color-count\" value=\"3\" checked> 3</label>\n        <label><input style=\"opacity: 0.5;\" type=\"radio\" name=\"color-count\" value=\"6\"> 6</label>\n        <label><input style=\"opacity: 0.5;\" type=\"radio\" name=\"color-count\" value=\"9\"> 9</label>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>Attribute selector: matches only elements that have a particular attribute value</p>\n          <p>Useful for controls because many share the same element (input)</p>\n          <p>Can also use these selectors in JS with <code>document.querySelector</code>!</p>\n        </section>", "text": "Useful Selectors for Form/UI Elements element[attribute=\"value\"] { property: value; ...} CSS (template) input[name='color-count'] { opacity: 0.5;} CSS (example) 3 6 9 output Attribute selector: matches only elements that have a particular attribute value Useful for controls because many share the same element (input) Can also use these selectors in JS with document.querySelector!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Using Attribute Selectors to get a Selected Radio Button</h2>\n          <pre><code class=\"hljs\" data-trim>let checkedBtn = qs(\"input[name='color-count']:checked\");\nlet colorCount = checkedBtn.value;\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n        </section>", "text": "Using Attribute Selectors to get a Selected Radio Button let checkedBtn = qs(\"input[name='color-count']:checked\");let colorCount = checkedBtn.value; JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Are we done?</h2>\n          <p>The starter code has some todos for extra practice of DOM manipulation. If you'd like\n          extra practice, try to work through them to get the expected behavior from the <a href=\"\">video</a> at home!\n          </p>\n        </section>", "text": "Are we done? The starter code has some todos for extra practice of DOM manipulation. If you'd like extra practice, try to work through them to get the expected behavior from the video at home!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Removing DOM elements... a decision</h2>\n          <p>What happens if we don't remove the skittles when we start a new game?</p>\n          <div class=\"flex-row\">\n            <img class=\"fragment\" src=\"hidden/skittle-overload1.png\" alt=\"adding too many skittles 1\">\n            <img class=\"fragment\" src=\"hidden/skittle-overload2.png\" alt=\"adding too many skittles 2\">\n            <img class=\"fragment\" src=\"hidden/skittle-overload3.png\" alt=\"adding too many skittles 3\">\n          </div>\n        </section>", "text": "Removing DOM elements... a decision What happens if we don't remove the skittles when we start a new game?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Three methods for removing elements</h2>\n          <p>Get all of the DOM elements and remove them from the DOM</p>\n          <pre><code class=\"hljs\" data-trim>function clearJar() {\n  let skittles = qsa(\".skittle\");\n  for (let i = 0; i &lt; skittles.length; i++) {\n    // 1. Using node.remove();\n    skittles[i].remove();\n    // 2. Using parentNode.removeChild(node);\n    // skittles[i].parentNode.removeChild(skittles[i]);\n  }\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"fragment\">\n            <p>Or ... Method 3: Set the Jar's <code>innerHTML</code> to be empty!</p>\n            <pre><code class=\"hljs\" data-trim>function clearJar() {\n  id(\"jar\").innerHTML = \"\";\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n        </section>", "text": "Three methods for removing elements Get all of the DOM elements and remove them from the DOM function clearJar() { let skittles = qsa(\".skittle\"); for (let i = 0; i < skittles.length; i++) { // 1. Using node.remove(); skittles[i].remove(); // 2. Using parentNode.removeChild(node); // skittles[i].parentNode.removeChild(skittles[i]); }} JS Or ... Method 3: Set the Jar's innerHTML to be empty! function clearJar() { id(\"jar\").innerHTML = \"\";} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Note: in general <code>innerHTML</code> hacking is <span class=\"bad\">bad</span></h2>\n          <p>Why not just code this way?</p>\n          <pre><code class=\"hljs\" data-trim data-noescape>document.getElementById(\"add\")<span class=\"bad\">.innerHTML = </span> \"&lt;p&gt;A result!&lt;/p&gt;\";</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Bad code quality (maintainability) on many levels </p>\n          <ul>\n            <li>Not modular: HTML code embedded within JS</li>\n            <li>What if you have a complicated new node (with many subchildren) to add? </li>\n            <li>Error-prone: must carefully distinguish \" and '</li>\n            <li>Can only add at beginning or end, not in middle of child list</li>\n          </ul>\n          <pre><code class=\"hljs\" data-trim data-noescape>// Substitutes all children\nid(\"add\").innerHTML =  \"&lt;p&gt;A result!&lt;/p&gt;\";\n// adds a node to the front of the list of children.\nid(\"add\").innerHTML  = \"&lt;p&gt;A result!&lt;/p&gt;\" + id(\"result\").innerHTML;\n// adds a node to the end of the list of children\nid(\"add\").innerHTML += \"&lt;p&gt;A result!&lt;/p&gt;\";</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Note: in general innerHTML hacking is bad Why not just code this way? document.getElementById(\"add\").innerHTML = \"<p>A result!</p>\"; JS Bad code quality (maintainability) on many levels Not modular: HTML code embedded within JS What if you have a complicated new node (with many subchildren) to add? Error-prone: must carefully distinguish \" and ' Can only add at beginning or end, not in middle of child list // Substitutes all childrenid(\"add\").innerHTML = \"<p>A result!</p>\";// adds a node to the front of the list of children.id(\"add\").innerHTML = \"<p>A result!</p>\" + id(\"result\").innerHTML;// adds a node to the end of the list of childrenid(\"add\").innerHTML += \"<p>A result!</p>\"; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>One more: removing elements via the parent node</h2>\n          <h3>What if you were to add code to get rid of a skittle when its double clicked?</h3>\n          <p>What is the source element? <span class=\"fragment\">A skittle (div)</span></p>\n          <p>What is the event we want to respond to? <span class=\"fragment\">dblclick</span></p>\n          <p>What is the response? <span class=\"fragment\">removeSkittle</span></p>\n          <p>What is the output/elements changed? <span class=\"fragment\">the parent of the skittle (the jar)</span></p>\n          <div class=\"fragment\">\n            <pre><code class=\"hljs\" data-trim>//code added to addSkittle()\nskittle.addEventListener(\"dblclick\", removeSkittle);\n...\n// new function added (with JSDoc not seen here)\nfunction removeSkittle() {\n  this.parentNode.removeChild(this);\n  // can also use this.remove() to remove from the document entirely (ES6)\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          </div>\n        </section>", "text": "One more: removing elements via the parent node What if you were to add code to get rid of a skittle when its double clicked? What is the source element? A skittle (div) What is the event we want to respond to? dblclick What is the response? removeSkittle What is the output/elements changed? the parent of the skittle (the jar) //code added to addSkittle()skittle.addEventListener(\"dblclick\", removeSkittle);...// new function added (with JSDoc not seen here)function removeSkittle() { this.parentNode.removeChild(this); // can also use this.remove() to remove from the document entirely (ES6)} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Some Extra Resources</h2>\n          <p>More on reading/changing styles</p>\n        </section>", "text": "Some Extra Resources More on reading/changing styles", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <section id=\"changing-styles\">\n          <h2>More on reading a changing styles</h2>\n          <p>\n            Recall that the <code>.style</code> property of a DOM object lets you set any\n            CSS style for an element\n          </p>\n\n        <pre><code class=\"hljs\" data-trim>button { font-size: 16pt; }</code></pre>\n        <p class=\"code-caption\">CSS</p>\n\n        <pre><code class=\"hljs\" data-trim>&lt;button id=\"clickme\"&gt;Click Me&lt;/button&gt;</code></pre>\n        <p class=\"code-caption\">HTML</p>\n\n\n        <pre><code class=\"hljs\" data-trim data-noescape>window.addEventListener(\"load\", initialize);\nfunction init() {\n  id(\"clickme\").addEventListener(\"click\", biggerFont);\n}\nfunction biggerFont() {\n  let size = parseInt(this.style.fontSize); // size === 16pt to start\n  this.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!\n}</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <div class=\"output\">\n          <button id=\"clickme\" style=\"font-size:16pt;\">Click Me</button>\n          <p class=\"output-caption\">output</p>\n        </div>\n\n      </section>\n\n      <section>\n        <h2>Problem with reading &amp; changing styles</h2>\n        <p><strong>Note!</strong> Be careful to </p>\n        <ul>\n          <li>remove the units from a  <code>.style</code> value before doing arithmetic on it. </li>\n          <li>add the units to numerical values (like <code>pt</code>, <code>px</code>,\n            <code>vw</code>, etc) when setting <code>.style</code> values.\n          </li>\n        </ul>\n        <p>\n          Also: <strong>a catch:</strong> you can only use this to read styles\n          that have been set with the DOM <code>.style</code>\n          earlier in the code <span class=\"small-font\">or with inline CSS which we don't\n            want you to do </span>.\n        </p>\n        <p>\n          You cannot read style properties set in the <code>.css</code> file using <code>.style</code>!\n        </p>\n      </section>\n\n\n      <section>\n        <h2>Accessing elements' computed styles</h2>\n        <p>\n          <code>getComputedStyle</code> method of global\n          <code>window</code> object accesses existing styles\n        </p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>window.getComputedStyle(element).propertyName;</code></pre>\n        <p class=\"code-caption\">JS (template)</p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>img {\n  height: 600px;\n}</code></pre>\n        <p class=\"code-caption\">CSS</p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>&gt; let img = document.querySelector(\"img\");\n&gt; img.style.height;\n&gt; \"\"\n&gt; img.style.height = \"25%\";\n&gt; \"25%\"\n&gt; window.getComputedStyle(img).height;\n&gt; \"828.234px\"</code></pre>\n        <p class=\"code-caption\">JS Console Output</p>\n        <p class=\"small-font\">Thanks to Daniel H for the example</p>\n      </section>\n      <section>\n        <h2>Common bug: incorrect usage of existing styles</h2>\n        <p>\n          The following example attempts to add 100px to the top of <code>main</code>, but fails.\n        </p>\n        <p>\n          Consider the case when <code>main</code> has <code>top</code> set to \"200px\". Then\n          this code would update <code>style.top</code> to be the invalid value of \"200px100px\"\n        </p>\n        <pre><code class=\"hljs\" data-trim data-noescape>let main = document.getElementById(\"main\");\n<del class=\"bad\">main.style.top = window.getComputedStyle(main).top + 100 + \"px\";</del>\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n\n        <p>A corrected version:</p>\n        <pre><code class=\"hljs\" data-trim data-noescape>main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\";\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n      </section>\n        </section>", "text": "More on reading a changing styles Recall that the .style property of a DOM object lets you set any CSS style for an element button { font-size: 16pt; } CSS <button id=\"clickme\">Click Me</button> HTML window.addEventListener(\"load\", initialize);function init() { id(\"clickme\").addEventListener(\"click\", biggerFont);}function biggerFont() { let size = parseInt(this.style.fontSize); // size === 16pt to start this.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!} JS Click Me output Problem with reading & changing styles Note! Be careful to remove the units from a .style value before doing arithmetic on it. add the units to numerical values (like pt, px, vw, etc) when setting .style values. Also: a catch: you can only use this to read styles that have been set with the DOM .style earlier in the code or with inline CSS which we don't want you to do . You cannot read style properties set in the .css file using .style! Accessing elements' computed styles getComputedStyle method of global window object accesses existing styles window.getComputedStyle(element).propertyName; JS (template) img { height: 600px;} CSS > let img = document.querySelector(\"img\");> img.style.height;> \"\"> img.style.height = \"25%\";> \"25%\"> window.getComputedStyle(img).height;> \"828.234px\" JS Console Output Thanks to Daniel H for the example Common bug: incorrect usage of existing styles The following example attempts to add 100px to the top of main, but fails. Consider the case when main has top set to \"200px\". Then this code would update style.top to be the invalid value of \"200px100px\" let main = document.getElementById(\"main\");main.style.top = window.getComputedStyle(main).top + 100 + \"px\"; JS A corrected version: main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\"; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section id=\"changing-styles\">\n          <h2>More on reading a changing styles</h2>\n          <p>\n            Recall that the <code>.style</code> property of a DOM object lets you set any\n            CSS style for an element\n          </p>\n\n        <pre><code class=\"hljs\" data-trim>button { font-size: 16pt; }</code></pre>\n        <p class=\"code-caption\">CSS</p>\n\n        <pre><code class=\"hljs\" data-trim>&lt;button id=\"clickme\"&gt;Click Me&lt;/button&gt;</code></pre>\n        <p class=\"code-caption\">HTML</p>\n\n\n        <pre><code class=\"hljs\" data-trim data-noescape>window.addEventListener(\"load\", initialize);\nfunction init() {\n  id(\"clickme\").addEventListener(\"click\", biggerFont);\n}\nfunction biggerFont() {\n  let size = parseInt(this.style.fontSize); // size === 16pt to start\n  this.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!\n}</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <div class=\"output\">\n          <button id=\"clickme\" style=\"font-size:16pt;\">Click Me</button>\n          <p class=\"output-caption\">output</p>\n        </div>\n\n      </section>", "text": "More on reading a changing styles Recall that the .style property of a DOM object lets you set any CSS style for an element button { font-size: 16pt; } CSS <button id=\"clickme\">Click Me</button> HTML window.addEventListener(\"load\", initialize);function init() { id(\"clickme\").addEventListener(\"click\", biggerFont);}function biggerFont() { let size = parseInt(this.style.fontSize); // size === 16pt to start this.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!} JS Click Me output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n            <h2>Layered Architecture</h2>\n            <div class=\"side-by-side\">\n              <div>\n                <p><strong>Physical layer</strong>: devices such as ethernet, coaxial cables, fiber-optic\n                lines, modems</p>\n                <p><strong>Data Link Layer</strong>: basic hardware protocols (ethernet,\n                wifi, DSL PPP)</p>\n                <p><strong>Network/Internet Layer</strong>: basic software protocol (IP)</p>\n                <p><strong>Transport Layer</strong>: adds reliability to network layer\n                (TCP, UDP)</p>\n                <p><strong>Application Layer</strong>: implements specific\n                communications for each kind of program (HTTP, POP3/IMAP, SSH, FTP)</p>\n              </div>\n              <div>\n                <img src=\"../img/osi-model.png\" height=\"400px\" width=\"500px\" alt=\"OSI model\">\n              </div>\n            </div>\n            <p> From <a href=\"http://www.webstepbook.com/supplements/slides/ch01-internet.shtml\"> Web Stepp Book Chapter 1</a></p>\n          </section>", "text": "Layered Architecture Physical layer: devices such as ethernet, coaxial cables, fiber-optic lines, modems Data Link Layer: basic hardware protocols (ethernet, wifi, DSL PPP) Network/Internet Layer: basic software protocol (IP) Transport Layer: adds reliability to network layer (TCP, UDP) Application Layer: implements specific communications for each kind of program (HTTP, POP3/IMAP, SSH, FTP) From Web Stepp Book Chapter 1", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>The World Wide Web</h2>\n          <p><a href=\"https://en.wikipedia.org/wiki/web_server\">Web server</a>: software that listens for web page requests\n          </p><ul>\n            <li><a href=\"http://www.apache.org/\">Apache</a></li>\n            <li>Microsoft Internet Information Server (IIS) (<a href=\"https://www.iis.net/\">part of windows</a>)</li>\n            <li><a href=\"https://www.nginx.com/resources/wiki/\">NGINX</a></li>\n          </ul>\n          \n          <p><a href=\"https://en.wikipedia.org/wiki/web_browser\">Web browser</a>: fetches/displays documents from web servers\n          </p>\n          <ul>\n            <li><a href=\"http://www.google.com/chrome/\">Google Chrome</a></li>\n            <li><a href=\"http://www.getfirefox.com/\">Mozilla Firefox</a></li>\n            <li>Microsoft <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer\">Internet Explorer</a> (IE) and <a href=\"https://en.wikipedia.org/wiki/Microsoft_Edge\">Edge</a></li>\n            <li>Apple <a href=\"http://www.apple.com/safari/\">Safari</a></li>\n            <li><a href=\"http://www.opera.com/\">Opera</a></li>\n          </ul>\n        </section>", "text": "The World Wide Web Web server: software that listens for web page requests Apache Microsoft Internet Information Server (IIS) (part of windows) NGINX Web browser: fetches/displays documents from web servers Google Chrome Mozilla Firefox Microsoft Internet Explorer (IE) and Edge Apple Safari Opera", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>The Internet: A Brief History</h2>\n          <img class=\"simpleimg\" src=\"../img/mainframes.png\" alt=\"Mainframes\" style=\"margin: 0px;\" height=\"200\" align=\"right\">\n          <p>Began as a US Department of Defense network called <a href=\"http://en.wikipedia.org/wiki/ARPANET\">ARPANET</a>\n          (1960s-70s)</p>\n          <p style=\"text-indent:30px;\">Initial services: electronic mail, file transfer</p>\n          <p style=\"text-indent:30px;\">Opened to commercial interests in late 80s</p>\n          <p>WWW created in 1989-91 by <a href=\"http://en.wikipedia.org/wiki/Tim_Berners-Lee\">Tim Berners-Lee</a></p>\n          <p>Popular web browsers released: Netscape 1994, IE 1995</p>\n          <p>Then... all this: <a href=\"http://www.evolutionoftheweb.com/\" target=\"_blank\">http://www.evolutionoftheweb.com</a>\n          </p>\n          <p>Other notable web events:</p>\n          <div class=\"side-by-side\">\n          <ul class=\"medium-small-font\">\n            <li>Amazon.com opens in 1995; Google in January 1996</li>\n            <li><a href=\"http://www.hampsterdance.com/classics/originaldance.htm\">Hamster Dance</a>\n              web page created in 1999</li>\n            <li>Facebook founded in February 2004</li>\n            <li>Chrome released in September 2008</li>\n            <li>Snapchat created in September 2011</li>\n          </ul>\n          <div style=\"display:flex\">\n            <img width=\"100px\" src=\"../img/hamu.gif\" alt=\"Hamster Dance\">\n            <img width=\"100px\" src=\"../img/hamu.gif\">\n            <img width=\"100px\" src=\"../img/hamu.gif\">\n          </div>\n        \n\n        <section>\n          <h2>Key Aspects of the Internet</h2>\n          <p>Subnetworks can stand on their own</p>\n          <p>Computers can dynamically join and leave the network</p>\n          <p>Built on open standards; anyone can create a new internet device</p>\n          <p>Lack of centralized control (mostly)</p>\n          <p>Everyone can use it with simple, commonly-available software</p>\n          <a href=\"https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers\">\n            <img class=\"simpleimg\" src=\"../img/Internet_Connectivity_Access_layer.png\" alt=\"Picture of the internet\" height=\"280\"></a>\n            <p class=\"citation\">https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers</p>\n\n        </section>\n\n        <section>\n          <h2>Question</h2>\n          <p>Who \"runs\" the Internet? Who is responsible for overseeing it?</p>\n        </section>\n\n        <section>\n          <h2>People and Organizations (and Companies)</h2>\n          <p>Internet Engineering Task Force\n            (<a href=\"http://en.wikipedia.org/wiki/Internet_Engineering_Task_Force\">IETF</a>):\n             Internet protocol standards</p>\n          <p>Internet Corporation for Assigned Names and Numbers\n             (<a href=\"http://en.wikipedia.org/wiki/ICANN\">ICANN</a>):\n            decides top-level <a href=\"http://news.com.com/ICANN+rejects+.xxx+domain/2100-1047_3-6071124.html\">domain names</a>\n          </p>\n          <p>World Wide Web Consortium\n            (<a href=\"http://en.wikipedia.org/wiki/World_Wide_Web_Consortium\">W3C</a>): web standards\n          </p>\n          <p class=\"flex-row\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/ietf-logo.gif\" alt=\"IETF\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/icann.jpg\" alt=\"ICANN\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/w3c.png\" alt=\"W3C\">\n          </p>\n          <p>These protocols are carried out in large part by <strong>Internet service\n            providers</strong> and other companies and organizations who build\n          Internet-related products and applications</p>\n        </section>\n\n\n        <section>\n          <h2>Internet Protocol (IPv4 or IPv6)</h2>\n          <p>A simple protocol for attempting to send data between two computers</p>\n          <p>Each device has a 32- or 128-bit IP address. For IPv4 this is written as four 8-bit numbers (0-255)</p>\n          <p><img src=\"../img/fig1_ip_address.png\" alt=\"IP Address Example\"></p>\n          <p>Find your internet IP address: <a href=\"http://whatismyip.com\" target=\"_blank\">whatismyip.com</a></p>\n          <p>Find out your local IP address: in a terminal, type <code>ipconfig</code>\n          (Windows) or <code>ifconfig</code> (Mac/Linux)</p>\n        </section>\n\n        <section>\n          <h2>Domain Name System (<a href=\"http://en.wikipedia.org/wiki/dns\">DNS</a>)</h2>\n          <p>Think about some domain names you know. What do they end with?</p><p>\n          </p><p class=\"fragment\">Used to be only .com, .org, .net, .gov, .edu, .int, .mil</p>\n          <p class=\"fragment\">... then there were two letter extensions like .uk, .es</p>\n          <p class=\"fragment\">Now .everything!</p>\n          <div class=\"fragment\">\n            <p>A Domain Name System is a set of servers that map written names to IP addresses\n            </p><ul>\n              <li>Example: <code>www.cs.washington.edu \u2192 128.208.3.88</code></li>\n            </ul>\n          </div>\n        </section>\n\n        <section>\n          <h2>Transmission Control Protocol (<a href=\"http://en.wikipedia.org/wiki/Tcp_protocol\">TCP</a>)</h2>\n          <p>Adds multiplexing, guaranteed message delivery on top of IP</p>\n          <p><strong>Multiplexing</strong>: multiple programs using the same IP address\n          </p><ul>\n            <li><strong>Port</strong>: a number given to each program or service</li>\n            <li>port 80: web browser (port 443 for secure browsing)</li>\n            <li>port 25: email</li>\n            <li>port 22: ssh</li>\n            <li>port 5190: AOL Instant Messenger</li>\n            <li><a href=\"http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers\">More common ports</a></li>\n          </ul>\n          \n          <p>Some programs (games, streaming media programs) use simpler <a href=\"http://en.wikipedia.org/wiki/User_Datagram_Protocol\">UDP</a>\n          protocol instead of TCP</p>\n        </section>\n\n        <section>\n          <h2>The World Wide Web (WWW)</h2>\n          <h3>Wait, how is it different than the Internet again?</h3>\n          <p>The Internet describes all the interconnected devices that use the \"internet\n          protocol.\" The World Wide Web is the subset of the Internet that uses the HTTP\n          and HTTPS protocols, mostly to transmit \"webpages.\"</p>\n        </section>\n\n        <section>\n          <h2>Uniform Resource Locator (<a href=\"http://en.wikipedia.org/wiki/Url\">URL</a>)</h2>\n          <p>An identifier for the location of a document on a web site</p>\n          <p>\n          A basic URL:\n          <br>\n          </p><pre><code class=\"hljs nohighlight\">https://courses.cs.washington.edu/courses/cse154/19sp/\n~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~\nprotocol           host               path</code></pre>\n\n          \n          <p>Upon entering this URL into the browser, it would:\n          </p><ul>\n            <li>Ask the \"DNS\" server for the IP address of\n              <code>courses.cs.washington.edu</code></li>\n            <li>Connect to that IP address at port 80</li>\n            <li>Ask the server to <code>GET /courses/cse154/19sp/index.html</code></li>\n            <li>Display the resulting page on the screen</li>\n          </ul>\n          \n        </section>\n\n\n        <section>\n          <h2>Hypertext Transport Protocol (<a href=\"http://en.wikipedia.org/wiki/Http_protocol\">HTTP</a>)</h2>\n          <p>The set of commands understood by a web server and sent from a browser</p>\n          <p>Some HTTP commands (your browser sends these internally):</p>\n          <ul>\n            <li><code>GET  filename</code>: download</li>\n            <li><code>POST filename</code>: send a web form response</li>\n            <li><code>PUT  filename</code>: upload</li>\n          </ul>\n          <p>We will learn more about <code>GET</code> and <code>POST</code> when we start\n          the server-side programming module of this course</p>\n\n          <!--\n          <p>\n          Simulating a browser with a terminal window:\n          <img src=\"../img/telnet.png\" alt=\"Terminal Browser\" />\n          </p>\n          -->\n        </section>\n\n        <section>\n          <h2>HTTP Error Codes</h2>\n          <p>When something goes wrong, the web server returns a special \"error code\"\n          number to the browser, possibly followed by an HTML document</p>\n          <p>Common Error Codes:</p>\n          <table>\n            <tr>\n              <th>Number</th>\n              <th>Meaning</th>\n            </tr>\n            <tr><td>200</td><td>OK</td></tr>\n            <tr>\n              <td><a href=\"http://clsc.net/research/google-302-page-hijack.htm\">301-303</a></td>\n              <td>page has moved (permanently or temporarily)</td></tr>\n            <tr>\n              <td><a href=\"http://www.cs.washington.edu/education/courses/cse190d/07sp/lectures/\">403</a></td>\n              <td>you are forbidden to access this page</td>\n            </tr>\n            <tr><td><a href=\"http://www.homestarrunner.com/404.html\">404</a></td><td>page not found</td></tr>\n            <tr><td>\n              <a href=\"https://httpstatuses.com/418\">418</a></td><td>I'm a teapot\n              (<a href=\"https://www.gizmodo.com.au/2017/08/aussie-programmers-attempt-to-remove-joke-im-a-teapot-web-error-ends-up-making-it-official-instead/%20\">fun\n              fact</a>, <a href=\"https://www.google.com/teapot\">example</a>)\n            </td></tr>\n            <tr><td>500</td><td>internal server error</td></tr>\n          </table>\n          <p><a href=\"http://en.wikipedia.org/wiki/Http_error_codes\">Complete list</a></p>\n          <p><a href=\"https://http.cat/\">... as cats</a></p>\n        </section>\n\n        <section>\n          <h2>The Real Innovation</h2>\n\n          <p>HTTP built resilience into the internet by creating the 404.</p>\n          <p>A website will always give a response, even if what a user wants isn't found.\u00a0</p>\n          <p>Examples:</p>\n          <ul>\n            <li><a href=\"http://acm.illinois.edu/404\" target=\"_blank\">ACM\u2019s 404</a></li>\n            <li><a href=\"http://www.wsdot.wa.gov/xyz\" target=\"_blank\">WSDOT</a> </li>\n            <li><a href=\"http://imgur.com/gallery/Ki2g9Ya\" target=\"_blank\">Imgur</a></li>\n            <li><a href=\"https://labs.ft.com/articles/four-oh-four/\" target=\"_blank\">FT Labs</a></li>\n          </ul>\n          <p>\u00a0</p>\n          <p>\n            Special thanks\n            to <a href=\"https://www.siggraph.org/discover/inspiration/member-profiles/alain-chesnais\">Alain\n              Chanais</a> for pointing out the beauty in the resiliency</p>\n\n        </section>\n\n        <section>\n          <h2>They Are Everywhere</h2>\n          <div style=\"display:flex; flex-direction: row;align-items:flex-start;\">\n\n            <img class=\"simpleimg\" src=\"../img/kid404.png\" alt=\"iPhone 404\" height=\"350px\" style=\"margin:5px;\">\n            <img class=\"simpleimg\" src=\"../img/coat404.png\" alt=\"Missing Coat 404\" height=\"350px\" style=\"margin:5px;\">\n            <img class=\"simpleimg\" src=\"../img/candle404.png\" alt=\"Missing Candles 404\" height=\"350px\" style=\"margin:5px;\">\n            <div style=\"display:flex; flex-direction: column;\">\n              <img class=\"simpleimg\" src=\"../img/auto404.png\" alt=\"Peugeot 404\" width=\"400px\" style=\"margin:5px;\">\n              <img class=\"simpleimg\" src=\"../img/clock404.png\" alt=\"Clock 404\" width=\"400px\" style=\"margin:5px;\">\n              <img class=\"simpleimg\" src=\"../img/room404.png\" alt=\"Room 404\" width=\"400px\" style=\"margin:5px;\">\n            </div>\n          </div>\n          <p class=\"fragment\">Except in the Allen Center (CSE building)</p>\n        </section>\n\n        <!-- Taken out for 18au\n        <section>\n          <h2>Internet Media (\"<a href=\"http://en.wikipedia.org/wiki/Mime_type\">MIME</a>\") Types</h2>\n          <p>Sometimes when including resources in a page (style sheet, icon, multimedia\n          object), we specify their type of data</p>\n          <table class=\"code-table\">\n            <tr>\n              <th>MIME type</th>\n              <th>file extension</th>\n            </tr>\n            <tr>\n              <td>text/html</td>\n              <td>.html</td>\n            </tr>\n            <tr>\n              <td>text/plain</td>\n              <td>.txt</td>\n            </tr>\n            <tr>\n              <td>image/gif</td>\n              <td>.gif</td>\n            </tr>\n            <tr>\n              <td>image/jpeg</td>\n              <td>.jpg</td>\n            </tr>\n            <tr>\n              <td>video/quicktime</td>\n              <td>.mov</td>\n            </tr>\n            <tr>\n              <td>application/octet-stream</td>\n              <td>.exe</td>\n            </tr>\n          </table>\n          <p>Lists of MIME types: <a\n                 href=\"http://www.w3schools.com/media/media_mimeref.asp\">by\n                 type</a>, <a\n                 href=\"http://www.webmaster-toolkit.com/mime-types.shtml\">by extension</a></p>\n        </section>\n        -->\n\n        <section>\n          <h2>Reminder: What is a web page, really?</h2>\n          <div>\n            <div style=\"width:25%;  position:absolute; left:0%;\">\n              <p class=\"fragment\"><strong>Content</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Words and images</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:25%;\">\n              <p class=\"fragment\"><strong>Structure</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\n                <p class=\"medium-small-font\">HTML</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:50%;\">\n              <p class=\"fragment\"><strong>Style</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">CSS</p>\n              </div>\n            </div>\n            <div style=\"width:23.2%;  position:absolute; left:75%;\">\n              <p class=\"fragment\"><strong>Behavior</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n\n        <section>\n          <section>\n            <h2>What do you see here?</h2>\n            <a href=\"http://www.washington.edu/news/\" target=\"_blank\">\n            <img class=\"simpleimg\" src=\"../img/samplepage.png\" alt=\"Sample web page\" align=\"middle\" style=\"display:block; margin:auto;\" height=\"500px\"></a>\n          </section>\n\n          <section>\n            <h2>What did you see?<h2>\n                <ul>\n                  <li><a href=\"#title-tag\">title</a></li>\n                  <li><a href=\"#header-footer-tags\">header and footer</a></li>\n                  <li><a href=\"#img-tag\">images</a></li>\n                  <li><a href=\"#ul-li-tags\">list</a></li>\n                  <li><a href=\"#p-tag\">paragraph</a></li>\n                  <li><a href=\"#heading-tags\">headings (various sizes)</a></li>\n                  <li><a href=\"#article-section-tags\">articles and sections</a></li>\n                  <li><a href=\"#hr-tag\">lines (aka horizontal rule)</a></li>\n                  <li><a href=\"#a-tag\">links to click</a></li>\n                  <li>menu items</li>\n                  <li>buttons</li>\n                  <li>places to enter text</li>\n                  <li>...</li>\n                </ul>\n          </h2></h2></section>\n\n          <section>\n            <h2>Content</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p>Words and images</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/content.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n\n          <section>\n            <h2>Structure</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                  <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                  <p>HTML</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/structure.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n\n\n          <section>\n            <h2>Style</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                <p>CSS</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/style.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n        </section>\n\n        <section>\n          <div class=\"side-by-side\">\n            <div style=\"width:25%;  position:absolute; left: 10%;\">\n              <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n            </div>\n              <div>\n                <h1 style=\"margin-top: 400px\">HTML</h1>\n              </div>\n          </div>\n        </section>\n\n        <section>\n          <h2>Hypertext Markup Language (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">HTML</a>)</h2>\n\n          <p>\n          Describes the <em>content</em> and <em>structure</em> of information on a web page\n          </p><ul>\n            <li>Not the same as the <em>presentation</em> (appearance on screen)</li>\n          </ul>\n          \n\n          <p>Surrounds text content with opening and closing <strong>tags</strong></p>\n          <p>\n          Each tag's name is called an <strong>element</strong>\n          </p><ul>\n            <li>Syntax:\n              <code>\n                <strong>&lt;element&gt;</strong> content <strong>&lt;/element&gt;</strong>\n              </code>\n            </li>\n            <li>Example:\n              <code>\n                <strong>&lt;p&gt;</strong>This is a paragraph<strong>&lt;/p&gt;</strong>\n              </code>\n            </li>\n          </ul>\n          \n          <p>Most whitespace is insignificant in HTML (ignored or collapsed to a single space)</p>\n          <p>We will use a newer version called HTML5</p>\n        </section>\n\n        <section>\n          <h2>Structure of an HTML Page</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    information about the page\n  &lt;/head&gt;\n  &lt;body&gt;\n    page contents\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n          <p>The <code>&lt;head&gt;</code> tag describes the page and the <code>&lt;body&gt;</code> tag\n          contains the page's content</p>\n          <p>An HTML page is saved into a file ending with extension <code>.html</code></p>\n          <p>The <code>DOCTYPE</code> tag tells the browser to interpret our page's code as\n          HTML5, the lastest/greatest version of the language</p>\n        </section>\n\n        <section>\n          <h2>Getting Started</h2>\n          <p>\n            There are many different types of HTML tags used to structure web pages (we can't\n            possibly cover all of them within lecture). Here's a table of the most common ones\n            you'll use in CSE 154, but you can find a comprehensive list\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a>\n            (it's a great bookmark page for reference this quarter!)</p>\n          <p>\n            Unless otherwise specified, all of the tags listed in the following slides are \n            required to be in the <code>&lt;body&gt;</code> of an HTML page\n            rather than the <code>&lt;head&gt;</code>.\n          </p>\n        </section>\n\n\n        <section>\n          <section>\n            <h2>HTML Tags - Table of Common Tags (1/2)</h2>\n            <p>Note: Go \"down\" this slide column for more information/examples on each tag!</p>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#title-tag\"><code>&lt;title&gt;</code></a></td>\n                <td>Page title (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#meta-tag\"><code>&lt;meta&gt;</code></a></td>\n                <td>Meta information tag (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#favicon-tag\"><code>&lt;favicon&gt;</code></a></td>\n                <td>Icon placed in the browser title bar and bookmarks (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#p-tag\"><code>&lt;p&gt;</code></a></td>\n                <td>Paragraph tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#heading-tags\"><code>&lt;h1&gt; ... &lt;h6&gt;</code></a></td>\n                <td>Heading tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#header-footer-tags\"><code>&lt;header&gt;, &lt;footer&gt;</code></a></td>\n                <td>Header/Footer tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#article-section-tags\"><code>&lt;article&gt;, &lt;section&gt;</code></a></td>\n                <td>Article and section tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#hr-tag\"><code>&lt;hr /&gt;</code></a></td>\n                <td>Horizontal rule tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#br-tag\"><code>&lt;br /&gt;</code></a></td>\n                <td>Line break tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#a-tag\"><code>&lt;a&gt;</code></a></td>\n                <td>Anchor tag (page links)</td>\n              </tr>\n            </table>\n          </section>\n\n          <section>\n            <h2>HTML Tags - Table of Common Tags (2/2)</h2>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#img-tag\"><code>&lt;img /&gt;</code></a></td>\n                <td>Image tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#em-strong-tags\"><code>&lt;em&gt;, &lt;strong&gt;</code></a></td>\n                <td>Emphasis (italic) and strong (bold) tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#del-ins-tags\"><code>&lt;del&gt;, &lt;ins&gt;</code></a></td>\n                <td>Deletion (strikethrough) and insertion tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#abbr-tags\"><code>&lt;abbr&gt;</code></a></td>\n                <td>Abbreviation tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;ul&gt;</code></a>, <a href=\"#ol-tag\"><code>&lt;ol&gt;</code></a></td>\n                <td>Unordered and ordered list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;li&gt;</code></a></td>\n                <td>List item tag (used as children of <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> list tags)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#definition-list-tags\">\n                    <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code>\n                  </a>\n                  </td><td>Definition list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#blockquote-tag\"><code>&lt;blockquote&gt;</code></a>,\n                  <a href=\"#q-tag\"><code>&lt;q&gt;</code></a></td>\n                <td>Block and inline quotation tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#code-tags\"><code>&lt;code&gt;</code></a></td>\n                <td>Computer code tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#pre-tags\"><code>&lt;pre&gt;</code></a></td>\n                <td>Preformatting tag</td>\n              </tr>\n            </table>\n          </section>\n\n          <section id=\"title-tag\">\n            <h2>Page Title: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\">&lt;title&gt;</a></code></h2>\n            <pre>\n<code class=\"hljs\" data-trim>&lt;title&gt;\n  Chapter 2: HTML Basics\n&lt;/title&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed within the <code>&lt;head&gt;</code> of the page</p>\n            <p>\n            Displayed in the web browser's title bar and when bookmarking the page,\n            otherwise not visible to the user as page content\n            </p>\n          </section>\n\n          <section id=\"meta-tag\">\n            <h2>\n              Web Page Metadata:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            information about your page (for a browser, search engine, etc.)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"description\"\n      content=\"Authors' web site for\n      Building Java Programs.\" /&gt;\n&lt;meta name=\"keywords\" content=\"java, textbook\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed in the <code>head</code> section of your HTML page</p>\n            <p><code>meta</code> tags often have both the <code>name</code> and <code>content</code> attributes\n            </p><ul>\n              <li>Some <code>meta</code> tags use the <code>http-equiv</code> attribute instead of <code>name</code></li>\n              <li>The <code>meta</code> tag with <code>charset</code> attribute indicates language/character encodings</li>\n            </ul>\n            \n            <p>Using a <code>meta</code> tag <code>Content-Type</code> stops validator \"tentatively valid\" warnings\n            </p>\n          </section>\n\n          <section id=\"favicon-tag\">\n            <h2>Favorites icon (\"favicon\")</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n\n            <div class=\"output\">\n              <img src=\"../img/favicon1.gif\" alt=\"favicon\"> <img src=\"../img/favicon2.gif\" alt=\"favicon\">\n            </div>\n\n            <p>The <code>link</code> tag, placed in the <code>head</code> section, attaches another file to the page\n            </p><ul>\n              <li>In this case, an icon to be placed in the browser title bar and bookmarks</li>\n            </ul>\n            \n            <p>Note for IE6: Doesn't work; must put a file <code>favicon.ico</code> in the root\n            of the web server (<a href=\"http://www.clickfire.com/viewpoints/articles/favicons.php\">info</a>)</p>\n          </section>\n\n\n\n\n          <section id=\"p-tag\">\n            <h2>Paragraph: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a></h2>\n            <p class=\"term-definition\">paragraphs of text (block)</p>\n            <pre><code class=\"hljs nohighlight small-font\" data-trim>&lt;p&gt;\n  You're not your job.\n  You're not how much money you make in the bank.\n  You're not the car you drive.\n  You're not the content of your wallet.\n  You're not your khakis.\n  You're not the all-singing, all-dancing crap of the world.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p class=\"medium-small-font\">\n              You're not your job.\n              You're not how much money you make in the bank.\n              You're not the car you drive.\n              You're not the content of your wallet. You're not your khakis. You're not the all-singing,\n              all-dancing crap of the world.\n            </p>\n            </div>\n            <p class=\"output-caption\">output</p>\n            <p>Placed in the <code>body</code> of the page</p>\n          </section>\n\n          <section id=\"heading-tags\">\n            <h2>\n              Headings:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h1&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code></a>, ...,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h6&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">headings to separate major areas of the page\n            (block)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;h1&gt;University of Whoville&lt;/h1&gt;\n&lt;h2&gt;Department of Computer Science&lt;/h2&gt;\n&lt;h3&gt;Sponsored by Micro$oft&lt;/h3&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <h1>University of Whoville</h1>\n              <h2>Department of Computer Science</h2>\n              <h3>Sponsored by Micro$oft</h3>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#Example_page\">More\n              heading examples</a></p>\n          </section>\n\n          <section id=\"header-footer-tags\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a>\n              and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"><code>&lt;footer&gt;</code></a>\n            </h2>\n\n            <p><code>&lt;header&gt;</code> tags usually contain one or more &lt;h1-6&gt;\n            elements, maybe a logo, and authorship information</p>\n            <p><code>&lt;footer&gt;</code> tags might contain site map links, authorship\n            information, copyright information, etc.</p>\n            <pre><code class=\"hljs\" data-trim>&lt;header&gt; more html elements &lt;/header&gt;\n...maybe some other stuff...\n&lt;footer&gt; more html elements &lt;/footer&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>These tags are both block elements</p>\n            <p>Note: <em>not to be confused with the <code>&lt;head&gt;</code> tag, the\n              <code>&lt;header&gt;</code> is designed to contain headings for a\n              document.</em></p>\n          </section>\n\n          <section id=\"article-section-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> and\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"><code>&lt;section&gt;</code></a>\n            </h2>\n\n            <p>The <code>&lt;article&gt;</code> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block)</p>\n            <p>The <code>&lt;section&gt;</code> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block)</p>\n            <pre><code class=\"hljs \" data-trim>&lt;article&gt;&lt;h2&gt;Mowgli's resume:&lt;/h2&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Objective:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Experience:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;References:&lt;/h3&gt; ...\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </section>\n\n          <section id=\"hr-tag\">\n            <h2>\n              Horizontal rule:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a horizontal line to visually separate sections of a page (block)</p>\n\n            <pre>\n            <code class=\"hljs\">&lt;&gt;First paragraph&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Third paragraph&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>First paragraph</p>\n              <hr>\n              <p>Second paragraph</p>\n              <hr>\n              <p>Third paragraph</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n            This is the first example we've seen of a void (<q>self-closing</q>) tag:\n            <a href=\"https://www.w3.org/TR/html51/syntax.html#writing-html-documents-elements\">more on HTML Element types</a>\n            </p>\n          </section>\n\n          <section id=\"br-tag\">\n            <h2>\n              Line Break:\n              <a href=\"http://www.w3schools.com/tags/tag_br.asp\"><code>&lt;br /&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">forces a line break in the middle of a block element (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The woods are lovely, dark and deep, &lt;br /&gt;\n  But I have promises to keep, &lt;br /&gt;And miles\n  to go before I sleep, &lt;br /&gt;And miles to go before\n  I sleep.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <p>\n              The woods are lovely, dark and deep, <br>\n              But I have promises to keep, <br>And miles\n              to go before I sleep, <br>And miles to go before\n\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Warning: Don't over-use <code>br</code> (guideline: &gt;= 2 in a row is bad, better to not use any)\n            </p>\n            <p>\n            <code>br</code> tags should not be used to separate paragraphs or used multiple times in a row to create spacing\n            </p>\n          </section>\n\n          <section id=\"a-tag\">\n            <h2>\n              Links:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">links, or \"anchors\", to other pages (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Search for it on <a href=\"http://www.google.com/\">Google</a>!\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Uses the <code>href</code> (Hypertext REFerence) attribute to specify the destination URL\n            </p><ul>\n              <li>\n                Can be absolute (to another web site) or\n                relative (to another page on this site)\n              </li>\n            </ul>\n            \n            <p>Anchors are inline elements; must be placed in a block element such as\n            <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code>\n            </p>\n          </section>\n\n          <section id=\"img-tag\">\n            <h2>\n              Images:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>\n            </h2>\n\n            <p>Inserts a graphical image into the page (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\n            <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>The <code>src</code> attribute specifies the image URL</p>\n            <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\n            <a href=\"https://moz.com/learn/seo/alt-text\">improves\n              accessibility</a> for users who can't otherwise see it</p>\n          </section>\n\n          <section>\n            <h2>More About Images</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\n  &lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\n   title=\"dumbo!\" /&gt;&lt;/a&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <a href=\"http://en.wikipedia.org/wiki/Koala/\">\n                <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\n              </a>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>If placed in an <code>&lt;a&gt;</code> anchor tag, the image becomes a link</p>\n\n            <p><strong>What's the title attribute?</strong></p>\n            <ul class=\"medium-small-font\">\n              <li title=\"See? Even this bullet right here.\"><code>title</code> attribute is an optional tooltip (on ANY element)</li>\n              <li title=\"Wah wahhhn programming is hard :(\">BUT the <code>title</code> attribute doesn't always work well for mobile and\n                accessibility, so its usage and future are debated</li>\n            </ul>\n          </section>\n\n          <section id=\"em-strong-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\">\n                Phrase elements\n              </a>:\n              <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>\n            </h2>\n\n            <p>\n            <code>em</code>: emphasized text (usually rendered in italic) <br>\n            <code>strong</code>: strongly emphasized text (usually rendered in bold)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>As usual, the tags must be properly nested for a valid page</p>\n          </section>\n\n          <!--\n          <section id=\"del-ins-tags\">\n            <h2>\n              Deletions and insertions:\n              <a href=\"http://www.w3schools.com/tags/tag_del.asp\"><code>&lt;del&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_ins.asp\"><code>&lt;ins&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            content that should be considered deleted or added to the document (inline)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  &lt;del&gt;Final Exam&lt;/del&gt; &lt;ins&gt;Midterm&lt;/ins&gt; is on &lt;del&gt;Aug 29&lt;/del&gt;\n  &lt;ins&gt;Apr 17&lt;/ins&gt;.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del>\n              <ins>Apr 17</ins>.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n          -->\n\n          <section id=\"abbr-tag\">\n            <h2>\n              Abbreviations:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"><code>&lt;abbr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            an abbreviation, acronym, or slang term (inline)\n            </p>\n\n            <pre><code class=\"hljs \" data-trim>&lt;p&gt;\n  Safe divers always remember to check their\n  &lt;abbr title=\"Self-Contained Underwater Breathing Apparatus\"&gt;\n  SCUBA&lt;/abbr&gt; gear.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Safe divers always remember to check their\n              <abbr title=\"Self-Contained Underwater Breathing Apparatus\">\n                SCUBA</abbr> gear.\n              </p>\n              <p class=\"output-caption\">output</p>\n\n            </div>\n          </section>\n\n          <section id=\"ul-li-tags\">\n            <h2>\n              Unordered List:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>ul</code> represents a bulleted list of items (block)<br>\n            <code>li</code> represents a single item within the list (block)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;No shoes&lt;/li&gt;\n  &lt;li&gt;No shirt&lt;/li&gt;\n  &lt;li&gt;No problem&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <ul>\n                <li>No shoes</li>\n                <li>No shirt</li>\n                <li>No problem</li>\n              </ul>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section>\n            <h2>More About Unordered Lists</h2>\n            <p>A list can contain other lists:</p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;Simpsons:\n    &lt;ul&gt;\n      &lt;li&gt;Homer&lt;/li&gt;\n      &lt;li&gt;Marge&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Family Guy:\n    &lt;ul&gt;\n      &lt;li&gt;Peter&lt;/li&gt;\n      &lt;li&gt;Lois&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <ul>\n                  <li>Simpsons:\n                    <ul>\n                      <li>Homer</li>\n                      <li>Marge</li>\n                    </ul>\n                  </li>\n                  <li>Family Guy:\n                    <ul>\n                      <li>Peter</li>\n                      <li>Lois</li>\n                    </ul>\n                  </li>\n                </ul>\n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"ol-tag\">\n            <h2>Ordered List: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a></h2>\n\n            <p class=\"term-definition\">\n            <code>ol</code> represents a numbered list of items (block)\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;p&gt;RIAA business model:&lt;/p&gt;\n&lt;ol&gt;\n  &lt;li&gt;Sue customers&lt;/li&gt;\n  &lt;li&gt;???&lt;/li&gt;\n  &lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right medium-small-font\">\n                <p>RIAA business model:\n                </p><ol>\n                  <li>Sue customers</li>\n                  <li>???</li>\n                  <li>Profit!</li>\n                </ol>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n\n            <p>\n            We can make lists with letters or Roman numerals using CSS (later)\n            </p>\n          </section>\n\n          <section id=\"definition-list-tags\">\n            <h2>Definition list:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"><code>&lt;dl&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"><code>&lt;dt&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"><code>&lt;dd&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>dl</code> represents a list of definitions of terms (block) <br>\n            <code>dt</code> represents each term, and <code>dd</code> its definition\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;dl&gt;\n  &lt;dt&gt;newbie&lt;/dt&gt;\n  &lt;dd&gt;\n    one who does not have\n    mad skills\n  &lt;/dd&gt;\n  &lt;dt&gt;own&lt;/dt&gt;\n  &lt;dd&gt;\n    to soundly defeat (e.g.\n    I owned that newbie!)\n  &lt;/dd&gt;\n  &lt;dt&gt;frag&lt;/dt&gt;\n  &lt;dd&gt;\n    a kill in a shooting game\n  &lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <p>\n                </p><dl>\n                  <dt>newbie</dt>\n                  <dd>one who does not have mad skills</dd>\n                  <dt>own</dt>\n                  <dd>to soundly defeat (e.g. I owned that newbie!)</dd>\n                  <dt>frag</dt>\n                  <dd>a kill in a shooting game</dd>\n                </dl>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n          <section id=\"blockquote-tag\">\n            <h2>\n              Quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"><code>&lt;blockquote&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a quotation (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;As Lincoln said in his famous Gettysburg Address:&lt;/p&gt;\n&lt;blockquote&gt;\n  &lt;p&gt;\n    Fourscore and seven years ago, our fathers brought forth\n    on this continent a new nation, conceived in liberty, and\n    dedicated to the proposition that all men are created equal.\n  &lt;/p&gt;\n&lt;/blockquote&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output medium-small-font\">\n              <p>\n              As Lincoln said in his famous Gettysburg Address:\n              </p>\n              <blockquote>\n                <p>\n                Fourscore and seven years ago, our fathers brought forth\n                on this continent a new nation, conceived in liberty, and\n                dedicated to the proposition that all men are created equal.\n                </p>\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"q-tag\">\n            <h2>Inline quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"><code>&lt;q&gt;</code></a></h2>\n\n            <p class=\"term-definition\">a short quotation (inline)</p>\n\n            <pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, &lt;q&gt;Nevermore.&lt;/q&gt;&lt;/p&gt;</code></pre>\n\n            <p class=\"code-caption\">HTML</p>\n            <p>\n            Why not just write the following?<br>\n            </p><pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, \"Nevermore.\"&lt;/p&gt;</code></pre>\n            \n\n            <div>\n              <p>We don't use \" marks for two reasons:</p>\n              <ol>\n                <li>HTML shouldn't contain literal quotation mark characters; they should be written as <code>&amp;quot;</code></li>\n                <li>Using <code>&lt;q&gt;</code> allows us to apply CSS styles to quotations (seen later)</li>\n              </ol>\n            </div>\n          </section>\n\n          <section id=\"code-tag\">\n            <h2>\n              Computer Code:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"><code>&lt;code&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            a short section of computer code (usually shown in a fixed-width font)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt;\n  tags make lists.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              The <code>ul</code> and <code>ol</code>\n              tags make lists.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"pre-tag\">\n            <h2>\n              Preformatted Text:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a large section of pre-formatted text (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;pre&gt;\n     Steve Jobs spoke loudly\n      reality distortion\n       Apple fans bow down\n&lt;/pre&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              </p><pre>\n     Steve Jobs speaks loudly\n      reality distortion\n       Apple fans bow down\n              </pre>\n              \n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Displayed with exactly the whitespace / line breaks given in the text</p>\n            <p>Shown in a fixed-width font by default</p>\n            <p>\n              How would it look if we had instead enclosed it in <code>code</code>\n              tags?\n            </p>\n          </section>\n        </section>\n\n        <section>\n          <h2>Nesting Tags</h2>\n          <p>Tags can \"nest\" inside of other tags</p><p>\n\n          </p><pre><code class=\"hljs small-font\" data-trim>&lt;body&gt;\n  &lt;p&gt;\n    This is a &lt;em&gt;really, &lt;strong&gt;REALLY&lt;/strong&gt;&lt;/em&gt; stupid sentence. Here's why:\n  &lt;/p&gt;\n  &lt;ol&gt;\n    &lt;li&gt;I had nothing to say&lt;/li&gt;\n    &lt;li&gt;It is adding little meaning to the discussion&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/body&gt;</code></pre>\n        <p class=\"code-caption\">HTML</p>\n\n          <div class=\"output small-font\">\n            <p>This is a <em>really, <strong>REALLY</strong></em> stupid sentence. Here's why:</p><p>\n            </p><ol>\n              <li>I had nothing to say</li>\n              <li>It is adding little meaning to the discussion</li>\n            </ol>\n          </div>\n          <p class=\"code-caption\">output</p>\n        </section>\n\n        <section>\n          <h2>Block and Inline Elements\n            (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\">explanation</a>)</h2>\n\n          <div>\n            <img class=\"full-width centered-figure\" src=\"../img/layout2.png\" alt=\"elements\">\n          </div>\n\n          <p><span class=\"term\"><a href=\"http://htmlhelp.com/reference/html40/block.html\">Block</a></span> elements contain an entire large region of content\n          </p><ul>\n            <li>Examples: paragraphs, lists, table cells</li>\n            <li>The browser places a margin of whitespace between block elements for separation</li>\n          </ul>\n          \n          <p><span class=\"term\"><a href=\"http://www.cs.sfu.ca/CC/165/sbrown1/wdgxhtml10/inline.html\">Inline</a></span> elements affect a small amount of content\n          </p><ul>\n            <li>Examples: bold text, code fragments, images</li>\n            <li>The browser allows many inline elements to appear on the same line</li>\n            <li>Must be nested inside a block element</li>\n          </ul>\n          \n        </section>\n\n        <section>\n          <h2>Rules and exceptions...</h2>\n\n          <p><strong>Block vs. inline:</strong></p>\n          <ul>\n            <li>\n              Some block elements can contain only other block elements:\n              <code>&lt;body&gt;</code>, <code>&lt;form&gt;</code>\n            </li>\n\n            <li>\n              <code>&lt;p&gt;</code> tags can contain only <strong>inline</strong> elements and plain text\n            </li>\n\n            <li>\n              Some block elements can contain either: <code>&lt;div&gt;, &lt;li&gt;</code>\n            </li>\n          </ul>\n\n          <p>\n            <strong>Some elements are only allowed to contain certain other\n            elements:</strong>\n          </p>\n          <ul>\n            <li>\n              <code>&lt;ul&gt;</code> is only allowed to contain <code>&lt;li&gt;</code>\n            </li>\n          </ul>\n\n          <p>\n            <strong>Some elements are only allowed once per document:</strong>\n          </p>\n          <ul>\n            <li><code>&lt;html&gt;</code></li>\n            <li><code>&lt;body&gt;</code></li>\n            <li><code>&lt;head&gt;</code></li>\n            <li><code>&lt;main&gt;</code></li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Incorrectly Nesting Tags</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really,\n  &lt;strong&gt;REALLY<em class=\"bad\">&lt;/em&gt;</em> lots of&lt;/strong&gt; fun!\n&lt;/p&gt;\n</code></pre>\n<p class=\"code-caption\">Incorrectly nested HTML</p>\n\n          <p>Tags must be correctly nested</p>\n          <ul>\n            <li>A closing tag must match the most recently opened tag</li>\n            <li>The browser may render it correctly anyway, but it is invalid HTML</li>\n          </ul>\n          <p>How would we get the above effect in a valid way?</p>\n\n          <div class=\"fragment\">\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really,\n  &lt;strong&gt;REALLY lots of&lt;/strong&gt;<em class=\"good\">&lt;/em&gt;</em> fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">Correctly nested HTML</p>\n          </div>\n        </section>\n\n        <section>\n          <h2>How can we check? W3C HTML Validator</h2>\n          <p><a href=\"http://validator.w3.org/\" target=\"_blank\">validator.w3.org</a></p>\n          <ul>\n            <li>\n              Checks your HTML code to make sure it follows the\n              official HTML syntax\n            </li>\n            <li>More picky than the browser, which may render bad HTML correctly</li>\n          </ul>\n          <div class=\"fragment\">\n            <p>\n              Example: Try validating <a href=\"lec01source/validateme.html\">validateme.html</a>\n            </p>\n            <p>\n              <strong>NOTE:</strong> To receive full credit on your creative projects and homework assignments\n              you MUST validate all of your files and pass with no errors.\n            </p>\n\n          </div>\n        </section>\n\n        <section>\n          <h2>Web Standards</h2>\n          <p>\n            Moreover, it is important to write proper HTML code and follow proper syntax\n          </p>\n          <p>Why use valid HTML5 and web standards?</p>\n          <ul>\n            <li>More interoperable across different web browsers</li>\n            <li>More likely that our pages will display correctly now and in the future</li>\n            <li>To ensure accessibilty</li>\n          </ul>\n        </section>\n\n\n\n        <section>\n          <h2>More About HTML Tags</h2>\n\n          <p>\n            Some tags can contain additional information called\n            <strong>attributes</strong>\n          </p>\n          <ul>\n            <li class=\"medium-small-font\">Syntax: <br><code>&lt;element\n                attribute=\"value\"\n                attribute=\"value\"&gt;\n                <var>content</var> &lt;/<var>element</var>&gt;</code></li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;a href=\"page2.html\"&gt;Next page&lt;/a&gt;</code></li>\n          </ul>\n\n          <p>Some tags don't contain content and can be opened and closed in one tag</p>\n          <ul>\n            <li class=\"medium-small-font\">Syntax: <br><code>&lt;<var>element</var> <var>attribute</var>=\"<var>value</var>\" <var>attribute</var>=\"<var>value</var>\" /&gt;</code></li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;br /&gt;, &lt;hr /&gt;, &lt;br&gt;, &lt;hr&gt;</code> </li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;img src=\"bunny.jpg\" alt=\"pic from Easter\" /&gt;</code></li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Comments: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#HTML_comments\"><code>&lt;!--</code> ...<code>--&gt;</code></a></h2>\n\n          <p class=\"term-definition\">comments to document your HTML file or \"comment out\" text</p>\n\n          <pre><code class=\"hljs\" data-trim>&lt;!-- My web page, by Mowgli Hovik\n     CSE 154, Spring 2048     --&gt;\n&lt;p&gt;CSE courses are &lt;!-- NOT --&gt; a lot of fun!&lt;/p&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <div class=\"output\">\n            <!-- My web page, by Suzy Student\n              CSE 154 D, Spring 2048     -->\n              <p>CSE courses are <!-- NOT --> a lot of fun!</p>\n              <p class=\"output-caption\">output</p>\n          </div>\n\n          <p>Many web pages are not thoroughly commented (or at all)</p>\n          <p>Still useful at top of page and for disabling code</p>\n          <p>Comments cannot be nested and cannot contain a <code>--</code></p>\n          <p><strong>Do not leave commented-out HTML code in your homework assignments!</strong></p>\n        </section>\n\n\n\n        <section>\n          <h2>HTML Character Entities</h2>\n          <p class=\"term-definition\">\n          a way of representing any <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> character within a web page\n          </p>\n\n          <table class=\"standard\">\n            <tr><th class=\"spaced slidetable\">character(s)</th><th class=\"slidetable\">entity</th></tr>\n            <tr class=\"code\"><td>&lt; &gt;</td><td>&amp;lt; &amp;gt;</td></tr>\n            <tr class=\"code\"><td>\u00e9 \u00e8 \u00f1</td><td>&amp;eacute; &amp;egrave; &amp;ntilde;</td></tr>\n            <tr class=\"code\"><td>\u2122 \u00a9</td><td>&amp;trade; &amp;copy;</td></tr>\n            <tr class=\"code\"><td>\u03c0 \u03b4 \u0394</td><td>&amp;pi; &amp;delta; &amp;Delta;</td></tr>\n            <tr class=\"code\"><td>\u0418</td><td>&amp;#1048;</td></tr>\n            <tr class=\"code\"><td>\" &amp;</td><td>&amp;quot; &amp;amp;</td></tr>\n          </table>\n\n          <ul>\n            <li><a href=\"http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references\">Complete list of HTML entities</a></li>\n            <li>How would you display the text <code>&amp;amp;</code> on a web page?</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Example: HTML-encoding text</h2>\n          <p>What if I wanted to put THIS into a rendered web page?</p>\n          <div class=\"output small-font\">\n            <p>\n            &lt;p&gt;\n            &lt;a href=\"http://google.com/search?q=Mowgli&amp;ie=utf-8\"&gt;\n            Search Google for Mowgli\n            &lt;/a&gt;\n            &lt;/p&gt;\n            </p>\n            <p class=\"output-caption\">output</p>\n          </div>\n\n          <div class=\"fragment\">\n            <p>\n              To display the link text in a web page, its special characters\n              must be encoded like this <em>in</em> the HTML:\n            </p>\n\n            <pre><code class=\"hljs no-syntax-highlight small-font\" data-trim>&amp;lt;p&amp;gt;\n  &amp;lt;a href=&amp;quot;http://google.com/search?q=Mowgli&amp;amp;ie=utf-8&amp;quot;&amp;gt;\n    Search Google for Mowgli\n  &amp;lt;/a&amp;gt;\n&amp;lt;/p&amp;gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </div>\n        </section>\n\n        <section>\n          <h2>Homework 0</h2>\n          <p>Due tomorrow</p>\n          <p>Bring a computer with the development environment\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/setup.html\">installed</a>\n            to section. (This is Homework 0 due tomorrow!)\n          </p>\n        </section>\n\n\n      </div>\n    </section>", "text": "The Internet: A Brief History Began as a US Department of Defense network called ARPANET (1960s-70s) Initial services: electronic mail, file transfer Opened to commercial interests in late 80s WWW created in 1989-91 by Tim Berners-Lee Popular web browsers released: Netscape 1994, IE 1995 Then... all this: http://www.evolutionoftheweb.com Other notable web events: Amazon.com opens in 1995; Google in January 1996 Hamster Dance web page created in 1999 Facebook founded in February 2004 Chrome released in September 2008 Snapchat created in September 2011 Key Aspects of the Internet Subnetworks can stand on their own Computers can dynamically join and leave the network Built on open standards; anyone can create a new internet device Lack of centralized control (mostly) Everyone can use it with simple, commonly-available software https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers Question Who \"runs\" the Internet? Who is responsible for overseeing it? People and Organizations (and Companies) Internet Engineering Task Force (IETF): Internet protocol standards Internet Corporation for Assigned Names and Numbers (ICANN): decides top-level domain names World Wide Web Consortium (W3C): web standards These protocols are carried out in large part by Internet service providers and other companies and organizations who build Internet-related products and applications Internet Protocol (IPv4 or IPv6) A simple protocol for attempting to send data between two computers Each device has a 32- or 128-bit IP address. For IPv4 this is written as four 8-bit numbers (0-255) Find your internet IP address: whatismyip.com Find out your local IP address: in a terminal, type ipconfig (Windows) or ifconfig (Mac/Linux) Domain Name System (DNS) Think about some domain names you know. What do they end with? Used to be only .com, .org, .net, .gov, .edu, .int, .mil ... then there were two letter extensions like .uk, .es Now .everything! A Domain Name System is a set of servers that map written names to IP addresses Example: www.cs.washington.edu \u2192 128.208.3.88 Transmission Control Protocol (TCP) Adds multiplexing, guaranteed message delivery on top of IP Multiplexing: multiple programs using the same IP address Port: a number given to each program or service port 80: web browser (port 443 for secure browsing) port 25: email port 22: ssh port 5190: AOL Instant Messenger More common ports Some programs (games, streaming media programs) use simpler UDP protocol instead of TCP The World Wide Web (WWW) Wait, how is it different than the Internet again? The Internet describes all the interconnected devices that use the \"internet protocol.\" The World Wide Web is the subset of the Internet that uses the HTTP and HTTPS protocols, mostly to transmit \"webpages.\" Uniform Resource Locator (URL) An identifier for the location of a document on a web site A basic URL: https://courses.cs.washington.edu/courses/cse154/19sp/~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~protocol host path Upon entering this URL into the browser, it would: Ask the \"DNS\" server for the IP address of courses.cs.washington.edu Connect to that IP address at port 80 Ask the server to GET /courses/cse154/19sp/index.html Display the resulting page on the screen Hypertext Transport Protocol (HTTP) The set of commands understood by a web server and sent from a browser Some HTTP commands (your browser sends these internally): GET filename: download POST filename: send a web form response PUT filename: upload We will learn more about GET and POST when we start the server-side programming module of this course <!-- Simulating a browser with a terminal window: --> HTTP Error Codes When something goes wrong, the web server returns a special \"error code\" number to the browser, possibly followed by an HTML document Common Error Codes: Number Meaning 200OK 301-303 page has moved (permanently or temporarily) 403 you are forbidden to access this page 404page not found 418I'm a teapot (fun fact, example) 500internal server error Complete list ... as cats The Real Innovation HTTP built resilience into the internet by creating the 404. A website will always give a response, even if what a user wants isn't found.\u00a0 Examples: ACM\u2019s 404 WSDOT Imgur FT Labs \u00a0 Special thanks to Alain Chanais for pointing out the beauty in the resiliency They Are Everywhere Except in the Allen Center (CSE building) <!-- Taken out for 18au Internet Media (\"MIME\") Types Sometimes when including resources in a page (style sheet, icon, multimedia object), we specify their type of data MIME type file extension text/html .html text/plain .txt image/gif .gif image/jpeg .jpg video/quicktime .mov application/octet-stream .exe Lists of MIME types: by type, by extension --> Reminder: What is a web page, really? Content Words and images Structure HTML Style CSS Behavior Javascript & Server programs What do you see here? What did you see? title header and footer images list paragraph headings (various sizes) articles and sections lines (aka horizontal rule) links to click menu items buttons places to enter text ... Content Words and images Structure HTML Style CSS HTML Hypertext Markup Language (HTML) Describes the content and structure of information on a web page Not the same as the presentation (appearance on screen) Surrounds text content with opening and closing tags Each tag's name is called an element Syntax: <element> content </element> Example: <p>This is a paragraph</p> Most whitespace is insignificant in HTML (ignored or collapsed to a single space) We will use a newer version called HTML5 Structure of an HTML Page <!DOCTYPE html><html> <head> information about the page </head> <body> page contents </body></html>HTML The <head> tag describes the page and the <body> tag contains the page's content An HTML page is saved into a file ending with extension .html The DOCTYPE tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language Getting Started There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). Here's a table of the most common ones you'll use in CSE 154, but you can find a comprehensive list here (it's a great bookmark page for reference this quarter!) Unless otherwise specified, all of the tags listed in the following slides are required to be in the <body> of an HTML page rather than the <head>. HTML Tags - Table of Common Tags (1/2) Note: Go \"down\" this slide column for more information/examples on each tag! Tag Description <title> Page title (in <head>) <meta> Meta information tag (in <head>) <favicon> Icon placed in the browser title bar and bookmarks (in <head>) <p> Paragraph tag <h1> ... <h6> Heading tags <header>, <footer> Header/Footer tags <article>, <section> Article and section tags <hr /> Horizontal rule tag <br /> Line break tag <a> Anchor tag (page links) HTML Tags - Table of Common Tags (2/2) Tag Description <img /> Image tag <em>, <strong> Emphasis (italic) and strong (bold) tags <del>, <ins> Deletion (strikethrough) and insertion tags <abbr> Abbreviation tag <ul>, <ol> Unordered and ordered list tags <li> List item tag (used as children of <ul> or <ol> list tags) <dl>, <dt>, <dd> Definition list tags <blockquote>, <q> Block and inline quotation tags <code> Computer code tag <pre> Preformatting tag Page Title: <title> <title> Chapter 2: HTML Basics</title> HTML Placed within the <head> of the page Displayed in the web browser's title bar and when bookmarking the page, otherwise not visible to the user as page content Web Page Metadata: <meta> information about your page (for a browser, search engine, etc.) <meta charset=\"utf-8\" /><meta name=\"description\" content=\"Authors' web site for Building Java Programs.\" /><meta name=\"keywords\" content=\"java, textbook\" /> HTML Placed in the head section of your HTML page meta tags often have both the name and content attributes Some meta tags use the http-equiv attribute instead of name The meta tag with charset attribute indicates language/character encodings Using a meta tag Content-Type stops validator \"tentatively valid\" warnings Favorites icon (\"favicon\") <link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /> HTML (template) <link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /> HTML (example) The link tag, placed in the head section, attaches another file to the page In this case, an icon to be placed in the browser title bar and bookmarks Note for IE6: Doesn't work; must put a file favicon.ico in the root of the web server (info) Paragraph: <p> paragraphs of text (block) <p> You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world.</p> HTML You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world. output Placed in the body of the page Headings: <h1>, <h2>, ..., <h6> headings to separate major areas of the page (block) <h1>University of Whoville</h1><h2>Department of Computer Science</h2><h3>Sponsored by Micro$oft</h3>HTML University of Whoville Department of Computer Science Sponsored by Micro$oft output More heading examples <header> and <footer> <header> tags usually contain one or more <h1-6> elements, maybe a logo, and authorship information <footer> tags might contain site map links, authorship information, copyright information, etc. <header> more html elements </header>...maybe some other stuff...<footer> more html elements </footer> HTML These tags are both block elements Note: not to be confused with the <head> tag, the <header> is designed to contain headings for a document. <article> and <section> The <article> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block) The <section> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block) <article><h2>Mowgli's resume:</h2> <section> <h3>Objective:</h3> ... </section> <section> <h3>Experience:</h3> ... </section> <section> <h3>References:</h3> ... </section></article> HTML Horizontal rule: <hr> a horizontal line to visually separate sections of a page (block) <>First paragraph</p><hr /><p>Second paragraph</p><hr><p>Third paragraph</p> HTML First paragraph Second paragraph Third paragraph output This is the first example we've seen of a void (self-closing) tag: more on HTML Element types Line Break: <br /> forces a line break in the middle of a block element (inline) <p> The woods are lovely, dark and deep, <br /> But I have promises to keep, <br />And miles to go before I sleep, <br />And miles to go before I sleep.</p> HTML The woods are lovely, dark and deep, But I have promises to keep, And miles to go before I sleep, And miles to go before output Warning: Don't over-use br (guideline: >= 2 in a row is bad, better to not use any) br tags should not be used to separate paragraphs or used multiple times in a row to create spacing Links: <a> links, or \"anchors\", to other pages (inline) <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML Search for it on Google! output Uses the href (Hypertext REFerence) attribute to specify the destination URL Can be absolute (to another web site) or relative (to another page on this site) Anchors are inline elements; must be placed in a block element such as <p> or <h1> Images: <img> Inserts a graphical image into the page (inline) <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /> HTML output The src attribute specifies the image URL HTML5 also requires an alt attribute describing the image, which improves accessibility for users who can't otherwise see it More About Images <a href=\"http://en.wikipedia.org/wiki/Koala/\"> <img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo!\" /></a> HTML output If placed in an <a> anchor tag, the image becomes a link What's the title attribute? title attribute is an optional tooltip (on ANY element) BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated Phrase elements : <em>, <strong> em: emphasized text (usually rendered in italic) strong: strongly emphasized text (usually rendered in bold) <p> HTML is <em>really</em>, <strong>REALLY</strong> fun!</p> HTML As usual, the tags must be properly nested for a valid page <!-- Deletions and insertions: <del>, <ins> content that should be considered deleted or added to the document (inline) <p> <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del> <ins>Apr 17</ins>.</p> HTML Final Exam Midterm is on Aug 29 Apr 17. output --> Abbreviations: <abbr> an abbreviation, acronym, or slang term (inline) <p> Safe divers always remember to check their <abbr title=\"Self-Contained Underwater Breathing Apparatus\"> SCUBA</abbr> gear.</p> HTML Safe divers always remember to check their SCUBA gear. output Unordered List: <ul>, <li> ul represents a bulleted list of items (block) li represents a single item within the list (block) <ul> <li>No shoes</li> <li>No shirt</li> <li>No problem</li></ul> HTML No shoes No shirt No problem output More About Unordered Lists A list can contain other lists: <ul> <li>Simpsons: <ul> <li>Homer</li> <li>Marge</li> </ul> </li> <li>Family Guy: <ul> <li>Peter</li> <li>Lois</li> </ul> </li></ul> HTML Simpsons: Homer Marge Family Guy: Peter Lois output Ordered List: <ol> ol represents a numbered list of items (block) <p>RIAA business model:</p><ol> <li>Sue customers</li> <li>???</li> <li>Profit!</li></ol> HTML RIAA business model: Sue customers ??? Profit! output We can make lists with letters or Roman numerals using CSS (later) Definition list: <dl>, <dt>, <dd> dl represents a list of definitions of terms (block) dt represents each term, and dd its definition <dl> <dt>newbie</dt> <dd> one who does not have mad skills </dd> <dt>own</dt> <dd> to soundly defeat (e.g. I owned that newbie!) </dd> <dt>frag</dt> <dd> a kill in a shooting game </dd></dl> HTML newbie one who does not have mad skills own to soundly defeat (e.g. I owned that newbie!) frag a kill in a shooting game output Quotations: <blockquote> a quotation (block) <p>As Lincoln said in his famous Gettysburg Address:</p><blockquote> <p> Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. </p></blockquote> HTML As Lincoln said in his famous Gettysburg Address: Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. output Inline quotations: <q> a short quotation (inline) <p>Quoth the Raven, <q>Nevermore.</q></p> HTML Why not just write the following? <p>Quoth the Raven, \"Nevermore.\"</p> We don't use \" marks for two reasons: HTML shouldn't contain literal quotation mark characters; they should be written as &quot; Using <q> allows us to apply CSS styles to quotations (seen later) Computer Code: <code> a short section of computer code (usually shown in a fixed-width font) <p> The <code>ul</code> and <code>ol</code> tags make lists.</p> HTML The ul and ol tags make lists. output Preformatted Text: <pre> a large section of pre-formatted text (block) <pre> Steve Jobs spoke loudly reality distortion Apple fans bow down</pre> HTML Steve Jobs speaks loudly reality distortion Apple fans bow down output Displayed with exactly the whitespace / line breaks given in the text Shown in a fixed-width font by default How would it look if we had instead enclosed it in code tags? Nesting Tags Tags can \"nest\" inside of other tags <body> <p> This is a <em>really, <strong>REALLY</strong></em> stupid sentence. Here's why: </p> <ol> <li>I had nothing to say</li> <li>It is adding little meaning to the discussion</li> </ol></body> HTML This is a really, REALLY stupid sentence. Here's why: I had nothing to say It is adding little meaning to the discussion output Block and Inline Elements (explanation) Block elements contain an entire large region of content Examples: paragraphs, lists, table cells The browser places a margin of whitespace between block elements for separation Inline elements affect a small amount of content Examples: bold text, code fragments, images The browser allows many inline elements to appear on the same line Must be nested inside a block element Rules and exceptions... Block vs. inline: Some block elements can contain only other block elements: <body>, <form> <p> tags can contain only inline elements and plain text Some block elements can contain either: <div>, <li> Some elements are only allowed to contain certain other elements: <ul> is only allowed to contain <li> Some elements are only allowed once per document: <html> <body> <head> <main> Incorrectly Nesting Tags <p> HTML is <em>really, <strong>REALLY</em> lots of</strong> fun!</p>Incorrectly nested HTML Tags must be correctly nested A closing tag must match the most recently opened tag The browser may render it correctly anyway, but it is invalid HTML How would we get the above effect in a valid way? <p> HTML is <em>really, <strong>REALLY lots of</strong></em> fun!</p> Correctly nested HTML How can we check? W3C HTML Validator validator.w3.org Checks your HTML code to make sure it follows the official HTML syntax More picky than the browser, which may render bad HTML correctly Example: Try validating validateme.html NOTE: To receive full credit on your creative projects and homework assignments you MUST validate all of your files and pass with no errors. Web Standards Moreover, it is important to write proper HTML code and follow proper syntax Why use valid HTML5 and web standards? More interoperable across different web browsers More likely that our pages will display correctly now and in the future To ensure accessibilty More About HTML Tags Some tags can contain additional information called attributes Syntax: <element attribute=\"value\" attribute=\"value\"> content </element> Example: <a href=\"page2.html\">Next page</a> Some tags don't contain content and can be opened and closed in one tag Syntax: <element attribute=\"value\" attribute=\"value\" /> Example: <br />, <hr />, <br>, <hr> Example: <img src=\"bunny.jpg\" alt=\"pic from Easter\" /> Comments: <!-- ...--> comments to document your HTML file or \"comment out\" text <!-- My web page, by Mowgli Hovik CSE 154, Spring 2048 --><p>CSE courses are <!-- NOT --> a lot of fun!</p> HTML CSE courses are a lot of fun! output Many web pages are not thoroughly commented (or at all) Still useful at top of page and for disabling code Comments cannot be nested and cannot contain a -- Do not leave commented-out HTML code in your homework assignments! HTML Character Entities a way of representing any Unicode character within a web page character(s)entity < >&lt; &gt; \u00e9 \u00e8 \u00f1&eacute; &egrave; &ntilde; \u2122 \u00a9&trade; &copy; \u03c0 \u03b4 \u0394&pi; &delta; &Delta; \u0418&#1048; \" &&quot; &amp; Complete list of HTML entities How would you display the text &amp; on a web page? Example: HTML-encoding text What if I wanted to put THIS into a rendered web page? <p> <a href=\"http://google.com/search?q=Mowgli&ie=utf-8\"> Search Google for Mowgli </a> </p> output To display the link text in a web page, its special characters must be encoded like this in the HTML: &lt;p&gt; &lt;a href=&quot;http://google.com/search?q=Mowgli&amp;ie=utf-8&quot;&gt; Search Google for Mowgli &lt;/a&gt;&lt;/p&gt; HTML Homework 0 Due tomorrow Bring a computer with the development environment installed to section. (This is Homework 0 due tomorrow!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 11: Deeper JS Language Features</h3>\n          <h4>AKA: How to avoid common errors</h4>\n        </section>", "text": "CSE 154 Lecture 11: Deeper JS Language Features AKA: How to avoid common errors", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Quick Administrivia</h2>\n          <ul>\n            <li>Reminders\n              <ul>\n                <li> Set! due tomorrow 11pm</li>\n                <li>Fill out the <a href=\"https://catalyst.uw.edu/webq/survey/bricker/371649\">left\n                  handed seat</a> form by 11 pm tonight.\n                </li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/exams/assets/19sp-midterm-cheatsheet.pdf\">Midterm\n                cheat sheet</a> has been posted\n            </li>\n          </ul>\n        </section>", "text": "Quick Administrivia Reminders Set! due tomorrow 11pm Fill out the left handed seat form by 11 pm tonight. Midterm cheat sheet has been posted", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>What we've covered in Module 2 so far...</h2>\n          <ul>\n            <li>Basic JavaScript\n              <ul>\n                <li>Types (Strings, Numbers, Arrays)</li>\n                <li>Conditionals, Loops, Functions</li>\n              </ul>\n            </li>\n            <li>Basic HTML UI Elements (buttons, text input, etc.)</li>\n            <li>Handling Events</li>\n            <li>Page Event Flow</li>\n            <li>Modular JS Pattern and Scoping</li>\n            <li>Timed events (Delays/Intervals)</li>\n          </ul>\n        </section>", "text": "What we've covered in Module 2 so far... Basic JavaScript Types (Strings, Numbers, Arrays) Conditionals, Loops, Functions Basic HTML UI Elements (buttons, text input, etc.) Handling Events Page Event Flow Modular JS Pattern and Scoping Timed events (Delays/Intervals)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>What's left in Module 2</h2>\n            <p>More!!!</p>\n            <li class=\"fragment\">More on JavaScript types, including null and undefined</li>\n            <li class=\"fragment\">More on (resetting) timers</li>\n            <li class=\"fragment\">More on arrow functions</li>\n            <li class=\"fragment\">More on (computed) styles</li>\n            <li class=\"fragment\">More on (programatic) DOM tree traversal and TextNodes</li>\n          \n        </section>", "text": "What's left in Module 2 More!!! More on JavaScript types, including null and undefined More on (resetting) timers More on arrow functions More on (computed) styles More on (programatic) DOM tree traversal and TextNodes", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>More on JavaScript types</h2>\n          <h3>including null and undefined</h3>\n        </section>", "text": "More on JavaScript types including null and undefined", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Reminder: \"Types\" in JavaScript</h2>\n          <p>Types are not specified, but JS <em>does</em> have types (\"loosely-typed\")</p>\n          <ul>\n            <li><code>Number</code>, <code>Boolean</code>, <code>String</code>,\n                <code>Array</code>, <code>Object</code>, <code>Function</code>, <code>Null</code>,\n                <code>Undefined</code></li>\n            <li>\n                Can use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a>\n                to find a variable's type but it is poor practice.</li>\n          </ul>\n          <pre><code class=\"hijs\" data-trim>let level = 23; // Number\nlet accuracyRate = 0.99; // Number\nlet name = \"Pikachu\"; // String\nlet temps = [55, 60, 57.5]; // Array\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n        </section>", "text": "Reminder: \"Types\" in JavaScript Types are not specified, but JS does have types (\"loosely-typed\") Number, Boolean, String, Array, Object, Function, Null, Undefined Can use typeof to find a variable's type but it is poor practice. let level = 23; // Numberlet accuracyRate = 0.99; // Numberlet name = \"Pikachu\"; // Stringlet temps = [55, 60, 57.5]; // Array JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Data_types\">Boolean</a> Type</h2>\n          <pre>\n            <code class=\"hijs\" data-trim>let iLikeJS = true;\nif (\"web dev is great\") { /* true */ }\nif (0) { /* false */ }\nif (1) { /* true */ }</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>Any value can be used as a <code>Boolean</code></p>\n          <ul>\n            <li>\"falsey\" values: <code>false</code>, <code>0</code>, <code>NaN</code>,\n            <code>\"\"</code>, <code>null</code>, and <code>undefined</code></li>\n            <li>\"truthy\" values: anything else</li>\n          </ul>\n          <p>\n            Understanding what is \"falsey\" vs. \"truthy\" takes patience and practice.\n          </p>\n          <p>\n            When in doubt, check in the browser console!\n          </p>\n        </section>", "text": "Boolean Type let iLikeJS = true;if (\"web dev is great\") { /* true */ }if (0) { /* false */ }if (1) { /* true */ } JS Any value can be used as a Boolean \"falsey\" values: false, 0, NaN, \"\", null, and undefined \"truthy\" values: anything else Understanding what is \"falsey\" vs. \"truthy\" takes patience and practice. When in doubt, check in the browser console!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n\t\t\t\t\t<h3>Warmup: Wrapping up DOM Manipulation and classList</h3>\n          \n          <pre><code class=\"hijs font-12pt\" data-trim>(function() {\n  ...\n  const COLORS = [\"red\", \"green\", \"blue\", \"gray\", \"purple\", \"pikachuyellow\"];\n  ...\n\n  // Warmup #1: Return a random color string from COLORS array \n  // (from 0 to colorCount, exclusive)\n  function getRandomColor() {\n    let colorCount = qs(\"input[name='color-count']:checked\").value;\n    // TODO: Finish me!\n  }\n\n  // Warmup #2: Add a skittle div to the #jar\n  // Ex skittle: &lt;div class=\"skittle red\"&gt;&lt;/div&gt;\n  function addSkittle() {\n    // TODO: Finish me using getRandomColor()!\n\n  }\n  // rest of skittles code omitted\n})();</code></pre>\n          <p class=\"code-caption\">skittles.js (partial)</p>\n        </section>", "text": "Warmup: Wrapping up DOM Manipulation and classList (function() { ... const COLORS = [\"red\", \"green\", \"blue\", \"gray\", \"purple\", \"pikachuyellow\"]; ... // Warmup #1: Return a random color string from COLORS array // (from 0 to colorCount, exclusive) function getRandomColor() { let colorCount = qs(\"input[name='color-count']:checked\").value; // TODO: Finish me! } // Warmup #2: Add a skittle div to the #jar // Ex skittle: <div class=\"skittle red\"></div> function addSkittle() { // TODO: Finish me using getRandomColor()! } // rest of skittles code omitted})(); skittles.js (partial)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section> \n          <h2><samp>getRandomColor()</samp> Solution</h2>\n          <pre><code class=\"hijs font-12pt\" data-trim>...\nconst COLORS = [\"red\", \"green\", \"blue\", \"gray\", \"purple\", \"pikachuyellow\"];\n...\n\nfunction getRandomColor() {\n  let colorCount = qs(\"input[name='color-count']:checked\").value;\n  let randIndex = parseInt(Math.random() * colorCount);\n  // also correct: randIndex = Math.floor(Math.random() * colorCount);\n  return COLORS[randIndex];\n}</code></pre>\n          <p class=\"code-caption\">skittles.js (partial)</p>\n          <p>Common bugs when accessing random array elements:</p>\n          <ul>\n            <li class=\"fragment\">Off-by-one bugs: <code>COLORS[6]</code></li>\n            <li class=\"fragment\">Invalid array access: <code>COLORS[1.25]</code></li>\n          </ul>\n          <p class=\"fragment\">How can you test that your solution is correct?</p>\n        </section>", "text": "getRandomColor() Solution ...const COLORS = [\"red\", \"green\", \"blue\", \"gray\", \"purple\", \"pikachuyellow\"];...function getRandomColor() { let colorCount = qs(\"input[name='color-count']:checked\").value; let randIndex = parseInt(Math.random() * colorCount); // also correct: randIndex = Math.floor(Math.random() * colorCount); return COLORS[randIndex];} skittles.js (partial) Common bugs when accessing random array elements: Off-by-one bugs: COLORS[6] Invalid array access: COLORS[1.25] How can you test that your solution is correct?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section class=\"font-14pt-slide\">\n          <h2><samp>addSkittle()</samp> Solution</h2>\n          <pre><code class=\"hijs font-12pt\" data-trim>function addSkittle() {\n  let skittle = document.createElement(\"div\");\n  skittle.classList.add(\"skittle\");\n  let randomColor = getRandomColor();\n  skittle.classList.add(randomColor);\n  id(\"jar\").appendChild(skittle);\n}</code></pre>\n          <p class=\"code-caption\">skittles.js (partial)</p>\n          <p>Common bug (<samp>.className</samp> gets the class attribute as a string instead of a\n          list):</p>\n          <pre><code class=\"hijs font-12pt\" data-trim>skittle.className = \"skittle\";   // &lt;div class=\"skittle\"&gt;&lt;div&gt;\nskittle.className = randomColor; // &lt;div class=\"purple\"&gt;&lt;div&gt;</code></pre>\n          <p>On your own: What's wrong with instead using className as follows? Hint: Think about program\n          generalization?</p>\n          <pre><code class=\"hijs font-12pt\" data-trim>skittle.className = \"skittle \" + randomColor; // &lt;div class=\"skittle purple\"&gt;&lt;div&gt;</code></pre>\n        </section>", "text": "addSkittle() Solution function addSkittle() { let skittle = document.createElement(\"div\"); skittle.classList.add(\"skittle\"); let randomColor = getRandomColor(); skittle.classList.add(randomColor); id(\"jar\").appendChild(skittle);} skittles.js (partial) Common bug (.className gets the class attribute as a string instead of a list): skittle.className = \"skittle\"; // <div class=\"skittle\"><div>skittle.className = randomColor; // <div class=\"purple\"><div> On your own: What's wrong with instead using className as follows? Hint: Think about program generalization? skittle.className = \"skittle \" + randomColor; // <div class=\"skittle purple\"><div>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h1>CSE 154</h1>\n\t\t\t\t\t<h3>Lecture 10: Scoping and Timers</h3>\n\t\t\t\t</section>", "text": "CSE 154\t\t\t\t\tLecture 10: Scoping and Timers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Administrivia</h2>\n          <p>Fantastic work on CP2 (creativity, utility, code quality, citation, etc.)!</p>\n          <p>HW2 Due Date: <del>Wednesday</del> Thursday!</p>\n          <p><strong>Make sure to click \"Accept\" for HW2 Final</strong> (refer to spec instructions)</p>\n          <p>Midterm on Friday, May 3rd in GUG 220 (5:15-6:30PM)</p>\n        </section>", "text": "Administrivia Fantastic work on CP2 (creativity, utility, code quality, citation, etc.)! HW2 Due Date: Wednesday Thursday! Make sure to click \"Accept\" for HW2 Final (refer to spec instructions) Midterm on Friday, May 3rd in GUG 220 (5:15-6:30PM)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Removing Event Listeners</h2>\n          <p>\n            In addition to <code>addEventListener</code>, we can easily remove events using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener</code></a>.\n          </p>\n          <!--\n          <pre><code class=\"hljs\" data-trim>el.removeEventListener(event, responseFunction);</code></pre>\n          <p class=\"code-caption\">JS (syntax)</p>\n          <p>\n          Note that this only works if <code>responseFunction</code> is a named\n          function that has been added to the listener on <code>el</code> for the\n          specified event.\n          </p>\n          -->\n        </section>", "text": "Removing Event Listeners In addition to addEventListener, we can easily remove events using removeEventListener. <!-- el.removeEventListener(event, responseFunction); JS (syntax) Note that this only works if responseFunction is a named function that has been added to the listener on el for the specified event. -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Removing Event Listeners: Example</h2>\n          <pre><code class=\"hljs\">function initialize() {\n  let box = id(\"box\");\n  box.addEventListener(\"mouseover\", mouseOverResponse);\n  box.addEventListener(\"dblclick\", turnOffBox);\n}\n\nfunction mouseOverResponse() {\n  console.log(\"You moved the mouse over a box!\");\n}\n\nfunction turnOffBox() {\n  console.log(\"Turning off the box!\");\n  this.removeEventListener(\"mouseover\", mouseOverResponse);\n}</code></pre>\n          <p class=\"code-caption\">box-event-listeners.js</p>\n          <p>Runnable example: <a href=\"examples/box-event-listeners.html\">HTML</a> (<a href=\"examples/box-event-listeners.js\">JS</a>)</p>\n        </section>", "text": "Removing Event Listeners: Example function initialize() { let box = id(\"box\"); box.addEventListener(\"mouseover\", mouseOverResponse); box.addEventListener(\"dblclick\", turnOffBox);}function mouseOverResponse() { console.log(\"You moved the mouse over a box!\");}function turnOffBox() { console.log(\"Turning off the box!\"); this.removeEventListener(\"mouseover\", mouseOverResponse);} box-event-listeners.js Runnable example: HTML (JS)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Rest of Lecture</h2>\n          <ul>\n          <li><a href=\"#scoping-slides\">Deeper Dive into Scoping</a></li>\n          <li><a href=\"#timer-slides\"><samp>setTimeout/setInterval</samp></a></li>\n          </ul>\n        </section>", "text": "Rest of Lecture Deeper Dive into Scoping setTimeout/setInterval", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section id=\"scoping-slides\">\n          <h2>A Deeper Dive on Scoping</h2>\n          <p>When and where are variables defined and updated in a JS program?</p>\n          <p>What is the \"module\" in the module pattern?</p>\n          <p>What are examples of \"good\" module-global variables?</p>\n        </section>", "text": "A Deeper Dive on Scoping When and where are variables defined and updated in a JS program? What is the \"module\" in the module pattern? What are examples of \"good\" module-global variables?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Scoping in JavaScript</h2>\n          <p>\n            Recall that it is generally better, for software maintainabilty,\n            to <strong>localize</strong> your variables, i.e. keep their scope\n            as limited as possible to avoid \"side effects\" from other parts\n            of the program.\n          </p>\n          <!--\n          <p>\n            We've seen the keyword <code>let</code> used to declare a variable\n            in the current scope (i.e. between {}'s of a function/loop/conditional statement).\n          </p>\n          -->\n\n          <pre><code class=\"hijs\" data-trim>function sayHello(name) {\n  let output = \"Hello \" + name;  // output is local to sayHello\n  console.log(output);\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Scoping in JavaScript Recall that it is generally better, for software maintainabilty, to localize your variables, i.e. keep their scope as limited as possible to avoid \"side effects\" from other parts of the program. <!-- We've seen the keyword let used to declare a variable in the current scope (i.e. between {}'s of a function/loop/conditional statement). --> function sayHello(name) { let output = \"Hello \" + name; // output is local to sayHello console.log(output);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section class=\"font-14pt-slide\">\n          <h2>Global Scope</h2>\n          <p>\n            Globals are variables or functions that are visible throughout the\n            entire program. They can be bad; other code and other JS files can\n            see and modify them, sometimes unexpectedly!</p>\n          <p>\n            <a href=\"scoping-examples/global-scope.html\" target=\"_blank\">Example</a>:\n            how many global variables/functions are introduced by this\n             code? <span class=\"fragment\">3 (<code>count</code>, <code>incr</code>,\n               and <code>reset</code>)</span>\n           </p>\n            <pre><code class=\"hijs font-14pt\" data-trim>let count = 0;       // count is a global variable\n\nfunction incr(n) {   // n is a parameter, local to function incr\n  let count2 = 10;   // count2 is a local variable\n  count += n;        // we can modify the global count variable here!\n}\n\nfunction reset() {\n  count = 0;         // because count is global it can be reset here\n  // count2 = 0;     // count2 would not be able to be set here.\n}\n\nincr(4); \nincr(2);\nconsole.log(count);  // what is the value of the count global here?</code></pre>\n            <p class=\"code-caption\">JS</p>\n        </section>", "text": "Global Scope Globals are variables or functions that are visible throughout the entire program. They can be bad; other code and other JS files can see and modify them, sometimes unexpectedly! Example: how many global variables/functions are introduced by this code? 3 (count, incr, and reset) let count = 0; // count is a global variablefunction incr(n) { // n is a parameter, local to function incr let count2 = 10; // count2 is a local variable count += n; // we can modify the global count variable here!}function reset() { count = 0; // because count is global it can be reset here // count2 = 0; // count2 would not be able to be set here.}incr(4); incr(2);console.log(count); // what is the value of the count global here? JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <section>\n          <h2>Let Variable Scope</h2>\n          <p>\n            <code>let</code> localizes the scope of a variable (shadowing any variables in the\n            outer scope).\n            (<a href=\"scoping-examples/let-scope.html\">example</a>).\n          </p>\n\n            <pre><code class=\"hijs font-14pt\" data-trim>let count = 0;       // this count is a global variable\n\nfunction incr(n) {\n  let count = 10;    // this count is a local to incr\n  count += n;\n}\n\nincr(4);\nincr(2);\nconsole.log(count);  // what is the value of the count global here?</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p>Note: See slide below for more information on <code>var</code> vs.\n            <code>let</code></p>\n        </section>\n\n        <section>\n          <h2>Aside: don't use <code>var</code></h2>\n          <p>We don't want you using var. Period. Even if you see others use it. <a href=\"scoping-examples/varvariables.js\" target=\"_blank\">Example</a>:</p>\n          <pre><code class=\"hijs\" data-trim>function varTest() {\n  console.log(\"varTest\");\n  var x = 1;\n  if (x === 1) {\n    var x = 2;          // same variable!\n    console.log(x);     // 2\n  }\n  console.log(x);       // 2\n}\n\nfunction letTest() {\n  console.log(\"letTest\");\n  let x = 1;\n  if (x === 1) {\n    let x = 2;          // different variable\n    console.log(x);     // 2\n  }\n  console.log(x);       // 1\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>\n</section>", "text": "Let Variable Scope let localizes the scope of a variable (shadowing any variables in the outer scope). (example). let count = 0; // this count is a global variablefunction incr(n) { let count = 10; // this count is a local to incr count += n;}incr(4);incr(2);console.log(count); // what is the value of the count global here? JS Note: See slide below for more information on var vs. let Aside: don't use var We don't want you using var. Period. Even if you see others use it. Example: function varTest() { console.log(\"varTest\"); var x = 1; if (x === 1) { var x = 2; // same variable! console.log(x); // 2 } console.log(x); // 2}function letTest() { console.log(\"letTest\"); let x = 1; if (x === 1) { let x = 2; // different variable console.log(x); // 2 } console.log(x); // 1} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Let Variable Scope</h2>\n          <p>\n            <code>let</code> localizes the scope of a variable (shadowing any variables in the\n            outer scope).\n            (<a href=\"scoping-examples/let-scope.html\">example</a>).\n          </p>\n\n            <pre><code class=\"hijs font-14pt\" data-trim>let count = 0;       // this count is a global variable\n\nfunction incr(n) {\n  let count = 10;    // this count is a local to incr\n  count += n;\n}\n\nincr(4);\nincr(2);\nconsole.log(count);  // what is the value of the count global here?</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p>Note: See slide below for more information on <code>var</code> vs.\n            <code>let</code></p>\n        </section>", "text": "Let Variable Scope let localizes the scope of a variable (shadowing any variables in the outer scope). (example). let count = 0; // this count is a global variablefunction incr(n) { let count = 10; // this count is a local to incr count += n;}incr(4);incr(2);console.log(count); // what is the value of the count global here? JS Note: See slide below for more information on var vs. let", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Aside: don't use <code>var</code></h2>\n          <p>We don't want you using var. Period. Even if you see others use it. <a href=\"scoping-examples/varvariables.js\" target=\"_blank\">Example</a>:</p>\n          <pre><code class=\"hijs\" data-trim>function varTest() {\n  console.log(\"varTest\");\n  var x = 1;\n  if (x === 1) {\n    var x = 2;          // same variable!\n    console.log(x);     // 2\n  }\n  console.log(x);       // 2\n}\n\nfunction letTest() {\n  console.log(\"letTest\");\n  let x = 1;\n  if (x === 1) {\n    let x = 2;          // different variable\n    console.log(x);     // 2\n  }\n  console.log(x);       // 1\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Aside: don't use var We don't want you using var. Period. Even if you see others use it. Example: function varTest() { console.log(\"varTest\"); var x = 1; if (x === 1) { var x = 2; // same variable! console.log(x); // 2 } console.log(x); // 2}function letTest() { console.log(\"letTest\"); let x = 1; if (x === 1) { let x = 2; // different variable console.log(x); // 2 } console.log(x); // 1} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Event-driven_programming\">Event-Driven Programming</a></h2>\n          <p>\n            <img src=\"../img/event-driven-programming.png\" alt=\"event-driven programming\">\n          </p>\n          <p>Unlike Java programs, JS programs have no <code>main</code>; they respond to user actions\n          called <strong>events</strong></p>\n          <p><strong>Event-Driven Programming</strong>: writing programs driven by <a href=\"https://codestepbystep.com/problem/view/javascript/events/events\">user events</a></p>\n        </section>", "text": "Event-Driven Programming Unlike Java programs, JS programs have no main; they respond to user actions called events Event-Driven Programming: writing programs driven by user events", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n        <h2>Problem with reading &amp; changing styles</h2>\n        <p><strong>Note!</strong> Be careful to </p>\n        <ul>\n          <li>remove the units from a  <code>.style</code> value before doing arithmetic on it. </li>\n          <li>add the units to numerical values (like <code>pt</code>, <code>px</code>,\n            <code>vw</code>, etc) when setting <code>.style</code> values.\n          </li>\n        </ul>\n        <p>\n          Also: <strong>a catch:</strong> you can only use this to read styles\n          that have been set with the DOM <code>.style</code>\n          earlier in the code <span class=\"small-font\">or with inline CSS which we don't\n            want you to do </span>.\n        </p>\n        <p>\n          You cannot read style properties set in the <code>.css</code> file using <code>.style</code>!\n        </p>\n      </section>", "text": "Problem with reading & changing styles Note! Be careful to remove the units from a .style value before doing arithmetic on it. add the units to numerical values (like pt, px, vw, etc) when setting .style values. Also: a catch: you can only use this to read styles that have been set with the DOM .style earlier in the code or with inline CSS which we don't want you to do . You cannot read style properties set in the .css file using .style!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n        <h2>Accessing elements' computed styles</h2>\n        <p>\n          <code>getComputedStyle</code> method of global\n          <code>window</code> object accesses existing styles\n        </p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>window.getComputedStyle(element).propertyName;</code></pre>\n        <p class=\"code-caption\">JS (template)</p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>img {\n  height: 600px;\n}</code></pre>\n        <p class=\"code-caption\">CSS</p>\n\n        <pre><code class=\"hljs\" data-trim data-noescape>&gt; let img = document.querySelector(\"img\");\n&gt; img.style.height;\n&gt; \"\"\n&gt; img.style.height = \"25%\";\n&gt; \"25%\"\n&gt; window.getComputedStyle(img).height;\n&gt; \"828.234px\"</code></pre>\n        <p class=\"code-caption\">JS Console Output</p>\n        <p class=\"small-font\">Thanks to Daniel H for the example</p>\n      </section>", "text": "Accessing elements' computed styles getComputedStyle method of global window object accesses existing styles window.getComputedStyle(element).propertyName; JS (template) img { height: 600px;} CSS > let img = document.querySelector(\"img\");> img.style.height;> \"\"> img.style.height = \"25%\";> \"25%\"> window.getComputedStyle(img).height;> \"828.234px\" JS Console Output Thanks to Daniel H for the example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n        <h2>Common bug: incorrect usage of existing styles</h2>\n        <p>\n          The following example attempts to add 100px to the top of <code>main</code>, but fails.\n        </p>\n        <p>\n          Consider the case when <code>main</code> has <code>top</code> set to \"200px\". Then\n          this code would update <code>style.top</code> to be the invalid value of \"200px100px\"\n        </p>\n        <pre><code class=\"hljs\" data-trim data-noescape>let main = document.getElementById(\"main\");\n<del class=\"bad\">main.style.top = window.getComputedStyle(main).top + 100 + \"px\";</del>\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n\n        <p>A corrected version:</p>\n        <pre><code class=\"hljs\" data-trim data-noescape>main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\";\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n      </section>", "text": "Common bug: incorrect usage of existing styles The following example attempts to add 100px to the top of main, but fails. Consider the case when main has top set to \"200px\". Then this code would update style.top to be the invalid value of \"200px100px\" let main = document.getElementById(\"main\");main.style.top = window.getComputedStyle(main).top + 100 + \"px\"; JS A corrected version: main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\"; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Online Resources: Good or Bad?</h2>\n          <p>\n            You may find some resources online helpful to explore different ways to\n            implement UI's in JavaScript - there are a ton of things! But <a href=\"https://www.w3schools.com/js/js_htmldom_events.asp\">some are better than\n           others</a> (<strong>make sure you understand why these examples are poor use of\n            JS).</strong>\n          </p>\n          <p>For reference, <a href=\"examples/mouseover.html\">here</a>'s a <em>much</em>\n          better solution using what we've\n          taught in this course to accomplish a mouseover <a href=\"https://www.w3schools.com/js/tryit.asp?filename=tryjs_events_mouseover\">demo</a>\n          given by W3Schools (view HTML source to get CSS/JS).\n        </p>\n        <p>\n           Understanding good code quality can be extremely valuable in\n          navigating an overwhelming amount of resources on the web today.\n          </p>\n        </section>", "text": "Online Resources: Good or Bad? You may find some resources online helpful to explore different ways to implement UI's in JavaScript - there are a ton of things! But some are better than others (make sure you understand why these examples are poor use of JS). For reference, here's a much better solution using what we've taught in this course to accomplish a mouseover demo given by W3Schools (view HTML source to get CSS/JS). Understanding good code quality can be extremely valuable in navigating an overwhelming amount of resources on the web today.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Understanding the Good vs. Bad</h2>\n          <p>\n            We choose resources that best align with our code quality guidelines, while\n            giving just enough \"extra detail\" into topics we cover in lecture/section/lab.\n            That said, let us know if you're looking for recommendations on a specific\n            resource!\n          </p>\n        </section>", "text": "Understanding the Good vs. Bad We choose resources that best align with our code quality guidelines, while giving just enough \"extra detail\" into topics we cover in lecture/section/lab. That said, let us know if you're looking for recommendations on a specific resource!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>An Alternative Way to Handle Events</h2>\n          <p>\n            We introduced <code>addEventListener</code> as the way to give a\n            \"listener\" to a DOM element, mapping an action (event) to a response\n            (function).\n          </p>\n          <p>\n            Before <code>addEventListener</code> was introduced in JS, events were most\n            often handled using \"onevent\" attributes. You will still see these\n            occassionally, but <code>addEventListener</code> is the better choice.\n          </p>\n        </section>", "text": "An Alternative Way to Handle Events We introduced addEventListener as the way to give a \"listener\" to a DOM element, mapping an action (event) to a response (function). Before addEventListener was introduced in JS, events were most often handled using \"onevent\" attributes. You will still see these occassionally, but addEventListener is the better choice.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Example: <code>onclick</code></h2>\n          <pre><code>let myBtn = document.getElementById(\"my-btn\");\nmyBtn.onclick = function() {\n  console.log(\"You clicked a button!\");\n};\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code>let myBtn = document.getElementById(\"my-btn\");\nmyBtn.addEventListener(\"click\", function() {\n  console.log(\"You clicked a button!\");\n});</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n          This is fine to use if you are attaching an event to an element\n          and don't need to ever remove the event listener. It's an older convention,\n          but not necessarily a \"bad\" one for simple event handling.\n          </p>\n        </section>", "text": "Example: onclick let myBtn = document.getElementById(\"my-btn\");myBtn.onclick = function() { console.log(\"You clicked a button!\");}; JS let myBtn = document.getElementById(\"my-btn\");myBtn.addEventListener(\"click\", function() { console.log(\"You clicked a button!\");}); JS This is fine to use if you are attaching an event to an element and don't need to ever remove the event listener. It's an older convention, but not necessarily a \"bad\" one for simple event handling.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Another Example: <code>window.onload</code></h2>\n          <p>Recall that we need to set up our JS program with a listener for the window's\n          <code>load</code> event in order to ensure access to DOM elements in our program\n          when the document has finished loading.\n          </p>\n          <pre><code class=\"hljs\">window.addEventListener(\"load\", initialize);\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n            You can achieve the same result using the <code>onload</code> event attribute\n            for the window. You may see this in some examples, but\n            <code>addEventListener</code> is preferred.\n          </p>\n\n          <pre><code class=\"hijs\">// initialize defined elsewhere\nwindow.onload = initialize;</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hijs\">window.onload = function() {\n  // this is fine for short setup code, but it's common to factor\n  // your page setup into an \"initialize\" function as seen above\n};</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Another Example: window.onload Recall that we need to set up our JS program with a listener for the window's load event in order to ensure access to DOM elements in our program when the document has finished loading. window.addEventListener(\"load\", initialize); JS You can achieve the same result using the onload event attribute for the window. You may see this in some examples, but addEventListener is preferred. // initialize defined elsewherewindow.onload = initialize; JS window.onload = function() { // this is fine for short setup code, but it's common to factor // your page setup into an \"initialize\" function as seen above}; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec09-more-dom-events/"},
{"html": "<section>\n          <h2>Key Aspects of the Internet</h2>\n          <p>Subnetworks can stand on their own</p>\n          <p>Computers can dynamically join and leave the network</p>\n          <p>Built on open standards; anyone can create a new internet device</p>\n          <p>Lack of centralized control (mostly)</p>\n          <p>Everyone can use it with simple, commonly-available software</p>\n          <a href=\"https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers\">\n            <img class=\"simpleimg\" src=\"../img/Internet_Connectivity_Access_layer.png\" alt=\"Picture of the internet\" height=\"280\"></a>\n            <p class=\"citation\">https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers</p>\n\n        </section>", "text": "Key Aspects of the Internet Subnetworks can stand on their own Computers can dynamically join and leave the network Built on open standards; anyone can create a new internet device Lack of centralized control (mostly) Everyone can use it with simple, commonly-available software https://en.wikibooks.org/wiki/Intellectual_Property_and_the_Internet/Internet_service_providers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Question</h2>\n          <p>Who \"runs\" the Internet? Who is responsible for overseeing it?</p>\n        </section>", "text": "Question Who \"runs\" the Internet? Who is responsible for overseeing it?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Logical Operators</h2>\n          <p>Relational: <code>&gt; &lt; &gt;= &lt;=</code></p>\n          <p>Logical: <code>&amp;&amp; || !</code></p>\n          <p>Equality: <code>== != </code></p>\n          <p>\n            Strict Equality: <code> === !==</code> (checks <strong>both\n              type and value</strong>).\n          </p>\n          <ul>\n            <li>Most logical operators automatically convert types.\n              <ul>\n                <li><code>5 &lt; \"7\"</code><code class=\"fragment green\"> // true</code></li>\n                <li><code>42 == 42.0</code><code class=\"fragment \"> // true</code></li>\n                <li><code>\"5.0\" == 5</code><code class=\"fragment\">  // true</code></li>\n                <li><code>\"5.0\" === 5</code><code class=\"fragment\"> // false</code></li>\n              </ul>\n            </li>\n            <li>\n              It is usually a good idea to use <code>===</code> instead of <code>==</code>.\n            </li>\n          </ul>\n          <p>\n            A <a href=\"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a\" target=\"_blank\">good reading on == vs. ===</a> (and don't forget about the\n                 <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\">JS\n                   equality table</a>)!\n          </p>\n       </section>", "text": "Logical Operators Relational: > < >= <= Logical: && || ! Equality: == != Strict Equality: === !== (checks both type and value). Most logical operators automatically convert types. 5 < \"7\" // true 42 == 42.0 // true \"5.0\" == 5 // true \"5.0\" === 5 // false It is usually a good idea to use === instead of ==. A good reading on == vs. === (and don't forget about the JS equality table)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n        <h2>Common error with type coercion</h2>\n        <pre><code class=\"hijs\" data-trim>let woops = \"abc\" &gt; 0; <span class=\"fragment\">// false</span></code></pre>\n        <p class=\"code-caption\">JS</p>\n        <p class=\"fragment\">But why??!??!</p>\n        <div class=\"fragment\">\n          <p><code>parseInt(\"abc\") === NaN</code> and <code>NaN &gt; 0</code> is <code>false</code> </p>\n          <p class=\"fragment\">Why is this important? </p>\n        </div>\n        <div class=\"fragment\">\n          <p>\n            Imagine you want to validate user input on your page to ensure someone has typed\n            a non-blank value into an input text box (id <code>#my-input</code>) before hitting\n            the submit button... so you add this to your .js file\n          </p>\n          <pre><code>if (id(\"my-input\").value &gt; 0) { /* do submission stuff */ }</code></pre>\n          <p>But there's a bug! What is it?</p>\n        </div>\n        <div class=\"fragment\">\n          <p>The fix</p>\n          <pre><code>if (id(\"my-input\").value.length &gt; 0) { /* do submission stuff */ }</code></pre>\n        </div>\n      </section>", "text": "Common error with type coercion let woops = \"abc\" > 0; // false JS But why??!??! parseInt(\"abc\") === NaN and NaN > 0 is false Why is this important? Imagine you want to validate user input on your page to ensure someone has typed a non-blank value into an input text box (id #my-input) before hitting the submit button... so you add this to your .js file if (id(\"my-input\").value > 0) { /* do submission stuff */ } But there's a bug! What is it? The fix if (id(\"my-input\").value.length > 0) { /* do submission stuff */ }", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n        <h2>Special Values: <code>null</code> and <code>undefined</code></h2>\n        <pre><code class=\"hijs\" data-trim>let foo = null;\nlet bar = 9;\nlet baz;\n\n/* At this point in the code,\n * foo is null\n * bar is 9\n * baz is undefined\n */</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p><code>undefined</code>: declared but has not yet been assigned a value</p>\n          <p>\n            <code>null</code>: exists, but was specifically assigned an empty value or\n            <code>null</code>. Expresses intentional a lack of identification.\n          </p>\n\n          <p>\n            A good motivating overview of\n            <a target=\"_blank\" href=\"https://codeburst.io/javascript-null-vs-undefined-20f955215a2\"><code>null</code> vs.\n             <code>undefined</code></a></p>\n          <p>Note: This takes some time to get used to, and remember this slide if you get\n          confused later.</p>\n        </section>", "text": "Special Values: null and undefined let foo = null;let bar = 9;let baz;/* At this point in the code, * foo is null * bar is 9 * baz is undefined */ JS undefined: declared but has not yet been assigned a value null: exists, but was specifically assigned an empty value or null. Expresses intentional a lack of identification. A good motivating overview of null vs. undefined Note: This takes some time to get used to, and remember this slide if you get confused later.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Common Error... </h2>\n          <div>\n            <p>Did you see this in the inspector when working on CP2 or HW 2?</p>\n            <img src=\"hidden/type-error.png\">\n          </div>\n          <div class=\"fragment\">\n            <p>\n              The cause is typically that you tried to dereference a DOM element was\n              null because the id does not exist.\n            </p>\n            <pre><code class=\"hijs\" data-trim>&lt;button id=\"bar-btn\"&gt;Submit&lt;/button&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n\n            <pre><code class=\"hijs\" data-trim>id(\"foo-btn\").addEventListener(\"click\", handleButton);</code></pre>\n              <p class=\"code-caption\">JS</p>\n\n            <p>\n              Only non-null objects can be dereferenced using the . (dot) notation to call a method\n              or retrieve a value stored in that object\n            </p>\n          </div>\n        </section>", "text": "Common Error... Did you see this in the inspector when working on CP2 or HW 2? The cause is typically that you tried to dereference a DOM element was null because the id does not exist. <button id=\"bar-btn\">Submit</button> HTML id(\"foo-btn\").addEventListener(\"click\", handleButton); JS Only non-null objects can be dereferenced using the . (dot) notation to call a method or retrieve a value stored in that object", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>A Few Last Notes on Types in JavaScript</h2>\n          <div class=\"font-18pt\">\n          <p>\n            As you write JS programs, you <del>may</del> <ins>will</ins> run into some silent\n            bugs resulting from odd typing behavior in JS. Automatic type conversion, or coersion,\n            is a common, often perplexing, source of JS bugs (even for experienced JS programmers).\n          </p>\n          <p>\n          <strong>Why does it happen?</strong> JS was designed to \"work\" as intuitively as\n            possible without requiring the strict types.\n          </p>\n          <p>\n          <strong>Why is this important to be aware of?</strong> You'll be writing\n            programs which use variables and conditional logic. Knowing\n            what is considered truthy/false and how types are evaluated (at a\n            high level) can make you a much happier JS developer\n            (<a href=\"https://www.codestepbystep.com/problem/view/javascript/expressions/expressions3\">some\n              practice</a>)\n          </p><p>Examples of some \"less-intuitive\" evaluations:</p>\n          <div class=\"side-by-side space-between\">\n            <div>\n            <p><code>154 === 154.0</code><code class=\"fragment green\">// true</code> </p>\n            <p><code>2 &lt; 1 &lt; 2;</code><code class=\"fragment green\">// true</code></p>\n            <p><code>0 + \"1\" + 2;</code><code class=\"fragment green\">// \"012\"</code></p>\n            <p><code>0.1 + 0.2 == 0.3;</code><code class=\"fragment green\">//\n                false</code></p>\n          </div>\n          <div>\n            <p><code>[] + [];</code><code class=\"fragment green\">// \"\"</code></p>\n            <p><code>\"1\" / null;</code><code class=\"fragment green\">// Infinity</code></p>\n            <p><code>[0] === true</code><code class=\"fragment green\">// false (expected?)</code></p>\n            <p><code>!![0]</code><code class=\"fragment green\">// true</code></p>\n\n          </div>\n          </div>\n          <p class>\n            <a href=\"https://www.destroyallsoftware.com/talks/wat\">\n              This is worth 3 minutes of your viewing pleasure.\n            </a> (starting at 1:20)\n          </p>\n          </div>\n        </section>", "text": "A Few Last Notes on Types in JavaScript As you write JS programs, you may will run into some silent bugs resulting from odd typing behavior in JS. Automatic type conversion, or coersion, is a common, often perplexing, source of JS bugs (even for experienced JS programmers). Why does it happen? JS was designed to \"work\" as intuitively as possible without requiring the strict types. Why is this important to be aware of? You'll be writing programs which use variables and conditional logic. Knowing what is considered truthy/false and how types are evaluated (at a high level) can make you a much happier JS developer (some practice) Examples of some \"less-intuitive\" evaluations: 154 === 154.0// true 2 < 1 < 2;// true 0 + \"1\" + 2;// \"012\" 0.1 + 0.2 == 0.3;// false [] + [];// \"\" \"1\" / null;// Infinity [0] === true// false (expected?) !![0]// true This is worth 3 minutes of your viewing pleasure. (starting at 1:20)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>More on (resetting) timers</h2>\n          <h3>With <a href=\"examples/bubbles/bubbles.html\">Bubbles!</a></h3>\n        </section>", "text": "More on (resetting) timers With Bubbles!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Toggling Timers</h2>\n          <pre><code>&lt;button id=\"toggle-btn\"&gt;Start/Stop&lt;button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\nfunction initialize() {\n  id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);\n}\n\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId);\n    timerId = null;\n  }\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn-toggle\">Start/Stop</button>\n            <span id=\"output-text-toggle\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/toggle-interval.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n\n        <section>\n          <h2>Common error with timers</h2>\n          <p>Common error: Not resetting the timer to null after <code>clearInterval</code>!</p>\n          <p>Your timer may not start again or you may wind up with a proliferation of timers</p>\n\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\n...\n\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId); // Do this first (don't forget)!!!\n    timerId = null; // Don't forget this!!!\n  }\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>What happens if you swap the <code>clearInterval(timerId)</code>/<code>timerId = null</code>? </p>\n          <p>Do you always need a timerId? (think about this on your own)</p>\n        </section>\n\n        <section>\n          <h2>More on <span id=\"rocket-h2\">Fat Arrow Functions</span></h2>\n\n          <button id=\"aka\" style=\"padding: 5px;\">Officially Known As...</button>\n          <div id=\"rocket-demo\" style=\"display: none\">\n          <h1>ROCKET SHIPS</h1>\n          <pre><code style=\"position: relative; width:100%; padding-top: 10px;\n          padding-bottom: 10px\"><span style=\"position:\n          absolute; font-size: 36pt\" id=\"rocket-ship\">=&gt;</span>\n</code></pre>\n          </div>\n        </section>\n\n        <section>\n          <h2>Fat arrow functions</h2>\n          <p>Fat arrow functions are just another way of writing an anonymous function.</p>\n          <pre><code class=\"hljs small-font\" data-trim>/* named function with one parameter that logs to the console. */\nfunction sayHello(you) {\n  console.log(\"Hello \" + you);\n}\n\n/* Equivalent function as an anonymous function */\n(you) =&gt; {\n  console.log(\"Hello \" + you);\n}\n\n/* Equivalent function with no parens because there is only 1 parameter */\nyou =&gt; {\n  console.log(\"Hello \" + you);\n}\n\n/* anonymous function with no parameters */\n() =&gt; {\n  console.log(\"Hello!\");\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>\n\n        <section>\n          <h2>Fat arrow function syntax</h2>\n          <p>Some sample basic syntax\n            (from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN</a>)</p>\n          <pre><code class=\"hljs\" data-trim>// General form with multiple parameters\n(param1, param2, \u2026, paramN) =&gt; { statements }\n\n// Multiple parameters and a return statement\n(param1, param2, \u2026, paramN) =&gt; { return expression; }\n// or ...\n(param1, param2, \u2026, paramN) =&gt; expression\n\n// Parentheses are optional when there's only one parameter name:\n(singleParam) =&gt; { statements }\nsingleParam =&gt; { statements }\n\n// The parameter list for a function with no parameters should\n// be written with a pair of parentheses.\n() =&gt; { statements }</code></pre>\n          <p class=\"code-caption\">JS (templates)</p>\n          <p>Note: the scoping of <code>this</code> is different with fat arrow functions that\n            traditional anonymous functions ()\n          </p>\n\n          </section>\n\n          <section>\n            <h2>Examples </h2>\n            <pre><code class=\"hljs small-font\" data-trim>// Quick max and min function definitions\nlet max = (a, b) =&gt; a &gt; b ? a : b;\nlet min = (a, b) =&gt; a &lt; b ? a : b;\n\n// Array filtering\nlet arr = [1, 2, -1, 0, 3, 4, 6, 20];\nlet even = arr.filter(v =&gt; v % 2 == 0);    // [2, 0, 4, 6, 20]</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p>More information on <a href=\"https://codeburst.io/learn-understand-javascripts-filter-function-bde87bce206\"><code>filter</code></a></p>\n        </section>\n\n        <section>\n          <h2>Fat arrow functions in CSE 154</h2>\n          <ul>\n            <li>\n              This information on the \"fat arrow\" notation was mostly \"FYI\" because you are\n              going to run in to them in documentation.\n            </li>\n            <li>\n              You may continue to use anonymous functions as taught previously\n              (<code>function() { }</code>) or use fat arrow functions as you feel\n              comfortable with them. You do NOT have to use fat arrow functions at all.\n           </li>\n           <li>\n             As always, we would prefer you be consistent in your usage of either regular\n             anonymous functions or fat arrow functions as that is good Code Quality\n           </li>\n           <li>\n             Remember to only use anonymous functions (in general) when you have a small number of\n             statements (&lt;= 3 ish) that won't need to be reused or duplicated anywhere.\n           </li>\n        </ul>\n      </section>\n\n\n        <section>\n          <h2>More on reading &amp; changing styles</h2>\n        </section>\n\n        <section>\n          <h2>Review: Changing styles</h2>\n          <p>\n            Recall that the <code>.style</code> property of a DOM object lets you set any\n            CSS style for an element\n          </p>\n\n          <pre><code class=\"hljs\" data-trim>button { font-size: 16pt; }</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"clickme\"&gt;Click Me&lt;/button&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>window.addEventListener(\"load\", initialize);\nfunction initialize() {\n  document.getElementById(\"clickme\").addEventListener(\"click\", biggerFont);\n};\nfunction biggerFont() {\n  let button = document.getElementById(\"clickme\");\n  let size = parseInt(button.style.fontSize); // size === 16pt to start\n  button.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"clickme\" style=\"font-size:16pt;\">Click Me</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n\n        </section>\n\n        <section>\n          <h2>Problem with reading &amp; changing styles</h2>\n          <p><strong>Note!</strong> Be careful to </p>\n          <ul>\n            <li>remove the units from a  <code>.style</code> value before doing arithmetic on it. </li>\n            <li>add the units to numerical values (like <code>pt</code>, <code>px</code>,\n              <code>vw</code>, etc) when setting <code>.style</code> values.\n            </li>\n          </ul>\n          <p>\n            Also: <strong>a catch:</strong> you can only use this to read styles\n            that have been set with the DOM <code>.style</code>\n            earlier in the code <span class=\"small-font\">or with inline CSS which we don't\n              want you to do </span>.\n          </p>\n          <p>\n            You cannot read style properties set in the <code>.css</code> file using <code>.style</code>.\n          </p>\n\n        </section>\n\n\n        <section>\n          <h2>Accessing elements' computed styles</h2>\n          <p>\n            <code>getComputedStyle</code> method of global\n            <code>window</code> object accesses existing styles\n          </p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>window.getComputedStyle(element).propertyName;</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>#river {\n  height: 600px;\n}</code></pre>\n          <p class=\"code-caption\">CSS (in bubbles.css)</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>&gt; let river = document.querySelector(\"river\");\n&gt; river.style.height;\n&gt; \"\"\n&gt; river.style.height = \"25%\";\n&gt; \"25%\"\n&gt; window.getComputedStyle(river).height;\n&gt; \"828.234px\"</code></pre>\n          <p class=\"code-caption\">JS Console Output</p>\n          <p class=\"small-font\">Thanks to Daniel H for the example</p>\n\n        </section>\n\n        <section>\n          <h2>Common bug: incorrect usage of existing styles</h2>\n          <p>\n            The following example attempts to add 100px to the top of <code>main</code>, but fails.\n          </p>\n          <p>\n            Consider the case when <code>main</code> has <code>top</code> set to \"200px\". Then\n            this code would update <code>style.top</code> to be the invalid value of \"200px100px\"\n          </p>\n          <pre><code class=\"hljs\" data-trim data-noescape>let main = document.getElementById(\"main\");\n<del class=\"bad\">main.style.top = window.getComputedStyle(main).top + 100 + \"px\";</del></code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>A corrected version:</p>\n          <pre><code class=\"hljs\" data-trim data-noescape>main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\";</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>\n\n\n        <section>\n          <h2>More on (programatic) DOM tree traversal and TextNodes</h2>\n        </section>\n\n\n        <section>\n          <h2>Review: Creating New Nodes</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>document.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">createElement(\"tag\")</a></td>\n              <td>creates and returns a new empty DOM node representing an element of that type</td>\n            </tr>\n            <tr>\n              <td>document.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode\">createTextNode(\"text\")</a></td>\n              <td>creates and returns a text node containing given text</td>\n            </tr>\n          </table>\n          <pre><code class=\"hljs\" data-trim>// create a new &lt;h2&gt; node\nlet newHeading = document.createElement(\"h2\");\n// Add text to the node method 1\nlet newText = document.createTextNode(\"This is a new heading!\");\nnewHeading.appendChild(newText);\n// Add text to the node method 2\nnewHeading.innerText = \"This is a newer heading!\";\ndocument.querySelector(\"body\").appendChild(newHeading);</code></pre>\n\n          <p class=\"code-caption\">JS</p>\n        </section>\n\n\n        <section>\n          <h2>Traversing the DOM Tree Manually</h2>\n          <p>Every node's DOM object has the following (read-only) properties:</p>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name(s)</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild\" target=\"_blank\">firstChild</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild\" target=\"_blank\">lastChild</a>\n              </td>\n              <td>start/end of this node's list of children, may include text or comments</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild\" target=\"_blank\">firstElementChild</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild\" target=\"_blank\">lastElementChild</a>\n              </td>\n              <td>start/end of this node's list of children elements</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes\" target=\"_blank\">childNodes</a>\n              </td>\n              <td>array of all of this node's children</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling\" target=\"_blank\">nextSibling</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling\" target=\"_blank\">previousSibling</a>\n              </td>\n              <td>neighboring nodes with the same parent, including whitespace nodes</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling\" target=\"_blank\">nextElementSibling</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling\" target=\"_blank\">previousElementSibling</a>\n              </td>\n              <td>neighboring element nodes with the same parent, skipping whitespace nodes</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode\" target=\"_blank\">parentNode</a>\n              </td>\n              <td>the element that contains this node</td>\n            </tr>\n          </table>\n          <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\">Complete list of DOM node properties</a></p>\n          <p><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs\" target=\"_blank\">Browser incompatibility information</a> (IE6 sucks)</p>\n        </section>\n\n        <section>\n          <h2>DOM Tree Traversal Example</h2>\n          <div class=\"side-by-side\">\n            <div class=\"panel-left two-panel\">\n              <pre><code class=\"hljs\" data-trim>&lt;p id=\"foo\"&gt;\nThis is a paragraph of text with a\n&lt;a href=\"page.html\"&gt;link&lt;/a&gt;.\n&lt;/p&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n            </div>\n            <div class=\"panel-right two-panel no-margin-top\">\n              <p class=\"space-above\"><img src=\"hidden/dom-traversal-example.png\" alt=\"DOM traversal example\"></p>\n              <p>From <a href=\"http://www.webstepbook.com/supplements/slides/lecture16-dom_tree.shtml\">Web Step Book Supplemental resources</a></p>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <h2>Element vs. Text Nodes</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;div&gt;\n  &lt;p id=\"foo\"&gt;\n    This is a paragraph of text with a\n    &lt;a href=\"page.html\"&gt;link&lt;/a&gt;.\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>Q: How many children does the <code>div</code> have?\n          <span class=\"fragment\">A: 3</span></p>\n          <ul class=\"fragment\">\n            <li>an element node representing the <code>&lt;p&gt;</code></li>\n            <li>two <em>text nodes</em> representing \"\\n\\t\" (before/after the paragraph)</li>\n          </ul>\n          <p>Q: How many children does the paragraph have? <span class=\"fragment\">A: 3 (text, a, text)</span></p>\n          <p>Q: The <code>a</code> tag? <span class=\"fragment\">A: 1 (text)</span></p>\n        </section>\n\n        <section>\n          <h2>Common bug</h2>\n          <h3>Not accounting for Text Nodes in the tree traversal</h3>\n          <p>Incorrect usage of firstChild/lastChild/nextSibling/previousSibling\n            instead of firstElementChild/lastElementChild/firstElementSibling/lastElementSibling\n          </p>\n        </section>\n\n\n        <section>\n         <h2>Summary of Java vs. JS vs. Python</h2>\n         <p>Final thoughts about JavaScript as a language</p>\n         <table>\n           <tr>\n             <th></th>\n             <th>Java</th>\n             <th>JS</th>\n             <th>Python</th>\n           </tr>\n           <tr>\n             <td>Compiled vs. Interpreted</td>\n             <td>Compiled</td>\n             <td>Interpreted</td>\n             <td>Interpreted</td>\n           </tr>\n           <tr>\n             <td>Typing</td>\n             <td>Strong</td>\n             <td>Loose</td>\n             <td>Loose</td>\n           </tr>\n           <tr>\n             <td>Variable Declaration</td>\n             <td>Must be declared before use</td>\n             <td>Does not need to be declared before use</td>\n             <td>Does not need to be declared before use</td>\n           </tr>\n           <tr>\n             <td>Key Construct</td>\n             <td>Classes (OOP)</td>\n             <td>Function</td>\n             <td>Function</td>\n           </tr>\n         </table>\n       </section>\n\n\n\n      <section>\n        <h2>CSE 154 Modules</h2>\n        <ol>\n          <li>\n            Webpage structure and appearance with HTML5 and CSS. <i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li>\n            Client-side interactivity with JS DOM and events.<i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li class=\"bolded\">\n            Using web services (API's) as a client with JS.\n          </li>\n          <li class=\"faded\">\n            Writing JSON-based web services with PHP.\n          </li>\n          <li class=\"faded\">\n            Storing and retreiving information in a database with MySQL and server-side\n            programs.\n          </li>\n        </ol>\n      </section>\n\n      <section>\n        <h2>MAMP</h2>\n        <p>\n          In preparation for working with our server side code we will be installing\n          and configuring a server on our machine called MAMP (Mac Apache MySQL PHP)\n        </p>\n        <p>\n          Now instead of your urls being\n          <code>file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html</code></p>\n        \n        <p>\n          We will run them through <strong>locahost</strong>, e.g.\n        </p>\n        <ul class=\"no-bullets\">\n          <li>Mac: <br> <code>http://localhost:8888/154-19sp/hw2-set-bricker/set.html</code> </li>\n          <li>Windows: <br>  <code>http://localhost/154-19sp/hw2-set-bricker/set.html</code></li>\n        </ul>\n      </section>\n\n\n\n      </div>\n    </div>\n  <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n  <script src=\"../../site/reveal/js/reveal.js\"></script>\n  <script src=\"hidden/lec11.js\"></script>\n\n  <script>\n    Reveal.initialize({\n      controls: true,\n      progress: true,\n      history: true,\n      center: true,\n\n      transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n      // More info https://github.com/hakimel/reveal.js#dependencies\n      dependencies: [{\n          src: '../../site/reveal/lib/js/classList.js',\n          condition: function() {\n            return !document.body.classList;\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/marked.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/markdown.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/highlight/highlight.pack.js',\n          async: true,\n          callback: function() {\n            hljs.initHighlightingOnLoad();\n          }\n        },\n        { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n        { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n        { src: '../../site/reveal/plugin/search/search.js', async: true },\n        { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n      ]\n    });\n  </script>\n</section>", "text": "Toggling Timers <button id=\"toggle-btn\">Start/Stop<button> HTML let timerId = null; // stores ID of interval timerfunction initialize() { id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);}function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); timerId = null; }}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Start/Stop output (full example page) Common error with timers Common error: Not resetting the timer to null after clearInterval! Your timer may not start again or you may wind up with a proliferation of timers let timerId = null; // stores ID of interval timer...function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); // Do this first (don't forget)!!! timerId = null; // Don't forget this!!! }} JS What happens if you swap the clearInterval(timerId)/timerId = null? Do you always need a timerId? (think about this on your own) More on Fat Arrow Functions Officially Known As... ROCKET SHIPS => Fat arrow functions Fat arrow functions are just another way of writing an anonymous function. /* named function with one parameter that logs to the console. */function sayHello(you) { console.log(\"Hello \" + you);}/* Equivalent function as an anonymous function */(you) => { console.log(\"Hello \" + you);}/* Equivalent function with no parens because there is only 1 parameter */you => { console.log(\"Hello \" + you);}/* anonymous function with no parameters */() => { console.log(\"Hello!\");} JS Fat arrow function syntax Some sample basic syntax (from MDN) // General form with multiple parameters(param1, param2, \u2026, paramN) => { statements }// Multiple parameters and a return statement(param1, param2, \u2026, paramN) => { return expression; }// or ...(param1, param2, \u2026, paramN) => expression// Parentheses are optional when there's only one parameter name:(singleParam) => { statements }singleParam => { statements }// The parameter list for a function with no parameters should// be written with a pair of parentheses.() => { statements } JS (templates) Note: the scoping of this is different with fat arrow functions that traditional anonymous functions () Examples // Quick max and min function definitionslet max = (a, b) => a > b ? a : b;let min = (a, b) => a < b ? a : b;// Array filteringlet arr = [1, 2, -1, 0, 3, 4, 6, 20];let even = arr.filter(v => v % 2 == 0); // [2, 0, 4, 6, 20] JS More information on filter Fat arrow functions in CSE 154 This information on the \"fat arrow\" notation was mostly \"FYI\" because you are going to run in to them in documentation. You may continue to use anonymous functions as taught previously (function() { }) or use fat arrow functions as you feel comfortable with them. You do NOT have to use fat arrow functions at all. As always, we would prefer you be consistent in your usage of either regular anonymous functions or fat arrow functions as that is good Code Quality Remember to only use anonymous functions (in general) when you have a small number of statements (<= 3 ish) that won't need to be reused or duplicated anywhere. More on reading & changing styles Review: Changing styles Recall that the .style property of a DOM object lets you set any CSS style for an element button { font-size: 16pt; } CSS <button id=\"clickme\">Click Me</button> HTML window.addEventListener(\"load\", initialize);function initialize() { document.getElementById(\"clickme\").addEventListener(\"click\", biggerFont);};function biggerFont() { let button = document.getElementById(\"clickme\"); let size = parseInt(button.style.fontSize); // size === 16pt to start button.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!} JS Click Me output Problem with reading & changing styles Note! Be careful to remove the units from a .style value before doing arithmetic on it. add the units to numerical values (like pt, px, vw, etc) when setting .style values. Also: a catch: you can only use this to read styles that have been set with the DOM .style earlier in the code or with inline CSS which we don't want you to do . You cannot read style properties set in the .css file using .style. Accessing elements' computed styles getComputedStyle method of global window object accesses existing styles window.getComputedStyle(element).propertyName; JS (template) #river { height: 600px;} CSS (in bubbles.css) > let river = document.querySelector(\"river\");> river.style.height;> \"\"> river.style.height = \"25%\";> \"25%\"> window.getComputedStyle(river).height;> \"828.234px\" JS Console Output Thanks to Daniel H for the example Common bug: incorrect usage of existing styles The following example attempts to add 100px to the top of main, but fails. Consider the case when main has top set to \"200px\". Then this code would update style.top to be the invalid value of \"200px100px\" let main = document.getElementById(\"main\");main.style.top = window.getComputedStyle(main).top + 100 + \"px\"; JS A corrected version: main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\"; JS More on (programatic) DOM tree traversal and TextNodes Review: Creating New Nodes Name Description document.createElement(\"tag\") creates and returns a new empty DOM node representing an element of that type document.createTextNode(\"text\") creates and returns a text node containing given text // create a new <h2> nodelet newHeading = document.createElement(\"h2\");// Add text to the node method 1let newText = document.createTextNode(\"This is a new heading!\");newHeading.appendChild(newText);// Add text to the node method 2newHeading.innerText = \"This is a newer heading!\";document.querySelector(\"body\").appendChild(newHeading); JS Traversing the DOM Tree Manually Every node's DOM object has the following (read-only) properties: Name(s) Description firstChild, lastChild start/end of this node's list of children, may include text or comments firstElementChild, lastElementChild start/end of this node's list of children elements childNodes array of all of this node's children nextSibling, previousSibling neighboring nodes with the same parent, including whitespace nodes nextElementSibling, previousElementSibling neighboring element nodes with the same parent, skipping whitespace nodes parentNode the element that contains this node Complete list of DOM node properties Browser incompatibility information (IE6 sucks) DOM Tree Traversal Example <p id=\"foo\">This is a paragraph of text with a<a href=\"page.html\">link</a>.</p> HTML From Web Step Book Supplemental resources Element vs. Text Nodes <div> <p id=\"foo\"> This is a paragraph of text with a <a href=\"page.html\">link</a>. </p></div> HTML Q: How many children does the div have? A: 3 an element node representing the <p> two text nodes representing \"\\n\\t\" (before/after the paragraph) Q: How many children does the paragraph have? A: 3 (text, a, text) Q: The a tag? A: 1 (text) Common bug Not accounting for Text Nodes in the tree traversal Incorrect usage of firstChild/lastChild/nextSibling/previousSibling instead of firstElementChild/lastElementChild/firstElementSibling/lastElementSibling Summary of Java vs. JS vs. Python Final thoughts about JavaScript as a language Java JS Python Compiled vs. Interpreted Compiled Interpreted Interpreted Typing Strong Loose Loose Variable Declaration Must be declared before use Does not need to be declared before use Does not need to be declared before use Key Construct Classes (OOP) Function Function CSE 154 Modules Webpage structure and appearance with HTML5 and CSS. Client-side interactivity with JS DOM and events. Using web services (API's) as a client with JS. Writing JSON-based web services with PHP. Storing and retreiving information in a database with MySQL and server-side programs. MAMP In preparation for working with our server side code we will be installing and configuring a server on our machine called MAMP (Mac Apache MySQL PHP) Now instead of your urls being file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html We will run them through locahost, e.g. Mac: http://localhost:8888/154-19sp/hw2-set-bricker/set.html Windows: http://localhost/154-19sp/hw2-set-bricker/set.html Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [{ src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Containing globals in a function</h2>\n          <p class=\"font-16pt\">If we enclose the code all in one function, it\n            encloses the scope of all of those symbols into that function.\n          </p>\n          <p class=\"font-16pt\">\n            Example: how many global variables/functions are introduced by this\n            code?\n          </p>\n          <p class=\"font-16pt fragment\">\n          Only 1 (<code>everything</code>). But can we get it to 0?\n          </p>\n            <pre><code class=\"hljs font-12pt\" data-trim>function everything() {\n  let count = 0;\n\n  function incr(n) {\n    count += n;\n  }\n\n  function reset() {\n    count = 0;\n  }\n\n  incr(4);\n  incr(2);\n  console.log(count);\n}\n\neverything(); // call the function to run the code</code></pre>\n            <p class=\"code-caption\">JS</p>\n        </section>", "text": "Containing globals in a function If we enclose the code all in one function, it encloses the scope of all of those symbols into that function. Example: how many global variables/functions are introduced by this code? Only 1 (everything). But can we get it to 0? function everything() { let count = 0; function incr(n) { count += n; } function reset() { count = 0; } incr(4); incr(2); console.log(count);}everything(); // call the function to run the code JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Anonymous Functions</h2>\n          <pre><code class=\"hljs\" data-trim>function(parameters) {\n  ... statements ...;\n}</code></pre>\n          <p class=\"code-caption\">template</p>\n          <pre><code class=\"hljs\" data-trim>function() {\n  console.log(\"Hello...\"); \n  console.log(\"World!\"); \n}</code></pre>\n          <p class=\"code-caption\">example</p>\n<!--\n} // no output - why? </code></pre>\n          <p class=\"code-caption\">example</p>\n(function() {\n  console.log(\"Hello!\")\n})(); // \"wrapped\", and called - outputs \"Hello\" to console exactly here.</code></pre>\n          <p class=\"code-caption\">examples</p>\n          -->\n          <p>JavaScript allows you to declare <span class=\"term\">anonymous functions</span></p>\n          <p>Quickly creates a function without giving it a name</p>\n          <p>Can be stored as a variable, attached as an event handler, etc.</p>\n        </section>", "text": "Anonymous Functions function(parameters) { ... statements ...;} template function() { console.log(\"Hello...\"); console.log(\"World!\"); } example<!--} // no output - why? example(function() { console.log(\"Hello!\")})(); // \"wrapped\", and called - outputs \"Hello\" to console exactly here. examples --> JavaScript allows you to declare anonymous functions Quickly creates a function without giving it a name Can be stored as a variable, attached as an event handler, etc.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>Event Handlers with Anonymous Functions</h3>\n          <p class=\"font-16pt\">Both 1. and 2. work equivalently - 2. uses an anonymous function!</p>\n          <pre><code class=\"hljs font-14pt\" data-trim>function addSkittle() {\n  // ... added to existing addSkittle code\n  // 1. with defined eatSkittle() function\n  skittle.addEventListener(\"dblclick\", eatSkittle);\n\n  // same as 2., with anonymous function\n  skittle.addEventListener(\"dblclick\", function() {\n    this.parentNode.removeChild(this); \n  });\n}\n\n// Removes a skittle from the Jar when dblclicked\nfunction eatSkittle() {\n  this.parentNode.removeChild(this); // or this.remove();\n}</code></pre>\n          <p class=\"code-caption\">examples</p>\n          <div class=\"fragment font-16pt\">\n          <p>Do not overuse these! Breaking down our code into named functions can be useful to\n          reduce redundancy and keep code understandable.\n        </p>\n        <p>\n          If you have more than 3 lines of code, it often should be a named function.\n        </p>\n          </div>\n        </section>", "text": "Event Handlers with Anonymous Functions Both 1. and 2. work equivalently - 2. uses an anonymous function! function addSkittle() { // ... added to existing addSkittle code // 1. with defined eatSkittle() function skittle.addEventListener(\"dblclick\", eatSkittle); // same as 2., with anonymous function skittle.addEventListener(\"dblclick\", function() { this.parentNode.removeChild(this); });}// Removes a skittle from the Jar when dblclickedfunction eatSkittle() { this.parentNode.removeChild(this); // or this.remove();} examples Do not overuse these! Breaking down our code into named functions can be useful to reduce redundancy and keep code understandable. If you have more than 3 lines of code, it often should be a named function.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <section>\n          <h3>Arrow Functions: More Concise Anonymous Functions</h3>\n          <pre><code class=\"hljs\" data-trim>function() { // previous slide\n  console.log(\"Hello...\");\n  console.log(\"World!\");\n}\n\n// equivalent with arrow function\n() =&gt; {\n  console.log(\"Hello...\");\n  console.log(\"World!\");\n}\n</code></pre>\n          <p class=\"code-caption\">examples</p>\n          <p>\"Syntactic sugar\" for anonymous functions, allowing you to often avoid keywords like\n          function, return, {}, and ()</p>\n          <p>More examples <a href=\"https://medium.freecodecamp.org/es6-functions-9f61c72b1e86\">here</a> and later\n           this week. Caveat about \"this\" binding in arrow functions below.</p>\n        </section>\n\n        <section>\n          <h2>A Caveat: Arrow Functions do Not Bind <code>this</code></h2>\n          <p>\n            We've seen how \"this\" refers to the bound element in an event handler.\n            However, arrow functions do not bind \"this\" at all (more information in one of today's\n             optional <a href=\"https://flaviocopes.com/javascript-arrow-functions/\">Extra Resources</a>).\n          </p>\n          <pre><code class=\"hljs\" data-trim>skittle.addEventListener(\"dblclick\", function() {\n  // All good! this === div.skittle that was clicked\n  this.parentNode.removeChild(this); \n  id(\"result\").innerText = \":O You ate a skittle...\";\n});</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hljs\" data-trim>skittle.addEventListener(\"dblclick\", () =&gt; {\n  // error! this === window\n  this.parentNode.removeChild(this); \n  id(\"result\").innerText = \":O You ate a skittle...\";\n});</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>\n        </section>", "text": "Arrow Functions: More Concise Anonymous Functions function() { // previous slide console.log(\"Hello...\"); console.log(\"World!\");}// equivalent with arrow function() => { console.log(\"Hello...\"); console.log(\"World!\");} examples \"Syntactic sugar\" for anonymous functions, allowing you to often avoid keywords like function, return, {}, and () More examples here and later this week. Caveat about \"this\" binding in arrow functions below. A Caveat: Arrow Functions do Not Bind this We've seen how \"this\" refers to the bound element in an event handler. However, arrow functions do not bind \"this\" at all (more information in one of today's optional Extra Resources). skittle.addEventListener(\"dblclick\", function() { // All good! this === div.skittle that was clicked this.parentNode.removeChild(this); id(\"result\").innerText = \":O You ate a skittle...\";}); JS skittle.addEventListener(\"dblclick\", () => { // error! this === window this.parentNode.removeChild(this); id(\"result\").innerText = \":O You ate a skittle...\";}); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>Arrow Functions: More Concise Anonymous Functions</h3>\n          <pre><code class=\"hljs\" data-trim>function() { // previous slide\n  console.log(\"Hello...\");\n  console.log(\"World!\");\n}\n\n// equivalent with arrow function\n() =&gt; {\n  console.log(\"Hello...\");\n  console.log(\"World!\");\n}\n</code></pre>\n          <p class=\"code-caption\">examples</p>\n          <p>\"Syntactic sugar\" for anonymous functions, allowing you to often avoid keywords like\n          function, return, {}, and ()</p>\n          <p>More examples <a href=\"https://medium.freecodecamp.org/es6-functions-9f61c72b1e86\">here</a> and later\n           this week. Caveat about \"this\" binding in arrow functions below.</p>\n        </section>", "text": "Arrow Functions: More Concise Anonymous Functions function() { // previous slide console.log(\"Hello...\"); console.log(\"World!\");}// equivalent with arrow function() => { console.log(\"Hello...\"); console.log(\"World!\");} examples \"Syntactic sugar\" for anonymous functions, allowing you to often avoid keywords like function, return, {}, and () More examples here and later this week. Caveat about \"this\" binding in arrow functions below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>A Caveat: Arrow Functions do Not Bind <code>this</code></h2>\n          <p>\n            We've seen how \"this\" refers to the bound element in an event handler.\n            However, arrow functions do not bind \"this\" at all (more information in one of today's\n             optional <a href=\"https://flaviocopes.com/javascript-arrow-functions/\">Extra Resources</a>).\n          </p>\n          <pre><code class=\"hljs\" data-trim>skittle.addEventListener(\"dblclick\", function() {\n  // All good! this === div.skittle that was clicked\n  this.parentNode.removeChild(this); \n  id(\"result\").innerText = \":O You ate a skittle...\";\n});</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hljs\" data-trim>skittle.addEventListener(\"dblclick\", () =&gt; {\n  // error! this === window\n  this.parentNode.removeChild(this); \n  id(\"result\").innerText = \":O You ate a skittle...\";\n});</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "A Caveat: Arrow Functions do Not Bind this We've seen how \"this\" refers to the bound element in an event handler. However, arrow functions do not bind \"this\" at all (more information in one of today's optional Extra Resources). skittle.addEventListener(\"dblclick\", function() { // All good! this === div.skittle that was clicked this.parentNode.removeChild(this); id(\"result\").innerText = \":O You ate a skittle...\";}); JS skittle.addEventListener(\"dblclick\", () => { // error! this === window this.parentNode.removeChild(this); id(\"result\").innerText = \":O You ate a skittle...\";}); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>The Module Pattern: It's Just an  Anonymous Function!</h3>\n          <p>Wraps all of your file's code in an anonymous function that is declared and <strong>immediately\n            called</strong> when the script is loaded</p>\n          <p>We now have 0 globals in this program!</p>\n\n          <div class=\"example\">\n            <pre><code class=\"hljs\" data-escape data-trim>(function() {\n  let count = 0;\n\n  function incr(n) {\n    count += n;\n  }\n\n  function reset() {\n    count = 0;\n  }\n\n  incr(4);\n  incr(2);\n  console.log(count);\n})();</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n        </section>", "text": "The Module Pattern: It's Just an Anonymous Function! Wraps all of your file's code in an anonymous function that is declared and immediately called when the script is loaded We now have 0 globals in this program! (function() { let count = 0; function incr(n) { count += n; } function reset() { count = 0; } incr(4); incr(2); console.log(count);})(); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Linking to a JavaScript file: <code>&lt;script&gt;</code></h2>\n          <pre><code class=\"hijs\" data-trim>&lt;script src=\"filename\"&gt;&lt;/script&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML (template)</p>\n          <pre><code class=\"hijs\" data-trim>&lt;script src=\"example.js\"&gt;&lt;/script&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML (example)</p>\n          <div class=\"font-18pt\">\n          <p>\n            The <code>script</code> tag should be placed in the <code>HTML</code> page's\n            <code>head</code>.\n          </p>\n\n\n          <p>All JavaScript code used in the page should be stored in a separate <code>.js</code> file</p>\n          <p>\n            JS code <em>can</em> be placed directly in the <code>HTML</code> file's <code>body</code> or\n            <code>head</code> (like <code>CSS</code>), <strong>but this is poor code quality. You should always separate content,\n              presentation, and behavior</strong>\n          </p>\n          <p>Here's a\n          <a href=\"code/basics.html\">basics.html</a> linked to this <a href=\"code/basics.js\">basics.js</a> - feel free to use these to practice with!\n          </p>\n          </div>\n        </section>", "text": "Linking to a JavaScript file: <script> <script src=\"filename\"></script> HTML (template) <script src=\"example.js\"></script> HTML (example) The script tag should be placed in the HTML page's head. All JavaScript code used in the page should be stored in a separate .js file JS code can be placed directly in the HTML file's body or head (like CSS), but this is poor code quality. You should always separate content, presentation, and behavior Here's a basics.html linked to this basics.js - feel free to use these to practice with!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Common Types of JavaScript Events</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td><a href=\"\">click</a></td>\n              <td>A pointing device button (e.g. mouse) has been pressed and released on\n                an element</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">dblclick</a></td>\n              <td>A pointing device button is clicked twice on an element</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">keydown</a></td>\n              <td>Any key is pressed down</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">keyup</a></td>\n              <td>Any key is released</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">mouseenter</a></td>\n              <td>A pointing device is moved onto an element that has the attached</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">mouseover</a></td>\n              <td>A pointing device is moved onto the element that has the listener attached\n              to itself or one of its children</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">mousemove</a></td>\n              <td>A pointing device is moved over an element</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">mousedown</a></td>\n              <td>A pointing device button is pressed on an element</td>\n            </tr>\n            <tr>\n              <td><a href=\"\">mouseup</a></td>\n              <td>A pointing device button is released over an element</td>\n            </tr>\n          </table>\n          <p>We'll cover more later (you can find a full list <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\" target=\"_blank\">here</a>),\n          but today we'll demo <code>click</code>!</p>\n        </section>", "text": "Common Types of JavaScript Events Name Description click A pointing device button (e.g. mouse) has been pressed and released on an element dblclick A pointing device button is clicked twice on an element keydown Any key is pressed down keyup Any key is released mouseenter A pointing device is moved onto an element that has the attached mouseover A pointing device is moved onto the element that has the listener attached to itself or one of its children mousemove A pointing device is moved over an element mousedown A pointing device button is pressed on an element mouseup A pointing device button is released over an element We'll cover more later (you can find a full list here), but today we'll demo click!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <section>\n          <h2>Handling Events with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#addEventListener()_and_removeEventListener()\" target=\"_blank\"><code>addEventListener</code></a></h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>function handleFunction() {\n  // event handler code\n}\n// attaching a named function\nelement.addEventListener(\"click\", handleFunction);\n</code></pre>\n            <p class=\"code-caption\">JS (onclick template)</p>\n\n          <ul>\n          <li>JavaScript functions can be set as <strong>event handlers</strong></li>\n          <li>When you interact with the element, the function will execute</li>\n          <li>\n            You can also attach events with <code>element.onclick</code> (see example\n            and more information on slide below)\n          </li>\n          </ul>\n        </section>\n        <section>\n          <h2>Older Alternative: <code>onevent</code> handlers</h2>\n          <p>\n          Example with <code>onclick</code> (same effect as previous slide):\n          </p>\n          <pre><code class=\"hijs font-14pt\" data-trim>// attaching a named function\nfunction handleFunction() {\n  // event handler code\n}\nelement.onclick = handleFunction;\n</code></pre>\n            <p class=\"code-caption\">JS (onclick template)</p>\n\n          <p>\n            The newer <code>addEventListener</code> is preferred as it lets you easily\n            remove a listener to a specific event on an element, and it also lets you add\n            multiple functions to an event listener. For this example, that doesn't make a\n            difference, but we will see examples where it does!\n          </p>\n          <p>\n            More information about tradeoffs <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#What_mechanism_should_I_use\">here</a>.\n          </p>\n        </section>\n        </section>", "text": "Handling Events with addEventListener function handleFunction() { // event handler code}// attaching a named functionelement.addEventListener(\"click\", handleFunction); JS (onclick template) JavaScript functions can be set as event handlers When you interact with the element, the function will execute You can also attach events with element.onclick (see example and more information on slide below) Older Alternative: onevent handlers Example with onclick (same effect as previous slide): // attaching a named functionfunction handleFunction() { // event handler code}element.onclick = handleFunction; JS (onclick template) The newer addEventListener is preferred as it lets you easily remove a listener to a specific event on an element, and it also lets you add multiple functions to an event listener. For this example, that doesn't make a difference, but we will see examples where it does! More information about tradeoffs here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Handling Events with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#addEventListener()_and_removeEventListener()\" target=\"_blank\"><code>addEventListener</code></a></h2>\n          <pre><code class=\"hijs font-14pt\" data-trim>function handleFunction() {\n  // event handler code\n}\n// attaching a named function\nelement.addEventListener(\"click\", handleFunction);\n</code></pre>\n            <p class=\"code-caption\">JS (onclick template)</p>\n\n          <ul>\n          <li>JavaScript functions can be set as <strong>event handlers</strong></li>\n          <li>When you interact with the element, the function will execute</li>\n          <li>\n            You can also attach events with <code>element.onclick</code> (see example\n            and more information on slide below)\n          </li>\n          </ul>\n        </section>", "text": "Handling Events with addEventListener function handleFunction() { // event handler code}// attaching a named functionelement.addEventListener(\"click\", handleFunction); JS (onclick template) JavaScript functions can be set as event handlers When you interact with the element, the function will execute You can also attach events with element.onclick (see example and more information on slide below)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Older Alternative: <code>onevent</code> handlers</h2>\n          <p>\n          Example with <code>onclick</code> (same effect as previous slide):\n          </p>\n          <pre><code class=\"hijs font-14pt\" data-trim>// attaching a named function\nfunction handleFunction() {\n  // event handler code\n}\nelement.onclick = handleFunction;\n</code></pre>\n            <p class=\"code-caption\">JS (onclick template)</p>\n\n          <p>\n            The newer <code>addEventListener</code> is preferred as it lets you easily\n            remove a listener to a specific event on an element, and it also lets you add\n            multiple functions to an event listener. For this example, that doesn't make a\n            difference, but we will see examples where it does!\n          </p>\n          <p>\n            More information about tradeoffs <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#What_mechanism_should_I_use\">here</a>.\n          </p>\n        </section>", "text": "Older Alternative: onevent handlers Example with onclick (same effect as previous slide): // attaching a named functionfunction handleFunction() { // event handler code}element.onclick = handleFunction; JS (onclick template) The newer addEventListener is preferred as it lets you easily remove a listener to a specific event on an element, and it also lets you add multiple functions to an event listener. For this example, that doesn't make a difference, but we will see examples where it does! More information about tradeoffs here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Accessing Elements from the Document in JavaScript</h2>\n          <p><em>Finally...</em> the fun starts.</p>\n        </section>", "text": "Accessing Elements from the Document in JavaScript Finally... the fun starts.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Accessing an Element by ID</h2>\n          <pre><code class=\"hijs\" data-trim>let name = document.getElementById(\"id\");\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <ul>\n            <li>\n              <code>document.getElementById</code> returns the DOM object for an element with a given\n              <code>id</code> (note that you omit the <code>#</code> when giving an id)\n            </li>\n            <li id=\"example-id\">We'll learn about other ways to get DOM elements (e.g. by class) tomorrow and Wednesday!</li>\n          </ul>\n        </section>", "text": "Accessing an Element by ID let name = document.getElementById(\"id\"); JS document.getElementById returns the DOM object for an element with a given id (note that you omit the # when giving an id) We'll learn about other ways to get DOM elements (e.g. by class) tomorrow and Wednesday!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Back to HTML with Buttons: <code>&lt;button&gt;</code></h2>\n          <pre>\n            <code class=\"hijs\" data-trim>&lt;button id=\"my-btn\"&gt;Click me!&lt;/button&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\">\n            <button style=\"font-size: 18pt; margin-left: 5px;\">Click me!</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>Button's text appears inside tag; can also contain images</p>\n          <p>To make a responsive button or other UI control:</p>\n          <ol>\n            <li>Choose the control (e.g., button) and event (e.g., mouse click) of interest</li>\n            <li>Write a JavaScript function to run when the event occurs</li>\n            <li>Attach the function to the event on the control</li>\n          </ol>\n          <p>Right now this button doesn't do anything when we click it. That's because it\n          doesn't have event handler code attached :( Let's see an example where we do\n          have an event listener attached to a button on our page!</p>\n        </section>", "text": "Back to HTML with Buttons: <button> <button id=\"my-btn\">Click me!</button> HTML Click me! output Button's text appears inside tag; can also contain images To make a responsive button or other UI control: Choose the control (e.g., button) and event (e.g., mouse click) of interest Write a JavaScript function to run when the event occurs Attach the function to the event on the control Right now this button doesn't do anything when we click it. That's because it doesn't have event handler code attached :( Let's see an example where we do have an event listener attached to a button on our page!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2><code>click</code> Event Handler: an Example</h2>\n          <pre><code class=\"hijs\" data-trim>&lt;img id=\"pokeball\" src=\"images/pokeball.jpg\" alt=\"a pokeball\" /&gt;\n&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hijs\" data-trim>let demoButton = document.getElementById(\"demo-btn\");\ndemoButton.addEventListener(\"click\", changeImage);\n\nfunction changeImage() {\n  let pokeballImg = document.getElementById(\"pokeball\");\n  pokeballImg.src = \"images/mystery.gif\";\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <script>\n            function changeImage() {\n              let pokeballImg = document.getElementById(\"pokeball\");\n              pokeballImg.src = \"../img/mystery.gif\";\n            }\n          </script>\n          <div class=\"output\">\n            <img id=\"pokeball\" style=\"height: 160px; margin-bottom: -10px;\" src=\"../img/pokeball.jpg\" alt=\"a pokeball\">\n            <button style=\"font-size: 18pt; margin-left: 15px; margin-bottom: -25px;\" onclick=\"changeImage();\">Click me!</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n        </section>", "text": "click Event Handler: an Example <img id=\"pokeball\" src=\"images/pokeball.jpg\" alt=\"a pokeball\" /><button id=\"demo-btn\">Click me!</button> HTML let demoButton = document.getElementById(\"demo-btn\");demoButton.addEventListener(\"click\", changeImage);function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"images/mystery.gif\";} JS function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"../img/mystery.gif\"; } Click me! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n          <h2>Putting it All Together</h2>\n          <div class=\"font-16pt\">\n          <p>\n            We'll learn more about this tomorrow, but in order for our JS to work when\n            attached to an HTML file, we need to wrap any code that interacts with the\n            document inside the <em>window's</em> <code>load</code> event\n            handler. <code>load</code> is the event listened to on the window to indicate when\n            the page \"is loaded\".\n          </p>\n          <p>\n          </p>\n          <p>When the page is loaded, everything in the\n          attached function (in our example, we call this <code>main</code>),\n          is executed, including any <code>click</code> attachments!\n          </p>\n          </div>\n          <pre class=\"font-12pt\"><code class=\"hljs font-12pt\" data-trim>// listener attached before page is loaded\nwindow.addEventListener(\"load\", init);\n\nfunction init() {\n  // this code is ran after page is loaded!\n  let demoButton = document.getElementById(\"demo-btn\");\n  demoButton.addEventListener(\"click\", changeImage);\n}\n\nfunction changeImage() {\n  let pokeballImg = document.getElementById(\"pokeball\");\n  pokeballImg.src = \"images/mystery.gif\";\n}</code></pre>\n          <p class=\"code-caption\"><a href=\"code/button-example.js\">button-example.js</a> (commented example)</p>\n          <p class=\"font-16pt\">You can see the HTML output <a href=\"code/button-example.html\">here</a>. On Wednesday, we'll add one more important component to our JS files: the\n            module pattern.\n          </p>\n        </section>", "text": "Putting it All Together We'll learn more about this tomorrow, but in order for our JS to work when attached to an HTML file, we need to wrap any code that interacts with the document inside the window's load event handler. load is the event listened to on the window to indicate when the page \"is loaded\". When the page is loaded, everything in the attached function (in our example, we call this main), is executed, including any click attachments! // listener attached before page is loadedwindow.addEventListener(\"load\", init);function init() { // this code is ran after page is loaded! let demoButton = document.getElementById(\"demo-btn\"); demoButton.addEventListener(\"click\", changeImage);}function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"images/mystery.gif\";} button-example.js (commented example) You can see the HTML output here. On Wednesday, we'll add one more important component to our JS files: the module pattern.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n        <h2>Resources and Tips</h2>\n          <p>\n            Review programming basics: using variables, arrays, loops, if-statements, and functions\n          </p>\n          <p>\n            Go over some JavaScript tutorials - there are many great ones!\n          </p>\n          <ul>\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Mozilla's\n                JavaScript Basics Tutorial</a> (<strong>highly recommended</strong>)</li>\n            <li><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy's\n                JavaScript Basics course (free)</a></li>\n          </ul>\n          <p>\n            Practice! We now have JavaScript problems on\n            <a href=\"https://practiceit.cs.washington.edu\">Practice-It</a> (80+ problems) and its sister site <a href=\"https://codestepbystep.com\">CodeStepByStep</a> (200+ problems).\n          </p>\n          <p>Check out cool examples of JavaScript on the web!</p>\n          <ul>\n            <li><a href=\"http://www.dennis.video/#about\">Dennis Music Video</a></li>\n            <li><a href=\"http://www.rleonardi.com/interactive-resume/\">Robby Leonardi Mario-style Resume</a></li>\n            <li><a href=\"https://courses.cs.washington.edu/courses/cse154/18au/creative/cp2/abbazabba/index.html/#\">Example CP\n                Showcase Project!\n              </a></li>\n            <li><a href=\"https://bl.ocks.org/mbostock/4165404\">Rainbow Worm</a></li>\n            <li><a href=\"https://omfgdogs.com/\">OMFGDOGS</a></li>\n          </ul>\n        </section>", "text": "Resources and Tips Review programming basics: using variables, arrays, loops, if-statements, and functions Go over some JavaScript tutorials - there are many great ones! Mozilla's JavaScript Basics Tutorial (highly recommended) Codecademy's JavaScript Basics course (free) Practice! We now have JavaScript problems on Practice-It (80+ problems) and its sister site CodeStepByStep (200+ problems). Check out cool examples of JavaScript on the web! Dennis Music Video Robby Leonardi Mario-style Resume Example CP Showcase Project! Rainbow Worm OMFGDOGS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec07-intro-js/"},
{"html": "<section>\n        <h1>Lecture 15 - Cookies</h1>\n        <div class=\"side-by-side\">\n          <div style=\"width: 75%\">\n            <img class=\"simpleimg\" src=\"img/cookie-monster.png\">\n          </div>\n          <div>\n            <p style=\"margin-left: 20px; margin-top: 300px\">\n              And <code>fetch</code> with POST, <code>localStorage</code>, <code>sessionStorage</code>,\n              <code>indexDB</code> and Dexie.... </p>\n          </div>\n      \n\n      <section>\n        <h2>Administrivia</h2>\n        <p>HW2 Grades will be released after class</p>\n        <p>\n          Note: Exploration session this week\n        </p>\n        <ul>\n          <li>Jeremy Zhang on our\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp-aprilfools/\">April Fools</a> version of the site!</li>\n          <li><strong>Wednesday 5/8</strong> 4:30-5:30 or maybe longer</li>\n          <li><strong>BAG 154 </strong></li>\n        \n      </ul></section>\n\n      <section>\n        <h2>Agenda</h2>\n        <p>GET vs. POST in AJAX requests</p>\n        <p>Local storage</p>\n      </section>\n\n      <section>\n        <h2>Using Web Services</h2>\n        <h3>Required for HW3...</h3>\n      </section>\n\n      <section>\n        <h2>Review: Web Services</h2>\n        <p>\n          <strong>Web service</strong>: software functionality that can be invoked through the\n          internet using common protocols</p>\n        <p>It's like a remote function(s) you can call. Done by contacting a program on a web server</p>\n        <ul>\n          <li>Web services can be written in a variety of languages</li>\n          <li>Many web services accept parameters and produce results</li>\n          <li>Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code</li>\n          <li>The service's output might be HTML but could be text, XML, JSON, or other content</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Review: GET and POST</h2>\n        <p>\n          There are two common ways to make AJAX requests to a server.\n        </p>\n        <ul>\n          <li>\n            GET requests\n            <ul>\n              <li>are the default, most of what we've seen have been GET requests</li>\n              <li>retrieve or <em>get</em> information from the server</li>\n            </ul>\n          </li><li>POST requests\n            <ul>\n              <li><em>send</em> information to the server</li>\n              <li>often change information on the server</li>\n            </ul>\n          </li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Review: GET Request with Fetch</h2>\n        <p>When no security is needed, sending query parameters using a \"GET\" request\n          (Parameters passed visibly in the URL bar or request header) is acceptable.\n        </p>\n        <p>Example: <code>randomizer.php?mode=json</code></p>\n\n        <pre><code>const URL = \"randomizer.php\";\nfetch(URL + \"?mode=json\")\n  .then(checkStatus)\n  .then(JSON.parse)\n  .then(handleLoadTeams)\n  .catch(console.log);</code></pre>\n        <p class=\"code-caption\">JS GET fetch example</p>\n      </section>\n\n      <section>\n        <h2>POST with Postman</h2>\n        <p>\n          But what if we wanted to add people to our database using a new API endpoint for\n          Groupizer. Because we don't want to send our potentially private information\n          publically across the internet through plain text URLs, we want to embed the\n          information in \"Form Data\" in the \"body\" of the request.\n        </p>\n        <p>\n          A good way to see this is using a tool like\n          <a href=\"https://www.getpostman.com/downloads/\">Postman</a>\n        </p>\n        <img class=\"half-width\" src=\"img/postman.png\" alt=\"Postman screen\">\n      </section>\n\n      <section>\n        <h2>Connecting to JS</h2>\n        <p>\n          There's a slight change to how we have to make our <code>fetch</code> request\n          with POST.\n        </p>\n        <pre><code>const API_URL = \"groupizer.php\";\n// Create a new \"FormData\" object\nlet data =  new FormData();\n// Add the various parameters to the FormData object\ndata.append(\"teamname\", \"Catz\");\ndata.append(\"student\", \"Whitney\");\n// Fetch now with a method of Post and the data in the body\nfetch(API_URL, {method: \"POST\", body: data})\n  .then(checkStatus)\n  .then(JSON.parse)\n  .then(handleLoadTeams)\n  .catch(console.log);</code></pre>\n    <p class=\"code-caption\">JS POST fetch example </p>\n      </section>\n\n\n<!--      <section>-->\n        <section>\n          <h2>Quick check</h2>\n          <p>By the end of today you should be able to decide which of these technologies are best in each situation</p>\n          <div class=\"side-by-side\">\n            <div class=\"space-right\">\n              <ul>\n                <li>\n                  cookies\n                </li>\n                <li>\n                  localStorage\n                </li>\n                <li>\n                  sessionStorage\n                </li>\n                <li>\n                  indexDB/Dexie\n                </li>\n              </ul>\n            </div>\n            <div class=\"space-left\">\n              <ul>\n                <li>\n                  Storing the status a user has successfully logged into a website, but ensuring the log in status is deleted when they close the browser tab.\n                </li>\n                <li>\n                  Keeping track of which emojis are used on the client only.\n                </li>\n                <li>\n                  Storing a value in the browser that is accessible from the server. \"\n                </li>\n                <li>\n                  Temporarily retaining large pieces of information that are being downloaded from a website, but most of your users primarily use mobile phones to access the site.\n                </li>\n              </ul>\n            </div>\n\n        \n\n<!--\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/r2sFeKvX9E9r27T?controls=none&short_poll=true\" width=\"800px\" height=\"400px\" frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/MJOn9VUkumBdR6a?controls=none&short_poll=true\" width=\"800px\" height=\"400px\"  frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/Sinodl8b1TppkNt?controls=none&short_poll=true\" width=\"800px\" height=\"400px\" frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/acjidq19s633Bfz?controls=none&short_poll=true\" width=\"800px\" height=\"400px\"  frameBorder=\"0\"></iframe>\n        </section>\n\n      </section>\n-->\n\n      <section>\n        <h2>HTTP and State</h2>\n        <p>\n          HTTP is a stateless protocol; it\n          simply allows a browser to request a\n          single document from a web server\n        </p>\n        <p>\n          Once the document has been sent to the client, the server\n          does not keep track of any information about what was sent\n          (other than maybe in a log file of the transaction).\n        </p>\n      </section>\n\n      <section>\n        <h2>Stateful client/server interaction</h2>\n        <p><em>Sites like amazon.com seem to \"know\n          who I am.\" How do they do this? How\n          does a client uniquely identify itself to\n          a server, and how does the server\n          provide specific content to each client?\n        </em></p>\n        <p class=\"space-above\">\n          When has this happened to you? What sites were involved?\n        </p>\n        <p class=\"space-above\">\n          Today we'll learn some technologies that are used to store\n          \"state\" on your client machine.\n        </p>\n        <ul>\n          <li>\n            Sometimes state is kept simply to aid in the user experience.\n          </li>\n          <li>\n            Sometimes state is passed back to the server from the client... and sometimes that\n            happens when you least expect it.\n          </li>\n        </ul>\n\n      </section>\n\n\n      <section>\n        <h2>What is a cookie?</h2>\n        <ul>\n          <li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">cookie</a>: a small amount of information stored within\n          the computer browser</li>\n          <li>cookies have many uses:\n              <ul>\n                  <li>authentication</li>\n                  <li>user tracking</li>\n                  <li>maintaining user preferences, shopping carts, etc.</li>\n              </ul>\n          </li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>A \"tracking cookie\"</h2>\n        <img src=\"img/tracking-cookie.png\">\n        <ul>\n          <li>an advertising company can put a cookie on your machine when you visit one\n          site, and see it when you visit another site that also uses that advertising\n          company\n          </li>\n          <li>therefore they can tell that the same person (you) visited both sites</li>\n          <li>can be thwarted by telling your browser not to accept \"third-party cookies\"</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Ever changing web</h2>\n        <p>New privacy laws in Europe (<a href=\"https://en.wikipedia.org/wiki/General_Data_Protection_Regulation\">GDPR</a>)\n          are making website owners rethink using cookies\n        </p>\n        <img style=\"height: 400px\" class=\"simpleimg\" src=\"img/updatedGDPR.png\" alt=\"updated GDPR notice example\">\n      </section>\n\n\n      <section>\n        <h2>How cookies are set and retrieved</h2>\n        <ul>\n          <li>Client side (JavaScript):\n              <ul>\n                  <li>JavaScript commands can set and retrieved using\n                      <code>document.cookie</code></li>\n              </ul>\n          </li>\n          <li>Server Side (PHP):\n              <ul>\n                <li>\n                  When the browser requests a page, the server may send back a cookie(s)\n                  with it to store on the client\n                </li>\n                <li>\n                  If your server has previously sent any cookies to the browser, the browser\n                  will send them back on subsequent requests to remind the server who is connecting\n                  to it.\n                 </li>\n              </ul>\n          </li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Facts about cookies</h2>\n        <ul>\n          <li>Cookies are only data, not program code.</li>\n          <li>Cookies can have set expiration dates.</li>\n          <li>Cookies help websites remember who you are (and if you are logged in).</li>\n          <li>Cookies CAN be used to track your viewing habits on a particular site.</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> setting</h2>\n        <ul>\n          <li>To set a cookie use <code>document.cookie = cookieString;</code></li>\n          <li><code>cookieString</code> consists of 3 semicolon separated parts (the second two are optional):\n            <ul>\n              <li>name / value pair. E.g., <code>\"lastItemBought=apples\"</code></li>\n              <li>expiration date (by default when browser closed). E.g., <code>\"expires=Thu, 23 May 2018 12:00:00 UTC\"</code></li>\n              <li>Path where cookie belongs (default is current page). E.g., <code>\"path=/\"</code></li>\n            </ul>\n          </li>\n          <li>If you set a cookie where the name already has a value, the old value gets overwritten.</li>\n        </ul>\n        <pre><code data-trim>document.cookie = \"lastItemBought=apples; \" +\n    \"expires=Thu, 23 May 2018 12:00:00 UTC; \" +\n    \"path=/\";</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Retrieving</h2>\n        <ul>\n          <li>To get a cookie use <code>let cookies = document.cookie;</code></li>\n          <li>\n            This will return a semicolon separated list of all current name=value pairs<br>\n            E.g., <code>\"lastItemBought=apples; numberSiteVisitsToday=57\"</code></li>\n          <li>You have to retrieve the values from the string by parsing yourself.</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Clearing</h2>\n        <p>To delete a cookie you need to set it's expiration time to be before now\n        </p>\n        <pre><code data-trim>document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';</code></pre>\n<p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n\n      <section>\n        <h2>Cookies Recap</h2>\n        <ul>\n          <li> <del>...delicious, particularly with chocolate chips.</del></li>\n          <li> ...are a way to store information or the state of your website.</li>\n          <li> ...can be set so they expire after a time, or after you close the page.</li>\n          <li> ...are kind of a pain to retreive,\n            if there are many cookies that are set already.</li>\n          <li> ...they only allow up to only 4 KB of data storage.</li>\n          <li> ...they can be used by malicious sites to \"spy\" on browsing behavior.</li>\n        </ul>\n    </section>\n\n\n    <section>\n      <h2><code>localStorage</code> and <code>sessionStorage</code></h2>\n    </section>\n\n      <section>\n        <h2>localStorage and sessionStorage</h2>\n        <div class=\"side-by-side\">\n          <div style=\"width: 800px\">\n            <img class=\"simpleimg\" style=\"margin-top: 50px; margin-right: 10px\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c7/Public_Storage_doors.jpg\" alt=\"storage doors\">\n            <p>From <a href=\"https://en.wikipedia.org/wiki/File:Public_Storage_doors.jpg\">Wikipedia</a></p>\n          </div>\n          <div>\n            <p>\n              <code>localStorage</code> is a <code>document</code> property that allows\n              you to save information across browser sessions (i.e after you close the browser)\n            </p>\n            <p>\n              <code>sessionStorage</code> is a <code>document</code> property that allows\n              you to save information for this session only, and will be cleared when\n              the page is closed.\n            </p>\n            <p>Both <code>localStorage</code> and <code>sessionStorage</code>\n              inherit from <code>Storage</code> class.\n            </p>\n            <p>Name/value pairs (seen in cookies and Storage) are supported by\n              <a href=\"https://caniuse.com/#search=localstorage\">most every\n                browser</a>\n            </p>\n          </div>\n      \n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">Storage</a></h2>\n        <p>There are three methods we're interested in from <code>Storage</code> </p>\n        <table>\n          <tr>\n            <th>method</th>\n            <th>description</th>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem(keyName, keyValue)</a></td>\n            <td>Sets the <code>keyName</code> location in localStorage to be <code>keyValue</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem(keyName)</a></td>\n            <td>Retrieves the <code>keyValue</code> in localStorage associated with <code>keyName</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem(keyName)</a></td>\n            <td>Removes the <code>keyName</code> location in localStorage</td>\n          </tr>\n        </table>\n\n      </section>\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> example</h2>\n        <pre><code data-trim>window.localStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.localStorage.setItem(\"Lauren\", \"Spot\");\nwindow.localStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.localStorage.getItem(\"Lauren\");\nwindow.localStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">sessionStorage</a> example</h2>\n        <p>Similarly for sessionStorage</p>\n        <pre><code data-trim>window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.sessionStorage.setItem(\"Lauren\", \"Spot\");\nwindow.sessionStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.sessionStorage.getItem(\"Lauren\");\nwindow.sessionStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/sessionStorage.png\" alt=\"sessionStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/sessionStorageAfter.png\" alt=\"sessionStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n      <section>\n        <h2><code>indexDB</code></h2>\n      </section>\n\n      <section>\n        <section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\"><code>indexDB</code></a></h2>\n          <p><code>cookies</code>, <code>localStorage</code>,\n            <code>sessionStorage</code> can only store small amounts of\n            data\n          </p>\n          <p>\n            <code>indexDB</code> is a \"a low-level API for client-side storage\n            of significant amounts of structured data, including files/blobs\"\n          </p>\n          <p>\n            Look down through the slides if you want to know more...\n          </p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>There are many flavors types of indexDB - so apparently you have to cover your\n            bases with creating the database for your page:\n          </p>\n          <pre><code data-trim>// This works on all devices/browsers, and uses\n// IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(&lt;dbname&gt;, &lt;version&gt;);</code></pre>\n          <p class=\"code-caption\">JavaScript (template)</p>\n          <pre><code data-trim>// This works on all devices/browsers,\n// and uses IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(\"terms\", 1);</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>You need to set callbacks on the new database object, so once\n            the database is created, the tables (schema) can be created.\n          </p>\n          <pre><code data-trim>openDB.onupgradeneeded = function() {\n  let db = openDB.result;\n  let store = db.createObjectStore(\"terms\", {keyPath: \"term\"});\n  let index = store.createIndex(\"definition\", \"definition\", { unique: false });\n};\nopenDB.onsuccess = function() {\n  console.log(\"Database created!\");\n}</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> setting values</h2>\n          <pre><code data-trim>// Start a new transaction\nlet db = openDB.result;\nlet tx = db.transaction(\"terms\", \"readwrite\");\nlet store = tx.objectStore(\"terms\");\nlet index = store.index(\"definition\");\n\n// get the term and definition from the user\n\nstore.put({key: userTerm, definition: userDef});\n\n// Close the db when the transaction is done\ntx.oncomplete = function() {\n  db.close();\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> getting values</h2>\n          <pre><code data-trim>// assume the variable term has been set\nlet getValue = store.get(term);\n\ngetValue.onsuccess = function() {\n  alert(getValue.result.definition);\n};\n\ngetValue.onerror = function() {\n  // error handling here\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n      </section>\n\n\n      <section>\n        <h2>Phew... that was a lot of work. And confusing too </h2>\n        <p>Dexie to the rescue</p>\n      </section>\n\n\n      <section>\n        <h2><a href=\"http://dexie.org/\">Dexie</a></h2>\n        <p>Dexie is a wrapper around <code>indexDB</code> that makes it MUCH easier to use. </p>\n        <pre><code class=\"small-font\" data-trim>// create the database (module global)\nlet db = new Dexie(&lt;name of database&gt;);\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    // this is the table with the columns that are to be indexed.\n    &lt;tableName&gt;: '&lt;column1&gt;, &lt;column2&gt;...'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code class=\"small-font\" data-trim>let db = new Dexie(\"definitions\");\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    terms: 'term,definition'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.put()\">put</a></h2>\n        <p>Putting an item in a table is pretty straight forward: </p>\n        <pre><code data-trim>db.&lt;tableName&gt;.put({\"column1\": &lt;value1&gt;, \"column2\": &lt;value2&gt;, ...});</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.put({\"term\": term, \"definition\": definition});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.get()\">get</a></h2>\n        <p>There are two ways to get information back out of a table, using either a\n        callback, or a <code>Promise</code> </p>\n        <pre><code data-trim>// get with a callback\ndb.&lt;tableName&gt;.get(&lt;key&gt;, function (item) {\n  // do something here\n});\n// get with a Promise.\ndb.&lt;tableName&gt;.get(&lt;key&gt;).then (function (item) {\n  // do something here\n}); </code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.get(term, function (item) {\n  console.log(\"Callback: Item at \" + term + \" is \" + item.definition);\n});\n\ndb.terms.get(term).then (function (item) {\n  console.log(\"Promise: Item at \" + term + \" is \" + item.definition);\n});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Compliance</h2>\n        <p>\n          The one issue with all of these newer technologies\n          (<code>localStorage</code>, <code>sessionStorage</code>,\n          <code>indexDB</code>, and frameworks like <code>Dexie</code>) is cross\n          browser compatibilty\n        </p>\n        <p>\n          <a href=\"https://whatwebcando.today/\">What Web Can Do Today</a>\n          (Try this in different browsers or on your phone)\n        </p>\n        <p>\n          <a href=\"https://www.w3.org/2018/04/web-roadmaps/mobile/\">Roadmap of Web Applications on Mobile</a>\n        </p>\n        <p>\n          <a href=\"https://caniuse.com/\">Can I use</a> - \"provides  up-to-date browser support tables for\n            support of front-end web technologies on desktop and mobile web browsers.\"\n        </p>\n      </section>\n\n        <section>\n          <h2>Post lecture quick check</h2>\n        </section>\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/zZfOgnl2caG4CJvZ0H5kU?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/xgcnByfvFsNndc2YsaRVA?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/XB8ZckXNfHaF17N88o0N8?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/6il27nq5b7hQqQPs5x137?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n\n\n\n      </div>\n    </section></div>\n\n   <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n      <script src=\"../../site/reveal/js/reveal.js\"></script>\n\n      <script>\n\n        Reveal.initialize({\n          controls: true,\n          progress: true,\n          history: true,\n          center: true,\n\n          transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n          // More info https://github.com/hakimel/reveal.js#dependencies\n          dependencies: [\n            { src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },\n            { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n            { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n            { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n            { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n            { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n            { src: '../../site/reveal/plugin/search/search.js', async: true },\n            { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n          ]\n        });\n\n      </script>\n\n    </section></div></section>", "text": "Lecture 15 - Cookies And fetch with POST, localStorage, sessionStorage, indexDB and Dexie.... Administrivia HW2 Grades will be released after class Note: Exploration session this week Jeremy Zhang on our April Fools version of the site! Wednesday 5/8 4:30-5:30 or maybe longer BAG 154 Agenda GET vs. POST in AJAX requests Local storage Using Web Services Required for HW3... Review: Web Services Web service: software functionality that can be invoked through the internet using common protocols It's like a remote function(s) you can call. Done by contacting a program on a web server Web services can be written in a variety of languages Many web services accept parameters and produce results Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code The service's output might be HTML but could be text, XML, JSON, or other content Review: GET and POST There are two common ways to make AJAX requests to a server. GET requests are the default, most of what we've seen have been GET requests retrieve or get information from the server POST requests send information to the server often change information on the server Review: GET Request with Fetch When no security is needed, sending query parameters using a \"GET\" request (Parameters passed visibly in the URL bar or request header) is acceptable. Example: randomizer.php?mode=json const URL = \"randomizer.php\";fetch(URL + \"?mode=json\") .then(checkStatus) .then(JSON.parse) .then(handleLoadTeams) .catch(console.log); JS GET fetch example POST with Postman But what if we wanted to add people to our database using a new API endpoint for Groupizer. Because we don't want to send our potentially private information publically across the internet through plain text URLs, we want to embed the information in \"Form Data\" in the \"body\" of the request. A good way to see this is using a tool like Postman Connecting to JS There's a slight change to how we have to make our fetch request with POST. const API_URL = \"groupizer.php\";// Create a new \"FormData\" objectlet data = new FormData();// Add the various parameters to the FormData objectdata.append(\"teamname\", \"Catz\");data.append(\"student\", \"Whitney\");// Fetch now with a method of Post and the data in the bodyfetch(API_URL, {method: \"POST\", body: data}) .then(checkStatus) .then(JSON.parse) .then(handleLoadTeams) .catch(console.log); JS POST fetch example <!-- --> Quick check By the end of today you should be able to decide which of these technologies are best in each situation cookies localStorage sessionStorage indexDB/Dexie Storing the status a user has successfully logged into a website, but ensuring the log in status is deleted when they close the browser tab. Keeping track of which emojis are used on the client only. Storing a value in the browser that is accessible from the server. \" Temporarily retaining large pieces of information that are being downloaded from a website, but most of your users primarily use mobile phones to access the site. <!-- --> HTTP and State HTTP is a stateless protocol; it simply allows a browser to request a single document from a web server Once the document has been sent to the client, the server does not keep track of any information about what was sent (other than maybe in a log file of the transaction). Stateful client/server interaction Sites like amazon.com seem to \"know who I am.\" How do they do this? How does a client uniquely identify itself to a server, and how does the server provide specific content to each client? When has this happened to you? What sites were involved? Today we'll learn some technologies that are used to store \"state\" on your client machine. Sometimes state is kept simply to aid in the user experience. Sometimes state is passed back to the server from the client... and sometimes that happens when you least expect it. What is a cookie? cookie: a small amount of information stored within the computer browser cookies have many uses: authentication user tracking maintaining user preferences, shopping carts, etc. A \"tracking cookie\" an advertising company can put a cookie on your machine when you visit one site, and see it when you visit another site that also uses that advertising company therefore they can tell that the same person (you) visited both sites can be thwarted by telling your browser not to accept \"third-party cookies\" Ever changing web New privacy laws in Europe (GDPR) are making website owners rethink using cookies How cookies are set and retrieved Client side (JavaScript): JavaScript commands can set and retrieved using document.cookie Server Side (PHP): When the browser requests a page, the server may send back a cookie(s) with it to store on the client If your server has previously sent any cookies to the browser, the browser will send them back on subsequent requests to remind the server who is connecting to it. Facts about cookies Cookies are only data, not program code. Cookies can have set expiration dates. Cookies help websites remember who you are (and if you are logged in). Cookies CAN be used to track your viewing habits on a particular site. Cookies in JavaScript: setting To set a cookie use document.cookie = cookieString; cookieString consists of 3 semicolon separated parts (the second two are optional): name / value pair. E.g., \"lastItemBought=apples\" expiration date (by default when browser closed). E.g., \"expires=Thu, 23 May 2018 12:00:00 UTC\" Path where cookie belongs (default is current page). E.g., \"path=/\" If you set a cookie where the name already has a value, the old value gets overwritten. document.cookie = \"lastItemBought=apples; \" + \"expires=Thu, 23 May 2018 12:00:00 UTC; \" + \"path=/\"; JavaScript (example) Cookies in JavaScript: Retrieving To get a cookie use let cookies = document.cookie; This will return a semicolon separated list of all current name=value pairs E.g., \"lastItemBought=apples; numberSiteVisitsToday=57\" You have to retrieve the values from the string by parsing yourself. Cookies in JavaScript: Clearing To delete a cookie you need to set it's expiration time to be before now document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';JavaScript (example) Cookies Recap ...delicious, particularly with chocolate chips. ...are a way to store information or the state of your website. ...can be set so they expire after a time, or after you close the page. ...are kind of a pain to retreive, if there are many cookies that are set already. ...they only allow up to only 4 KB of data storage. ...they can be used by malicious sites to \"spy\" on browsing behavior. localStorage and sessionStorage localStorage and sessionStorage From Wikipedia localStorage is a document property that allows you to save information across browser sessions (i.e after you close the browser) sessionStorage is a document property that allows you to save information for this session only, and will be cleared when the page is closed. Both localStorage and sessionStorage inherit from Storage class. Name/value pairs (seen in cookies and Storage) are supported by most every browser Storage There are three methods we're interested in from Storage method description setItem(keyName, keyValue) Sets the keyName location in localStorage to be keyValue getItem(keyName) Retrieves the keyValue in localStorage associated with keyName removeItem(keyName) Removes the keyName location in localStorage localStorage example window.localStorage.setItem(\"Melissa\", \"Mowgli\");window.localStorage.setItem(\"Lauren\", \"Spot\");window.localStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.localStorage.getItem(\"Lauren\");window.localStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab sessionStorage example Similarly for sessionStorage window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");window.sessionStorage.setItem(\"Lauren\", \"Spot\");window.sessionStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.sessionStorage.getItem(\"Lauren\");window.sessionStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab indexDB indexDB cookies, localStorage, sessionStorage can only store small amounts of data indexDB is a \"a low-level API for client-side storage of significant amounts of structured data, including files/blobs\" Look down through the slides if you want to know more... indexDB usage There are many flavors types of indexDB - so apparently you have to cover your bases with creating the database for your page: // This works on all devices/browsers, and uses// IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(<dbname>, <version>); JavaScript (template) // This works on all devices/browsers,// and uses IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(\"terms\", 1); JavaScript (example) indexDB usage You need to set callbacks on the new database object, so once the database is created, the tables (schema) can be created. openDB.onupgradeneeded = function() { let db = openDB.result; let store = db.createObjectStore(\"terms\", {keyPath: \"term\"}); let index = store.createIndex(\"definition\", \"definition\", { unique: false });};openDB.onsuccess = function() { console.log(\"Database created!\");} JavaScript (example) indexDB setting values // Start a new transactionlet db = openDB.result;let tx = db.transaction(\"terms\", \"readwrite\");let store = tx.objectStore(\"terms\");let index = store.index(\"definition\");// get the term and definition from the userstore.put({key: userTerm, definition: userDef});// Close the db when the transaction is donetx.oncomplete = function() { db.close();}; JavaScript (example) indexDB getting values // assume the variable term has been setlet getValue = store.get(term);getValue.onsuccess = function() { alert(getValue.result.definition);};getValue.onerror = function() { // error handling here}; JavaScript (example) Phew... that was a lot of work. And confusing too Dexie to the rescue Dexie Dexie is a wrapper around indexDB that makes it MUCH easier to use. // create the database (module global)let db = new Dexie(<name of database>);window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ // this is the table with the columns that are to be indexed. <tableName>: '<column1>, <column2>...' });}; JavaScript (template) let db = new Dexie(\"definitions\");window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ terms: 'term,definition' });}; JavaScript (example) Dexie put Putting an item in a table is pretty straight forward: db.<tableName>.put({\"column1\": <value1>, \"column2\": <value2>, ...}); JavaScript (template) db.terms.put({\"term\": term, \"definition\": definition}); JavaScript (example) Dexie get There are two ways to get information back out of a table, using either a callback, or a Promise // get with a callbackdb.<tableName>.get(<key>, function (item) { // do something here});// get with a Promise.db.<tableName>.get(<key>).then (function (item) { // do something here}); JavaScript (template) db.terms.get(term, function (item) { console.log(\"Callback: Item at \" + term + \" is \" + item.definition);});db.terms.get(term).then (function (item) { console.log(\"Promise: Item at \" + term + \" is \" + item.definition);}); JavaScript (example) Compliance The one issue with all of these newer technologies (localStorage, sessionStorage, indexDB, and frameworks like Dexie) is cross browser compatibilty What Web Can Do Today (Try this in different browsers or on your phone) Roadmap of Web Applications on Mobile Can I use - \"provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.\" Post lecture quick check Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2>Lecture 12</h2>\n          <h3>Introduction to JSON and AJAX</h3>\n          <blockquote class=\"small-font\">\n            I'm working on a creative project for another class right now and its nowhere\n            near as cool as our students'...\n            <p> Conner</p>\n          </blockquote>\n        </section>", "text": "Lecture 12 Introduction to JSON and AJAX I'm working on a creative project for another class right now and its nowhere near as cool as our students'... Conner", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h3>Agenda for today's Alphabet Soup</h3>\n          <ul>\n            <li>Notes:\n              <ul>\n                <li>\n                  <a href=\"../../uwnetid/154-gug220.pdf\">Seating chart</a> for the midterm in\n                  <a href=\"../../exams/assets/gug220.pdf\">GUG 220</a> is posted</li>\n                <li>Melissa will have 1 on-line OH to go over APIs and Fetch or other\n                  non-homework course material tomorrow. Look on Piazza for information.\n                </li>\n              </ul>\n            </li><li>\n              Finishing up on\n              <a href=\"../lec11-more-js/index.html#/25\" target=\"_blank\">DOM</a> Tree traversal\n              <ul>\n                <li><a href=\"../lec11-more-js/index.html#/29\" target=\"_blank\">Slide 29</a></li>\n                <li><a href=\"\">Lecture 12 Warm up</a></li>\n              </ul>\n            </li>\n            <li>JSON</li>\n            <li>AJAX</li>\n            <li>CP3</li>\n          </ul>\n        </section>", "text": "Agenda for today's Alphabet Soup Notes: Seating chart for the midterm in GUG 220 is posted Melissa will have 1 on-line OH to go over APIs and Fetch or other non-homework course material tomorrow. Look on Piazza for information. Finishing up on DOM Tree traversal Slide 29 Lecture 12 Warm up JSON AJAX CP3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>CSE 154 Modules</h2>\n          <ol>\n            <li>\n              Webpage structure and appearance with HTML5 and CSS. <i class=\"fa fa-check\n                good fragment\" aria-hidden=\"true\"></i>\n            </li>\n            <li>\n              Client-side interactivity with JS DOM and events.<i class=\"fa fa-check\n                good fragment\" aria-hidden=\"true\"></i>\n            </li>\n            <li class=\"bolded\">\n              Using web services (API's) as a client with JS.\n            </li>\n            <li class=\"faded\">\n              Writing JSON-based web services with PHP.\n            </li>\n            <li class=\"faded\">\n              Storing and retreiving information in a database with MySQL and server-side\n              programs.\n            </li>\n          </ol>\n        </section>", "text": "CSE 154 Modules Webpage structure and appearance with HTML5 and CSS. Client-side interactivity with JS DOM and events. Using web services (API's) as a client with JS. Writing JSON-based web services with PHP. Storing and retreiving information in a database with MySQL and server-side programs.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n            <h1>\n                JSON\n            </h1>\n        </section>", "text": "JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n            <dl>\n                <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></dt>\n                <dd>JavaScript Object Notation</dd>\n            </dl>\n\n            <p>\n                A data format that represents data as a set of JavaScript objects\n                invented by JS guru\u00a0Douglas Crockford\u00a0of Yahoo!\n                natively supported by all modern browsers (and libraries to support it in old ones)\n            </p>\n\n        </section>", "text": "JSON JavaScript Object Notation A data format that represents data as a set of JavaScript objects invented by JS guru\u00a0Douglas Crockford\u00a0of Yahoo! natively supported by all modern browsers (and libraries to support it in old ones)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>But first... JavaScript objects</h2>\n          <pre><code class=\"hljs\" data-trim>let myobj = {\n  fieldName1: value1,\n  ...\n  fieldName: value\n};</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p>\n              In JavaScript, you can create a new object without creating a\n              \"class\" like you do in Java\n          </p>\n\n          <p>\n              You can add properties to any object even after it is created:\n          </p>\n\n          <pre><code class=\"hljs\" data-trim>myobj.field87 = \"wubba wubba wubba\";</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n\n      </section>", "text": "But first... JavaScript objects let myobj = { fieldName1: value1, ... fieldName: value}; JS (example) In JavaScript, you can create a new object without creating a \"class\" like you do in Java You can add properties to any object even after it is created: myobj.field87 = \"wubba wubba wubba\"; JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Example</h2>\n        <pre><code class=\"hljs\" data-trim>let fidgetSpinner = {\n  owner: \"Nate Spencer\",                           // string\n  grade: \"Junior\",                                 // string\n  \"zip-code\": 90210,                               // number\n  price: 3.95,                                     // number\n  colors: [\"red\", \"green\", \"purple\"],              // array\n  getChoice: function() { return this.owner + \" bought \" + this.colors[1]; }\n};\nconsole.log(fidgetSpinner.price);         // 3.95\nconsole.log(fidgetSpinner.colors[2]));    // purple\nconsole.log(fidgetSpinner.getChoice());   // Nate Spencer bought green\nconsole.log(fidgetSpinner[\"zip-code\"]);   // 90210\nconsole.log(fidgetSpinner.zip-code]);     // error\n</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n          <p class=\"font-16pt\">\n              An object can have methods (function properties) that refer to itself as\u00a0this <br>\n              can refer to the fields with\u00a0<code>.fieldName</code>\u00a0or\u00a0\n              <code>[\"fieldName\"]</code>\u00a0syntax<br>\n          </p>\n          <p class=\"font-16pt\">\n              Field names can put in quotes - optional unless there is a space or\n              dash (e.g.\u00a0\"zip-code\" above which must be accessed using [] notation)\n          </p>\n          <p class=\"font-16pt\">JSON Practice:\n            <a href=\"https://www.codestepbystep.com/problem/view/javascript/objects/jsonMystery0\">here</a>,\n            <a href=\"https://www.codestepbystep.com/problem/view/javascript/objects/jsonMystery1\">here</a>, and\n            <a href=\"https://www.codestepbystep.com/problem/view/javascript/objects/jsonMystery2\">here</a>.\n          </p>\n      </section>", "text": "Example let fidgetSpinner = { owner: \"Nate Spencer\", // string grade: \"Junior\", // string \"zip-code\": 90210, // number price: 3.95, // number colors: [\"red\", \"green\", \"purple\"], // array getChoice: function() { return this.owner + \" bought \" + this.colors[1]; }};console.log(fidgetSpinner.price); // 3.95console.log(fidgetSpinner.colors[2])); // purpleconsole.log(fidgetSpinner.getChoice()); // Nate Spencer bought greenconsole.log(fidgetSpinner[\"zip-code\"]); // 90210console.log(fidgetSpinner.zip-code]); // error JS (example) An object can have methods (function properties) that refer to itself as\u00a0this can refer to the fields with\u00a0.fieldName\u00a0or\u00a0 [\"fieldName\"]\u00a0syntax Field names can put in quotes - optional unless there is a space or dash (e.g.\u00a0\"zip-code\" above which must be accessed using [] notation) JSON Practice: here, here, and here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>Examples of JS objects we've seen so far</h2>\n          <ul>\n              <li>DOM elements</li>\n              <li><code>document</code>, <code>window</code></li>\n          </ul>\n      </section>", "text": "Examples of JS objects we've seen so far DOM elements document, window", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>People and Organizations (and Companies)</h2>\n          <p>Internet Engineering Task Force\n            (<a href=\"http://en.wikipedia.org/wiki/Internet_Engineering_Task_Force\">IETF</a>):\n             Internet protocol standards</p>\n          <p>Internet Corporation for Assigned Names and Numbers\n             (<a href=\"http://en.wikipedia.org/wiki/ICANN\">ICANN</a>):\n            decides top-level <a href=\"http://news.com.com/ICANN+rejects+.xxx+domain/2100-1047_3-6071124.html\">domain names</a>\n          </p>\n          <p>World Wide Web Consortium\n            (<a href=\"http://en.wikipedia.org/wiki/World_Wide_Web_Consortium\">W3C</a>): web standards\n          </p>\n          <p class=\"flex-row\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/ietf-logo.gif\" alt=\"IETF\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/icann.jpg\" alt=\"ICANN\">\n          <img class=\"space-right\" style=\"height: 70px\" src=\"../img/w3c.png\" alt=\"W3C\">\n          </p>\n          <p>These protocols are carried out in large part by <strong>Internet service\n            providers</strong> and other companies and organizations who build\n          Internet-related products and applications</p>\n        </section>", "text": "People and Organizations (and Companies) Internet Engineering Task Force (IETF): Internet protocol standards Internet Corporation for Assigned Names and Numbers (ICANN): decides top-level domain names World Wide Web Consortium (W3C): web standards These protocols are carried out in large part by Internet service providers and other companies and organizations who build Internet-related products and applications", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Internet Protocol (IPv4 or IPv6)</h2>\n          <p>A simple protocol for attempting to send data between two computers</p>\n          <p>Each device has a 32- or 128-bit IP address. For IPv4 this is written as four 8-bit numbers (0-255)</p>\n          <p><img src=\"../img/fig1_ip_address.png\" alt=\"IP Address Example\"></p>\n          <p>Find your internet IP address: <a href=\"http://whatismyip.com\" target=\"_blank\">whatismyip.com</a></p>\n          <p>Find out your local IP address: in a terminal, type <code>ipconfig</code>\n          (Windows) or <code>ifconfig</code> (Mac/Linux)</p>\n        </section>", "text": "Internet Protocol (IPv4 or IPv6) A simple protocol for attempting to send data between two computers Each device has a 32- or 128-bit IP address. For IPv4 this is written as four 8-bit numbers (0-255) Find your internet IP address: whatismyip.com Find out your local IP address: in a terminal, type ipconfig (Windows) or ifconfig (Mac/Linux)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Domain Name System (<a href=\"http://en.wikipedia.org/wiki/dns\">DNS</a>)</h2>\n          <p>Think about some domain names you know. What do they end with?</p><p>\n          </p><p class=\"fragment\">Used to be only .com, .org, .net, .gov, .edu, .int, .mil</p>\n          <p class=\"fragment\">... then there were two letter extensions like .uk, .es</p>\n          <p class=\"fragment\">Now .everything!</p>\n          <div class=\"fragment\">\n            <p>A Domain Name System is a set of servers that map written names to IP addresses\n            </p><ul>\n              <li>Example: <code>www.cs.washington.edu \u2192 128.208.3.88</code></li>\n            </ul>\n          </div>\n        </section>", "text": "Domain Name System (DNS) Think about some domain names you know. What do they end with? Used to be only .com, .org, .net, .gov, .edu, .int, .mil ... then there were two letter extensions like .uk, .es Now .everything! A Domain Name System is a set of servers that map written names to IP addresses Example: www.cs.washington.edu \u2192 128.208.3.88", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Transmission Control Protocol (<a href=\"http://en.wikipedia.org/wiki/Tcp_protocol\">TCP</a>)</h2>\n          <p>Adds multiplexing, guaranteed message delivery on top of IP</p>\n          <p><strong>Multiplexing</strong>: multiple programs using the same IP address\n          </p><ul>\n            <li><strong>Port</strong>: a number given to each program or service</li>\n            <li>port 80: web browser (port 443 for secure browsing)</li>\n            <li>port 25: email</li>\n            <li>port 22: ssh</li>\n            <li>port 5190: AOL Instant Messenger</li>\n            <li><a href=\"http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers\">More common ports</a></li>\n          </ul>\n          \n          <p>Some programs (games, streaming media programs) use simpler <a href=\"http://en.wikipedia.org/wiki/User_Datagram_Protocol\">UDP</a>\n          protocol instead of TCP</p>\n        </section>", "text": "Transmission Control Protocol (TCP) Adds multiplexing, guaranteed message delivery on top of IP Multiplexing: multiple programs using the same IP address Port: a number given to each program or service port 80: web browser (port 443 for secure browsing) port 25: email port 22: ssh port 5190: AOL Instant Messenger More common ports Some programs (games, streaming media programs) use simpler UDP protocol instead of TCP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>The World Wide Web (WWW)</h2>\n          <h3>Wait, how is it different than the Internet again?</h3>\n          <p>The Internet describes all the interconnected devices that use the \"internet\n          protocol.\" The World Wide Web is the subset of the Internet that uses the HTTP\n          and HTTPS protocols, mostly to transmit \"webpages.\"</p>\n        </section>", "text": "The World Wide Web (WWW) Wait, how is it different than the Internet again? The Internet describes all the interconnected devices that use the \"internet protocol.\" The World Wide Web is the subset of the Internet that uses the HTTP and HTTPS protocols, mostly to transmit \"webpages.\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Uniform Resource Locator (<a href=\"http://en.wikipedia.org/wiki/Url\">URL</a>)</h2>\n          <p>An identifier for the location of a document on a web site</p>\n          <p>\n          A basic URL:\n          <br>\n          </p><pre><code class=\"hljs nohighlight\">https://courses.cs.washington.edu/courses/cse154/19sp/\n~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~\nprotocol           host               path</code></pre>\n\n          \n          <p>Upon entering this URL into the browser, it would:\n          </p><ul>\n            <li>Ask the \"DNS\" server for the IP address of\n              <code>courses.cs.washington.edu</code></li>\n            <li>Connect to that IP address at port 80</li>\n            <li>Ask the server to <code>GET /courses/cse154/19sp/index.html</code></li>\n            <li>Display the resulting page on the screen</li>\n          </ul>\n          \n        </section>", "text": "Uniform Resource Locator (URL) An identifier for the location of a document on a web site A basic URL: https://courses.cs.washington.edu/courses/cse154/19sp/~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~protocol host path Upon entering this URL into the browser, it would: Ask the \"DNS\" server for the IP address of courses.cs.washington.edu Connect to that IP address at port 80 Ask the server to GET /courses/cse154/19sp/index.html Display the resulting page on the screen", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Hypertext Transport Protocol (<a href=\"http://en.wikipedia.org/wiki/Http_protocol\">HTTP</a>)</h2>\n          <p>The set of commands understood by a web server and sent from a browser</p>\n          <p>Some HTTP commands (your browser sends these internally):</p>\n          <ul>\n            <li><code>GET  filename</code>: download</li>\n            <li><code>POST filename</code>: send a web form response</li>\n            <li><code>PUT  filename</code>: upload</li>\n          </ul>\n          <p>We will learn more about <code>GET</code> and <code>POST</code> when we start\n          the server-side programming module of this course</p>\n\n          <!--\n          <p>\n          Simulating a browser with a terminal window:\n          <img src=\"../img/telnet.png\" alt=\"Terminal Browser\" />\n          </p>\n          -->\n        </section>", "text": "Hypertext Transport Protocol (HTTP) The set of commands understood by a web server and sent from a browser Some HTTP commands (your browser sends these internally): GET filename: download POST filename: send a web form response PUT filename: upload We will learn more about GET and POST when we start the server-side programming module of this course <!-- Simulating a browser with a terminal window: -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>HTTP Error Codes</h2>\n          <p>When something goes wrong, the web server returns a special \"error code\"\n          number to the browser, possibly followed by an HTML document</p>\n          <p>Common Error Codes:</p>\n          <table>\n            <tr>\n              <th>Number</th>\n              <th>Meaning</th>\n            </tr>\n            <tr><td>200</td><td>OK</td></tr>\n            <tr>\n              <td><a href=\"http://clsc.net/research/google-302-page-hijack.htm\">301-303</a></td>\n              <td>page has moved (permanently or temporarily)</td></tr>\n            <tr>\n              <td><a href=\"http://www.cs.washington.edu/education/courses/cse190d/07sp/lectures/\">403</a></td>\n              <td>you are forbidden to access this page</td>\n            </tr>\n            <tr><td><a href=\"http://www.homestarrunner.com/404.html\">404</a></td><td>page not found</td></tr>\n            <tr><td>\n              <a href=\"https://httpstatuses.com/418\">418</a></td><td>I'm a teapot\n              (<a href=\"https://www.gizmodo.com.au/2017/08/aussie-programmers-attempt-to-remove-joke-im-a-teapot-web-error-ends-up-making-it-official-instead/%20\">fun\n              fact</a>, <a href=\"https://www.google.com/teapot\">example</a>)\n            </td></tr>\n            <tr><td>500</td><td>internal server error</td></tr>\n          </table>\n          <p><a href=\"http://en.wikipedia.org/wiki/Http_error_codes\">Complete list</a></p>\n          <p><a href=\"https://http.cat/\">... as cats</a></p>\n        </section>", "text": "HTTP Error Codes When something goes wrong, the web server returns a special \"error code\" number to the browser, possibly followed by an HTML document Common Error Codes: Number Meaning 200OK 301-303 page has moved (permanently or temporarily) 403 you are forbidden to access this page 404page not found 418I'm a teapot (fun fact, example) 500internal server error Complete list ... as cats", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>The Real Innovation</h2>\n\n          <p>HTTP built resilience into the internet by creating the 404.</p>\n          <p>A website will always give a response, even if what a user wants isn't found.\u00a0</p>\n          <p>Examples:</p>\n          <ul>\n            <li><a href=\"http://acm.illinois.edu/404\" target=\"_blank\">ACM\u2019s 404</a></li>\n            <li><a href=\"http://www.wsdot.wa.gov/xyz\" target=\"_blank\">WSDOT</a> </li>\n            <li><a href=\"http://imgur.com/gallery/Ki2g9Ya\" target=\"_blank\">Imgur</a></li>\n            <li><a href=\"https://labs.ft.com/articles/four-oh-four/\" target=\"_blank\">FT Labs</a></li>\n          </ul>\n          <p>\u00a0</p>\n          <p>\n            Special thanks\n            to <a href=\"https://www.siggraph.org/discover/inspiration/member-profiles/alain-chesnais\">Alain\n              Chanais</a> for pointing out the beauty in the resiliency</p>\n\n        </section>", "text": "The Real Innovation HTTP built resilience into the internet by creating the 404. A website will always give a response, even if what a user wants isn't found.\u00a0 Examples: ACM\u2019s 404 WSDOT Imgur FT Labs \u00a0 Special thanks to Alain Chanais for pointing out the beauty in the resiliency", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>They Are Everywhere</h2>\n          <div style=\"display:flex; flex-direction: row;align-items:flex-start;\">\n\n            <img class=\"simpleimg\" src=\"../img/kid404.png\" alt=\"iPhone 404\" height=\"350px\" style=\"margin:5px;\">\n            <img class=\"simpleimg\" src=\"../img/coat404.png\" alt=\"Missing Coat 404\" height=\"350px\" style=\"margin:5px;\">\n            <img class=\"simpleimg\" src=\"../img/candle404.png\" alt=\"Missing Candles 404\" height=\"350px\" style=\"margin:5px;\">\n            <div style=\"display:flex; flex-direction: column;\">\n              <img class=\"simpleimg\" src=\"../img/auto404.png\" alt=\"Peugeot 404\" width=\"400px\" style=\"margin:5px;\">\n              <img class=\"simpleimg\" src=\"../img/clock404.png\" alt=\"Clock 404\" width=\"400px\" style=\"margin:5px;\">\n              <img class=\"simpleimg\" src=\"../img/room404.png\" alt=\"Room 404\" width=\"400px\" style=\"margin:5px;\">\n            </div>\n          </div>\n          <p class=\"fragment\">Except in the Allen Center (CSE building)</p>\n        </section>", "text": "They Are Everywhere Except in the Allen Center (CSE building)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Reminder: What is a web page, really?</h2>\n          <div>\n            <div style=\"width:25%;  position:absolute; left:0%;\">\n              <p class=\"fragment\"><strong>Content</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Words and images</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:25%;\">\n              <p class=\"fragment\"><strong>Structure</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \">\n                <p class=\"medium-small-font\">HTML</p>\n              </div>\n            </div>\n            <div style=\"width:25%;  position:absolute; left:50%;\">\n              <p class=\"fragment\"><strong>Style</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">CSS</p>\n              </div>\n            </div>\n            <div style=\"width:23.2%;  position:absolute; left:75%;\">\n              <p class=\"fragment\"><strong>Behavior</strong></p>\n              <div class=\"fragment\">\n                <img class=\"simpleimg\" src=\"../img/animated-skeleton.gif\" alt=\"skelton\" style=\"margin:5px;\">\n                <p class=\"medium-small-font\">Javascript &amp; Server programs</p>\n              </div>\n            </div>\n          </div>\n        </section>", "text": "Reminder: What is a web page, really? Content Words and images Structure HTML Style CSS Behavior Javascript & Server programs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <section>\n            <h2>What do you see here?</h2>\n            <a href=\"http://www.washington.edu/news/\" target=\"_blank\">\n            <img class=\"simpleimg\" src=\"../img/samplepage.png\" alt=\"Sample web page\" align=\"middle\" style=\"display:block; margin:auto;\" height=\"500px\"></a>\n          </section>\n\n          <section>\n            <h2>What did you see?<h2>\n                <ul>\n                  <li><a href=\"#title-tag\">title</a></li>\n                  <li><a href=\"#header-footer-tags\">header and footer</a></li>\n                  <li><a href=\"#img-tag\">images</a></li>\n                  <li><a href=\"#ul-li-tags\">list</a></li>\n                  <li><a href=\"#p-tag\">paragraph</a></li>\n                  <li><a href=\"#heading-tags\">headings (various sizes)</a></li>\n                  <li><a href=\"#article-section-tags\">articles and sections</a></li>\n                  <li><a href=\"#hr-tag\">lines (aka horizontal rule)</a></li>\n                  <li><a href=\"#a-tag\">links to click</a></li>\n                  <li>menu items</li>\n                  <li>buttons</li>\n                  <li>places to enter text</li>\n                  <li>...</li>\n                </ul>\n          </h2></h2></section>\n\n          <section>\n            <h2>Content</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p>Words and images</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/content.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n\n          <section>\n            <h2>Structure</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                  <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                  <p>HTML</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/structure.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n\n\n          <section>\n            <h2>Style</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                <p>CSS</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/style.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>\n\n        </section>", "text": "What do you see here? What did you see? title header and footer images list paragraph headings (various sizes) articles and sections lines (aka horizontal rule) links to click menu items buttons places to enter text ... Content Words and images Structure HTML Style CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>What do you see here?</h2>\n            <a href=\"http://www.washington.edu/news/\" target=\"_blank\">\n            <img class=\"simpleimg\" src=\"../img/samplepage.png\" alt=\"Sample web page\" align=\"middle\" style=\"display:block; margin:auto;\" height=\"500px\"></a>\n          </section>", "text": "What do you see here?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>What did you see?<h2>\n                <ul>\n                  <li><a href=\"#title-tag\">title</a></li>\n                  <li><a href=\"#header-footer-tags\">header and footer</a></li>\n                  <li><a href=\"#img-tag\">images</a></li>\n                  <li><a href=\"#ul-li-tags\">list</a></li>\n                  <li><a href=\"#p-tag\">paragraph</a></li>\n                  <li><a href=\"#heading-tags\">headings (various sizes)</a></li>\n                  <li><a href=\"#article-section-tags\">articles and sections</a></li>\n                  <li><a href=\"#hr-tag\">lines (aka horizontal rule)</a></li>\n                  <li><a href=\"#a-tag\">links to click</a></li>\n                  <li>menu items</li>\n                  <li>buttons</li>\n                  <li>places to enter text</li>\n                  <li>...</li>\n                </ul>\n          </h2></h2></section>", "text": "What did you see? title header and footer images list paragraph headings (various sizes) articles and sections lines (aka horizontal rule) links to click menu items buttons places to enter text ...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>Content</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <img class=\"simpleimg\" src=\"../img/bones.png\" alt=\"pile of bones\" style=\"margin:5px;\">\n                <p>Words and images</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/content.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>", "text": "Content Words and images", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>Structure</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                  <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                  <p>HTML</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/structure.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>", "text": "Structure HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>Style</h2>\n            <div class=\"side-by-side\">\n              <div style=\"width:25%;  position:absolute; left:0px;\">\n                <a href=\"http://www.washington.edu/news/\"><img class=\"simpleimg\" src=\"../img/dressed-skeleton.png\" alt=\"skelton\" style=\"margin:5px; \"></a>\n                <p>CSS</p>\n              </div>\n              <div>\n                <img class=\"fragment\" src=\"../img/style.png\" height=\"425\" align=\"right\" alt=\"sample content\">\n              </div>\n            </div>\n          </section>", "text": "Style CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <section>\n            <h2>JSON Warmup exercise:</h2>\n            <div class=\"side-by-side\">\n              <div class=\"space-right\">\n                <p>\n                  The NASA API has an endpoint that allows us to retrieve Landsat 8\n                  image for a specific date (date=2017-04-16) and\n                  location (lon=-122.3060, lat=47.6533) and\n                  <a href=\"https://api.nasa.gov/planetary/earth/imagery/?lon=-122.3060&amp;lat=47.6533&amp;date=2017-04-16&amp;cloud_score=true&amp;api_key=DEMO_KEY\">link</a>).\n                </p>\n                <ul>\n                  <li>How do you find the date this image was taken?</li>\n                  <li>What type is the cloud_score, and how would you access it?</li>\n                  <li>How would you find the planet this was taken on?</li>\n                  <li>How would you determine the service version?</li>\n                </ul>\n              </div>\n              <div class=\"half-width space-left\">\n    <pre><code class=\"hljs\" data-trim>let data = {\n  \"cloud_score\": 0.3674638267064959,\n  \"date\": \"2017-04-16T19:01:16\",\n  \"id\": \"LC8_L1T_TOA/LC80470272017106LGN00\",\n  \"resource\": {\n    \"dataset\": \"LC8_L1T_TOA\",\n    \"planet\": \"earth\"\n  },\n  \"service_version\": \"v1\",\n  \"url\": \"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&amp;token=d101cee0116e6f14891f3dbab8315dd0\"\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n              <p>\n                <a href=\"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&amp;token=d101cee0116e6f14891f3dbab8315dd0\">Link</a> to\n                resulting image. Where do you think this is?\n              </p>\n              </div>\n            </div>\n\n          </section>\n\n          <section>\n            <h2>Answers</h2>\n        <pre><code class=\"hljs\" data-trim>let date = data.date;                 // date === \"2017-04-16T19:01:16\"\nlet cloud_score = data.cloud_score;   // cloud_score === 0.3674638267064959\nlet planet = data.resource.planet;    // planet === \"earth\"\nlet version = data.service_version;   // version = \"v1\"</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>\n        </section>", "text": "JSON Warmup exercise: The NASA API has an endpoint that allows us to retrieve Landsat 8 image for a specific date (date=2017-04-16) and location (lon=-122.3060, lat=47.6533) and link). How do you find the date this image was taken? What type is the cloud_score, and how would you access it? How would you find the planet this was taken on? How would you determine the service version? let data = { \"cloud_score\": 0.3674638267064959, \"date\": \"2017-04-16T19:01:16\", \"id\": \"LC8_L1T_TOA/LC80470272017106LGN00\", \"resource\": { \"dataset\": \"LC8_L1T_TOA\", \"planet\": \"earth\" }, \"service_version\": \"v1\", \"url\": \"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&token=d101cee0116e6f14891f3dbab8315dd0\"} JSON Link to resulting image. Where do you think this is? Answers let date = data.date; // date === \"2017-04-16T19:01:16\"let cloud_score = data.cloud_score; // cloud_score === 0.3674638267064959let planet = data.resource.planet; // planet === \"earth\"let version = data.service_version; // version = \"v1\" JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>JSON Warmup exercise:</h2>\n            <div class=\"side-by-side\">\n              <div class=\"space-right\">\n                <p>\n                  The NASA API has an endpoint that allows us to retrieve Landsat 8\n                  image for a specific date (date=2017-04-16) and\n                  location (lon=-122.3060, lat=47.6533) and\n                  <a href=\"https://api.nasa.gov/planetary/earth/imagery/?lon=-122.3060&amp;lat=47.6533&amp;date=2017-04-16&amp;cloud_score=true&amp;api_key=DEMO_KEY\">link</a>).\n                </p>\n                <ul>\n                  <li>How do you find the date this image was taken?</li>\n                  <li>What type is the cloud_score, and how would you access it?</li>\n                  <li>How would you find the planet this was taken on?</li>\n                  <li>How would you determine the service version?</li>\n                </ul>\n              </div>\n              <div class=\"half-width space-left\">\n    <pre><code class=\"hljs\" data-trim>let data = {\n  \"cloud_score\": 0.3674638267064959,\n  \"date\": \"2017-04-16T19:01:16\",\n  \"id\": \"LC8_L1T_TOA/LC80470272017106LGN00\",\n  \"resource\": {\n    \"dataset\": \"LC8_L1T_TOA\",\n    \"planet\": \"earth\"\n  },\n  \"service_version\": \"v1\",\n  \"url\": \"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&amp;token=d101cee0116e6f14891f3dbab8315dd0\"\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n              <p>\n                <a href=\"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&amp;token=d101cee0116e6f14891f3dbab8315dd0\">Link</a> to\n                resulting image. Where do you think this is?\n              </p>\n              </div>\n            </div>\n\n          </section>", "text": "JSON Warmup exercise: The NASA API has an endpoint that allows us to retrieve Landsat 8 image for a specific date (date=2017-04-16) and location (lon=-122.3060, lat=47.6533) and link). How do you find the date this image was taken? What type is the cloud_score, and how would you access it? How would you find the planet this was taken on? How would you determine the service version? let data = { \"cloud_score\": 0.3674638267064959, \"date\": \"2017-04-16T19:01:16\", \"id\": \"LC8_L1T_TOA/LC80470272017106LGN00\", \"resource\": { \"dataset\": \"LC8_L1T_TOA\", \"planet\": \"earth\" }, \"service_version\": \"v1\", \"url\": \"https://earthengine.googleapis.com/api/thumb?thumbid=a6793b04bb763f27283bd16f69f53ae6&token=d101cee0116e6f14891f3dbab8315dd0\"} JSON Link to resulting image. Where do you think this is?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>Answers</h2>\n        <pre><code class=\"hljs\" data-trim>let date = data.date;                 // date === \"2017-04-16T19:01:16\"\nlet cloud_score = data.cloud_score;   // cloud_score === 0.3674638267064959\nlet planet = data.resource.planet;    // planet === \"earth\"\nlet version = data.service_version;   // version = \"v1\"</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>", "text": "Answers let date = data.date; // date === \"2017-04-16T19:01:16\"let cloud_score = data.cloud_score; // cloud_score === 0.3674638267064959let planet = data.resource.planet; // planet === \"earth\"let version = data.service_version; // version = \"v1\" JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 13: AJAX, Fetch, and Promises</h3>\n        </section>", "text": "CSE 154 Lecture 13: AJAX, Fetch, and Promises", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>Notes: </p>\n          <ul>\n            <li>HW 3 will be out soon, but will have a LONG lead time (Midterm first!)</li>\n            <li>ETL Survey at the end of class</li>\n          </ul>\n          <p>More on APIs</p>\n          <p>Testing with (hard coded) JSON</p>\n          <p>Intro to AJAX, fetch and promises</p>\n\n        </section>", "text": "Agenda Notes: HW 3 will be out soon, but will have a LONG lead time (Midterm first!) ETL Survey at the end of class More on APIs Testing with (hard coded) JSON Intro to AJAX, fetch and promises", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <section>\n            <h2>Another JSON Problem</h2>\n            <p>\n              All of the class' teams group names (with student names) were typed into a <code>.json</code>\n              file which we will use in an example shortly.\n            </p>\n            <p>\n              The structure of the file is:\n            </p>\n            <pre><code class=\"hljs small-font\" data-trim>{\n  \"teams\": [\n    {\n      \"name\": \"Catz\",\n      \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"]\n    },\n    {\n      \"name\": \"Dawgs\",\n      \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"]\n    }\n  ]\n}</code></pre>\n            <p class=\"code-caption\">JSON</p>\n            <p>\n              What could would you write to tell how many students groups there are and\n              how many students are actually in a group?\n            </p>\n          </section>\n          <section>\n            <pre><code class=\"hljs small-font\" data-trim>let data = {\n\"teams\": [\n  {\n    \"name\": \"Catz\",\n    \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"]\n  },\n  ...\n}\nlet numTeams = data.teams.length;  // numTeams === 44\nlet count = 0;\nfor (let i = 0; i &lt; data.teams.length; i++) {\n    count += data.teams[i].students.length;\n}</code></pre>\n            <p class=\"code-caption\">JSON</p>\n            <p>How many people do you think actually signed up for a group? <span class=\"fragment\">113</span></p>\n            <p>\n              P.S. Handy <a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en-US\" target=\"_blank\">JSON\n               Formatter</a> Chrome extension for viewing JSON</p>\n          </section>\n        </section>", "text": "Another JSON Problem All of the class' teams group names (with student names) were typed into a .json file which we will use in an example shortly. The structure of the file is: { \"teams\": [ { \"name\": \"Catz\", \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"] }, { \"name\": \"Dawgs\", \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"] } ]} JSON What could would you write to tell how many students groups there are and how many students are actually in a group? let data = {\"teams\": [ { \"name\": \"Catz\", \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"] }, ...}let numTeams = data.teams.length; // numTeams === 44let count = 0;for (let i = 0; i < data.teams.length; i++) { count += data.teams[i].students.length;} JSON How many people do you think actually signed up for a group? 113 P.S. Handy JSON Formatter Chrome extension for viewing JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>Another JSON Problem</h2>\n            <p>\n              All of the class' teams group names (with student names) were typed into a <code>.json</code>\n              file which we will use in an example shortly.\n            </p>\n            <p>\n              The structure of the file is:\n            </p>\n            <pre><code class=\"hljs small-font\" data-trim>{\n  \"teams\": [\n    {\n      \"name\": \"Catz\",\n      \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"]\n    },\n    {\n      \"name\": \"Dawgs\",\n      \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"]\n    }\n  ]\n}</code></pre>\n            <p class=\"code-caption\">JSON</p>\n            <p>\n              What could would you write to tell how many students groups there are and\n              how many students are actually in a group?\n            </p>\n          </section>", "text": "Another JSON Problem All of the class' teams group names (with student names) were typed into a .json file which we will use in an example shortly. The structure of the file is: { \"teams\": [ { \"name\": \"Catz\", \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"] }, { \"name\": \"Dawgs\", \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"] } ]} JSON What could would you write to tell how many students groups there are and how many students are actually in a group?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <pre><code class=\"hljs small-font\" data-trim>let data = {\n\"teams\": [\n  {\n    \"name\": \"Catz\",\n    \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"]\n  },\n  ...\n}\nlet numTeams = data.teams.length;  // numTeams === 44\nlet count = 0;\nfor (let i = 0; i &lt; data.teams.length; i++) {\n    count += data.teams[i].students.length;\n}</code></pre>\n            <p class=\"code-caption\">JSON</p>\n            <p>How many people do you think actually signed up for a group? <span class=\"fragment\">113</span></p>\n            <p>\n              P.S. Handy <a href=\"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en-US\" target=\"_blank\">JSON\n               Formatter</a> Chrome extension for viewing JSON</p>\n          </section>", "text": "let data = {\"teams\": [ { \"name\": \"Catz\", \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"] }, ...}let numTeams = data.teams.length; // numTeams === 44let count = 0;for (let i = 0; i < data.teams.length; i++) { count += data.teams[i].students.length;} JSON How many people do you think actually signed up for a group? 113 P.S. Handy JSON Formatter Chrome extension for viewing JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>Randomizer API</h2>\n            <p>The Randomizer (now) uses the Randomizer\n              <a href=\"../../tools/randomizer/randomizer.php\" target=\"_blank\">API</a> to get all of the team names and\n              members.\n            </p>\n            <p>\n              The Randomizer\n              <a href=\"../../tools/randomizer/docs\" target=\"_blank\">Documentation</a> can shed some light on how\n              to get the data we need from this API\n            </p>\n            <ul>\n              <li>\n                <a href=\"../../tools/randomizer/randomizer.php?mode=text\" target=\"_blank\">Text format</a>\n              </li>\n              <li>\n                <a href=\"../../tools/randomizer/randomizer.php?mode=json\" target=\"_blank\">JSON format</a>\n              </li>\n            </ul>\n          </section>", "text": "Randomizer API The Randomizer (now) uses the Randomizer API to get all of the team names and members. The Randomizer Documentation can shed some light on how to get the data we need from this API Text format JSON format", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>The <a href=\"../../tools/randomizer/randomizer.html\">CSE154 Randomizer</a></h2>\n            <p>But how do we get that information into our web page????</p>\n\n            <p>\n              <a href=\"../../tools/randomizer/randomizer.html\" target=\"_blank\">\n                <img class=\"simpleimg half-width\" src=\"hidden/images/randomizer.png\" alt=\"Randomizer screen shot\"></a>\n            </p>\n            <p>\n              (Click on the image and view page source on that page to see the example of the code...)\n            </p>\n          </section>", "text": "The CSE154 Randomizer But how do we get that information into our web page???? (Click on the image and view page source on that page to see the example of the code...)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>First attempt: hard code the data</h2>\n            <p>\n              Get the data from the server, add it to our .js file (loadTeamsTest), and then test our site\n              with this \"hard coded\" text.  We can ensure we are creating/removing our DOM\n              elements correctly this way!\n            </p>\n            <pre><code class=\"hljs small-font\" data-trim>function loadTeamsTest() {\n  data = {\n    \"teams\": [\n      {\n        \"name\": \"Catz\",\n        \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"]\n      },\n      {\n        \"name\": \"Dawgs\",\n        \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"]\n      }\n    ]\n  };\n  id(\"randomize\").disabled = false;\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p class=\"fragment\">\n              But what if the data changes frequently (i.e. we get Groupizer to work)?\n            </p>\n          </section>", "text": "First attempt: hard code the data Get the data from the server, add it to our .js file (loadTeamsTest), and then test our site with this \"hard coded\" text. We can ensure we are creating/removing our DOM elements correctly this way! function loadTeamsTest() { data = { \"teams\": [ { \"name\": \"Catz\", \"students\": [\"Jack\", \"Spot\", \"Whitney\", \"Charlie\"] }, { \"name\": \"Dawgs\", \"students\": [\"Mowgli\", \"Ruby\", \"Moss\"] } ] }; id(\"randomize\").disabled = false;} JS But what if the data changes frequently (i.e. we get Groupizer to work)?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>AJAX</h2>\n            <h3 class=\"fragment\">... to the rescue!!! </h3>\n            <h3 class=\"fragment\">But first some background...</h3>\n            <h3 class=\"fragment\">like why is it called AJAX???</h3>\n          </section>", "text": "AJAX ... to the rescue!!! But first some background... like why is it called AJAX???", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n              <h2>AJAX the \"old way\" (XML over HTTP)</h2>\n\n              <p>\n                A way to use Javascript to pull in more content from the server without\n                navigating the page to a new url.\n              </p>\n              <p>\n                We are showing you this for context only, <strong>DO NOT\n                USE the \"XML over HTTP\" method of AJAX calls in this class.</strong>\n                Read <a href=\"https://davidwalsh.name/fetch\"> todays reading</a> for why not.\n              </p>\n\n\n        <pre><code class=\"hljs\" data-trim>let xhr = new XMLHttpRequest();\nxhr.open(method, url, [async/sync]);\nxhr.onload = function() { /* handle success */ };\nxhr.onerror = function() { /* handle failure */ };\nxhr.send(); </code></pre>\n      <p class=\"code-caption\" data-trim>JS (template)</p>\n      <pre><code class=\"hljs\">let xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"data.txt\");\nxhr.onload = function() { alert(this.responseText); };\nxhr.onerror = function() { alert(\"ERROR!\"); };\nxhr.send();</code></pre>\n              <p class=\"code-caption\">JS (example)</p>\n\n          </section>", "text": "AJAX the \"old way\" (XML over HTTP) A way to use Javascript to pull in more content from the server without navigating the page to a new url. We are showing you this for context only, DO NOT USE the \"XML over HTTP\" method of AJAX calls in this class. Read todays reading for why not. let xhr = new XMLHttpRequest();xhr.open(method, url, [async/sync]);xhr.onload = function() { /* handle success */ };xhr.onerror = function() { /* handle failure */ };xhr.send(); JS (template) let xhr = new XMLHttpRequest();xhr.open(\"GET\", \"data.txt\");xhr.onload = function() { alert(this.responseText); };xhr.onerror = function() { alert(\"ERROR!\"); };xhr.send(); JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n              <dl>\n                  <dt>AJAX</dt>\n                  <dd>Asynchronous JavaScript and XML</dd>\n              </dl>\n              <p>\n                  The <code>XMLHttpRequest</code> object can be used synchronously or asynchronously.\n              </p>\n\n              <p>\n                  So this functionality could be called <em>S/AJAX</em> or\n                  <em>A/SJAX</em>. But AJAX has a nice ring to it.\n              </p>\n\n              <p>\n                  It's better to use async so that the page doesn't block waiting for the page to come back.\n              </p>\n              <p>\n                <strong>We will not use AJAX synchronously in this class. </strong>\n              </p>\n          </section>", "text": "AJAX Asynchronous JavaScript and XML The XMLHttpRequest object can be used synchronously or asynchronously. So this functionality could be called S/AJAX or A/SJAX. But AJAX has a nice ring to it. It's better to use async so that the page doesn't block waiting for the page to come back. We will not use AJAX synchronously in this class.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n                <dl>\n                    <dt>AJAX</dt>\n                    <dd>Asynchronous JavaScript and XML</dd>\n                </dl>\n\n                <p>\n                    the <code>XMLHttpRequest</code> object can be used to fetch anything that you\n                    can fetch with your browser.\n                </p>\n\n                <p>\n                    This includes XML (like in the name), but also JSON, HTML, plain text, media files.\n                </p>\n\n                <p>\n                    So it could be called AJAJ or AJAH or AJAT. But AJAX has a nice ring to it.\n                </p>\n            </section>", "text": "AJAX Asynchronous JavaScript and XML the XMLHttpRequest object can be used to fetch anything that you can fetch with your browser. This includes XML (like in the name), but also JSON, HTML, plain text, media files. So it could be called AJAJ or AJAH or AJAT. But AJAX has a nice ring to it.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>Lecture Activity</h2>\n          <p>Think about the activity on the worksheet as you are settingling into class</p>\n          <p>Talk with your neighbor if you have questions</p>\n          <div>\n            <pre><code class=\"hjls small-font\" data-trim>// What is the order the birds print out if the button is pressed after 3 seconds.\n// Note: the long-wait API delays for the number of seconds passed in to the query parameter.\nconst URL = \"https://courses.cs.washington.edu/courses/cse154/webservices/long-wait/long-wait.php\";\nwindow.addEventListener(\"load\", init);\n\nconsole.log(\"robin\");\n\nfunction init() {\n  fetch(URL + \"?delay=1\", {mode: 'no-cors'})\n    .then(checkStatus)\n    .then(() =&gt; {console.log(\"eagle\")})\n    .catch(console.error);\n  id(\"time-btn\").addEventListener(\"click\", clickIt);\n\n  console.log(\"heron\");\n}\n\nconsole.log(\"kestrel\");\n\nfunction clickIt() {\n  console.log(\"flicker\");\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n\n        </section>", "text": "Lecture Activity Think about the activity on the worksheet as you are settingling into class Talk with your neighbor if you have questions // What is the order the birds print out if the button is pressed after 3 seconds.// Note: the long-wait API delays for the number of seconds passed in to the query parameter.const URL = \"https://courses.cs.washington.edu/courses/cse154/webservices/long-wait/long-wait.php\";window.addEventListener(\"load\", init);console.log(\"robin\");function init() { fetch(URL + \"?delay=1\", {mode: 'no-cors'}) .then(checkStatus) .then(() => {console.log(\"eagle\")}) .catch(console.error); id(\"time-btn\").addEventListener(\"click\", clickIt); console.log(\"heron\");}console.log(\"kestrel\");function clickIt() { console.log(\"flicker\");} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 14: More AJAX and Fetch</h3>\n        </section>", "text": "CSE 154 Lecture 14: More AJAX and Fetch", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>Administrivia:</p>\n          <ul>\n            <li>HW3 out today, due 5/13</li>\n          </ul>\n          <p>Review AJAX <code>fetch</code> with JSON and text</p>\n          <p>Discuss synchronous vs asynchronous <code>fetch</code> calls</p>\n          <p>Local vs Remote servers</p>\n        </section>", "text": "Agenda Administrivia: HW3 out today, due 5/13 Review AJAX fetch with JSON and text Discuss synchronous vs asynchronous fetch calls Local vs Remote servers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Check for understanding</h2>\n          <p>Talk with your neighbor</p>\n          <ul>\n              <li>What is a AJAX? What does it stand for? </li>\n              <li>How is <code>fetch</code> related to AJAX? </li>\n              <li>What is a <code>Promise</code>? </li>\n              <li>What are the three states of a <code>Promise</code></li>\n              <li>How are <code>fetch</code> and <code>Promise</code> related?</li>\n          </ul>\n        </section>", "text": "Check for understanding Talk with your neighbor What is a AJAX? What does it stand for? How is fetch related to AJAX? What is a Promise? What are the three states of a Promise How are fetch and Promise related?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Poll</h2>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/XzIGPDAjEqtDJ00JrgdD3?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\">\n          </iframe>\n        </section>", "text": "Poll", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Review</h2>\n          <p>We initiate a <code>fetch</code> of a URL</p>\n          <p>A <code>fetch</code> returns a <code>Promise</code></p>\n          <p>Promises are good because... </p>\n          <ul>\n            <li>They help deal with code that has an uncertain outcome</li>\n            <li>They separate the completion of the fetch request from the page logic\n              <ul>\n                <li>\n                  We can reuse the same logic and handle completion in different\n                  ways (e.g. refactor the AJAX logic or the function to handle the response)\n                </li>\n              </ul>\n            </li>\n          </ul>\n      </section>", "text": "Review We initiate a fetch of a URL A fetch returns a Promise Promises are good because... They help deal with code that has an uncertain outcome They separate the completion of the fetch request from the page logic We can reuse the same logic and handle completion in different ways (e.g. refactor the AJAX logic or the function to handle the response)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>AKA Promise Pipeline</h2>\n        <img src=\"../lec13-ajax/hidden/images/fetchpipeline.png\" alt=\"Visual description of the fetch pipeline\">\n      </section>", "text": "AKA Promise Pipeline", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Restaurant Analogy</h2>\n        <a href=\"examples/pizza/pizza-solution.html\" target=\"_blank\">\n          <img class=\"no-space-bottom\" src=\"hidden/images/AJAXComicSmall.jpg\" alt=\"AJAX represented by a pizza comic\"></a>\n        <p class=\"small-font no-space-top\">AJAX/Pizza comic \u00a9\n        <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/staff/about-me/sven-hansen/index.html\">Sven Hansen</a></p>\n        <p>Let's practice fetch with our <a href=\"examples/pizza/pizza.html\" target=\"_blank\">Pizza</a> restaurant</p>\n      </section>", "text": "Restaurant Analogy AJAX/Pizza comic \u00a9 Sven Hansen Let's practice fetch with our Pizza restaurant", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Version 1.0: Text only format</h2>\n        <div class=\"side-by-side\">\n          <div class=\"space-right\">\n            <p>\n              Presume we have a file <code>\"pizza.txt\"</code> that contains a menu of pizzas, with\n              each type of pizza per line in the format:\n            </p>\n            <p><code>pizza-name|pizza-description</code></p>\n            <p>\n              You want to fetch this information and load it on the page with the function\n              <code>loadTextMenu</code> and you want to\n              handle errors with <code>handleRequestError</code>\n            </p>\n            <pre><code class=\"hjls\" data-trim>Roma Pesto|Sun dried tomato, ...\nMotor City Meatball|Meatballs, pepperoni, ...\nThe Favorite|Pepperoni, Italian sausage, ...</code></pre>\n            <p class=\"code-caption\">Text file</p>\n          </div>\n          <div class=\"fragment\">\n            <p>Answer...</p>\n            <pre><code class=\"hjls\" data-trim>function loadTextMenu() {\n  const URL = \"pizza.txt\";\n  fetch(URL)\n  .then(checkStatus)\n  .then(loadTextMenu)\n  .catch(handleRequestError);\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n        </div>\n      </section>", "text": "Version 1.0: Text only format Presume we have a file \"pizza.txt\" that contains a menu of pizzas, with each type of pizza per line in the format: pizza-name|pizza-description You want to fetch this information and load it on the page with the function loadTextMenu and you want to handle errors with handleRequestError Roma Pesto|Sun dried tomato, ...Motor City Meatball|Meatballs, pepperoni, ...The Favorite|Pepperoni, Italian sausage, ... Text file Answer... function loadTextMenu() { const URL = \"pizza.txt\"; fetch(URL) .then(checkStatus) .then(loadTextMenu) .catch(handleRequestError);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Parsing the data</h2>\n        <p>\n          Now we have to break up the data into Pizza and Description using\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a>,\n          a function which splits a String into an array of objects using the character passed to it\n           as the delimiter.\n         </p>\n         <pre><code class=\"hjls\" data-trim>let s1 = \"Hi There\";\nlet s1Split = s1.split(\" \");         // s1Split == [\"hi\", \"there\"]\nlet s2 = \"Who?Are?You?\";\nlet s2Split = s1.split(\"?\");         // s1Split == [\"Who\", \"Are\", \"You\"]\n\nlet pizzas = \"Roma Pesto|Sun dried tomato\\nMotor City Meatball|Meatballs\\nThe Favorite|Pepperoni\";\nlet menu = textMenu.split(\"\\n\");\n// menu is now an array of each name|description\nfor (let ii = 0; ii &lt; menu.length; ii++) {\n  // split again on the \"|\" character\n  let menuItem = menu[ii].split(\"|\");\n  // menuItem[0] has the name of the pizza\n  // menuItem[1] has the description of the pizza\n}</code></pre>\n         <p class=\"code-caption\">JS</p>\n       </section>", "text": "Parsing the data Now we have to break up the data into Pizza and Description using split, a function which splits a String into an array of objects using the character passed to it as the delimiter. let s1 = \"Hi There\";let s1Split = s1.split(\" \"); // s1Split == [\"hi\", \"there\"]let s2 = \"Who?Are?You?\";let s2Split = s1.split(\"?\"); // s1Split == [\"Who\", \"Are\", \"You\"]let pizzas = \"Roma Pesto|Sun dried tomato\\nMotor City Meatball|Meatballs\\nThe Favorite|Pepperoni\";let menu = textMenu.split(\"\\n\");// menu is now an array of each name|descriptionfor (let ii = 0; ii < menu.length; ii++) { // split again on the \"|\" character let menuItem = menu[ii].split(\"|\"); // menuItem[0] has the name of the pizza // menuItem[1] has the description of the pizza} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n           <h2>Version 2.0: JSON format</h2>\n           <div class=\"side-by-side\">\n             <div class=\"space-right\">\n               <p>\n                 Now let's assume we have <code>\"pizza.json\"</code> that contains a menu of pizzas,\n                 and other data, in the following format:\n               </p>\n               <pre><code class=\"hjls small-font\" data-trim>{\n  \"pizzaria\": \"Cottage Inn\",\n  \"location\": \"Ann Arbor, MI\",\n  \"pizzas\": [\n   {\n     \"name\": \"Roma Pesto\",\n     \"description\": \"Sun dried ...\"\n   },\n   {\n     \"name\": \"Motor City Meatball\",\n     \"description\": \"Meatballs, pepperoni, ...\"\n   },...</code></pre>\n               <p class=\"code-caption\">JSON</p>\n               <p>\n                 You want to fetch this information and load it on the page with the function\n                 <code>loadJSONMenu</code> and you want to\n                 handle errors with <code>handleRequestError</code>\n               </p>\n             </div>\n             <div class=\"fragment\">\n               <p>Answer...</p>\n               <pre><code class=\"hjls\" data-trim>function loadJSONMenu() {\n   const URL = \"pizza.json\";\n   fetch(URL)\n     .then(checkStatus)\n     .then(JSON.parse)\n     .then(loadJSONMenu)\n     .catch(handleRequestError);\n }</code></pre>\n             <p class=\"code-caption\">JS</p>\n             <p>There's no longer any need to parse/split the result in loadJSONMenu - why?</p>\n             <p class=\"fragment\">Because the data is well structured</p>\n\n           </div>\n         </div>\n       </section>", "text": "Version 2.0: JSON format Now let's assume we have \"pizza.json\" that contains a menu of pizzas, and other data, in the following format: { \"pizzaria\": \"Cottage Inn\", \"location\": \"Ann Arbor, MI\", \"pizzas\": [ { \"name\": \"Roma Pesto\", \"description\": \"Sun dried ...\" }, { \"name\": \"Motor City Meatball\", \"description\": \"Meatballs, pepperoni, ...\" },... JSON You want to fetch this information and load it on the page with the function loadJSONMenu and you want to handle errors with handleRequestError Answer... function loadJSONMenu() { const URL = \"pizza.json\"; fetch(URL) .then(checkStatus) .then(JSON.parse) .then(loadJSONMenu) .catch(handleRequestError); } JS There's no longer any need to parse/split the result in loadJSONMenu - why? Because the data is well structured", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n         <h2>From an API... </h2>\n         <p>\n           In module 4 we will learn how to write an API to send us this information\n           from a program running on the server instead of just requesting the files.\n         </p>\n         <div class=\"side-by-side\">\n           <div class=\"space-right\">\n             <pre><code class=\"hjls\" data-trim>const URL = \"pizza.php?\";\nfunction loadTextMenu() {\n   let url = URL + \"mode=text\";\n   fetch(url)\n    .then(checkStatus)\n    .then(loadTextMenu)\n    .catch(handleRequestError);\n }</code></pre>\n             <p class=\"code-caption\">JS</p>\n           </div>\n           <div>\n             <pre><code class=\"hjls\" data-trim>const URL = \"pizza.php?\";\n function loadJSONMenu() {\n   let url = URL + \"mode=json\";\n   fetch(URL)\n    .then(checkStatus)\n    .then(JSON.parse)\n    .then(loadJSONMenu)\n    .catch(handleRequestError);\n }</code></pre>\n           <p class=\"code-caption\">JS</p>\n         </div>\n       </div>\n       </section>", "text": "From an API... In module 4 we will learn how to write an API to send us this information from a program running on the server instead of just requesting the files. const URL = \"pizza.php?\";function loadTextMenu() { let url = URL + \"mode=text\"; fetch(url) .then(checkStatus) .then(loadTextMenu) .catch(handleRequestError); } JS const URL = \"pizza.php?\"; function loadJSONMenu() { let url = URL + \"mode=json\"; fetch(URL) .then(checkStatus) .then(JSON.parse) .then(loadJSONMenu) .catch(handleRequestError); } JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n         <h2>Back to back requests</h2>\n         <p>Once I've ordered the pizza, the chef in the kitchen has to go back and make the pizza.\n           This can take some time... but we can still work with our page!\n         </p>\n         <pre><code class=\"hjls\" data-trim>const URL = \"pizza.php?\";\nfunction orderPizza() {\n  let url = URL + \"mode=image\";\n  fetch(url)\n    .then(checkStatus)\n    .then(loadJSONMenu)\n    .catch(handleRequestError);\n}\n\n// The response is just a URL to load...\nfunction getPizza(responseText) {\n  id(\"response-message\").innerText = \"Here's your pizza!\";\n  id(\"pizza-img\").src=responseText;\n  id(\"pizza-img\").alt=\"Whole pizza\";\n  id(\"pizza-box\").classList.toggle(\"hidden\");\n}</code></pre>\n        <p class=\"code-caption\">JS</p>\n      </section>", "text": "Back to back requests Once I've ordered the pizza, the chef in the kitchen has to go back and make the pizza. This can take some time... but we can still work with our page! const URL = \"pizza.php?\";function orderPizza() { let url = URL + \"mode=image\"; fetch(url) .then(checkStatus) .then(loadJSONMenu) .catch(handleRequestError);}// The response is just a URL to load...function getPizza(responseText) { id(\"response-message\").innerText = \"Here's your pizza!\"; id(\"pizza-img\").src=responseText; id(\"pizza-img\").alt=\"Whole pizza\"; id(\"pizza-box\").classList.toggle(\"hidden\");} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Synchronous vs Asynchronous requests</h2>\n        <p>Let's play with the APOD example again</p>\n        <p><a href=\"examples/multiple-requests-with-apod/api-practice.html\" target=\"_blank\">\n          <img class=\"half-width\" src=\"hidden/images/multirequest.png\" alt=\"multirequest image\"></a>\n        </p>\n      </section>", "text": "Synchronous vs Asynchronous requests Let's play with the APOD example again", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Visualization of fetch calls</h2>\n        <div class=\"side-by-side\">\n          <div>\n            <img src=\"hidden/images/sync-async-guess.png\" alt=\"visualization of Synchronous/Asynchronous fetch calls to guess about \">\n            <p class=\"small-font\">Modified from <a href=\"https://www.quora.com/What-is-asynchronous-JavaScript-on-a-website\">Quora:\n              What is Asynchronous JavaScript on a Website</a></p>\n          </div>\n          <div class=\"one-third-width\">\n            <p>Which picture depicts \"synchronous\" fetch calls and which depicts \"asynchronous\"\n              fetch calls?</p>\n            <p>What is the total time it takes to do the 5 requests in each case?</p>\n          </div>\n        </div>\n      </section>", "text": "Visualization of fetch calls Modified from Quora: What is Asynchronous JavaScript on a Website Which picture depicts \"synchronous\" fetch calls and which depicts \"asynchronous\" fetch calls? What is the total time it takes to do the 5 requests in each case?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Visualization of fetch calls - answer</h2>\n        <img src=\"https://qph.fs.quoracdn.net/main-qimg-e464153a46ebfc0bbe9401ca39c31f68\" alt=\"visualization of Synchronous/Asynchronous fetch calls \">\n        <p class=\"small-font\">Original from <a href=\"https://www.quora.com/What-is-asynchronous-JavaScript-on-a-website\">Quora:\n          What is Asynchronous JavaScript on a Website</a></p>\n      </section>", "text": "Visualization of fetch calls - answer Original from Quora: What is Asynchronous JavaScript on a Website", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Answer to Lecture Activity</h2>\n        <div class=\"side-by-side\">\n          <div class=\"space-right two-thirds-width\">\n            <pre><code class=\"hjls small-font\" data-trim>const URL = \"https://courses.cs.washington.edu/courses/cse154/webservices/long-wait/long-wait.php\";\nwindow.addEventListener(\"load\", init);\n\nconsole.log(\"robin\");\n\nfunction init() {\n  fetch(URL + \"?delay=1\")\n    .then(checkStatus)\n    .then(() =&gt; { console.log(\"eagle\") })\n    .catch(console.error);\n  id(\"time-btn\").addEventListener(\"click\", clickIt);\n\n  console.log(\"heron\");\n}\n\nconsole.log(\"kestrel\");\n\nfunction clickIt() {\n  console.log(\"flicker\");\n}</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </div>\n          <div class=\"fragment\">\n            <p>robin</p>\n            <p>kestrel</p>\n            <p>heron</p>\n            <p>eagle</p>\n            <p>flicker</p>\n          </div>\n        </div>\n      </section>", "text": "Answer to Lecture Activity const URL = \"https://courses.cs.washington.edu/courses/cse154/webservices/long-wait/long-wait.php\";window.addEventListener(\"load\", init);console.log(\"robin\");function init() { fetch(URL + \"?delay=1\") .then(checkStatus) .then(() => { console.log(\"eagle\") }) .catch(console.error); id(\"time-btn\").addEventListener(\"click\", clickIt); console.log(\"heron\");}console.log(\"kestrel\");function clickIt() { console.log(\"flicker\");} JS robin kestrel heron eagle flicker", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Last notes: Local vs Remote Servers</h2>\n        <p>When you are working with the APIs for CP3 and HW3, you will be working\n          with a <em>remote</em> server - that is, a server that is not being \"hosted\" on your\n          own machine\n        </p>\n        <p>\n          In order for you to test your software easily, we are having you set up a\n          <em>local</em> server on your machine called <strong>MAMP</strong>\n        </p>\n        <ul>\n          <li>A local server is like you are ordering a kitchen in the same building as you. </li>\n          <li>\n            A remote server is as if you ordered the pizza from a shop and someone had to\n            deliver it to your house via the roads (internet)\n          </li>\n        </ul>\n        <p>You will especially need to run your code through your local server if you\n          run into a Cross Origin Request Sharing (CORS) error\n        </p>\n      </section>", "text": "Last notes: Local vs Remote Servers When you are working with the APIs for CP3 and HW3, you will be working with a remote server - that is, a server that is not being \"hosted\" on your own machine In order for you to test your software easily, we are having you set up a local server on your machine called MAMP A local server is like you are ordering a kitchen in the same building as you. A remote server is as if you ordered the pizza from a shop and someone had to deliver it to your house via the roads (internet) You will especially need to run your code through your local server if you run into a Cross Origin Request Sharing (CORS) error", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Common error with timers</h2>\n          <p>Common error: Not resetting the timer to null after <code>clearInterval</code>!</p>\n          <p>Your timer may not start again or you may wind up with a proliferation of timers</p>\n\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\n...\n\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId); // Do this first (don't forget)!!!\n    timerId = null; // Don't forget this!!!\n  }\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>What happens if you swap the <code>clearInterval(timerId)</code>/<code>timerId = null</code>? </p>\n          <p>Do you always need a timerId? (think about this on your own)</p>\n        </section>", "text": "Common error with timers Common error: Not resetting the timer to null after clearInterval! Your timer may not start again or you may wind up with a proliferation of timers let timerId = null; // stores ID of interval timer...function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); // Do this first (don't forget)!!! timerId = null; // Don't forget this!!! }} JS What happens if you swap the clearInterval(timerId)/timerId = null? Do you always need a timerId? (think about this on your own)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>More on <span id=\"rocket-h2\">Fat Arrow Functions</span></h2>\n\n          <button id=\"aka\" style=\"padding: 5px;\">Officially Known As...</button>\n          <div id=\"rocket-demo\" style=\"display: none\">\n          <h1>ROCKET SHIPS</h1>\n          <pre><code style=\"position: relative; width:100%; padding-top: 10px;\n          padding-bottom: 10px\"><span style=\"position:\n          absolute; font-size: 36pt\" id=\"rocket-ship\">=&gt;</span>\n</code></pre>\n          </div>\n        </section>", "text": "More on Fat Arrow Functions Officially Known As... ROCKET SHIPS =>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Fat arrow functions</h2>\n          <p>Fat arrow functions are just another way of writing an anonymous function.</p>\n          <pre><code class=\"hljs small-font\" data-trim>/* named function with one parameter that logs to the console. */\nfunction sayHello(you) {\n  console.log(\"Hello \" + you);\n}\n\n/* Equivalent function as an anonymous function */\n(you) =&gt; {\n  console.log(\"Hello \" + you);\n}\n\n/* Equivalent function with no parens because there is only 1 parameter */\nyou =&gt; {\n  console.log(\"Hello \" + you);\n}\n\n/* anonymous function with no parameters */\n() =&gt; {\n  console.log(\"Hello!\");\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Fat arrow functions Fat arrow functions are just another way of writing an anonymous function. /* named function with one parameter that logs to the console. */function sayHello(you) { console.log(\"Hello \" + you);}/* Equivalent function as an anonymous function */(you) => { console.log(\"Hello \" + you);}/* Equivalent function with no parens because there is only 1 parameter */you => { console.log(\"Hello \" + you);}/* anonymous function with no parameters */() => { console.log(\"Hello!\");} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Fat arrow function syntax</h2>\n          <p>Some sample basic syntax\n            (from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN</a>)</p>\n          <pre><code class=\"hljs\" data-trim>// General form with multiple parameters\n(param1, param2, \u2026, paramN) =&gt; { statements }\n\n// Multiple parameters and a return statement\n(param1, param2, \u2026, paramN) =&gt; { return expression; }\n// or ...\n(param1, param2, \u2026, paramN) =&gt; expression\n\n// Parentheses are optional when there's only one parameter name:\n(singleParam) =&gt; { statements }\nsingleParam =&gt; { statements }\n\n// The parameter list for a function with no parameters should\n// be written with a pair of parentheses.\n() =&gt; { statements }</code></pre>\n          <p class=\"code-caption\">JS (templates)</p>\n          <p>Note: the scoping of <code>this</code> is different with fat arrow functions that\n            traditional anonymous functions ()\n          </p>\n\n          </section>", "text": "Fat arrow function syntax Some sample basic syntax (from MDN) // General form with multiple parameters(param1, param2, \u2026, paramN) => { statements }// Multiple parameters and a return statement(param1, param2, \u2026, paramN) => { return expression; }// or ...(param1, param2, \u2026, paramN) => expression// Parentheses are optional when there's only one parameter name:(singleParam) => { statements }singleParam => { statements }// The parameter list for a function with no parameters should// be written with a pair of parentheses.() => { statements } JS (templates) Note: the scoping of this is different with fat arrow functions that traditional anonymous functions ()", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n            <h2>Examples </h2>\n            <pre><code class=\"hljs small-font\" data-trim>// Quick max and min function definitions\nlet max = (a, b) =&gt; a &gt; b ? a : b;\nlet min = (a, b) =&gt; a &lt; b ? a : b;\n\n// Array filtering\nlet arr = [1, 2, -1, 0, 3, 4, 6, 20];\nlet even = arr.filter(v =&gt; v % 2 == 0);    // [2, 0, 4, 6, 20]</code></pre>\n            <p class=\"code-caption\">JS</p>\n            <p>More information on <a href=\"https://codeburst.io/learn-understand-javascripts-filter-function-bde87bce206\"><code>filter</code></a></p>\n        </section>", "text": "Examples // Quick max and min function definitionslet max = (a, b) => a > b ? a : b;let min = (a, b) => a < b ? a : b;// Array filteringlet arr = [1, 2, -1, 0, 3, 4, 6, 20];let even = arr.filter(v => v % 2 == 0); // [2, 0, 4, 6, 20] JS More information on filter", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Fat arrow functions in CSE 154</h2>\n          <ul>\n            <li>\n              This information on the \"fat arrow\" notation was mostly \"FYI\" because you are\n              going to run in to them in documentation.\n            </li>\n            <li>\n              You may continue to use anonymous functions as taught previously\n              (<code>function() { }</code>) or use fat arrow functions as you feel\n              comfortable with them. You do NOT have to use fat arrow functions at all.\n           </li>\n           <li>\n             As always, we would prefer you be consistent in your usage of either regular\n             anonymous functions or fat arrow functions as that is good Code Quality\n           </li>\n           <li>\n             Remember to only use anonymous functions (in general) when you have a small number of\n             statements (&lt;= 3 ish) that won't need to be reused or duplicated anywhere.\n           </li>\n        </ul>\n      </section>", "text": "Fat arrow functions in CSE 154 This information on the \"fat arrow\" notation was mostly \"FYI\" because you are going to run in to them in documentation. You may continue to use anonymous functions as taught previously (function() { }) or use fat arrow functions as you feel comfortable with them. You do NOT have to use fat arrow functions at all. As always, we would prefer you be consistent in your usage of either regular anonymous functions or fat arrow functions as that is good Code Quality Remember to only use anonymous functions (in general) when you have a small number of statements (<= 3 ish) that won't need to be reused or duplicated anywhere.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>More on reading &amp; changing styles</h2>\n        </section>", "text": "More on reading & changing styles", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Review: Changing styles</h2>\n          <p>\n            Recall that the <code>.style</code> property of a DOM object lets you set any\n            CSS style for an element\n          </p>\n\n          <pre><code class=\"hljs\" data-trim>button { font-size: 16pt; }</code></pre>\n          <p class=\"code-caption\">CSS</p>\n\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"clickme\"&gt;Click Me&lt;/button&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>window.addEventListener(\"load\", initialize);\nfunction initialize() {\n  document.getElementById(\"clickme\").addEventListener(\"click\", biggerFont);\n};\nfunction biggerFont() {\n  let button = document.getElementById(\"clickme\");\n  let size = parseInt(button.style.fontSize); // size === 16pt to start\n  button.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"clickme\" style=\"font-size:16pt;\">Click Me</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n\n        </section>", "text": "Review: Changing styles Recall that the .style property of a DOM object lets you set any CSS style for an element button { font-size: 16pt; } CSS <button id=\"clickme\">Click Me</button> HTML window.addEventListener(\"load\", initialize);function initialize() { document.getElementById(\"clickme\").addEventListener(\"click\", biggerFont);};function biggerFont() { let button = document.getElementById(\"clickme\"); let size = parseInt(button.style.fontSize); // size === 16pt to start button.style.fontSize = (size + 4) + \"pt\"; // notice adding the units!} JS Click Me output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Problem with reading &amp; changing styles</h2>\n          <p><strong>Note!</strong> Be careful to </p>\n          <ul>\n            <li>remove the units from a  <code>.style</code> value before doing arithmetic on it. </li>\n            <li>add the units to numerical values (like <code>pt</code>, <code>px</code>,\n              <code>vw</code>, etc) when setting <code>.style</code> values.\n            </li>\n          </ul>\n          <p>\n            Also: <strong>a catch:</strong> you can only use this to read styles\n            that have been set with the DOM <code>.style</code>\n            earlier in the code <span class=\"small-font\">or with inline CSS which we don't\n              want you to do </span>.\n          </p>\n          <p>\n            You cannot read style properties set in the <code>.css</code> file using <code>.style</code>.\n          </p>\n\n        </section>", "text": "Problem with reading & changing styles Note! Be careful to remove the units from a .style value before doing arithmetic on it. add the units to numerical values (like pt, px, vw, etc) when setting .style values. Also: a catch: you can only use this to read styles that have been set with the DOM .style earlier in the code or with inline CSS which we don't want you to do . You cannot read style properties set in the .css file using .style.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Accessing elements' computed styles</h2>\n          <p>\n            <code>getComputedStyle</code> method of global\n            <code>window</code> object accesses existing styles\n          </p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>window.getComputedStyle(element).propertyName;</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>#river {\n  height: 600px;\n}</code></pre>\n          <p class=\"code-caption\">CSS (in bubbles.css)</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>&gt; let river = document.querySelector(\"river\");\n&gt; river.style.height;\n&gt; \"\"\n&gt; river.style.height = \"25%\";\n&gt; \"25%\"\n&gt; window.getComputedStyle(river).height;\n&gt; \"828.234px\"</code></pre>\n          <p class=\"code-caption\">JS Console Output</p>\n          <p class=\"small-font\">Thanks to Daniel H for the example</p>\n\n        </section>", "text": "Accessing elements' computed styles getComputedStyle method of global window object accesses existing styles window.getComputedStyle(element).propertyName; JS (template) #river { height: 600px;} CSS (in bubbles.css) > let river = document.querySelector(\"river\");> river.style.height;> \"\"> river.style.height = \"25%\";> \"25%\"> window.getComputedStyle(river).height;> \"828.234px\" JS Console Output Thanks to Daniel H for the example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Common bug: incorrect usage of existing styles</h2>\n          <p>\n            The following example attempts to add 100px to the top of <code>main</code>, but fails.\n          </p>\n          <p>\n            Consider the case when <code>main</code> has <code>top</code> set to \"200px\". Then\n            this code would update <code>style.top</code> to be the invalid value of \"200px100px\"\n          </p>\n          <pre><code class=\"hljs\" data-trim data-noescape>let main = document.getElementById(\"main\");\n<del class=\"bad\">main.style.top = window.getComputedStyle(main).top + 100 + \"px\";</del></code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>A corrected version:</p>\n          <pre><code class=\"hljs\" data-trim data-noescape>main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\";</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Common bug: incorrect usage of existing styles The following example attempts to add 100px to the top of main, but fails. Consider the case when main has top set to \"200px\". Then this code would update style.top to be the invalid value of \"200px100px\" let main = document.getElementById(\"main\");main.style.top = window.getComputedStyle(main).top + 100 + \"px\"; JS A corrected version: main.style.top = parseInt(window.getComputedStyle(main).top) + 100 + \"px\"; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>More on (programatic) DOM tree traversal and TextNodes</h2>\n        </section>", "text": "More on (programatic) DOM tree traversal and TextNodes", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Review: Creating New Nodes</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>document.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">createElement(\"tag\")</a></td>\n              <td>creates and returns a new empty DOM node representing an element of that type</td>\n            </tr>\n            <tr>\n              <td>document.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode\">createTextNode(\"text\")</a></td>\n              <td>creates and returns a text node containing given text</td>\n            </tr>\n          </table>\n          <pre><code class=\"hljs\" data-trim>// create a new &lt;h2&gt; node\nlet newHeading = document.createElement(\"h2\");\n// Add text to the node method 1\nlet newText = document.createTextNode(\"This is a new heading!\");\nnewHeading.appendChild(newText);\n// Add text to the node method 2\nnewHeading.innerText = \"This is a newer heading!\";\ndocument.querySelector(\"body\").appendChild(newHeading);</code></pre>\n\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Review: Creating New Nodes Name Description document.createElement(\"tag\") creates and returns a new empty DOM node representing an element of that type document.createTextNode(\"text\") creates and returns a text node containing given text // create a new <h2> nodelet newHeading = document.createElement(\"h2\");// Add text to the node method 1let newText = document.createTextNode(\"This is a new heading!\");newHeading.appendChild(newText);// Add text to the node method 2newHeading.innerText = \"This is a newer heading!\";document.querySelector(\"body\").appendChild(newHeading); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Traversing the DOM Tree Manually</h2>\n          <p>Every node's DOM object has the following (read-only) properties:</p>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name(s)</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild\" target=\"_blank\">firstChild</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild\" target=\"_blank\">lastChild</a>\n              </td>\n              <td>start/end of this node's list of children, may include text or comments</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild\" target=\"_blank\">firstElementChild</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild\" target=\"_blank\">lastElementChild</a>\n              </td>\n              <td>start/end of this node's list of children elements</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes\" target=\"_blank\">childNodes</a>\n              </td>\n              <td>array of all of this node's children</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling\" target=\"_blank\">nextSibling</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling\" target=\"_blank\">previousSibling</a>\n              </td>\n              <td>neighboring nodes with the same parent, including whitespace nodes</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling\" target=\"_blank\">nextElementSibling</a>,\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling\" target=\"_blank\">previousElementSibling</a>\n              </td>\n              <td>neighboring element nodes with the same parent, skipping whitespace nodes</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode\" target=\"_blank\">parentNode</a>\n              </td>\n              <td>the element that contains this node</td>\n            </tr>\n          </table>\n          <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\">Complete list of DOM node properties</a></p>\n          <p><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs\" target=\"_blank\">Browser incompatibility information</a> (IE6 sucks)</p>\n        </section>", "text": "Traversing the DOM Tree Manually Every node's DOM object has the following (read-only) properties: Name(s) Description firstChild, lastChild start/end of this node's list of children, may include text or comments firstElementChild, lastElementChild start/end of this node's list of children elements childNodes array of all of this node's children nextSibling, previousSibling neighboring nodes with the same parent, including whitespace nodes nextElementSibling, previousElementSibling neighboring element nodes with the same parent, skipping whitespace nodes parentNode the element that contains this node Complete list of DOM node properties Browser incompatibility information (IE6 sucks)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>DOM Tree Traversal Example</h2>\n          <div class=\"side-by-side\">\n            <div class=\"panel-left two-panel\">\n              <pre><code class=\"hljs\" data-trim>&lt;p id=\"foo\"&gt;\nThis is a paragraph of text with a\n&lt;a href=\"page.html\"&gt;link&lt;/a&gt;.\n&lt;/p&gt;</code></pre>\n              <p class=\"code-caption\">HTML</p>\n            </div>\n            <div class=\"panel-right two-panel no-margin-top\">\n              <p class=\"space-above\"><img src=\"hidden/dom-traversal-example.png\" alt=\"DOM traversal example\"></p>\n              <p>From <a href=\"http://www.webstepbook.com/supplements/slides/lecture16-dom_tree.shtml\">Web Step Book Supplemental resources</a></p>\n            </div>\n          </div>\n        </section>", "text": "DOM Tree Traversal Example <p id=\"foo\">This is a paragraph of text with a<a href=\"page.html\">link</a>.</p> HTML From Web Step Book Supplemental resources", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2>Element vs. Text Nodes</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;div&gt;\n  &lt;p id=\"foo\"&gt;\n    This is a paragraph of text with a\n    &lt;a href=\"page.html\"&gt;link&lt;/a&gt;.\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>Q: How many children does the <code>div</code> have?\n          <span class=\"fragment\">A: 3</span></p>\n          <ul class=\"fragment\">\n            <li>an element node representing the <code>&lt;p&gt;</code></li>\n            <li>two <em>text nodes</em> representing \"\\n\\t\" (before/after the paragraph)</li>\n          </ul>\n          <p>Q: How many children does the paragraph have? <span class=\"fragment\">A: 3 (text, a, text)</span></p>\n          <p>Q: The <code>a</code> tag? <span class=\"fragment\">A: 1 (text)</span></p>\n        </section>", "text": "Element vs. Text Nodes <div> <p id=\"foo\"> This is a paragraph of text with a <a href=\"page.html\">link</a>. </p></div> HTML Q: How many children does the div have? A: 3 an element node representing the <p> two text nodes representing \"\\n\\t\" (before/after the paragraph) Q: How many children does the paragraph have? A: 3 (text, a, text) Q: The a tag? A: 1 (text)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h3>Summarizing the Module Pattern</h3>\n\n          <pre><code class=\"hljs\" data-escape data-trim>(function() {\n  // module-global \"constants\" are declared immediately\n  // module-global \"variables\" are declared immediately\n\n  // any functions are declared, but not called!\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    // this should be the first time DOM is ever accessed\n  }\n\n  // other functions\n\n})();</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>0 global symbols!</p>\n          <p>With the module pattern, our functions/variables cannot be accessed/overriden externally by other scripts</p>\n        </section>", "text": "Summarizing the Module Pattern (function() { // module-global \"constants\" are declared immediately // module-global \"variables\" are declared immediately // any functions are declared, but not called! window.addEventListener(\"load\", init); function init() { // this should be the first time DOM is ever accessed } // other functions})(); JS 0 global symbols! With the module pattern, our functions/variables cannot be accessed/overriden externally by other scripts", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>CYU: Check Your Understanding (At Home)</h2>\n          <p>\n            On the back of your <a href=\"lec10-handout.pdf\">handout</a>, you can find 3 practice exercises\n            to check your understanding of scope, the module pattern, and when\n            the DOM is loaded. Make sure you understand how to answer each one!\n          </p>\n          <p>\n            You can find the commented HTML and 3 JS files for each question in \n            <a href=\"cyu/cyu-scoping.zip\">cyu-scoping.zip</a>\n          </p>\n        </section>", "text": "CYU: Check Your Understanding (At Home) On the back of your handout, you can find 3 practice exercises to check your understanding of scope, the module pattern, and when the DOM is loaded. Make sure you understand how to answer each one! You can find the commented HTML and 3 JS files for each question in cyu-scoping.zip", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section id=\"timer-slides\">\n\t\t\t\t\t<h2>Timers</h2>\n          <p>Delaying and/or repeating functions with <samp>setTimeout</samp>/<samp>setInterval</samp></p>\n        </section>", "text": "Timers Delaying and/or repeating functions with setTimeout/setInterval", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Counting Down: A Classic Loop Problem</h2>\n<pre><code class=\"hljs\">function startCountDown() {\n  let count = 10;\n  for (let i = count; i &gt; 0; i--) {\n    console.log(i + \"...\");\n  }\n  console.log(\"0!\");\n}\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <p>This prints a countdown to the console as soon as it's called. But what if we want to delay each line printed by 1 second?</p>\n        </section>", "text": "Counting Down: A Classic Loop Problemfunction startCountDown() { let count = 10; for (let i = count; i > 0; i--) { console.log(i + \"...\"); } console.log(\"0!\");} JS This prints a countdown to the console as soon as it's called. But what if we want to delay each line printed by 1 second?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h2>Setting a Timer</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td>setTimeout(responseFn, delayMS)</td>\n              <td>Arranges to call given function after given delayMS, returns timer id</td>\n            </tr>\n            <tr>\n              <td>setInterval(responseFn, delayMS)</td>\n              <td>Arranges to call function <strong>repeatedly</strong> every delayMS ms, returns timer id</td>\n            </tr>\n            <tr>\n              <td>\n                clearTimeout(timerID)\n                <br>\n                clearInterval(timerID)\n              </td>\n              <td>Stops the given timer</td>\n            </tr>\n          </table>\n          <div class=\"font-18pt\">\n          <p>\n            Both <code>setTimeout</code> and <code>setInterval</code> return an ID\n            representing the timer\n          </p>\n          <ul>\n            <li>This is not the same as a DOM id! It's a unique\n            identifier the <code>window</code> has access to in order to manage the\n            page timers.\n            </li>\n            <li>If you have access to the id, you can tell the window to stop\n            that particular timer by passing it to <code>clearTimeout</code>/<code>Interval</code> later\n            (e.g. when clicking a \"stop timer\" button)</li>\n          </ul>\n          </div>\n        </section>", "text": "Setting a Timer function description setTimeout(responseFn, delayMS) Arranges to call given function after given delayMS, returns timer id setInterval(responseFn, delayMS) Arranges to call function repeatedly every delayMS ms, returns timer id clearTimeout(timerID) clearInterval(timerID) Stops the given timer Both setTimeout and setInterval return an ID representing the timer This is not the same as a DOM id! It's a unique identifier the window has access to in order to manage the page timers. If you have access to the id, you can tell the window to stop that particular timer by passing it to clearTimeout/Interval later (e.g. when clicking a \"stop timer\" button)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Back to our Countdown Example</h2>\n          <div class=\"side-by-side\" style=\"align-items: center\">\n            <div style=\"flex-basis: 60%\">\n<pre><code class=\"hljs\">function startCountDown() {\n  let count = 10;\n  for (let i = count; i &gt; 0; i--) {\n    console.log(i + \"...\");\n  }\n  console.log(\"0!\");\n}\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n          </div>\n          <img width=\"30%\" style=\"align-self: start\" src=\"hidden/countdown-console.png\" alt=\"countdown in console\">\n        </div>\n        <p>\n          Recall that this function prints each line immediately (in order). If we want to\n          output each line <em>every 1 second (1000ms)</em>, what kind of timer should we\n          use?\n        </p>\n        </section>", "text": "Back to our Countdown Example function startCountDown() { let count = 10; for (let i = count; i > 0; i--) { console.log(i + \"...\"); } console.log(\"0!\");} JS Recall that this function prints each line immediately (in order). If we want to output each line every 1 second (1000ms), what kind of timer should we use?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Timed Countdown: An Initial Attempt</h2>\n<pre><code class=\"hljs\">function startCountDown() {\n  let i = 10;\n  setInterval(function() {\n    console.log(i + \"...\");\n    i--;\n  }, 1000);\n  console.log(\"0!\");\n}\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <p>What's wrong here? (remember we want a 10 second countdown printed to the\n        console)</p>\n        </section>", "text": "Timed Countdown: An Initial Attemptfunction startCountDown() { let i = 10; setInterval(function() { console.log(i + \"...\"); i--; }, 1000); console.log(\"0!\");} JS What's wrong here? (remember we want a 10 second countdown printed to the console)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>A Better Attempt</h3>\n<pre><code class=\"hljs\">function startCountDown() {\n  let i = 10;\n  setInterval(function() {\n    if (i === 0) {\n      console.log(\"0!\");\n    } else {\n      console.log(i + \"...\");\n      i--;\n    }\n  }, 1000);\n}\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <p>\n          This is closer! But there's still something wrong...\n        </p>\n        <p class=\"fragment\">Our timer won't stop when we reach 0!</p>\n        </section>", "text": "A Better Attemptfunction startCountDown() { let i = 10; setInterval(function() { if (i === 0) { console.log(\"0!\"); } else { console.log(i + \"...\"); i--; } }, 1000);} JS This is closer! But there's still something wrong... Our timer won't stop when we reach 0!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>A Solution</h3>\n<pre><code class=\"hljs\">function startCountDown() {\n  let i = 10;\n  let timerId = setInterval(function() {\n    if (i === 0) {\n      clearInterval(timerId);\n      // why *don't* we need to set timerId to null in this case?\n      console.log(\"0!\");\n    } else {\n      console.log(i + \"...\");\n      i--;\n    }\n  }, 1000);\n}\n</code></pre>\n        <p class=\"code-caption\">JS</p>\n        <p>\n        This is a working solution! When <code>startCountDown</code> is called, we assign\n        a new interval to our timer and start a 1-second countdown at 10.\n        </p>\n        <p>\n        When we reach 0,\n        we need to clear the interval from the window's tasks \n        </p>\n        </section>", "text": "A Solutionfunction startCountDown() { let i = 10; let timerId = setInterval(function() { if (i === 0) { clearInterval(timerId); // why *don't* we need to set timerId to null in this case? console.log(\"0!\"); } else { console.log(i + \"...\"); i--; } }, 1000);} JS This is a working solution! When startCountDown is called, we assign a new interval to our timer and start a 1-second countdown at 10. When we reach 0, we need to clear the interval from the window's tasks", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h3>Passing Additional Parameters to setTimeout/setInterval</h3>\n          <pre><code class=\"hljs\" data-trim>function delayedMultiply() {\n  // 6 and 7 are passed to multiply when timer goes off\n  setTimeout(multiply, 2000, 6, 7);\n}\n\nfunction multiply(a, b) {\n  alert(a * b);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <div class=\"output\">\n            <button id=\"demo-btn3\">Click me!</button>\n          </div>\n          <p>Any parameters after the delay are eventually passed to the timer function</p>\n          <ul>\n            <li>Doesn't work in IE; must create an intermediate (anonymous) function to pass the parameters</li>\n          </ul>\n          <p>Why not just write this?</p>\n          <pre><code class=\"hljs\" data-trim>setTimeout(multiply(6 * 7), 2000);</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Passing Additional Parameters to setTimeout/setInterval function delayedMultiply() { // 6 and 7 are passed to multiply when timer goes off setTimeout(multiply, 2000, 6, 7);}function multiply(a, b) { alert(a * b);} JS Click me! Any parameters after the delay are eventually passed to the timer function Doesn't work in IE; must create an intermediate (anonymous) function to pass the parameters Why not just write this? setTimeout(multiply(6 * 7), 2000); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <section>\n          <h2><code>setTimeout</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim>function initialize() {\n  id(\"demo-btn\").addEventListener(\"click\", delayedMessage);\n}\n\nfunction delayedMessage() {\n  id(\"output-text\").innerText = \"Wait for it...\";\n  setTimeout(sayHello, 3000);\n}\n\nfunction sayHello() { // called when the timer goes off\n  id(\"output-text\").innerText = \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <div class=\"output\">\n            <button id=\"demo-btn\">Click me!</button>\n            <span id=\"output-text\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/settimeout-example.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n      \n\n       <section>\n         <section>\n          <h2><code>setInterval</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hljs\" data-trim>let timerId = null; // stores ID of interval timer\nfunction repeatedMessage() {\n  timerId = setInterval(sayHello, 1000);\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn2\">Click me!</button>\n            <span id=\"output-text2\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/setinterval-example.html\" target=\"_blank\">full example page</a>)</p>\n          </div>\n          <p>More details on <code>timerId</code> variable on slide below</p>\n        </section>\n        <section>\n          <h3>Motivating the <code>timerId</code> variable</h3>\n          <ul class=\"font-20pt\">\n            <li>\n              We sometimes need to keep track of our timer(s) when managing them between\n              functions so we can use <code>clearInterval/clearTimeout</code> or know if\n              we have a timer already running on our page.\n            </li>\n            <li>\n              When we can't keep track of them as local variables, it is good\n              practice to store them as module-global variables (within the scope of the\n              module pattern, but accessible to all functions in your program).\n            </li>\n            <li>\n              These examples will assume we are writing inside a module pattern for\n              brevity, but you can refer to the full examples (linked on slides).\n            </li>\n          </ul>\n        </section>\n       </section>\n\n        <section>\n          <h2><code>clearInterval</code> Example</h2>\n          <pre><code>&lt;button id=\"toggle-btn\"&gt;Start/Stop&lt;button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\nfunction initialize() {\n  id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);\n}\n\n// 1. What does this function do?\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId);\n    timerId = null; // 2. Why is this line important?\n    // 3. What happens if you swap the two lines above?\n  }\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn-toggle\">Start/Stop</button>\n            <span id=\"output-text-toggle\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/toggle-interval.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n\n        <section>\n\t\t\t\t\t<h2>Common Timer Errors</h2>\n          <p>Many students mistakenly write <code>()</code> when passing the function</p>\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">setTimeout(sayHello(), 2000);</del>\nsetTimeout(sayHello, 2000);\n\n<del class=\"bad\">setTimeout(multiply(num1 * num2), 2000);</del>\nsetTimeout(sayHello, 2000, num1, num2);</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>What does it actually do if you have the <code>()</code>?</p>\n          <ul class=\"answer-list\">\n            <li class=\"answer\">It calls the function immediately, rather than waiting the 2000ms!</li>\n          </ul>\n        </section>\n        <section>\n          <h2>Practice: Returning to the Mystery Box</h2>\n          <p>\n              How can we use timers to add animation to the Mystery Box exercise from \n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/section05/slides/#/13\">Section\n                5</a>?\n          </p>\n          <p>\n            <a href=\"examples/mystery-box-animated.zip\">mystery-box-animated.zip</a> lecture code (finish the\n            TODO in <a href=\"examples/mystery-box-animated/mystery-box.js\">mystery-box.js</a> to animate the box!)\n          </p>\n        </section>\n\n        <section>\n\n          <h2>Summary</h2>\n          <p>\n          When you want to call a function after a specified delay in time, use\n          <code>setTimeout</code>.\n          </p>\n          <p>\n            When you want to call a function <em>repeatedly</em> every X seconds, use\n            <code>setInterval</code> (though <a href=\"https://javascript.info/settimeout-setinterval#recursive-settimeout\" target=\"_blank\">you can also</a> use <code>setTimeout</code> recursively!)</p>\n          \n          <p>\n            For both types of timers, if you want to stop the delay/interval you'll need a variable\n            to keep track of the timer id (returned\n            by both functions) to pass to <code>clearTimeout</code>/<code>clearInterval</code> \n          </p>\n        </section>\n\t\t</div>\n\n  <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n  <script src=\"../../site/reveal/js/reveal.js\"></script>\n  <script src=\"timer-slides.js\"></script>\n\n  <script>\n    Reveal.initialize({\n      controls: true,\n      progress: true,\n      history: true,\n      center: true,\n\n      transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n      // More info https://github.com/hakimel/reveal.js#dependencies\n      dependencies: [{\n          src: '../../site/reveal/lib/js/classList.js',\n          condition: function() {\n            return !document.body.classList;\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/marked.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/markdown.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/highlight/highlight.pack.js',\n          async: true,\n          callback: function() {\n            hljs.initHighlightingOnLoad();\n          }\n        },\n        { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n        { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n        { src: '../../site/reveal/plugin/search/search.js', async: true },\n        { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n      ]\n    });\n  </script>\n</div></section></div></div></section></section>", "text": "setTimeout Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML function initialize() { id(\"demo-btn\").addEventListener(\"click\", delayedMessage);}function delayedMessage() { id(\"output-text\").innerText = \"Wait for it...\"; setTimeout(sayHello, 3000);}function sayHello() { // called when the timer goes off id(\"output-text\").innerText = \"Hello!\";} JS Click me! output (full example page) setInterval Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML let timerId = null; // stores ID of interval timerfunction repeatedMessage() { timerId = setInterval(sayHello, 1000);}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Click me! output (full example page) More details on timerId variable on slide below Motivating the timerId variable We sometimes need to keep track of our timer(s) when managing them between functions so we can use clearInterval/clearTimeout or know if we have a timer already running on our page. When we can't keep track of them as local variables, it is good practice to store them as module-global variables (within the scope of the module pattern, but accessible to all functions in your program). These examples will assume we are writing inside a module pattern for brevity, but you can refer to the full examples (linked on slides). clearInterval Example <button id=\"toggle-btn\">Start/Stop<button> HTML let timerId = null; // stores ID of interval timerfunction initialize() { id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);}// 1. What does this function do?function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); timerId = null; // 2. Why is this line important? // 3. What happens if you swap the two lines above? }}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Start/Stop output (full example page) \t\t\t\t\tCommon Timer Errors Many students mistakenly write () when passing the function setTimeout(sayHello(), 2000);setTimeout(sayHello, 2000);setTimeout(multiply(num1 * num2), 2000);setTimeout(sayHello, 2000, num1, num2); JS What does it actually do if you have the ()? It calls the function immediately, rather than waiting the 2000ms! Practice: Returning to the Mystery Box How can we use timers to add animation to the Mystery Box exercise from Section 5? mystery-box-animated.zip lecture code (finish the TODO in mystery-box.js to animate the box!) Summary When you want to call a function after a specified delay in time, use setTimeout. When you want to call a function repeatedly every X seconds, use setInterval (though you can also use setTimeout recursively!) For both types of timers, if you want to stop the delay/interval you'll need a variable to keep track of the timer id (returned by both functions) to pass to clearTimeout/clearInterval \t\t Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [{ src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2><code>setTimeout</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim>function initialize() {\n  id(\"demo-btn\").addEventListener(\"click\", delayedMessage);\n}\n\nfunction delayedMessage() {\n  id(\"output-text\").innerText = \"Wait for it...\";\n  setTimeout(sayHello, 3000);\n}\n\nfunction sayHello() { // called when the timer goes off\n  id(\"output-text\").innerText = \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <div class=\"output\">\n            <button id=\"demo-btn\">Click me!</button>\n            <span id=\"output-text\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/settimeout-example.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n      \n\n       <section>\n         <section>\n          <h2><code>setInterval</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hljs\" data-trim>let timerId = null; // stores ID of interval timer\nfunction repeatedMessage() {\n  timerId = setInterval(sayHello, 1000);\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn2\">Click me!</button>\n            <span id=\"output-text2\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/setinterval-example.html\" target=\"_blank\">full example page</a>)</p>\n          </div>\n          <p>More details on <code>timerId</code> variable on slide below</p>\n        </section>\n        <section>\n          <h3>Motivating the <code>timerId</code> variable</h3>\n          <ul class=\"font-20pt\">\n            <li>\n              We sometimes need to keep track of our timer(s) when managing them between\n              functions so we can use <code>clearInterval/clearTimeout</code> or know if\n              we have a timer already running on our page.\n            </li>\n            <li>\n              When we can't keep track of them as local variables, it is good\n              practice to store them as module-global variables (within the scope of the\n              module pattern, but accessible to all functions in your program).\n            </li>\n            <li>\n              These examples will assume we are writing inside a module pattern for\n              brevity, but you can refer to the full examples (linked on slides).\n            </li>\n          </ul>\n        </section>\n       </section>\n\n        <section>\n          <h2><code>clearInterval</code> Example</h2>\n          <pre><code>&lt;button id=\"toggle-btn\"&gt;Start/Stop&lt;button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\nfunction initialize() {\n  id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);\n}\n\n// 1. What does this function do?\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId);\n    timerId = null; // 2. Why is this line important?\n    // 3. What happens if you swap the two lines above?\n  }\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn-toggle\">Start/Stop</button>\n            <span id=\"output-text-toggle\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/toggle-interval.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n\n        <section>\n\t\t\t\t\t<h2>Common Timer Errors</h2>\n          <p>Many students mistakenly write <code>()</code> when passing the function</p>\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">setTimeout(sayHello(), 2000);</del>\nsetTimeout(sayHello, 2000);\n\n<del class=\"bad\">setTimeout(multiply(num1 * num2), 2000);</del>\nsetTimeout(sayHello, 2000, num1, num2);</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>What does it actually do if you have the <code>()</code>?</p>\n          <ul class=\"answer-list\">\n            <li class=\"answer\">It calls the function immediately, rather than waiting the 2000ms!</li>\n          </ul>\n        </section>\n        <section>\n          <h2>Practice: Returning to the Mystery Box</h2>\n          <p>\n              How can we use timers to add animation to the Mystery Box exercise from \n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/section05/slides/#/13\">Section\n                5</a>?\n          </p>\n          <p>\n            <a href=\"examples/mystery-box-animated.zip\">mystery-box-animated.zip</a> lecture code (finish the\n            TODO in <a href=\"examples/mystery-box-animated/mystery-box.js\">mystery-box.js</a> to animate the box!)\n          </p>\n        </section>\n\n        <section>\n\n          <h2>Summary</h2>\n          <p>\n          When you want to call a function after a specified delay in time, use\n          <code>setTimeout</code>.\n          </p>\n          <p>\n            When you want to call a function <em>repeatedly</em> every X seconds, use\n            <code>setInterval</code> (though <a href=\"https://javascript.info/settimeout-setinterval#recursive-settimeout\" target=\"_blank\">you can also</a> use <code>setTimeout</code> recursively!)</p>\n          \n          <p>\n            For both types of timers, if you want to stop the delay/interval you'll need a variable\n            to keep track of the timer id (returned\n            by both functions) to pass to <code>clearTimeout</code>/<code>clearInterval</code> \n          </p>\n        </section>\n\t\t</div>\n\n  <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n  <script src=\"../../site/reveal/js/reveal.js\"></script>\n  <script src=\"timer-slides.js\"></script>\n\n  <script>\n    Reveal.initialize({\n      controls: true,\n      progress: true,\n      history: true,\n      center: true,\n\n      transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n      // More info https://github.com/hakimel/reveal.js#dependencies\n      dependencies: [{\n          src: '../../site/reveal/lib/js/classList.js',\n          condition: function() {\n            return !document.body.classList;\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/marked.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/markdown.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/highlight/highlight.pack.js',\n          async: true,\n          callback: function() {\n            hljs.initHighlightingOnLoad();\n          }\n        },\n        { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n        { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n        { src: '../../site/reveal/plugin/search/search.js', async: true },\n        { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n      ]\n    });\n  </script>\n</div></section></div></div></section>", "text": "setTimeout Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML function initialize() { id(\"demo-btn\").addEventListener(\"click\", delayedMessage);}function delayedMessage() { id(\"output-text\").innerText = \"Wait for it...\"; setTimeout(sayHello, 3000);}function sayHello() { // called when the timer goes off id(\"output-text\").innerText = \"Hello!\";} JS Click me! output (full example page) setInterval Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML let timerId = null; // stores ID of interval timerfunction repeatedMessage() { timerId = setInterval(sayHello, 1000);}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Click me! output (full example page) More details on timerId variable on slide below Motivating the timerId variable We sometimes need to keep track of our timer(s) when managing them between functions so we can use clearInterval/clearTimeout or know if we have a timer already running on our page. When we can't keep track of them as local variables, it is good practice to store them as module-global variables (within the scope of the module pattern, but accessible to all functions in your program). These examples will assume we are writing inside a module pattern for brevity, but you can refer to the full examples (linked on slides). clearInterval Example <button id=\"toggle-btn\">Start/Stop<button> HTML let timerId = null; // stores ID of interval timerfunction initialize() { id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);}// 1. What does this function do?function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); timerId = null; // 2. Why is this line important? // 3. What happens if you swap the two lines above? }}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Start/Stop output (full example page) \t\t\t\t\tCommon Timer Errors Many students mistakenly write () when passing the function setTimeout(sayHello(), 2000);setTimeout(sayHello, 2000);setTimeout(multiply(num1 * num2), 2000);setTimeout(sayHello, 2000, num1, num2); JS What does it actually do if you have the ()? It calls the function immediately, rather than waiting the 2000ms! Practice: Returning to the Mystery Box How can we use timers to add animation to the Mystery Box exercise from Section 5? mystery-box-animated.zip lecture code (finish the TODO in mystery-box.js to animate the box!) Summary When you want to call a function after a specified delay in time, use setTimeout. When you want to call a function repeatedly every X seconds, use setInterval (though you can also use setTimeout recursively!) For both types of timers, if you want to stop the delay/interval you'll need a variable to keep track of the timer id (returned by both functions) to pass to clearTimeout/clearInterval \t\t Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [{ src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n         <section>\n          <h2><code>setInterval</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hljs\" data-trim>let timerId = null; // stores ID of interval timer\nfunction repeatedMessage() {\n  timerId = setInterval(sayHello, 1000);\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn2\">Click me!</button>\n            <span id=\"output-text2\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/setinterval-example.html\" target=\"_blank\">full example page</a>)</p>\n          </div>\n          <p>More details on <code>timerId</code> variable on slide below</p>\n        </section>\n        <section>\n          <h3>Motivating the <code>timerId</code> variable</h3>\n          <ul class=\"font-20pt\">\n            <li>\n              We sometimes need to keep track of our timer(s) when managing them between\n              functions so we can use <code>clearInterval/clearTimeout</code> or know if\n              we have a timer already running on our page.\n            </li>\n            <li>\n              When we can't keep track of them as local variables, it is good\n              practice to store them as module-global variables (within the scope of the\n              module pattern, but accessible to all functions in your program).\n            </li>\n            <li>\n              These examples will assume we are writing inside a module pattern for\n              brevity, but you can refer to the full examples (linked on slides).\n            </li>\n          </ul>\n        </section>\n       </section>", "text": "setInterval Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML let timerId = null; // stores ID of interval timerfunction repeatedMessage() { timerId = setInterval(sayHello, 1000);}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Click me! output (full example page) More details on timerId variable on slide below Motivating the timerId variable We sometimes need to keep track of our timer(s) when managing them between functions so we can use clearInterval/clearTimeout or know if we have a timer already running on our page. When we can't keep track of them as local variables, it is good practice to store them as module-global variables (within the scope of the module pattern, but accessible to all functions in your program). These examples will assume we are writing inside a module pattern for brevity, but you can refer to the full examples (linked on slides).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2><code>setInterval</code> Example</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n&lt;span id=\"output-text\"&gt;&lt;/span&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hljs\" data-trim>let timerId = null; // stores ID of interval timer\nfunction repeatedMessage() {\n  timerId = setInterval(sayHello, 1000);\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn2\">Click me!</button>\n            <span id=\"output-text2\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/setinterval-example.html\" target=\"_blank\">full example page</a>)</p>\n          </div>\n          <p>More details on <code>timerId</code> variable on slide below</p>\n        </section>", "text": "setInterval Example <button id=\"demo-btn\">Click me!</button><span id=\"output-text\"></span> HTML let timerId = null; // stores ID of interval timerfunction repeatedMessage() { timerId = setInterval(sayHello, 1000);}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Click me! output (full example page) More details on timerId variable on slide below", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h3>Motivating the <code>timerId</code> variable</h3>\n          <ul class=\"font-20pt\">\n            <li>\n              We sometimes need to keep track of our timer(s) when managing them between\n              functions so we can use <code>clearInterval/clearTimeout</code> or know if\n              we have a timer already running on our page.\n            </li>\n            <li>\n              When we can't keep track of them as local variables, it is good\n              practice to store them as module-global variables (within the scope of the\n              module pattern, but accessible to all functions in your program).\n            </li>\n            <li>\n              These examples will assume we are writing inside a module pattern for\n              brevity, but you can refer to the full examples (linked on slides).\n            </li>\n          </ul>\n        </section>", "text": "Motivating the timerId variable We sometimes need to keep track of our timer(s) when managing them between functions so we can use clearInterval/clearTimeout or know if we have a timer already running on our page. When we can't keep track of them as local variables, it is good practice to store them as module-global variables (within the scope of the module pattern, but accessible to all functions in your program). These examples will assume we are writing inside a module pattern for brevity, but you can refer to the full examples (linked on slides).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h1>CSE 154</h1>\n\t\t\t\t\t<h3>Lecture 16: Form Submission and Validation Methods</h3>\n\t\t\t\t</section>", "text": "CSE 154\t\t\t\t\tLecture 16: Form Submission and Validation Methods", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>Wrapping up Module 3 material</p>\n          <p>HW3 Milestone is due tonight (lock date also tonight)</p>\n          <p>Exploration Session <strong>Today</strong>!</p>\n        </section>", "text": "Agenda Wrapping up Module 3 material HW3 Milestone is due tonight (lock date also tonight) Exploration Session Today!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>Review: When to use GET vs. POST</h2>\n          <p>GET</p>\n          <ul>\n            <li>Requesting data from a server using filters (URL parameters)</li>\n            <li>Should never be used when dealing with sensitive data</li>\n            <li>Can be cached and bookmarked, remains in browser history</li>\n            <li>Examples: search queries, retrieving initial page content\n          </li></ul>\n          <p>POST</p>\n          <ul>\n            <li>Data sent in the HTTP message body, not the URL</li>\n            <li>Not cached or bookmarked, no restrictions on data length</li>\n            <li>Examples: Signing up, logging in, sending messages to a blog, etc.</li>\n          </ul>\n          <p>These POST examples are commonly used with forms!</p>\n        </section>", "text": "Review: When to use GET vs. POST GET Requesting data from a server using filters (URL parameters) Should never be used when dealing with sensitive data Can be cached and bookmarked, remains in browser history Examples: search queries, retrieving initial page content POST Data sent in the HTTP message body, not the URL Not cached or bookmarked, no restrictions on data length Examples: Signing up, logging in, sending messages to a blog, etc. These POST examples are commonly used with forms!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>Posting data with Forms</h2>\n          <p>There are two ways you'll commonly see forms used with POST</p>\n          <ul>\n            <li>Older: With method/action attributes in HTML form tag</li>\n            <li>Better: With JS using validation and AJAX</li>\n          </ul>\n        </section>", "text": "Posting data with Forms There are two ways you'll commonly see forms used with POST Older: With method/action attributes in HTML form tag Better: With JS using validation and AJAX", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Posting with method/action attributes in &lt;form&gt; tag</h3>\n          <pre><code data-trim=\"\" class=\"font-14pt hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form id=\"input-form\" method=\"post\" action=\"submitter.php\"</span>&gt;</span>\n  City: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"city\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>/ &gt;</span>\n  State: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"state\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /&gt;</span>\n  ZIP: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"zip\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"submit-btn\"</span>&gt;</span>Submit!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n          <p class=\"code-caption\">HTML</p>\n            <p>\n            As soon as the submit button is clicked on <a href=\"example/form-post-html.html\">this page</a>, \n            the data is sent to the web service\n            (submitter.php) and the page is refreshed with the response (sometimes redirecting).\n            </p>\n            <p>This is becoming less common because we lose the asynchronous features of requests.</p>\n        </section>", "text": "Posting with method/action attributes in <form> tag <form id=\"input-form\" method=\"post\" action=\"submitter.php\"> City: <input name=\"city\" type=\"text\"/ > State: <input name=\"state\" type=\"text\" /> ZIP: <input name=\"zip\" type=\"number\" /> <button id=\"submit-btn\">Submit!</button></form> HTML As soon as the submit button is clicked on this page, the data is sent to the web service (submitter.php) and the page is refreshed with the response (sometimes redirecting). This is becoming less common because we lose the asynchronous features of requests.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Approach 2: Posting data through JS/AJAX</h3>\n          <pre><code data-trim=\"\" class=\"font-14pt hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form id=\"input-form\"</span>&gt;</span>\n  City: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"city\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>/ &gt;</span>\n  State: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"state\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /&gt;</span>\n  ZIP: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"zip\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"submit-btn\"</span>&gt;</span>Submit!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\" id=\"form-example-0\">\n            <pre><code class=\"hljs font-14pt\">let url = \"submitter.php\";\nlet data = new FormData(id(\"input-form\"));\nfetch(url, { method : \"POST\", body : data })\n  .then(checkStatus)\n  .then(...)\n  .catch(...)</code></pre>\n<p class=\"code-caption\">JS</p>\n          </div>\n          <p>Compare this new submit behavior <a href=\"examples/form-post-ajax.html\">here</a>.</p>\n          <p>What do you think are the trade-offs between the two approaches?</p>\n        </section>", "text": "Approach 2: Posting data through JS/AJAX <form id=\"input-form\"> City: <input name=\"city\" type=\"text\"/ > State: <input name=\"state\" type=\"text\" /> ZIP: <input name=\"zip\" type=\"number\" /> <button id=\"submit-btn\">Submit!</button></form> HTML let url = \"submitter.php\";let data = new FormData(id(\"input-form\"));fetch(url, { method : \"POST\", body : data }) .then(checkStatus) .then(...) .catch(...)JS Compare this new submit behavior here. What do you think are the trade-offs between the two approaches?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Approach 2: Requires Preventing Default Submit Behavior</h3>\n          <p>\n            When an input is in a form along with a button, clicking the button\n            automatically verifies the input and does a POST request.\n            If you are not sending a POST form, you may find it helpful to use\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault\">preventDefault</a>\n            to override default form submission behavior (used in previous example).\n          </p>\n            <pre><code class=\"hljs font-14pt\">function init() {\n  id(\"input-form\").addEventListener(\"submit\", function(e) {\n    // Fires when submit event happens on form\n    // If we've gotten in here, all HTML5 validation checks have passed\n    e.preventDefault(); // prevent default behavior of submit (page refresh)\n    submitRequest(); // do more validation with JS and then fetch with FormData\n  });\n  // rest of code</code></pre>\n<p class=\"code-caption\">JS</p>\n\n        </section>", "text": "Approach 2: Requires Preventing Default Submit Behavior When an input is in a form along with a button, clicking the button automatically verifies the input and does a POST request. If you are not sending a POST form, you may find it helpful to use preventDefault to override default form submission behavior (used in previous example). function init() { id(\"input-form\").addEventListener(\"submit\", function(e) { // Fires when submit event happens on form // If we've gotten in here, all HTML5 validation checks have passed e.preventDefault(); // prevent default behavior of submit (page refresh) submitRequest(); // do more validation with JS and then fetch with FormData }); // rest of codeJS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Validation with HTML/CSS/JS</h3>\n          <p>\n            Many websites offer features that allow users to interact with the page and\n            request/submit data to servers. Unfortunately, not all users will behave as expected.\n          </p>\n          <p>\n            Take a look at your handout and talk with your neighbors to answer the questions\n            (handout also provided <a href=\"lec16-activity.pdf\" target=\"_blank\">here</a>).\n          </p>\n        </section>", "text": "Validation with HTML/CSS/JS Many websites offer features that allow users to interact with the page and request/submit data to servers. Unfortunately, not all users will behave as expected. Take a look at your handout and talk with your neighbors to answer the questions (handout also provided here).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n\t\t\t\t\t<h2>User Input Validation</h2>\n          <p>\n            <strong>User input validation</strong> is the process of ensuring that any user input is\n            well-formed and correct (valid).\n          </p>\n          <p>\n            Q: What are some examples of input validation you came up with?\n          </p>\n          <ul>\n            <li class=\"fragment\">Preventing blank values (e-mail address)</li>\n            <li class=\"fragment\">\n              Verifying the type of values (e.g. integer, real number, currency, phone number,\n              Social Security Number, postal address, email address, data, credit card number, ...)\n            </li>\n            <li class=\"fragment\">\n              Verifying the format and range of values (ZIP code must be a 5-digit integer)\n            </li>\n            <li class=\"fragment\">\n              Extra layer of confirmation (e.g. user types email twice, and the two must match)\n            </li>\n          </ul>\n\t\t\t\t</section>", "text": "User Input Validation User input validation is the process of ensuring that any user input is well-formed and correct (valid). Q: What are some examples of input validation you came up with? Preventing blank values (e-mail address) Verifying the type of values (e.g. integer, real number, currency, phone number, Social Security Number, postal address, email address, data, credit card number, ...) Verifying the format and range of values (ZIP code must be a 5-digit integer) Extra layer of confirmation (e.g. user types email twice, and the two must match)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n\t\t\t\t\t<h3>A Real-World Example Form that Uses Validation</h3>\n          <p>\n            <img class=\"centered-figure\" width=\"90%\" src=\"hidden/expedia-form.png\" alt=\"Validation Form Example\">\n          </p>\n        </section>", "text": "A Real-World Example Form that Uses Validation", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n\t\t\t\t\t<h3>Real-World Example with Validation Feedback</h3>\n          <p>\n            <img class=\"centered-figure\" width=\"90%\" src=\"hidden/expedia-form-feedback.png\" alt=\"Validation Form Example with Error Feedback\">\n          </p>\n        </section>", "text": "Real-World Example with Validation Feedback", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n\t\t\t\t\t<h2>When To Validate Data?</h2>\n          <p>\n            Validation can be performed:\n          </p>\n          <ul>\n            <li class=\"fragment\">\n              <strong>Client-side</strong> (before any user input is submitted to a server)\n              <ul>\n                <li>Can lead to a better user experience, allows for real-time feedback for invalid\n                  input. But shouldn't be used for user verification</li>\n              </ul>\n            </li>\n            <li class=\"fragment\">\n              <strong>Server-side</strong> (e.g. in PHP program, after user input is sent to the server)\n              <ul>\n                <li>Needed for truly secure validation, but slower</li>\n                <li>Should not skip this step under assumption that client-side validation was\n                  enough (why can't we trust all requests from a client?)</li>\n              </ul>\n            </li>\n            <li class=\"fragment\">\n              Both:\n              <ul>\n                <li>Best mix of convenience and security, but requires most effort to program</li>\n              </ul>\n            </li>\n          </ul>\n        </section>", "text": "When To Validate Data? Validation can be performed: Client-side (before any user input is submitted to a server) Can lead to a better user experience, allows for real-time feedback for invalid input. But shouldn't be used for user verification Server-side (e.g. in PHP program, after user input is sent to the server) Needed for truly secure validation, but slower Should not skip this step under assumption that client-side validation was enough (why can't we trust all requests from a client?) Both: Best mix of convenience and security, but requires most effort to program", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>Why Prioritize Input Validation?</h2>\n          <p>\n            Prioritizing validation is important for building websites that are: \n          </p>\n          <ol>\n            <li>User-friendly</li>\n            <li>Secure</li>\n          </ol>\n          <p>If you're interested in learning more, <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security\" target=\"_blank\">MDN</a>\n            has a good quick introduction to web security, and <a href=\"https://www.owasp.org/index.php/Main_Page\">OWASP</a> is a fantastic resource for\n            all things related to web security. You can also find a good article on how to write\n            user-friendly form UIs <a href=\"https://www.webfx.com/blog/web-design/best-practices-for-hints-and-validation-in-web-forms/\" target=\"_blank\">here</a>.</p>\n            <p>The takeaway? There are many ways to perform validation, but MDN/OWASP both are great\n                  resources to refer to based on the context of your websites</p>\n            <p>Most importantly, <strong>don't trust that users will provide correct/safe\n              input!</strong></p>\n        </section>", "text": "Why Prioritize Input Validation? Prioritizing validation is important for building websites that are: User-friendly Secure If you're interested in learning more, MDN has a good quick introduction to web security, and OWASP is a fantastic resource for all things related to web security. You can also find a good article on how to write user-friendly form UIs here. The takeaway? There are many ways to perform validation, but MDN/OWASP both are great resources to refer to based on the context of your websites Most importantly, don't trust that users will provide correct/safe input!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n        <h2>Administrivia</h2>\n        <p>HW2 Grades will be released after class</p>\n        <p>\n          Note: Exploration session this week\n        </p>\n        <ul>\n          <li>Jeremy Zhang on our\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp-aprilfools/\">April Fools</a> version of the site!</li>\n          <li><strong>Wednesday 5/8</strong> 4:30-5:30 or maybe longer</li>\n          <li><strong>BAG 154 </strong></li>\n        \n      </ul></section>", "text": "Administrivia HW2 Grades will be released after class Note: Exploration session this week Jeremy Zhang on our April Fools version of the site! Wednesday 5/8 4:30-5:30 or maybe longer BAG 154", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Agenda</h2>\n        <p>GET vs. POST in AJAX requests</p>\n        <p>Local storage</p>\n      </section>", "text": "Agenda GET vs. POST in AJAX requests Local storage", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Using Web Services</h2>\n        <h3>Required for HW3...</h3>\n      </section>", "text": "Using Web Services Required for HW3...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Review: Web Services</h2>\n        <p>\n          <strong>Web service</strong>: software functionality that can be invoked through the\n          internet using common protocols</p>\n        <p>It's like a remote function(s) you can call. Done by contacting a program on a web server</p>\n        <ul>\n          <li>Web services can be written in a variety of languages</li>\n          <li>Many web services accept parameters and produce results</li>\n          <li>Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code</li>\n          <li>The service's output might be HTML but could be text, XML, JSON, or other content</li>\n        </ul>\n      </section>", "text": "Review: Web Services Web service: software functionality that can be invoked through the internet using common protocols It's like a remote function(s) you can call. Done by contacting a program on a web server Web services can be written in a variety of languages Many web services accept parameters and produce results Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code The service's output might be HTML but could be text, XML, JSON, or other content", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Review: GET and POST</h2>\n        <p>\n          There are two common ways to make AJAX requests to a server.\n        </p>\n        <ul>\n          <li>\n            GET requests\n            <ul>\n              <li>are the default, most of what we've seen have been GET requests</li>\n              <li>retrieve or <em>get</em> information from the server</li>\n            </ul>\n          </li><li>POST requests\n            <ul>\n              <li><em>send</em> information to the server</li>\n              <li>often change information on the server</li>\n            </ul>\n          </li>\n        </ul>\n      </section>", "text": "Review: GET and POST There are two common ways to make AJAX requests to a server. GET requests are the default, most of what we've seen have been GET requests retrieve or get information from the server POST requests send information to the server often change information on the server", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Review: GET Request with Fetch</h2>\n        <p>When no security is needed, sending query parameters using a \"GET\" request\n          (Parameters passed visibly in the URL bar or request header) is acceptable.\n        </p>\n        <p>Example: <code>randomizer.php?mode=json</code></p>\n\n        <pre><code>const URL = \"randomizer.php\";\nfetch(URL + \"?mode=json\")\n  .then(checkStatus)\n  .then(JSON.parse)\n  .then(handleLoadTeams)\n  .catch(console.log);</code></pre>\n        <p class=\"code-caption\">JS GET fetch example</p>\n      </section>", "text": "Review: GET Request with Fetch When no security is needed, sending query parameters using a \"GET\" request (Parameters passed visibly in the URL bar or request header) is acceptable. Example: randomizer.php?mode=json const URL = \"randomizer.php\";fetch(URL + \"?mode=json\") .then(checkStatus) .then(JSON.parse) .then(handleLoadTeams) .catch(console.log); JS GET fetch example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>POST with Postman</h2>\n        <p>\n          But what if we wanted to add people to our database using a new API endpoint for\n          Groupizer. Because we don't want to send our potentially private information\n          publically across the internet through plain text URLs, we want to embed the\n          information in \"Form Data\" in the \"body\" of the request.\n        </p>\n        <p>\n          A good way to see this is using a tool like\n          <a href=\"https://www.getpostman.com/downloads/\">Postman</a>\n        </p>\n        <img class=\"half-width\" src=\"img/postman.png\" alt=\"Postman screen\">\n      </section>", "text": "POST with Postman But what if we wanted to add people to our database using a new API endpoint for Groupizer. Because we don't want to send our potentially private information publically across the internet through plain text URLs, we want to embed the information in \"Form Data\" in the \"body\" of the request. A good way to see this is using a tool like Postman", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Connecting to JS</h2>\n        <p>\n          There's a slight change to how we have to make our <code>fetch</code> request\n          with POST.\n        </p>\n        <pre><code>const API_URL = \"groupizer.php\";\n// Create a new \"FormData\" object\nlet data =  new FormData();\n// Add the various parameters to the FormData object\ndata.append(\"teamname\", \"Catz\");\ndata.append(\"student\", \"Whitney\");\n// Fetch now with a method of Post and the data in the body\nfetch(API_URL, {method: \"POST\", body: data})\n  .then(checkStatus)\n  .then(JSON.parse)\n  .then(handleLoadTeams)\n  .catch(console.log);</code></pre>\n    <p class=\"code-caption\">JS POST fetch example </p>\n      </section>", "text": "Connecting to JS There's a slight change to how we have to make our fetch request with POST. const API_URL = \"groupizer.php\";// Create a new \"FormData\" objectlet data = new FormData();// Add the various parameters to the FormData objectdata.append(\"teamname\", \"Catz\");data.append(\"student\", \"Whitney\");// Fetch now with a method of Post and the data in the bodyfetch(API_URL, {method: \"POST\", body: data}) .then(checkStatus) .then(JSON.parse) .then(handleLoadTeams) .catch(console.log); JS POST fetch example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Groupizer/Randomizer</h2>\n        <p>What do you think the JSON should look like for storing the group and member names\n          for the Groupizer/Randomizer?\n        </p><p>\n        </p><div class=\"side-by-side\">\n          <img class=\"simpleimg half-width space-above space-below\" src=\"hidden/images/groupizer.png\" alt=\"Groupizer user interface\">\n          <img class=\"simpleimg half-width space-above space-below\" src=\"hidden/images/randomizer.png\" alt=\"Randomizer user interface\">\n        </div>\n        <p>\n          <a href=\"../../tools/randomizer/randomizer.html\">Randomizer</a> and\n          <a href=\"../../tools/randomizer/teams.json\"> actual JSON file</a>\n        </p>\n      </section>", "text": "Groupizer/Randomizer What do you think the JSON should look like for storing the group and member names for the Groupizer/Randomizer? Randomizer and actual JSON file", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>JavaScript Objects and JSON</h2>\n          <p>\n              JSON is a way of saving or storing JavaScript objects.\n          </p>\n          <p class=\"space-left space-right medium-small-font\">\n              (The\n              technical term is \"serializing\" which is just a fancy\n              word for turning an object into a savable string of characters)\n          </p>\n\n          <p>\n              Browser JSON methods:\n          </p>\n\n          <ul>\n              <li><a href=\"https://www.w3schools.com/js/js_json_parse.asp\">\n                <code>JSON.parse( /* JSON string */ )</code></a>\n                -- converts JSON string into Javascript object\n              </li>\n              <li><a href=\"https://www.w3schools.com/js/js_json_stringify.asp\">\n                <code>JSON.stringify( /* Javascript Object */ )</code></a>\n                -- converts a Javascript object into JSON text\n              </li>\n          </ul>\n      </section>", "text": "JavaScript Objects and JSON JSON is a way of saving or storing JavaScript objects. (The technical term is \"serializing\" which is just a fancy word for turning an object into a savable string of characters) Browser JSON methods: JSON.parse( /* JSON string */ ) -- converts JSON string into Javascript object JSON.stringify( /* Javascript Object */ ) -- converts a Javascript object into JSON text", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>JSON stringify/parse example</h2>\n          <pre><code class=\"hljs\" data-trim>&gt; let point = {x: 1, y: 2, z: 3}\n&gt; point\n&gt; {x: 1, y: 2, z: 3}\n&gt; let s = JSON.stringify(point);\n&gt; s\n&gt; \"{\"x\":1,\"y\":2,\"z\":3}\"\n&gt; s = s.replace(\"1\", \"4\");\n&gt; \"{\"x\":4,\"y\":2,\"z\":3}\"\n&gt; let point2 = JSON.parse(s);\n&gt; point2\n&gt; {x: 4, y: 2, z: 3} </code></pre>\n            <p class=\"code-caption\">JS (console)</p>\n            </section>", "text": "JSON stringify/parse example > let point = {x: 1, y: 2, z: 3}> point> {x: 1, y: 2, z: 3}> let s = JSON.stringify(point);> s> \"{\"x\":1,\"y\":2,\"z\":3}\"> s = s.replace(\"1\", \"4\");> \"{\"x\":4,\"y\":2,\"z\":3}\"> let point2 = JSON.parse(s);> point2> {x: 4, y: 2, z: 3} JS (console)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>What is JSON used for?</h2>\n\n        <p>JSON data comes from many sources on the web:</p>\n\n        <ul>\n            <li>web services\u00a0use JSON to communicate</li>\n            <li>web servers\u00a0store data as JSON files</li>\n            <li>databases\u00a0sometimes use JSON to store, query, and return data</li>\n\n        </ul>\n\n        <p>JSON is the\u00a0de facto\u00a0universal format for exchange of data</p>\n\n    </section>", "text": "What is JSON used for? JSON data comes from many sources on the web: web services\u00a0use JSON to communicate web servers\u00a0store data as JSON files databases\u00a0sometimes use JSON to store, query, and return data JSON is the\u00a0de facto\u00a0universal format for exchange of data", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>JSON Rules!</h2>\n\n        <p>JSON has a few rules that differ from regular JS:</p>\n        <ul>\n            <li>Strings must be quoted</li>\n            <li>All property/field names must be quoted</li>\n            <li>Values can be:<ul>\n                <li>Number (23)</li>\n                <li>String (\"string has to be quoted, like this\")</li>\n                <li>Boolean (true, false)</li>\n                <li>Array ( [ \"value1\", 24, true, \"hallo\" ] )</li>\n                <li>Object ( { \"nested\" : \"object\", \"which\" : { \"can\" : \"have more nested objects\" } } ) </li>\n                <li>null</li>\n            </ul></li>\n        </ul>\n\n        <p>\n            Numerous validators/formatters available, eg\u00a0<a href=\"//jsonlint.com/\">JSONLint</a>\n        </p>\n    </section>", "text": "JSON Rules! JSON has a few rules that differ from regular JS: Strings must be quoted All property/field names must be quoted Values can be: Number (23) String (\"string has to be quoted, like this\") Boolean (true, false) Array ( [ \"value1\", 24, true, \"hallo\" ] ) Object ( { \"nested\" : \"object\", \"which\" : { \"can\" : \"have more nested objects\" } } ) null Numerous validators/formatters available, eg\u00a0JSONLint", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>JSON limitations</h2>\n        <p>\n            JSON can't handle certain data types, so these things just fall out of the object if you try to make JSON\n            strings out of them:\n        </p>\n        <ul>\n            <li>Function</li>\n            <li>Date</li>\n            <li>RegExp</li>\n            <li>Error</li>\n        </ul>\n\n        <p>\n            To get Date objects or RegExp objects into your JSON, you could extract them as strings, and then rebuild them\n            from strings.\n        </p>\n\n        <p>\n            However, since JSON is ideal for communicating across different types of systems, you can't put Javascript functions\n            in JSON. Other languages wouldn't be able to read JSON effectively if it had Javascript code in it.\n        </p>\n\n        <p>\n            (This is also why Dates and RegExps can't go into the JSON object -- other languages wouldn't know how to interpret\n            them for what they are.)\n        </p>\n    </section>", "text": "JSON limitations JSON can't handle certain data types, so these things just fall out of the object if you try to make JSON strings out of them: Function Date RegExp Error To get Date objects or RegExp objects into your JSON, you could extract them as strings, and then rebuild them from strings. However, since JSON is ideal for communicating across different types of systems, you can't put Javascript functions in JSON. Other languages wouldn't be able to read JSON effectively if it had Javascript code in it. (This is also why Dates and RegExps can't go into the JSON object -- other languages wouldn't know how to interpret them for what they are.)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n  <h4>Valid JSON</h4>\n  <pre><code class=\"hjls\" data-trim>{                          // no variable assignment\n  \"first_name\": \"Bart\",    // strings and properties must be quoted\n  \"last_name\": \"Simpson\",  // with double quotes\n  \"age\" : 13,              // numbers can be here without quotes\n  \"cowabunga\": true        // booleans can be here without quotes\n}                          // no semicolon at the end</code></pre>\n  <p class=\"code-caption\">JSON</p>\n  </section>", "text": "Valid JSON { // no variable assignment \"first_name\": \"Bart\", // strings and properties must be quoted \"last_name\": \"Simpson\", // with double quotes \"age\" : 13, // numbers can be here without quotes \"cowabunga\": true // booleans can be here without quotes} // no semicolon at the end JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>JSON exercise:</h2>\n\n        <div class=\"side-by-side\">\n            <div class=\"space-right\">\n                <p>\n                    Given the JSON data at right, what expressions would produce.\n                    Assume the JSON data is stored in a string called <code>data</code>.\n                </p>\n                <p> for instance, the window's title is <code>data.window.title</code></p>\n                <ul>\n                    <li>What the debug flag is set to? </li>\n                    <li>The image's third coordinate?</li>\n                    <li>The number of messages?</li>\n                    <li>The y-offset of the last message?</li>\n                </ul>\n            </div>\n            <div>\n<pre><code class=\"hljs\" data-trim>{\n  \"window\": {\n    \"title\": \"Sample Widget\",\n    \"width\": 500,\n    \"height\": 500\n  },\n  \"image\": {\n      \"src\": \"images/logo.png\",\n      \"coords\": [250, 150, 350, 400],\n      \"alignment\": \"center\"\n  },\n  \"messages\": [\n      {\"text\": \"Save\", \"offset\": [10, 20]},\n      {\"text\": \"Help\", \"offset\": [ 0, 50]},\n      {\"text\": \"Quit\", \"offset\": [30, 15]}\n  ],\n  \"debug\": \"true\"\n}</code></pre>\n            </div>\n        </div>\n\n    </section>", "text": "JSON exercise: Given the JSON data at right, what expressions would produce. Assume the JSON data is stored in a string called data. for instance, the window's title is data.window.title What the debug flag is set to? The image's third coordinate? The number of messages? The y-offset of the last message? { \"window\": { \"title\": \"Sample Widget\", \"width\": 500, \"height\": 500 }, \"image\": { \"src\": \"images/logo.png\", \"coords\": [250, 150, 350, 400], \"alignment\": \"center\" }, \"messages\": [ {\"text\": \"Save\", \"offset\": [10, 20]}, {\"text\": \"Help\", \"offset\": [ 0, 50]}, {\"text\": \"Quit\", \"offset\": [30, 15]} ], \"debug\": \"true\"}", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n      <h2>Answers</h2>\n  <pre><code class=\"hljs\" data-trim>let title = data.window.title;             // title === \"Sample Widget\"\nlet debug = data.debug;                    // debug === \"true\"\nlet coord = data.image.coords[2];          // coord === 350\nlet len = data.messages.length;            // len === 3\nlet y = data.messages[len - 1].offset[1];  // y === 15\n</code></pre>\n      <p class=\"code-caption\">JS</p>\n    </section>", "text": "Answers let title = data.window.title; // title === \"Sample Widget\"let debug = data.debug; // debug === \"true\"let coord = data.image.coords[2]; // coord === 350let len = data.messages.length; // len === 3let y = data.messages[len - 1].offset[1]; // y === 15 JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n      <h1>\n          AJAX\n      </h1>\n    </section>", "text": "AJAX", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <dl>\n            <dt>web application:</dt>\n            <dd>a dynamic web site that feels like a desktop application</dd>\n\n            <dt>AJAX:</dt>\n            <dd>a specific style of using JS to call out to the server for more information</dd>\n\n            <dt>AJAX with the Fetch API:</dt>\n            <dd>A newer, easier way to accomplish AJAX calls</dd>\n\n            <dt>Promise:</dt>\n            <dd>a JS object that is useful for dealing with uncertainty in your program</dd>\n\n        </dl>\n    </section>", "text": "web application: a dynamic web site that feels like a desktop application AJAX: a specific style of using JS to call out to the server for more information AJAX with the Fetch API: A newer, easier way to accomplish AJAX calls Promise: a JS object that is useful for dealing with uncertainty in your program", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Web Applications</h2>\n\n        <p>\n            All of the pages that we've made up until now have content, style, and behavior.\n        </p>\n\n        <p>\n            Web applications are webpages that pull in additional data and information as the\n            user progresses through them, making it feel similar to a desktop application.\n        </p>\n\n        <p>\n            Some motivations for making web pages into web applications:\n        </p>\n\n        <ul>\n            <li>Better user experience</li>\n            <li>Less data sent across the wire</li>\n            <li>Leads to good software architecture:\n                <ul><li>Client handles display, server serves up data</li></ul>\n            </li>\n        </ul>\n    </section>", "text": "Web Applications All of the pages that we've made up until now have content, style, and behavior. Web applications are webpages that pull in additional data and information as the user progresses through them, making it feel similar to a desktop application. Some motivations for making web pages into web applications: Better user experience Less data sent across the wire Leads to good software architecture: Client handles display, server serves up data", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Synchronous requests</h2>\n        <img src=\"hidden/images/sync-diagram.png\" alt=\"synchronous request diagram\">\n    </section>", "text": "Synchronous requests", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Why are synchronized requests are problematic?</h2>\n\n        <p class=\"fragment\">\n            Your code waits for the request to completely finish before proceeding.\n        </p>\n        <p class=\"fragment\">It is easier to program for synchronous behavior,\n            but the user's\u00a0entire browser LOCKS UP\u00a0until the download is completed, which is\n            a terrible user experience (especially if the page is very large or slow to transfer)\n        </p>\n    </section>", "text": "Why are synchronized requests are problematic? Your code waits for the request to completely finish before proceeding. It is easier to program for synchronous behavior, but the user's\u00a0entire browser LOCKS UP\u00a0until the download is completed, which is a terrible user experience (especially if the page is very large or slow to transfer)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Asynchronous requests</h2>\n        <img src=\"hidden/images/async-diagram.png\" alt=\"asynchronous request diagram\">\n    </section>", "text": "Asynchronous requests", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>Watching requests</h2>\n          <p>\n              Use the inspector, watch the network tab to see the requests that go out.\n          </p>\n          <img src=\"hidden/images/watching-network.png\" alt=\"Watching network requests\">\n          <p>Example from <a href=\"../../tools/randomizer/randomizer.html\">Randomizer</a></p>\n      </section>", "text": "Watching requests Use the inspector, watch the network tab to see the requests that go out. Example from Randomizer", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <div class=\"side-by-side\">\n            <div style=\"width:25%;  position:absolute; left: 10%;\">\n              <img class=\"simpleimg\" src=\"../img/full-skeleton.png\" alt=\"skelton\" style=\"margin:5px;\">\n            </div>\n              <div>\n                <h1 style=\"margin-top: 400px\">HTML</h1>\n              </div>\n          </div>\n        </section>", "text": "HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Hypertext Markup Language (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">HTML</a>)</h2>\n\n          <p>\n          Describes the <em>content</em> and <em>structure</em> of information on a web page\n          </p><ul>\n            <li>Not the same as the <em>presentation</em> (appearance on screen)</li>\n          </ul>\n          \n\n          <p>Surrounds text content with opening and closing <strong>tags</strong></p>\n          <p>\n          Each tag's name is called an <strong>element</strong>\n          </p><ul>\n            <li>Syntax:\n              <code>\n                <strong>&lt;element&gt;</strong> content <strong>&lt;/element&gt;</strong>\n              </code>\n            </li>\n            <li>Example:\n              <code>\n                <strong>&lt;p&gt;</strong>This is a paragraph<strong>&lt;/p&gt;</strong>\n              </code>\n            </li>\n          </ul>\n          \n          <p>Most whitespace is insignificant in HTML (ignored or collapsed to a single space)</p>\n          <p>We will use a newer version called HTML5</p>\n        </section>", "text": "Hypertext Markup Language (HTML) Describes the content and structure of information on a web page Not the same as the presentation (appearance on screen) Surrounds text content with opening and closing tags Each tag's name is called an element Syntax: <element> content </element> Example: <p>This is a paragraph</p> Most whitespace is insignificant in HTML (ignored or collapsed to a single space) We will use a newer version called HTML5", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Structure of an HTML Page</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    information about the page\n  &lt;/head&gt;\n  &lt;body&gt;\n    page contents\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n          <p>The <code>&lt;head&gt;</code> tag describes the page and the <code>&lt;body&gt;</code> tag\n          contains the page's content</p>\n          <p>An HTML page is saved into a file ending with extension <code>.html</code></p>\n          <p>The <code>DOCTYPE</code> tag tells the browser to interpret our page's code as\n          HTML5, the lastest/greatest version of the language</p>\n        </section>", "text": "Structure of an HTML Page <!DOCTYPE html><html> <head> information about the page </head> <body> page contents </body></html>HTML The <head> tag describes the page and the <body> tag contains the page's content An HTML page is saved into a file ending with extension .html The DOCTYPE tag tells the browser to interpret our page's code as HTML5, the lastest/greatest version of the language", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Getting Started</h2>\n          <p>\n            There are many different types of HTML tags used to structure web pages (we can't\n            possibly cover all of them within lecture). Here's a table of the most common ones\n            you'll use in CSE 154, but you can find a comprehensive list\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a>\n            (it's a great bookmark page for reference this quarter!)</p>\n          <p>\n            Unless otherwise specified, all of the tags listed in the following slides are \n            required to be in the <code>&lt;body&gt;</code> of an HTML page\n            rather than the <code>&lt;head&gt;</code>.\n          </p>\n        </section>", "text": "Getting Started There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). Here's a table of the most common ones you'll use in CSE 154, but you can find a comprehensive list here (it's a great bookmark page for reference this quarter!) Unless otherwise specified, all of the tags listed in the following slides are required to be in the <body> of an HTML page rather than the <head>.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <section>\n            <h2>HTML Tags - Table of Common Tags (1/2)</h2>\n            <p>Note: Go \"down\" this slide column for more information/examples on each tag!</p>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#title-tag\"><code>&lt;title&gt;</code></a></td>\n                <td>Page title (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#meta-tag\"><code>&lt;meta&gt;</code></a></td>\n                <td>Meta information tag (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#favicon-tag\"><code>&lt;favicon&gt;</code></a></td>\n                <td>Icon placed in the browser title bar and bookmarks (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#p-tag\"><code>&lt;p&gt;</code></a></td>\n                <td>Paragraph tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#heading-tags\"><code>&lt;h1&gt; ... &lt;h6&gt;</code></a></td>\n                <td>Heading tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#header-footer-tags\"><code>&lt;header&gt;, &lt;footer&gt;</code></a></td>\n                <td>Header/Footer tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#article-section-tags\"><code>&lt;article&gt;, &lt;section&gt;</code></a></td>\n                <td>Article and section tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#hr-tag\"><code>&lt;hr /&gt;</code></a></td>\n                <td>Horizontal rule tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#br-tag\"><code>&lt;br /&gt;</code></a></td>\n                <td>Line break tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#a-tag\"><code>&lt;a&gt;</code></a></td>\n                <td>Anchor tag (page links)</td>\n              </tr>\n            </table>\n          </section>\n\n          <section>\n            <h2>HTML Tags - Table of Common Tags (2/2)</h2>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#img-tag\"><code>&lt;img /&gt;</code></a></td>\n                <td>Image tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#em-strong-tags\"><code>&lt;em&gt;, &lt;strong&gt;</code></a></td>\n                <td>Emphasis (italic) and strong (bold) tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#del-ins-tags\"><code>&lt;del&gt;, &lt;ins&gt;</code></a></td>\n                <td>Deletion (strikethrough) and insertion tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#abbr-tags\"><code>&lt;abbr&gt;</code></a></td>\n                <td>Abbreviation tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;ul&gt;</code></a>, <a href=\"#ol-tag\"><code>&lt;ol&gt;</code></a></td>\n                <td>Unordered and ordered list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;li&gt;</code></a></td>\n                <td>List item tag (used as children of <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> list tags)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#definition-list-tags\">\n                    <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code>\n                  </a>\n                  </td><td>Definition list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#blockquote-tag\"><code>&lt;blockquote&gt;</code></a>,\n                  <a href=\"#q-tag\"><code>&lt;q&gt;</code></a></td>\n                <td>Block and inline quotation tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#code-tags\"><code>&lt;code&gt;</code></a></td>\n                <td>Computer code tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#pre-tags\"><code>&lt;pre&gt;</code></a></td>\n                <td>Preformatting tag</td>\n              </tr>\n            </table>\n          </section>\n\n          <section id=\"title-tag\">\n            <h2>Page Title: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\">&lt;title&gt;</a></code></h2>\n            <pre>\n<code class=\"hljs\" data-trim>&lt;title&gt;\n  Chapter 2: HTML Basics\n&lt;/title&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed within the <code>&lt;head&gt;</code> of the page</p>\n            <p>\n            Displayed in the web browser's title bar and when bookmarking the page,\n            otherwise not visible to the user as page content\n            </p>\n          </section>\n\n          <section id=\"meta-tag\">\n            <h2>\n              Web Page Metadata:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            information about your page (for a browser, search engine, etc.)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"description\"\n      content=\"Authors' web site for\n      Building Java Programs.\" /&gt;\n&lt;meta name=\"keywords\" content=\"java, textbook\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed in the <code>head</code> section of your HTML page</p>\n            <p><code>meta</code> tags often have both the <code>name</code> and <code>content</code> attributes\n            </p><ul>\n              <li>Some <code>meta</code> tags use the <code>http-equiv</code> attribute instead of <code>name</code></li>\n              <li>The <code>meta</code> tag with <code>charset</code> attribute indicates language/character encodings</li>\n            </ul>\n            \n            <p>Using a <code>meta</code> tag <code>Content-Type</code> stops validator \"tentatively valid\" warnings\n            </p>\n          </section>\n\n          <section id=\"favicon-tag\">\n            <h2>Favorites icon (\"favicon\")</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n\n            <div class=\"output\">\n              <img src=\"../img/favicon1.gif\" alt=\"favicon\"> <img src=\"../img/favicon2.gif\" alt=\"favicon\">\n            </div>\n\n            <p>The <code>link</code> tag, placed in the <code>head</code> section, attaches another file to the page\n            </p><ul>\n              <li>In this case, an icon to be placed in the browser title bar and bookmarks</li>\n            </ul>\n            \n            <p>Note for IE6: Doesn't work; must put a file <code>favicon.ico</code> in the root\n            of the web server (<a href=\"http://www.clickfire.com/viewpoints/articles/favicons.php\">info</a>)</p>\n          </section>\n\n\n\n\n          <section id=\"p-tag\">\n            <h2>Paragraph: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a></h2>\n            <p class=\"term-definition\">paragraphs of text (block)</p>\n            <pre><code class=\"hljs nohighlight small-font\" data-trim>&lt;p&gt;\n  You're not your job.\n  You're not how much money you make in the bank.\n  You're not the car you drive.\n  You're not the content of your wallet.\n  You're not your khakis.\n  You're not the all-singing, all-dancing crap of the world.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p class=\"medium-small-font\">\n              You're not your job.\n              You're not how much money you make in the bank.\n              You're not the car you drive.\n              You're not the content of your wallet. You're not your khakis. You're not the all-singing,\n              all-dancing crap of the world.\n            </p>\n            </div>\n            <p class=\"output-caption\">output</p>\n            <p>Placed in the <code>body</code> of the page</p>\n          </section>\n\n          <section id=\"heading-tags\">\n            <h2>\n              Headings:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h1&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code></a>, ...,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h6&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">headings to separate major areas of the page\n            (block)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;h1&gt;University of Whoville&lt;/h1&gt;\n&lt;h2&gt;Department of Computer Science&lt;/h2&gt;\n&lt;h3&gt;Sponsored by Micro$oft&lt;/h3&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <h1>University of Whoville</h1>\n              <h2>Department of Computer Science</h2>\n              <h3>Sponsored by Micro$oft</h3>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#Example_page\">More\n              heading examples</a></p>\n          </section>\n\n          <section id=\"header-footer-tags\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a>\n              and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"><code>&lt;footer&gt;</code></a>\n            </h2>\n\n            <p><code>&lt;header&gt;</code> tags usually contain one or more &lt;h1-6&gt;\n            elements, maybe a logo, and authorship information</p>\n            <p><code>&lt;footer&gt;</code> tags might contain site map links, authorship\n            information, copyright information, etc.</p>\n            <pre><code class=\"hljs\" data-trim>&lt;header&gt; more html elements &lt;/header&gt;\n...maybe some other stuff...\n&lt;footer&gt; more html elements &lt;/footer&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>These tags are both block elements</p>\n            <p>Note: <em>not to be confused with the <code>&lt;head&gt;</code> tag, the\n              <code>&lt;header&gt;</code> is designed to contain headings for a\n              document.</em></p>\n          </section>\n\n          <section id=\"article-section-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> and\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"><code>&lt;section&gt;</code></a>\n            </h2>\n\n            <p>The <code>&lt;article&gt;</code> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block)</p>\n            <p>The <code>&lt;section&gt;</code> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block)</p>\n            <pre><code class=\"hljs \" data-trim>&lt;article&gt;&lt;h2&gt;Mowgli's resume:&lt;/h2&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Objective:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Experience:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;References:&lt;/h3&gt; ...\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </section>\n\n          <section id=\"hr-tag\">\n            <h2>\n              Horizontal rule:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a horizontal line to visually separate sections of a page (block)</p>\n\n            <pre>\n            <code class=\"hljs\">&lt;&gt;First paragraph&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Third paragraph&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>First paragraph</p>\n              <hr>\n              <p>Second paragraph</p>\n              <hr>\n              <p>Third paragraph</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n            This is the first example we've seen of a void (<q>self-closing</q>) tag:\n            <a href=\"https://www.w3.org/TR/html51/syntax.html#writing-html-documents-elements\">more on HTML Element types</a>\n            </p>\n          </section>\n\n          <section id=\"br-tag\">\n            <h2>\n              Line Break:\n              <a href=\"http://www.w3schools.com/tags/tag_br.asp\"><code>&lt;br /&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">forces a line break in the middle of a block element (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The woods are lovely, dark and deep, &lt;br /&gt;\n  But I have promises to keep, &lt;br /&gt;And miles\n  to go before I sleep, &lt;br /&gt;And miles to go before\n  I sleep.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <p>\n              The woods are lovely, dark and deep, <br>\n              But I have promises to keep, <br>And miles\n              to go before I sleep, <br>And miles to go before\n\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Warning: Don't over-use <code>br</code> (guideline: &gt;= 2 in a row is bad, better to not use any)\n            </p>\n            <p>\n            <code>br</code> tags should not be used to separate paragraphs or used multiple times in a row to create spacing\n            </p>\n          </section>\n\n          <section id=\"a-tag\">\n            <h2>\n              Links:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">links, or \"anchors\", to other pages (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Search for it on <a href=\"http://www.google.com/\">Google</a>!\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Uses the <code>href</code> (Hypertext REFerence) attribute to specify the destination URL\n            </p><ul>\n              <li>\n                Can be absolute (to another web site) or\n                relative (to another page on this site)\n              </li>\n            </ul>\n            \n            <p>Anchors are inline elements; must be placed in a block element such as\n            <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code>\n            </p>\n          </section>\n\n          <section id=\"img-tag\">\n            <h2>\n              Images:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>\n            </h2>\n\n            <p>Inserts a graphical image into the page (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\n            <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>The <code>src</code> attribute specifies the image URL</p>\n            <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\n            <a href=\"https://moz.com/learn/seo/alt-text\">improves\n              accessibility</a> for users who can't otherwise see it</p>\n          </section>\n\n          <section>\n            <h2>More About Images</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\n  &lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\n   title=\"dumbo!\" /&gt;&lt;/a&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <a href=\"http://en.wikipedia.org/wiki/Koala/\">\n                <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\n              </a>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>If placed in an <code>&lt;a&gt;</code> anchor tag, the image becomes a link</p>\n\n            <p><strong>What's the title attribute?</strong></p>\n            <ul class=\"medium-small-font\">\n              <li title=\"See? Even this bullet right here.\"><code>title</code> attribute is an optional tooltip (on ANY element)</li>\n              <li title=\"Wah wahhhn programming is hard :(\">BUT the <code>title</code> attribute doesn't always work well for mobile and\n                accessibility, so its usage and future are debated</li>\n            </ul>\n          </section>\n\n          <section id=\"em-strong-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\">\n                Phrase elements\n              </a>:\n              <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>\n            </h2>\n\n            <p>\n            <code>em</code>: emphasized text (usually rendered in italic) <br>\n            <code>strong</code>: strongly emphasized text (usually rendered in bold)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>As usual, the tags must be properly nested for a valid page</p>\n          </section>\n\n          <!--\n          <section id=\"del-ins-tags\">\n            <h2>\n              Deletions and insertions:\n              <a href=\"http://www.w3schools.com/tags/tag_del.asp\"><code>&lt;del&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_ins.asp\"><code>&lt;ins&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            content that should be considered deleted or added to the document (inline)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  &lt;del&gt;Final Exam&lt;/del&gt; &lt;ins&gt;Midterm&lt;/ins&gt; is on &lt;del&gt;Aug 29&lt;/del&gt;\n  &lt;ins&gt;Apr 17&lt;/ins&gt;.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del>\n              <ins>Apr 17</ins>.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n          -->\n\n          <section id=\"abbr-tag\">\n            <h2>\n              Abbreviations:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"><code>&lt;abbr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            an abbreviation, acronym, or slang term (inline)\n            </p>\n\n            <pre><code class=\"hljs \" data-trim>&lt;p&gt;\n  Safe divers always remember to check their\n  &lt;abbr title=\"Self-Contained Underwater Breathing Apparatus\"&gt;\n  SCUBA&lt;/abbr&gt; gear.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Safe divers always remember to check their\n              <abbr title=\"Self-Contained Underwater Breathing Apparatus\">\n                SCUBA</abbr> gear.\n              </p>\n              <p class=\"output-caption\">output</p>\n\n            </div>\n          </section>\n\n          <section id=\"ul-li-tags\">\n            <h2>\n              Unordered List:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>ul</code> represents a bulleted list of items (block)<br>\n            <code>li</code> represents a single item within the list (block)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;No shoes&lt;/li&gt;\n  &lt;li&gt;No shirt&lt;/li&gt;\n  &lt;li&gt;No problem&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <ul>\n                <li>No shoes</li>\n                <li>No shirt</li>\n                <li>No problem</li>\n              </ul>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section>\n            <h2>More About Unordered Lists</h2>\n            <p>A list can contain other lists:</p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;Simpsons:\n    &lt;ul&gt;\n      &lt;li&gt;Homer&lt;/li&gt;\n      &lt;li&gt;Marge&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Family Guy:\n    &lt;ul&gt;\n      &lt;li&gt;Peter&lt;/li&gt;\n      &lt;li&gt;Lois&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <ul>\n                  <li>Simpsons:\n                    <ul>\n                      <li>Homer</li>\n                      <li>Marge</li>\n                    </ul>\n                  </li>\n                  <li>Family Guy:\n                    <ul>\n                      <li>Peter</li>\n                      <li>Lois</li>\n                    </ul>\n                  </li>\n                </ul>\n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"ol-tag\">\n            <h2>Ordered List: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a></h2>\n\n            <p class=\"term-definition\">\n            <code>ol</code> represents a numbered list of items (block)\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;p&gt;RIAA business model:&lt;/p&gt;\n&lt;ol&gt;\n  &lt;li&gt;Sue customers&lt;/li&gt;\n  &lt;li&gt;???&lt;/li&gt;\n  &lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right medium-small-font\">\n                <p>RIAA business model:\n                </p><ol>\n                  <li>Sue customers</li>\n                  <li>???</li>\n                  <li>Profit!</li>\n                </ol>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n\n            <p>\n            We can make lists with letters or Roman numerals using CSS (later)\n            </p>\n          </section>\n\n          <section id=\"definition-list-tags\">\n            <h2>Definition list:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"><code>&lt;dl&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"><code>&lt;dt&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"><code>&lt;dd&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>dl</code> represents a list of definitions of terms (block) <br>\n            <code>dt</code> represents each term, and <code>dd</code> its definition\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;dl&gt;\n  &lt;dt&gt;newbie&lt;/dt&gt;\n  &lt;dd&gt;\n    one who does not have\n    mad skills\n  &lt;/dd&gt;\n  &lt;dt&gt;own&lt;/dt&gt;\n  &lt;dd&gt;\n    to soundly defeat (e.g.\n    I owned that newbie!)\n  &lt;/dd&gt;\n  &lt;dt&gt;frag&lt;/dt&gt;\n  &lt;dd&gt;\n    a kill in a shooting game\n  &lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <p>\n                </p><dl>\n                  <dt>newbie</dt>\n                  <dd>one who does not have mad skills</dd>\n                  <dt>own</dt>\n                  <dd>to soundly defeat (e.g. I owned that newbie!)</dd>\n                  <dt>frag</dt>\n                  <dd>a kill in a shooting game</dd>\n                </dl>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n          <section id=\"blockquote-tag\">\n            <h2>\n              Quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"><code>&lt;blockquote&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a quotation (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;As Lincoln said in his famous Gettysburg Address:&lt;/p&gt;\n&lt;blockquote&gt;\n  &lt;p&gt;\n    Fourscore and seven years ago, our fathers brought forth\n    on this continent a new nation, conceived in liberty, and\n    dedicated to the proposition that all men are created equal.\n  &lt;/p&gt;\n&lt;/blockquote&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output medium-small-font\">\n              <p>\n              As Lincoln said in his famous Gettysburg Address:\n              </p>\n              <blockquote>\n                <p>\n                Fourscore and seven years ago, our fathers brought forth\n                on this continent a new nation, conceived in liberty, and\n                dedicated to the proposition that all men are created equal.\n                </p>\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"q-tag\">\n            <h2>Inline quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"><code>&lt;q&gt;</code></a></h2>\n\n            <p class=\"term-definition\">a short quotation (inline)</p>\n\n            <pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, &lt;q&gt;Nevermore.&lt;/q&gt;&lt;/p&gt;</code></pre>\n\n            <p class=\"code-caption\">HTML</p>\n            <p>\n            Why not just write the following?<br>\n            </p><pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, \"Nevermore.\"&lt;/p&gt;</code></pre>\n            \n\n            <div>\n              <p>We don't use \" marks for two reasons:</p>\n              <ol>\n                <li>HTML shouldn't contain literal quotation mark characters; they should be written as <code>&amp;quot;</code></li>\n                <li>Using <code>&lt;q&gt;</code> allows us to apply CSS styles to quotations (seen later)</li>\n              </ol>\n            </div>\n          </section>\n\n          <section id=\"code-tag\">\n            <h2>\n              Computer Code:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"><code>&lt;code&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            a short section of computer code (usually shown in a fixed-width font)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt;\n  tags make lists.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              The <code>ul</code> and <code>ol</code>\n              tags make lists.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"pre-tag\">\n            <h2>\n              Preformatted Text:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a large section of pre-formatted text (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;pre&gt;\n     Steve Jobs spoke loudly\n      reality distortion\n       Apple fans bow down\n&lt;/pre&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              </p><pre>\n     Steve Jobs speaks loudly\n      reality distortion\n       Apple fans bow down\n              </pre>\n              \n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Displayed with exactly the whitespace / line breaks given in the text</p>\n            <p>Shown in a fixed-width font by default</p>\n            <p>\n              How would it look if we had instead enclosed it in <code>code</code>\n              tags?\n            </p>\n          </section>\n        </section>", "text": "HTML Tags - Table of Common Tags (1/2) Note: Go \"down\" this slide column for more information/examples on each tag! Tag Description <title> Page title (in <head>) <meta> Meta information tag (in <head>) <favicon> Icon placed in the browser title bar and bookmarks (in <head>) <p> Paragraph tag <h1> ... <h6> Heading tags <header>, <footer> Header/Footer tags <article>, <section> Article and section tags <hr /> Horizontal rule tag <br /> Line break tag <a> Anchor tag (page links) HTML Tags - Table of Common Tags (2/2) Tag Description <img /> Image tag <em>, <strong> Emphasis (italic) and strong (bold) tags <del>, <ins> Deletion (strikethrough) and insertion tags <abbr> Abbreviation tag <ul>, <ol> Unordered and ordered list tags <li> List item tag (used as children of <ul> or <ol> list tags) <dl>, <dt>, <dd> Definition list tags <blockquote>, <q> Block and inline quotation tags <code> Computer code tag <pre> Preformatting tag Page Title: <title> <title> Chapter 2: HTML Basics</title> HTML Placed within the <head> of the page Displayed in the web browser's title bar and when bookmarking the page, otherwise not visible to the user as page content Web Page Metadata: <meta> information about your page (for a browser, search engine, etc.) <meta charset=\"utf-8\" /><meta name=\"description\" content=\"Authors' web site for Building Java Programs.\" /><meta name=\"keywords\" content=\"java, textbook\" /> HTML Placed in the head section of your HTML page meta tags often have both the name and content attributes Some meta tags use the http-equiv attribute instead of name The meta tag with charset attribute indicates language/character encodings Using a meta tag Content-Type stops validator \"tentatively valid\" warnings Favorites icon (\"favicon\") <link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /> HTML (template) <link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /> HTML (example) The link tag, placed in the head section, attaches another file to the page In this case, an icon to be placed in the browser title bar and bookmarks Note for IE6: Doesn't work; must put a file favicon.ico in the root of the web server (info) Paragraph: <p> paragraphs of text (block) <p> You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world.</p> HTML You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world. output Placed in the body of the page Headings: <h1>, <h2>, ..., <h6> headings to separate major areas of the page (block) <h1>University of Whoville</h1><h2>Department of Computer Science</h2><h3>Sponsored by Micro$oft</h3>HTML University of Whoville Department of Computer Science Sponsored by Micro$oft output More heading examples <header> and <footer> <header> tags usually contain one or more <h1-6> elements, maybe a logo, and authorship information <footer> tags might contain site map links, authorship information, copyright information, etc. <header> more html elements </header>...maybe some other stuff...<footer> more html elements </footer> HTML These tags are both block elements Note: not to be confused with the <head> tag, the <header> is designed to contain headings for a document. <article> and <section> The <article> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block) The <section> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block) <article><h2>Mowgli's resume:</h2> <section> <h3>Objective:</h3> ... </section> <section> <h3>Experience:</h3> ... </section> <section> <h3>References:</h3> ... </section></article> HTML Horizontal rule: <hr> a horizontal line to visually separate sections of a page (block) <>First paragraph</p><hr /><p>Second paragraph</p><hr><p>Third paragraph</p> HTML First paragraph Second paragraph Third paragraph output This is the first example we've seen of a void (self-closing) tag: more on HTML Element types Line Break: <br /> forces a line break in the middle of a block element (inline) <p> The woods are lovely, dark and deep, <br /> But I have promises to keep, <br />And miles to go before I sleep, <br />And miles to go before I sleep.</p> HTML The woods are lovely, dark and deep, But I have promises to keep, And miles to go before I sleep, And miles to go before output Warning: Don't over-use br (guideline: >= 2 in a row is bad, better to not use any) br tags should not be used to separate paragraphs or used multiple times in a row to create spacing Links: <a> links, or \"anchors\", to other pages (inline) <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML Search for it on Google! output Uses the href (Hypertext REFerence) attribute to specify the destination URL Can be absolute (to another web site) or relative (to another page on this site) Anchors are inline elements; must be placed in a block element such as <p> or <h1> Images: <img> Inserts a graphical image into the page (inline) <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /> HTML output The src attribute specifies the image URL HTML5 also requires an alt attribute describing the image, which improves accessibility for users who can't otherwise see it More About Images <a href=\"http://en.wikipedia.org/wiki/Koala/\"> <img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo!\" /></a> HTML output If placed in an <a> anchor tag, the image becomes a link What's the title attribute? title attribute is an optional tooltip (on ANY element) BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated Phrase elements : <em>, <strong> em: emphasized text (usually rendered in italic) strong: strongly emphasized text (usually rendered in bold) <p> HTML is <em>really</em>, <strong>REALLY</strong> fun!</p> HTML As usual, the tags must be properly nested for a valid page <!-- Deletions and insertions: <del>, <ins> content that should be considered deleted or added to the document (inline) <p> <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del> <ins>Apr 17</ins>.</p> HTML Final Exam Midterm is on Aug 29 Apr 17. output --> Abbreviations: <abbr> an abbreviation, acronym, or slang term (inline) <p> Safe divers always remember to check their <abbr title=\"Self-Contained Underwater Breathing Apparatus\"> SCUBA</abbr> gear.</p> HTML Safe divers always remember to check their SCUBA gear. output Unordered List: <ul>, <li> ul represents a bulleted list of items (block) li represents a single item within the list (block) <ul> <li>No shoes</li> <li>No shirt</li> <li>No problem</li></ul> HTML No shoes No shirt No problem output More About Unordered Lists A list can contain other lists: <ul> <li>Simpsons: <ul> <li>Homer</li> <li>Marge</li> </ul> </li> <li>Family Guy: <ul> <li>Peter</li> <li>Lois</li> </ul> </li></ul> HTML Simpsons: Homer Marge Family Guy: Peter Lois output Ordered List: <ol> ol represents a numbered list of items (block) <p>RIAA business model:</p><ol> <li>Sue customers</li> <li>???</li> <li>Profit!</li></ol> HTML RIAA business model: Sue customers ??? Profit! output We can make lists with letters or Roman numerals using CSS (later) Definition list: <dl>, <dt>, <dd> dl represents a list of definitions of terms (block) dt represents each term, and dd its definition <dl> <dt>newbie</dt> <dd> one who does not have mad skills </dd> <dt>own</dt> <dd> to soundly defeat (e.g. I owned that newbie!) </dd> <dt>frag</dt> <dd> a kill in a shooting game </dd></dl> HTML newbie one who does not have mad skills own to soundly defeat (e.g. I owned that newbie!) frag a kill in a shooting game output Quotations: <blockquote> a quotation (block) <p>As Lincoln said in his famous Gettysburg Address:</p><blockquote> <p> Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. </p></blockquote> HTML As Lincoln said in his famous Gettysburg Address: Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. output Inline quotations: <q> a short quotation (inline) <p>Quoth the Raven, <q>Nevermore.</q></p> HTML Why not just write the following? <p>Quoth the Raven, \"Nevermore.\"</p> We don't use \" marks for two reasons: HTML shouldn't contain literal quotation mark characters; they should be written as &quot; Using <q> allows us to apply CSS styles to quotations (seen later) Computer Code: <code> a short section of computer code (usually shown in a fixed-width font) <p> The <code>ul</code> and <code>ol</code> tags make lists.</p> HTML The ul and ol tags make lists. output Preformatted Text: <pre> a large section of pre-formatted text (block) <pre> Steve Jobs spoke loudly reality distortion Apple fans bow down</pre> HTML Steve Jobs speaks loudly reality distortion Apple fans bow down output Displayed with exactly the whitespace / line breaks given in the text Shown in a fixed-width font by default How would it look if we had instead enclosed it in code tags?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>HTML Tags - Table of Common Tags (1/2)</h2>\n            <p>Note: Go \"down\" this slide column for more information/examples on each tag!</p>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#title-tag\"><code>&lt;title&gt;</code></a></td>\n                <td>Page title (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#meta-tag\"><code>&lt;meta&gt;</code></a></td>\n                <td>Meta information tag (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#favicon-tag\"><code>&lt;favicon&gt;</code></a></td>\n                <td>Icon placed in the browser title bar and bookmarks (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#p-tag\"><code>&lt;p&gt;</code></a></td>\n                <td>Paragraph tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#heading-tags\"><code>&lt;h1&gt; ... &lt;h6&gt;</code></a></td>\n                <td>Heading tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#header-footer-tags\"><code>&lt;header&gt;, &lt;footer&gt;</code></a></td>\n                <td>Header/Footer tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#article-section-tags\"><code>&lt;article&gt;, &lt;section&gt;</code></a></td>\n                <td>Article and section tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#hr-tag\"><code>&lt;hr /&gt;</code></a></td>\n                <td>Horizontal rule tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#br-tag\"><code>&lt;br /&gt;</code></a></td>\n                <td>Line break tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#a-tag\"><code>&lt;a&gt;</code></a></td>\n                <td>Anchor tag (page links)</td>\n              </tr>\n            </table>\n          </section>", "text": "HTML Tags - Table of Common Tags (1/2) Note: Go \"down\" this slide column for more information/examples on each tag! Tag Description <title> Page title (in <head>) <meta> Meta information tag (in <head>) <favicon> Icon placed in the browser title bar and bookmarks (in <head>) <p> Paragraph tag <h1> ... <h6> Heading tags <header>, <footer> Header/Footer tags <article>, <section> Article and section tags <hr /> Horizontal rule tag <br /> Line break tag <a> Anchor tag (page links)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>HTML Tags - Table of Common Tags (2/2)</h2>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#img-tag\"><code>&lt;img /&gt;</code></a></td>\n                <td>Image tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#em-strong-tags\"><code>&lt;em&gt;, &lt;strong&gt;</code></a></td>\n                <td>Emphasis (italic) and strong (bold) tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#del-ins-tags\"><code>&lt;del&gt;, &lt;ins&gt;</code></a></td>\n                <td>Deletion (strikethrough) and insertion tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#abbr-tags\"><code>&lt;abbr&gt;</code></a></td>\n                <td>Abbreviation tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;ul&gt;</code></a>, <a href=\"#ol-tag\"><code>&lt;ol&gt;</code></a></td>\n                <td>Unordered and ordered list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;li&gt;</code></a></td>\n                <td>List item tag (used as children of <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> list tags)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#definition-list-tags\">\n                    <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code>\n                  </a>\n                  </td><td>Definition list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#blockquote-tag\"><code>&lt;blockquote&gt;</code></a>,\n                  <a href=\"#q-tag\"><code>&lt;q&gt;</code></a></td>\n                <td>Block and inline quotation tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#code-tags\"><code>&lt;code&gt;</code></a></td>\n                <td>Computer code tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#pre-tags\"><code>&lt;pre&gt;</code></a></td>\n                <td>Preformatting tag</td>\n              </tr>\n            </table>\n          </section>", "text": "HTML Tags - Table of Common Tags (2/2) Tag Description <img /> Image tag <em>, <strong> Emphasis (italic) and strong (bold) tags <del>, <ins> Deletion (strikethrough) and insertion tags <abbr> Abbreviation tag <ul>, <ol> Unordered and ordered list tags <li> List item tag (used as children of <ul> or <ol> list tags) <dl>, <dt>, <dd> Definition list tags <blockquote>, <q> Block and inline quotation tags <code> Computer code tag <pre> Preformatting tag", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"title-tag\">\n            <h2>Page Title: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\">&lt;title&gt;</a></code></h2>\n            <pre>\n<code class=\"hljs\" data-trim>&lt;title&gt;\n  Chapter 2: HTML Basics\n&lt;/title&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed within the <code>&lt;head&gt;</code> of the page</p>\n            <p>\n            Displayed in the web browser's title bar and when bookmarking the page,\n            otherwise not visible to the user as page content\n            </p>\n          </section>", "text": "Page Title: <title> <title> Chapter 2: HTML Basics</title> HTML Placed within the <head> of the page Displayed in the web browser's title bar and when bookmarking the page, otherwise not visible to the user as page content", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"meta-tag\">\n            <h2>\n              Web Page Metadata:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            information about your page (for a browser, search engine, etc.)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"description\"\n      content=\"Authors' web site for\n      Building Java Programs.\" /&gt;\n&lt;meta name=\"keywords\" content=\"java, textbook\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed in the <code>head</code> section of your HTML page</p>\n            <p><code>meta</code> tags often have both the <code>name</code> and <code>content</code> attributes\n            </p><ul>\n              <li>Some <code>meta</code> tags use the <code>http-equiv</code> attribute instead of <code>name</code></li>\n              <li>The <code>meta</code> tag with <code>charset</code> attribute indicates language/character encodings</li>\n            </ul>\n            \n            <p>Using a <code>meta</code> tag <code>Content-Type</code> stops validator \"tentatively valid\" warnings\n            </p>\n          </section>", "text": "Web Page Metadata: <meta> information about your page (for a browser, search engine, etc.) <meta charset=\"utf-8\" /><meta name=\"description\" content=\"Authors' web site for Building Java Programs.\" /><meta name=\"keywords\" content=\"java, textbook\" /> HTML Placed in the head section of your HTML page meta tags often have both the name and content attributes Some meta tags use the http-equiv attribute instead of name The meta tag with charset attribute indicates language/character encodings Using a meta tag Content-Type stops validator \"tentatively valid\" warnings", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"favicon-tag\">\n            <h2>Favorites icon (\"favicon\")</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n\n            <div class=\"output\">\n              <img src=\"../img/favicon1.gif\" alt=\"favicon\"> <img src=\"../img/favicon2.gif\" alt=\"favicon\">\n            </div>\n\n            <p>The <code>link</code> tag, placed in the <code>head</code> section, attaches another file to the page\n            </p><ul>\n              <li>In this case, an icon to be placed in the browser title bar and bookmarks</li>\n            </ul>\n            \n            <p>Note for IE6: Doesn't work; must put a file <code>favicon.ico</code> in the root\n            of the web server (<a href=\"http://www.clickfire.com/viewpoints/articles/favicons.php\">info</a>)</p>\n          </section>", "text": "Favorites icon (\"favicon\") <link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /> HTML (template) <link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /> HTML (example) The link tag, placed in the head section, attaches another file to the page In this case, an icon to be placed in the browser title bar and bookmarks Note for IE6: Doesn't work; must put a file favicon.ico in the root of the web server (info)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"p-tag\">\n            <h2>Paragraph: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a></h2>\n            <p class=\"term-definition\">paragraphs of text (block)</p>\n            <pre><code class=\"hljs nohighlight small-font\" data-trim>&lt;p&gt;\n  You're not your job.\n  You're not how much money you make in the bank.\n  You're not the car you drive.\n  You're not the content of your wallet.\n  You're not your khakis.\n  You're not the all-singing, all-dancing crap of the world.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p class=\"medium-small-font\">\n              You're not your job.\n              You're not how much money you make in the bank.\n              You're not the car you drive.\n              You're not the content of your wallet. You're not your khakis. You're not the all-singing,\n              all-dancing crap of the world.\n            </p>\n            </div>\n            <p class=\"output-caption\">output</p>\n            <p>Placed in the <code>body</code> of the page</p>\n          </section>", "text": "Paragraph: <p> paragraphs of text (block) <p> You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world.</p> HTML You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world. output Placed in the body of the page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"heading-tags\">\n            <h2>\n              Headings:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h1&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h2&gt;</code></a>, ...,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h6&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">headings to separate major areas of the page\n            (block)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;h1&gt;University of Whoville&lt;/h1&gt;\n&lt;h2&gt;Department of Computer Science&lt;/h2&gt;\n&lt;h3&gt;Sponsored by Micro$oft&lt;/h3&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <h1>University of Whoville</h1>\n              <h2>Department of Computer Science</h2>\n              <h3>Sponsored by Micro$oft</h3>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#Example_page\">More\n              heading examples</a></p>\n          </section>", "text": "Headings: <h1>, <h2>, ..., <h6> headings to separate major areas of the page (block) <h1>University of Whoville</h1><h2>Department of Computer Science</h2><h3>Sponsored by Micro$oft</h3>HTML University of Whoville Department of Computer Science Sponsored by Micro$oft output More heading examples", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"header-footer-tags\">\n            <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a>\n              and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"><code>&lt;footer&gt;</code></a>\n            </h2>\n\n            <p><code>&lt;header&gt;</code> tags usually contain one or more &lt;h1-6&gt;\n            elements, maybe a logo, and authorship information</p>\n            <p><code>&lt;footer&gt;</code> tags might contain site map links, authorship\n            information, copyright information, etc.</p>\n            <pre><code class=\"hljs\" data-trim>&lt;header&gt; more html elements &lt;/header&gt;\n...maybe some other stuff...\n&lt;footer&gt; more html elements &lt;/footer&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>These tags are both block elements</p>\n            <p>Note: <em>not to be confused with the <code>&lt;head&gt;</code> tag, the\n              <code>&lt;header&gt;</code> is designed to contain headings for a\n              document.</em></p>\n          </section>", "text": "<header> and <footer> <header> tags usually contain one or more <h1-6> elements, maybe a logo, and authorship information <footer> tags might contain site map links, authorship information, copyright information, etc. <header> more html elements </header>...maybe some other stuff...<footer> more html elements </footer> HTML These tags are both block elements Note: not to be confused with the <head> tag, the <header> is designed to contain headings for a document.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"article-section-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a> and\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"><code>&lt;section&gt;</code></a>\n            </h2>\n\n            <p>The <code>&lt;article&gt;</code> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block)</p>\n            <p>The <code>&lt;section&gt;</code> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block)</p>\n            <pre><code class=\"hljs \" data-trim>&lt;article&gt;&lt;h2&gt;Mowgli's resume:&lt;/h2&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Objective:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Experience:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;References:&lt;/h3&gt; ...\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </section>", "text": "<article> and <section> The <article> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block) The <section> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block) <article><h2>Mowgli's resume:</h2> <section> <h3>Objective:</h3> ... </section> <section> <h3>Experience:</h3> ... </section> <section> <h3>References:</h3> ... </section></article> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n              <h2>AJAX with the Fetch API</h2>\n              <p>\n                The Fetch API was created in 2014 and incorporated into the <code>window</code> DOM object.\n              </p>\n              <p>\n                <strong>We will be using AJAX with Fetch in this class. </strong>\n              </p>\n              <pre><code class=\"hljs\" data-trim>(function() {\n...\n  function doWebRequest() {\n    let url = ..... // put url string here\n    fetch(url);\n    // Note: there needs to be more here\n    // process data and catch errors\n  }\n})();</code></pre>\n              <p class=\"code-caption\">JS (template)</p>\n            </section>", "text": "AJAX with the Fetch API The Fetch API was created in 2014 and incorporated into the window DOM object. We will be using AJAX with Fetch in this class. (function() {... function doWebRequest() { let url = ..... // put url string here fetch(url); // Note: there needs to be more here // process data and catch errors }})(); JS (template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n              <h2>Example: AJAX with the Fetch API</h2>\n              <p>\n                You can use the absolute path to a file (a full URL) as the parameter to\n                <code>fetch</code>\n              </p>\n              <pre><code class=\"hljs\" data-trim>const URL = \"https://courses.cs.washington.edu/courses/cse154/19sp/tools/randomizer/randomizer.php\";\n...\nfunction loadTeams() {\n  fetch(url + \"?mode=text\");\n  ...\n}</code></pre>\n              <p class=\"code-caption\">JS (example)</p>\n              <p>\n                You can also use a relative path name to <code>fetch</code> from a file that is\n                retreived from the same directory on the server as the <code>.js</code> file.\n              </p>\n              <pre><code class=\"hljs\" data-trim>const URL = \"randomizer.php\";\n...\nfunction loadTeams() {\n  fetch(url + \"?mode=text\");\n  ...\n}</code></pre>\n              <p class=\"code-caption\">JS (example)</p>\n            </section>", "text": "Example: AJAX with the Fetch API You can use the absolute path to a file (a full URL) as the parameter to fetch const URL = \"https://courses.cs.washington.edu/courses/cse154/19sp/tools/randomizer/randomizer.php\";...function loadTeams() { fetch(url + \"?mode=text\"); ...} JS (example) You can also use a relative path name to fetch from a file that is retreived from the same directory on the server as the .js file. const URL = \"randomizer.php\";...function loadTeams() { fetch(url + \"?mode=text\"); ...} JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n                <h2>Why use AJAX?</h2>\n                <div class=\"side-by-side\">\n                  <div class=\"space-right half-width\">\n                    <ul>\n                        <li>You can use AJAX to download information from a server in the background</li>\n                        <li>It allows dynamically updates to a page without making the user wait</li>\n                        <li>It avoids the \"click-wait....refresh\" which would frustrate users</li>\n                    </ul>\n                  </div>\n                  <div>\n                      <img class=\"space-above\" src=\"hidden/images/ajax-diagram.png\" alt=\"ajax diagram\">\n                  </div>\n                </div>\n            </section>", "text": "Why use AJAX? You can use AJAX to download information from a server in the background It allows dynamically updates to a page without making the user wait It avoids the \"click-wait....refresh\" which would frustrate users", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n              <h2>Processing the returned data</h2>\n              <p>\n                Now that we've done a <code>fetch</code>, we need to do something with the data that\n                comes back from the server.\n              </p>\n              <p>\n                But we don't know how long that will take or if it even will\n                come back correctly!\n              </p>\n              <p>\n                The <code>fetch</code> call returns a <code>Promise</code> object which will help\n                us with this uncertainty.\n              </p>\n            </section>", "text": "Processing the returned data Now that we've done a fetch, we need to do something with the data that comes back from the server. But we don't know how long that will take or if it even will come back correctly! The fetch call returns a Promise object which will help us with this uncertainty.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n              <h1>Promises</h1>\n\n            </section>", "text": "Promises", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>Real world promises</h2>\n\n            <p>\n                Promises have three states:\n            </p>\n            <ul>\n                <li>Pending</li>\n                <li>Fulfilled</li>\n                <li>Rejected</li>\n            </ul>\n\n            <p>\n                Example: \u201cI promise to post HW 3\u201d <br>\n                Pending: Not yet posted <br>\n                Fulfilled: HW 3 posted <br>\n                Rejected: Wrong homework posted, or not posted in time <br>\n            </p>\n        </section>", "text": "Real world promises Promises have three states: Pending Fulfilled Rejected Example: \u201cI promise to post HW 3\u201d Pending: Not yet posted Fulfilled: HW 3 posted Rejected: Wrong homework posted, or not posted in time", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>JavaScript <code>Promise</code>s</h2>\n            <dl>\n                <dt>promise</dt>\n                <dd>A JS object that executes some code that has an uncertain outcome</dd>\n            </dl>\n\n            <div class=\"side-by-side space-above\">\n              <div>\n                <p>\n                    Promises have three states:\n                </p>\n                <ul>\n                    <li>Pending</li>\n                    <li>Fulfilled</li>\n                    <li>Rejected</li>\n                </ul>\n              </div>\n              <div>\n                <pre><code class=\"hljs\" data-trim>...\n  let promise = new Promise(action);\n...\nfunction action(resolve, reject) {\n  // do pending uncertain action\n  //  (like make an AJAX call)\n\n  if (success) {\n    resolve();     // Fulfilled\n  } else {\n    reject();      // Rejected\n  }\n}</code></pre>\n                <p class=\"code-caption\" data-trim>JS (template)</p>\n              </div>\n            </div>\n          </section>", "text": "JavaScript Promises promise A JS object that executes some code that has an uncertain outcome Promises have three states: Pending Fulfilled Rejected ... let promise = new Promise(action);...function action(resolve, reject) { // do pending uncertain action // (like make an AJAX call) if (success) { resolve(); // Fulfilled } else { reject(); // Rejected }} JS (template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>A <code>Promise</code> is returned from a <code>fetch</code> call</h2>\n            <p>\n              We will be using promises when we <code>fetch</code> information from a\n              server, which is an uncertain task\n            </p>\n            <p>\n              We give you \"boilerplate\" starting code because you will use this\n              frequently\n            </p>\n          </section>", "text": "A Promise is returned from a fetch call We will be using promises when we fetch information from a server, which is an uncertain task We give you \"boilerplate\" starting code because you will use this frequently", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n                <h2>\n                    AJAX <code>fetch</code> Code Skeleton (text response)\n                </h2>\n\n                <pre><code class=\"hljs small-font\" data-trim>const BASE_URL = /* put base url string here */;\n...\nfunction callAjax() {\n  let url = BASE_URL /* + any query parameters */;\n  fetch(url)\n  .then(checkStatus)\n  .then(function(responseText) {\n    //success: do something with the responseText\n  })\n  .catch(function(error) {\n    //error: do something with error\n  });\n}\nfunction checkStatus(response) {\n  if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) {\n    return response.text();\n  } else {\n    return Promise.reject(new Error(response.status + \": \" + response.statusText));\n  }\n}</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n          <p>Found from\n            <a href=\"../../resources/assets/templates/js/ajax-template-documented.js\">ajax-template-documented.js</a>\n          </p>\n        </section>", "text": "AJAX fetch Code Skeleton (text response) const BASE_URL = /* put base url string here */;...function callAjax() { let url = BASE_URL /* + any query parameters */; fetch(url) .then(checkStatus) .then(function(responseText) { //success: do something with the responseText }) .catch(function(error) { //error: do something with error });}function checkStatus(response) { if (response.status >= 200 && response.status < 300) { return response.text(); } else { return Promise.reject(new Error(response.status + \": \" + response.statusText)); }} JS (template) Found from ajax-template-documented.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n        <h2>\n            Better AJAX <code>fetch</code> Code Skeleton (text)\n        </h2>\n\n        <pre><code class=\"hljs  small-font\" data-trim>const BASE_URL = /* put base url string here */;\n...\nfunction callAjax() {\n  let url = BASE_URL /* + any query parameters */;\n  fetch(url)\n  .then(checkStatus)\n  .then(handeResponse)\n  .catch(handleErrror);\n}\nfunction handleResponse(responseText) {\n  //success: do something with the responseText\n}\n\nfunction handleError(error) {\n  //error: do something with error\n}\n\nfunction checkStatus(response) {    // boiler plate code given out\n  ...\n}</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n        </section>", "text": "Better AJAX fetch Code Skeleton (text) const BASE_URL = /* put base url string here */;...function callAjax() { let url = BASE_URL /* + any query parameters */; fetch(url) .then(checkStatus) .then(handeResponse) .catch(handleErrror);}function handleResponse(responseText) { //success: do something with the responseText}function handleError(error) { //error: do something with error}function checkStatus(response) { // boiler plate code given out ...} JS (template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n        <h2>\n            Ajax <code>fetch</code> Code Skeleton (with JSON)\n        </h2>\n        <p>What if the resulting text comes back as JSON format?</p>\n\n        <div class=\"fragment\">\n          <pre><code class=\"hljs  small-font\" data-trim>const BASE_URL = /* put base url string here */;\n...\nfunction callAjax() {\n  let url = BASE_URL /* + any query parameters */;\n  fetch(url)\n  .then(checkStatus)\n  .then(JSON.parse)      // parse the response string into a JSON object\n  .then(handeResponse)\n  .catch(handleErrror);\n}\nfunction handleResponse(responseJSON) {\n  // now handle this response as a JSON object.\n}\n\nfunction handleError(error) {\n  // error handling doesn't change\n}</code></pre>\n            <p class=\"code-caption\">JS (template)</p>\n          </div>\n        </section>", "text": "Ajax fetch Code Skeleton (with JSON) What if the resulting text comes back as JSON format? const BASE_URL = /* put base url string here */;...function callAjax() { let url = BASE_URL /* + any query parameters */; fetch(url) .then(checkStatus) .then(JSON.parse) // parse the response string into a JSON object .then(handeResponse) .catch(handleErrror);}function handleResponse(responseJSON) { // now handle this response as a JSON object.}function handleError(error) { // error handling doesn't change} JS (template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>Mechanics</h2>\n          <p>We initiate a <code>fetch</code> of a URL</p>\n          <ul class=\"no-bullets no-space-bottom\">\n            <li class=\"fragment\">A <code>fetch</code> call returns a <code>Promise</code> object</li>\n            <li class=\"fragment\">The <code>.then</code> method on a <code>Promise</code> object returns a <code>Promise</code> object</li>\n            <ul>\n              <li class=\"fragment\">Our first <code>.then(checkStatus)</code>\n                checks the status of the response to makes sure the server responded with an OK. The\n                result of that first <code>.then</code> is another <code>Promise</code> object with\n                the response (text, JSON, ...) as the value of the Promise.\n              </li>\n              <li class=\"fragment\">\n                We may <code>.then(JSON.parse)</code> which also returns\n                a <code>Promise</code> object with a JSON object as the value\n              </li>\n              <li class=\"fragment\">\n                We <code>.then(handleResponse)</code> which will do something with the response\n                from the server.\n              </li>\n              <li class=\"fragment\">\n                If at any time there is an error, the execution falls down to the\n                <code>.catch</code> method on the <code>Promise</code> chain\n              </li>\n            </ul>\n          </ul>\n          <p class=\"fragment no-space-top\">Chaining of Promises gives us a nice data flow, like down a pipe!</p>\n        </section>", "text": "Mechanics We initiate a fetch of a URL A fetch call returns a Promise object The .then method on a Promise object returns a Promise object Our first .then(checkStatus) checks the status of the response to makes sure the server responded with an OK. The result of that first .then is another Promise object with the response (text, JSON, ...) as the value of the Promise. We may .then(JSON.parse) which also returns a Promise object with a JSON object as the value We .then(handleResponse) which will do something with the response from the server. If at any time there is an error, the execution falls down to the .catch method on the Promise chain Chaining of Promises gives us a nice data flow, like down a pipe!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>The Promise Pipeline</h2>\n          <img src=\"hidden/images/fetchpipeline.png\" alt=\"Visual description of the fetch pipeline\">\n        </section>", "text": "The Promise Pipeline", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>Promises are good because... </h2>\n          <p>They help deal with code that has an uncertain outcome</p>\n          <p>They separate the completion of the fetch request from the page logic</p>\n          <ul>\n            <li>\n              We can reuse the same logic and handle completion in different\n              ways (e.g. refactor the AJAX logic or the function to handle the response)\n            </li>\n          </ul>\n        </section>", "text": "Promises are good because... They help deal with code that has an uncertain outcome They separate the completion of the fetch request from the page logic We can reuse the same logic and handle completion in different ways (e.g. refactor the AJAX logic or the function to handle the response)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n          <h2>Back to our randomizer example</h2>\n          <div class=\"side-by-side\">\n            <div class=\"two-thirds-width space-above\">\n              <a href=\"../../tools/randomizer/randomizer.html\" target=\"_blank\">\n                <img class=\"simpleimg\" src=\"hidden/images/randomizer.png\" alt=\"Randomizer screen shot\"></a>\n            </div>\n            <div>\n              <pre><code class=\"hljs  small-font\" data-trim>function loadTeamsTxt() {\n  const url = URL + \"?mode=text\";\n  fetch(url)\n    .then(checkStatus)\n    .then(handleLoadTeams)\n    .catch(console.log);\n}\n\nfunction loadTeamsJSON() {\n  const url = URL + \"?mode=json\";\n  fetch(url)\n    .then(checkStatus)\n    .then(JSON.parse)\n    .then(handleLoadTeams)\n    .catch(console.log);\n}\n              </code></pre>\n              <p class=\"code-caption\">JS</p>\n            </div>\n        \n\n        <section>\n            <h2>\n              Summary: Why are promises/fetch useful?\n            </h2>\n            <p>\n              The help deal with uncertainty in your code. You never know exactly\n              what will happen when you make an AJAX call, so wrapping the call in a\n              Promise is a nice way to deal with the uncertainty.\n            </p>\n            <p>\n              The paradigm is nice because you write the anonymous function that\n              defines the promise, so you are the one who writes the code that determines whether\n              the promise was 'fulfilled' or 'rejected'.\n            </p>\n            <p>\n              You also define what happens after the Promise fulfills with the\n              <code>then</code> function, and what happens when it rejects in the\n              <code>catch</code> function.\n            </p>\n\n        </section>\n\n        <section>\n            <h2>AJAX Summary</h2>\n            <div class=\"side-by-side\">\n              <div class=\"space-right half-width\">\n                <ul class=\"medium-small-font\">\n                    <li>AJAX is not a programming language; its a particular way of using JavaScript</li>\n                    <li>It uses JS to download information from the server in the background</li>\n                    <li>It allows dynamically updating a page without making the user wait</li>\n                    <li>Using the Fetch API for AJAX can produce \"cleaner\" and more maintainable code</li>\n                    <li>\n                      JSON is now more common than XML for processing formatted data,\n                      but both are just ways to store data</li>\n                    <li>Examples of AJAX fetch in use: UW's\u00a0CSE 14x Diff Tool,\u00a0\n                      Practice-It;\u00a0Amazon product pages, most auto-complete search features,\n                      Randomizer, APOD examples.\n                    </li>\n                </ul>\n              </div>\n              <div>\n                  <img src=\"hidden/images/ajax-diagram.png\" alt=\"ajax diagram\">\n              </div>\n            </div>\n        </section>\n\n\n\n    </div>\n  </section>", "text": "Back to our randomizer example function loadTeamsTxt() { const url = URL + \"?mode=text\"; fetch(url) .then(checkStatus) .then(handleLoadTeams) .catch(console.log);}function loadTeamsJSON() { const url = URL + \"?mode=json\"; fetch(url) .then(checkStatus) .then(JSON.parse) .then(handleLoadTeams) .catch(console.log);} JS Summary: Why are promises/fetch useful? The help deal with uncertainty in your code. You never know exactly what will happen when you make an AJAX call, so wrapping the call in a Promise is a nice way to deal with the uncertainty. The paradigm is nice because you write the anonymous function that defines the promise, so you are the one who writes the code that determines whether the promise was 'fulfilled' or 'rejected'. You also define what happens after the Promise fulfills with the then function, and what happens when it rejects in the catch function. AJAX Summary AJAX is not a programming language; its a particular way of using JavaScript It uses JS to download information from the server in the background It allows dynamically updating a page without making the user wait Using the Fetch API for AJAX can produce \"cleaner\" and more maintainable code JSON is now more common than XML for processing formatted data, but both are just ways to store data Examples of AJAX fetch in use: UW's\u00a0CSE 14x Diff Tool,\u00a0 Practice-It;\u00a0Amazon product pages, most auto-complete search features, Randomizer, APOD examples.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>\n              Summary: Why are promises/fetch useful?\n            </h2>\n            <p>\n              The help deal with uncertainty in your code. You never know exactly\n              what will happen when you make an AJAX call, so wrapping the call in a\n              Promise is a nice way to deal with the uncertainty.\n            </p>\n            <p>\n              The paradigm is nice because you write the anonymous function that\n              defines the promise, so you are the one who writes the code that determines whether\n              the promise was 'fulfilled' or 'rejected'.\n            </p>\n            <p>\n              You also define what happens after the Promise fulfills with the\n              <code>then</code> function, and what happens when it rejects in the\n              <code>catch</code> function.\n            </p>\n\n        </section>", "text": "Summary: Why are promises/fetch useful? The help deal with uncertainty in your code. You never know exactly what will happen when you make an AJAX call, so wrapping the call in a Promise is a nice way to deal with the uncertainty. The paradigm is nice because you write the anonymous function that defines the promise, so you are the one who writes the code that determines whether the promise was 'fulfilled' or 'rejected'. You also define what happens after the Promise fulfills with the then function, and what happens when it rejects in the catch function.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n            <h2>AJAX Summary</h2>\n            <div class=\"side-by-side\">\n              <div class=\"space-right half-width\">\n                <ul class=\"medium-small-font\">\n                    <li>AJAX is not a programming language; its a particular way of using JavaScript</li>\n                    <li>It uses JS to download information from the server in the background</li>\n                    <li>It allows dynamically updating a page without making the user wait</li>\n                    <li>Using the Fetch API for AJAX can produce \"cleaner\" and more maintainable code</li>\n                    <li>\n                      JSON is now more common than XML for processing formatted data,\n                      but both are just ways to store data</li>\n                    <li>Examples of AJAX fetch in use: UW's\u00a0CSE 14x Diff Tool,\u00a0\n                      Practice-It;\u00a0Amazon product pages, most auto-complete search features,\n                      Randomizer, APOD examples.\n                    </li>\n                </ul>\n              </div>\n              <div>\n                  <img src=\"hidden/images/ajax-diagram.png\" alt=\"ajax diagram\">\n              </div>\n            </div>\n        </section>", "text": "AJAX Summary AJAX is not a programming language; its a particular way of using JavaScript It uses JS to download information from the server in the background It allows dynamically updating a page without making the user wait Using the Fetch API for AJAX can produce \"cleaner\" and more maintainable code JSON is now more common than XML for processing formatted data, but both are just ways to store data Examples of AJAX fetch in use: UW's\u00a0CSE 14x Diff Tool,\u00a0 Practice-It;\u00a0Amazon product pages, most auto-complete search features, Randomizer, APOD examples.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec13-ajax/"},
{"html": "<section>\n        <h2>CORS error</h2>\n        <p>\n          The fetch interaction will not work between some clients and servers due to\n          configurations on the server (whether the server allows \"Cross Origin Requests\")\n        </p>\n        <img class=\"simpleimg\" src=\"hidden/images/cors-problem.png\" alt=\"example of the cors problem\">\n        <div class=\"medium-small-font\">\n        <p>Demo:</p>\n          <ul>\n            <li>APOD running as a file:/// vs localhost/ or localhost:8888/</li>\n            <li>Randomizer running as a file:/// (error) vs localhost/ or localhost:8888/</li>\n            <li>Pizza running as a file:/// (error) vs localhost/ or localhost:8888/</li>\n          </ul>\n        </div>\n      </section>", "text": "CORS error The fetch interaction will not work between some clients and servers due to configurations on the server (whether the server allows \"Cross Origin Requests\") Demo: APOD running as a file:/// vs localhost/ or localhost:8888/ Randomizer running as a file:/// (error) vs localhost/ or localhost:8888/ Pizza running as a file:/// (error) vs localhost/ or localhost:8888/", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n        <h2>Running through MAMP</h2>\n        <p>\n          In preparation for working with our server side code we installed and\n          and configured a server on our machine called MAMP (Mac Apache MySQL PHP)\n        </p>\n        <p>\n          Now instead of your urls being\n        </p>\n        <p>\n          <code class=\"medium-small-font\">file:///Users/lauren/Desktop/cse154/cp3-ajax-bricker/index.html</code>\n        </p>\n        <p>\n          We will run them through <strong>locahost</strong>, e.g.\n        </p>\n        <ul class=\"no-bullets\">\n          <li>Mac: <br> <code>localhost:8888/154-19sp/cp3-ajax-bricker/index.html</code> </li>\n          <li>Windows: <br>  <code>localhost/154-19sp/cp3-ajax-bricker/index.html</code></li>\n        </ul>\n      </section>", "text": "Running through MAMP In preparation for working with our server side code we installed and and configured a server on our machine called MAMP (Mac Apache MySQL PHP) Now instead of your urls being file:///Users/lauren/Desktop/cse154/cp3-ajax-bricker/index.html We will run them through locahost, e.g. Mac: localhost:8888/154-19sp/cp3-ajax-bricker/index.html Windows: localhost/154-19sp/cp3-ajax-bricker/index.html", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec14-ajax-ii/"},
{"html": "<section>\n          <h2>Common bug</h2>\n          <h3>Not accounting for Text Nodes in the tree traversal</h3>\n          <p>Incorrect usage of firstChild/lastChild/nextSibling/previousSibling\n            instead of firstElementChild/lastElementChild/firstElementSibling/lastElementSibling\n          </p>\n        </section>", "text": "Common bug Not accounting for Text Nodes in the tree traversal Incorrect usage of firstChild/lastChild/nextSibling/previousSibling instead of firstElementChild/lastElementChild/firstElementSibling/lastElementSibling", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n          <h2><code>clearInterval</code> Example</h2>\n          <pre><code>&lt;button id=\"toggle-btn\"&gt;Start/Stop&lt;button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre class=\"font-14pt\"><code class=\"hljs \" data-trim>let timerId = null; // stores ID of interval timer\nfunction initialize() {\n  id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);\n}\n\n// 1. What does this function do?\nfunction toggleMessageInterval() {\n  if (!timerId) {\n    timerId = setInterval(sayHello, 1000);\n  } else {\n    clearInterval(timerId);\n    timerId = null; // 2. Why is this line important?\n    // 3. What happens if you swap the two lines above?\n  }\n}\n\nfunction sayHello() {\n  id(\"output-text\").innerText += \"Hello!\";\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <div class=\"output\">\n            <button id=\"demo-btn-toggle\">Start/Stop</button>\n            <span id=\"output-text-toggle\"></span>\n            <p class=\"output-caption\">output (<a href=\"examples/toggle-interval.html\" target=\"_blank\">full example page</a>)</p>\n          <div>\n        \n\n        <section>\n\t\t\t\t\t<h2>Common Timer Errors</h2>\n          <p>Many students mistakenly write <code>()</code> when passing the function</p>\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">setTimeout(sayHello(), 2000);</del>\nsetTimeout(sayHello, 2000);\n\n<del class=\"bad\">setTimeout(multiply(num1 * num2), 2000);</del>\nsetTimeout(sayHello, 2000, num1, num2);</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>What does it actually do if you have the <code>()</code>?</p>\n          <ul class=\"answer-list\">\n            <li class=\"answer\">It calls the function immediately, rather than waiting the 2000ms!</li>\n          </ul>\n        </section>\n        <section>\n          <h2>Practice: Returning to the Mystery Box</h2>\n          <p>\n              How can we use timers to add animation to the Mystery Box exercise from \n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/section05/slides/#/13\">Section\n                5</a>?\n          </p>\n          <p>\n            <a href=\"examples/mystery-box-animated.zip\">mystery-box-animated.zip</a> lecture code (finish the\n            TODO in <a href=\"examples/mystery-box-animated/mystery-box.js\">mystery-box.js</a> to animate the box!)\n          </p>\n        </section>\n\n        <section>\n\n          <h2>Summary</h2>\n          <p>\n          When you want to call a function after a specified delay in time, use\n          <code>setTimeout</code>.\n          </p>\n          <p>\n            When you want to call a function <em>repeatedly</em> every X seconds, use\n            <code>setInterval</code> (though <a href=\"https://javascript.info/settimeout-setinterval#recursive-settimeout\" target=\"_blank\">you can also</a> use <code>setTimeout</code> recursively!)</p>\n          \n          <p>\n            For both types of timers, if you want to stop the delay/interval you'll need a variable\n            to keep track of the timer id (returned\n            by both functions) to pass to <code>clearTimeout</code>/<code>clearInterval</code> \n          </p>\n        </section>\n\t\t</div>\n\n  <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n  <script src=\"../../site/reveal/js/reveal.js\"></script>\n  <script src=\"timer-slides.js\"></script>\n\n  <script>\n    Reveal.initialize({\n      controls: true,\n      progress: true,\n      history: true,\n      center: true,\n\n      transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n      // More info https://github.com/hakimel/reveal.js#dependencies\n      dependencies: [{\n          src: '../../site/reveal/lib/js/classList.js',\n          condition: function() {\n            return !document.body.classList;\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/marked.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/markdown/markdown.js',\n          condition: function() {\n            return !!document.querySelector('[data-markdown]');\n          }\n        },\n        {\n          src: '../../site/reveal/plugin/highlight/highlight.pack.js',\n          async: true,\n          callback: function() {\n            hljs.initHighlightingOnLoad();\n          }\n        },\n        { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n        { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n        { src: '../../site/reveal/plugin/search/search.js', async: true },\n        { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n      ]\n    });\n  </script>\n</div></section>", "text": "clearInterval Example <button id=\"toggle-btn\">Start/Stop<button> HTML let timerId = null; // stores ID of interval timerfunction initialize() { id(\"toggle-btn\").addEventListener(\"click\", toggleMessageInterval);}// 1. What does this function do?function toggleMessageInterval() { if (!timerId) { timerId = setInterval(sayHello, 1000); } else { clearInterval(timerId); timerId = null; // 2. Why is this line important? // 3. What happens if you swap the two lines above? }}function sayHello() { id(\"output-text\").innerText += \"Hello!\";} JS Start/Stop output (full example page) \t\t\t\t\tCommon Timer Errors Many students mistakenly write () when passing the function setTimeout(sayHello(), 2000);setTimeout(sayHello, 2000);setTimeout(multiply(num1 * num2), 2000);setTimeout(sayHello, 2000, num1, num2); JS What does it actually do if you have the ()? It calls the function immediately, rather than waiting the 2000ms! Practice: Returning to the Mystery Box How can we use timers to add animation to the Mystery Box exercise from Section 5? mystery-box-animated.zip lecture code (finish the TODO in mystery-box.js to animate the box!) Summary When you want to call a function after a specified delay in time, use setTimeout. When you want to call a function repeatedly every X seconds, use setInterval (though you can also use setTimeout recursively!) For both types of timers, if you want to stop the delay/interval you'll need a variable to keep track of the timer id (returned by both functions) to pass to clearTimeout/clearInterval \t\t Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [{ src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector('[data-markdown]'); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h2>Common Timer Errors</h2>\n          <p>Many students mistakenly write <code>()</code> when passing the function</p>\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">setTimeout(sayHello(), 2000);</del>\nsetTimeout(sayHello, 2000);\n\n<del class=\"bad\">setTimeout(multiply(num1 * num2), 2000);</del>\nsetTimeout(sayHello, 2000, num1, num2);</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n          <p>What does it actually do if you have the <code>()</code>?</p>\n          <ul class=\"answer-list\">\n            <li class=\"answer\">It calls the function immediately, rather than waiting the 2000ms!</li>\n          </ul>\n        </section>", "text": "Common Timer Errors Many students mistakenly write () when passing the function setTimeout(sayHello(), 2000);setTimeout(sayHello, 2000);setTimeout(multiply(num1 * num2), 2000);setTimeout(sayHello, 2000, num1, num2); JS What does it actually do if you have the ()? It calls the function immediately, rather than waiting the 2000ms!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n          <h2>Practice: Returning to the Mystery Box</h2>\n          <p>\n              How can we use timers to add animation to the Mystery Box exercise from \n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/section05/slides/#/13\">Section\n                5</a>?\n          </p>\n          <p>\n            <a href=\"examples/mystery-box-animated.zip\">mystery-box-animated.zip</a> lecture code (finish the\n            TODO in <a href=\"examples/mystery-box-animated/mystery-box.js\">mystery-box.js</a> to animate the box!)\n          </p>\n        </section>", "text": "Practice: Returning to the Mystery Box How can we use timers to add animation to the Mystery Box exercise from Section 5? mystery-box-animated.zip lecture code (finish the TODO in mystery-box.js to animate the box!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\n          <h2>Summary</h2>\n          <p>\n          When you want to call a function after a specified delay in time, use\n          <code>setTimeout</code>.\n          </p>\n          <p>\n            When you want to call a function <em>repeatedly</em> every X seconds, use\n            <code>setInterval</code> (though <a href=\"https://javascript.info/settimeout-setinterval#recursive-settimeout\" target=\"_blank\">you can also</a> use <code>setTimeout</code> recursively!)</p>\n          \n          <p>\n            For both types of timers, if you want to stop the delay/interval you'll need a variable\n            to keep track of the timer id (returned\n            by both functions) to pass to <code>clearTimeout</code>/<code>clearInterval</code> \n          </p>\n        </section>", "text": "Summary When you want to call a function after a specified delay in time, use setTimeout. When you want to call a function repeatedly every X seconds, use setInterval (though you can also use setTimeout recursively!) For both types of timers, if you want to stop the delay/interval you'll need a variable to keep track of the timer id (returned by both functions) to pass to clearTimeout/clearInterval", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec10-timers/"},
{"html": "<section>\n\t\t\t\t\t<h3>Back to our Form Example</h3>\n          <pre><code class=\"hljs\">&lt;form&gt;\n  &lt;label for=\"city-input\"&gt;City: &lt;/label&gt;\n  &lt;input name=\"city\" type=\"text\" /&gt;\n  &lt;label for=\"state-input\"&gt;State: &lt;/label&gt;\n  &lt;input name=\"state\" type=\"text\" /&gt;\n  &lt;label for=\"zip-input\"&gt;ZIP: &lt;/label&gt;\n  &lt;input name=\"zip\" type=\"number\" /&gt;\n  &lt;button id=\"submit-btn\"&gt;Submit!&lt;/button&gt;\n&lt;/form&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\" id=\"form-example-0\">\n            <form id=\"submission-demo\">\n              City: <input name=\"city\" type=\"text\">\n              State: <input name=\"state\" type=\"text\">\n              ZIP: <input name=\"zip\" type=\"text\">\n              <button>Submit!</button>\n            </form>\n          </div>\n          <p class=\"output-caption\">output</p>\n          <div class=\"font-20pt\">\n          <p>We can validate this input in a few different ways:</p>\n          <ol>\n            <li>Client-side: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\">HTML5\n               form elements</a> and input tag attributes</li>\n            <li>Client-side: JS before sending this form data to the server (e.g. a PHP web service)</li>\n            <li>Server-side: PHP (later)!</li>\n          </ol>\n          </div>\n        </section>", "text": "Back to our Form Example <form> <label for=\"city-input\">City: </label> <input name=\"city\" type=\"text\" /> <label for=\"state-input\">State: </label> <input name=\"state\" type=\"text\" /> <label for=\"zip-input\">ZIP: </label> <input name=\"zip\" type=\"number\" /> <button id=\"submit-btn\">Submit!</button></form> HTML City: State: ZIP: Submit! output We can validate this input in a few different ways: Client-side: HTML5 form elements and input tag attributes Client-side: JS before sending this form data to the server (e.g. a PHP web service) Server-side: PHP (later)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>HTML5 Input Validation</h2>\n          <p>\n            We've already seen some ways to use HTML5 tags to require certain types of input by\n            adding attributes to your <code>&lt;input&gt;</code> tags to help with validation\n          </p>\n          <pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span>&gt;</span></code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>We can limit the up and down arrows with <code>min</code> (and <code>max</code> if we choose)</p>\n          <p>\n            </p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">0</span>&gt;</span></code></pre>\n            <p class=\"code-caption\">HTML</p>\n          <p></p>\n          <p>\n            To insist that there is a value in the input field we can add <code>required</code>\n          </p>\n          <pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">required</span>&gt;</span></code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>\n            To prevent a user from being able to type in erroneous values, we can add a\n            <em>regular expression</em> to the <code>required</code> attribute\n          </p>\n          <p>\n            </p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">required</span>=<span class=\"hljs-string\">\"\\d+\"</span>&gt;</span></code></pre>\n            <p class=\"code-caption\">HTML</p>\n        </section>", "text": "HTML5 Input Validation We've already seen some ways to use HTML5 tags to require certain types of input by adding attributes to your <input> tags to help with validation <input type=\"number\"> HTML We can limit the up and down arrows with min (and max if we choose) <input type=\"number\" min=0> HTML To insist that there is a value in the input field we can add required <input type=\"number\" required> HTML To prevent a user from being able to type in erroneous values, we can add a regular expression to the required attribute <input type=\"number\" required=\"\\d+\"> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Basic HTML5 Validation with our basic <code>form</code></h3>\n          <pre><code class=\"hljs\">&lt;form&gt;\n  &lt;label for=\"city-input\"&gt;City: &lt;/label&gt;\n  &lt;input name=\"city\" type=\"text\" required/&gt;\n  &lt;label for=\"state-input\"&gt;State: &lt;/label&gt;\n  &lt;input name=\"state\" type=\"text\" size=\"2\" maxlength=\"2\" required/&gt;\n  &lt;label for=\"zip-input\"&gt;ZIP: &lt;/label&gt;\n  &lt;input name=\"zip\" type=\"number\" size=\"5\" min=10000 max=99999 required/&gt;\n  &lt;button id=\"submit-btn\"&gt;Submit!&lt;/button&gt;\n&lt;/form&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\" id=\"form-example\">\n            <form id=\"submission-demov2\">\n              City: <input name=\"city\" required=\"\">\n              State: <input name=\"state\" size=\"2\" maxlength=\"2\" required=\"\">\n              ZIP: <input name=\"zip\" size=\"5\" maxlength=\"5\" required=\"\">\n              <button>Submit!</button>\n            </form>\n          </div>\n          <p>Forms are HTML elements that can be used to \"package\" user input values baesd on the\n          name attribute, often used with POST requests. There are many neat ways to perform\n          validation with the right choice of form elements!\n          </p>\n        </section>", "text": "Basic HTML5 Validation with our basic form <form> <label for=\"city-input\">City: </label> <input name=\"city\" type=\"text\" required/> <label for=\"state-input\">State: </label> <input name=\"state\" type=\"text\" size=\"2\" maxlength=\"2\" required/> <label for=\"zip-input\">ZIP: </label> <input name=\"zip\" type=\"number\" size=\"5\" min=10000 max=99999 required/> <button id=\"submit-btn\">Submit!</button></form> HTML City: State: ZIP: Submit! Forms are HTML elements that can be used to \"package\" user input values baesd on the name attribute, often used with POST requests. There are many neat ways to perform validation with the right choice of form elements!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>The Importance of the &lt;label&gt; in Forms</h3>\n          <p>The label is important when building forms (especially today) to aid assistive\n          technology in reading the form elements. Each text label should be wrapped in a label tag,\n          and include the \"for\" attribute with the <em>id</em> of the labeled element.\n          </p>\n          <pre><code class=\"hljs no-syntax-highlight\">&lt;label for=\"name-input\"&gt;Name: \n  &lt;input type=\"text\" id=\"name-input\" name=\"student-name\" /&gt;\n&lt;/label&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <p>This is read by most screenreaders as \"Name, edit text\"</p>\n          <p>More information <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/How_to_structure_an_HTML_form#The_%3Clabel%3E_element\">here</a>.\n          </p><p>You can also get the <a href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en\">ChromeVox</a> Chrome Extension to test what screenreaders would say on your webpages!</p>\n        </section>", "text": "The Importance of the <label> in Forms The label is important when building forms (especially today) to aid assistive technology in reading the form elements. Each text label should be wrapped in a label tag, and include the \"for\" attribute with the id of the labeled element. <label for=\"name-input\">Name: <input type=\"text\" id=\"name-input\" name=\"student-name\" /></label> HTML This is read by most screenreaders as \"Name, edit text\" More information here. You can also get the ChromeVox Chrome Extension to test what screenreaders would say on your webpages!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Short Case Study: WPL Queue!</h3>\n          <p>\n            <img class=\"centered-figure w-66\" src=\"hidden/wpl.png\" alt=\"Validation Form Example\">\n          </p>\n          <p>Solution code (try adding more validation methods on your own!):</p>\n          <ul>\n            <li><a href=\"wpl-form/wpl.html\">wpl.html</a> (running solution)</li>\n            <li><a href=\"wpl-form/wpl.js\">wpl.js</a> (JS source code)</li>\n          </ul>\n        </section>", "text": "Short Case Study: WPL Queue! Solution code (try adding more validation methods on your own!): wpl.html (running solution) wpl.js (JS source code)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>wpl.html Form (with Validation Attributes)</h3>\n          <pre><code class=\"hljs font-12pt\">&lt;form id=\"input-form\"&gt;\n  &lt;div&gt;\n    &lt;label for=\"name-input\"&gt;Name: &lt;/label&gt;\n    &lt;input id=\"name-input\" name=\"student-name\" type=\"text\" required/&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"email-input\"&gt;E-mail (@uw.edu): &lt;/label&gt;\n    &lt;input id=\"email-input\" name=\"email\" type=\"email\" required/&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"sid-input\"&gt;Student Number: &lt;/label&gt;\n    &lt;!-- \n      A valid student number is 7 digits; demo considering students between 2010 (min) and 2019\n      (max) to demonstrate min/max\n    --&gt;\n    &lt;input id=\"sid-input\" name=\"sid\" type=\"number\" min=1000000 max=1999999 /&gt;\n  &lt;/div&gt;\n  &lt;div id=\"minute-options\"&gt;\n    &lt;label&gt;2-Minute Question &lt;input type=\"radio\" name=\"minutes\" value=2 /&gt;&lt;/label&gt;\n    &lt;label&gt;10-Minute Question &lt;input type=\"radio\" name=\"minutes\" value=10 /&gt;&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;textarea name=\"question\" minlength=20 rows=10 placeholder=\"Enter your question...\"&gt;&lt;/textarea&gt;\n  &lt;button id=\"submit-btn\" type=\"submit\"&gt;Enter Queue!&lt;/button&gt;\n&lt;/form&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n        </section>", "text": "wpl.html Form (with Validation Attributes) <form id=\"input-form\"> <div> <label for=\"name-input\">Name: </label> <input id=\"name-input\" name=\"student-name\" type=\"text\" required/> </div> <div> <label for=\"email-input\">E-mail (@uw.edu): </label> <input id=\"email-input\" name=\"email\" type=\"email\" required/> </div> <div> <label for=\"sid-input\">Student Number: </label> <!-- A valid student number is 7 digits; demo considering students between 2010 (min) and 2019 (max) to demonstrate min/max --> <input id=\"sid-input\" name=\"sid\" type=\"number\" min=1000000 max=1999999 /> </div> <div id=\"minute-options\"> <label>2-Minute Question <input type=\"radio\" name=\"minutes\" value=2 /></label> <label>10-Minute Question <input type=\"radio\" name=\"minutes\" value=10 /></label> </div> <textarea name=\"question\" minlength=20 rows=10 placeholder=\"Enter your question...\"></textarea> <button id=\"submit-btn\" type=\"submit\">Enter Queue!</button></form> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>wpl.js - Preventing Default Form Submit Behavior</h3>\n          <pre><code class=\"hljs\">/**\n * Override the default submission behavior for the form's submit event.\n */\nfunction initialize() {\n  id(\"input-form\").addEventListener(\"submit\", function(e) {\n    // if we've gotten in here, all HTML5 validation checks have passed\n    e.preventDefault(); \n    submitRequest();\n  });\n}</code></pre>\n          <p class=\"code-caption\">wpl.js</p>\n        </section>", "text": "wpl.js - Preventing Default Form Submit Behavior /** * Override the default submission behavior for the form's submit event. */function initialize() { id(\"input-form\").addEventListener(\"submit\", function(e) { // if we've gotten in here, all HTML5 validation checks have passed e.preventDefault(); submitRequest(); });} wpl.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>wpl.js - Sending Form Data with POST (with form argument)</h3>\n          <pre class=\"no-syntax-highlight\"><code class=\"hljs font-14pt\">/**\n * Send form data to the WPL web service. Note that this function \n * is called only after all HTML5 validation constraints \n * (e.g. required attributes) have passed!\n */\nfunction submitRequest() {\n  // Solution 1: Can use form DOM element as parameter to FormData!\n  let formData = new FormData(id(\"input-form\"));\n\n  // Note that unlike GET requests, no url parameters passed in a POST request!\n  fetch(URL, { method : \"POST\", body : formData })\n    .then(checkStatus) // The wpl.php will return text for this demo, no JSON\n    .then(showResponse)\n    .catch(handleError);\n}</code></pre>\n          <p class=\"code-caption\">wpl.js</p>\n          <p>This <code>submitRequest()</code> function is called in the overriden submit behavior\n          (from previous slide).</p>\n        </section>", "text": "wpl.js - Sending Form Data with POST (with form argument) /** * Send form data to the WPL web service. Note that this function * is called only after all HTML5 validation constraints * (e.g. required attributes) have passed! */function submitRequest() { // Solution 1: Can use form DOM element as parameter to FormData! let formData = new FormData(id(\"input-form\")); // Note that unlike GET requests, no url parameters passed in a POST request! fetch(URL, { method : \"POST\", body : formData }) .then(checkStatus) // The wpl.php will return text for this demo, no JSON .then(showResponse) .catch(handleError);} wpl.js This submitRequest() function is called in the overriden submit behavior (from previous slide).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section class=\"font-16pt-slide\">\n          <h3>wpl.js - Sending Form Data with POST (Another Solution)</h3>\n          <pre class=\"no-syntax-highlight\"><code class=\"hljs font-12pt\">/**\n * Send form data to the WPL web service. \n */\nfunction submitRequest() {\n  let formData = new FormData();\n\n  // Build the 4 parameters for our POST request\n  formData.append(\"sid\", qs(\"input[name='sid']\").value);\n  formData.append(\"name\", qs(\"input[name='name']\").value);\n  formData.append(\"minutes\", qs(\"textarea\").value);\n  formData.append(\"question\", qs(\"input[name='minutes']:checked\").value);\n\n  fetch(URL, { method : \"POST\", body : formData })\n    .then(checkStatus) \n    .then(showResponse)\n    .catch(handleError);\n}</code></pre>\n          <p class=\"code-caption\">wpl.js</p>\n          <p>As shown on Monday, we can also use the append method to append parameters one at a\n          time (in this example, wpl.php only expects the 4 POST parameters)\n          </p>\n          <p>While this is a bit more work, we don't always need to send all form elements in an\n          API request, and it also gives us more control over validation checks in JS (for\n          properties you can't check with HTML5 attributes) before the fetch.\n        </p>\n        </section>", "text": "wpl.js - Sending Form Data with POST (Another Solution) /** * Send form data to the WPL web service. */function submitRequest() { let formData = new FormData(); // Build the 4 parameters for our POST request formData.append(\"sid\", qs(\"input[name='sid']\").value); formData.append(\"name\", qs(\"input[name='name']\").value); formData.append(\"minutes\", qs(\"textarea\").value); formData.append(\"question\", qs(\"input[name='minutes']:checked\").value); fetch(URL, { method : \"POST\", body : formData }) .then(checkStatus) .then(showResponse) .catch(handleError);} wpl.js As shown on Monday, we can also use the append method to append parameters one at a time (in this example, wpl.php only expects the 4 POST parameters) While this is a bit more work, we don't always need to send all form elements in an API request, and it also gives us more control over validation checks in JS (for properties you can't check with HTML5 attributes) before the fetch.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h3>Friday: From Client to Server</h3> \n          <p>\n          Friday we will be starting Module 4 (PHP), where you will learn how to handle the\n          requests you have been sending as clients!\n          </p>\n          <p>\n          An interactive \"PHP Basics\" Tutorial is posted for Friday! Please play around a bit with\n          the language before Friday!\n          </p>\n        </section>", "text": "Friday: From Client to Server Friday we will be starting Module 4 (PHP), where you will learn how to handle the requests you have been sending as clients! An interactive \"PHP Basics\" Tutorial is posted for Friday! Please play around a bit with the language before Friday!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/"},
{"html": "<section>\n          <h2>Quick check</h2>\n          <p>By the end of today you should be able to decide which of these technologies are best in each situation</p>\n          <div class=\"side-by-side\">\n            <div class=\"space-right\">\n              <ul>\n                <li>\n                  cookies\n                </li>\n                <li>\n                  localStorage\n                </li>\n                <li>\n                  sessionStorage\n                </li>\n                <li>\n                  indexDB/Dexie\n                </li>\n              </ul>\n            </div>\n            <div class=\"space-left\">\n              <ul>\n                <li>\n                  Storing the status a user has successfully logged into a website, but ensuring the log in status is deleted when they close the browser tab.\n                </li>\n                <li>\n                  Keeping track of which emojis are used on the client only.\n                </li>\n                <li>\n                  Storing a value in the browser that is accessible from the server. \"\n                </li>\n                <li>\n                  Temporarily retaining large pieces of information that are being downloaded from a website, but most of your users primarily use mobile phones to access the site.\n                </li>\n              </ul>\n            </div>\n\n        \n\n<!--\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/r2sFeKvX9E9r27T?controls=none&short_poll=true\" width=\"800px\" height=\"400px\" frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/MJOn9VUkumBdR6a?controls=none&short_poll=true\" width=\"800px\" height=\"400px\"  frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/Sinodl8b1TppkNt?controls=none&short_poll=true\" width=\"800px\" height=\"400px\" frameBorder=\"0\"></iframe>\n        </section>\n\n        <section>\n          <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/acjidq19s633Bfz?controls=none&short_poll=true\" width=\"800px\" height=\"400px\"  frameBorder=\"0\"></iframe>\n        </section>\n\n      </section>\n-->\n\n      <section>\n        <h2>HTTP and State</h2>\n        <p>\n          HTTP is a stateless protocol; it\n          simply allows a browser to request a\n          single document from a web server\n        </p>\n        <p>\n          Once the document has been sent to the client, the server\n          does not keep track of any information about what was sent\n          (other than maybe in a log file of the transaction).\n        </p>\n      </section>\n\n      <section>\n        <h2>Stateful client/server interaction</h2>\n        <p><em>Sites like amazon.com seem to \"know\n          who I am.\" How do they do this? How\n          does a client uniquely identify itself to\n          a server, and how does the server\n          provide specific content to each client?\n        </em></p>\n        <p class=\"space-above\">\n          When has this happened to you? What sites were involved?\n        </p>\n        <p class=\"space-above\">\n          Today we'll learn some technologies that are used to store\n          \"state\" on your client machine.\n        </p>\n        <ul>\n          <li>\n            Sometimes state is kept simply to aid in the user experience.\n          </li>\n          <li>\n            Sometimes state is passed back to the server from the client... and sometimes that\n            happens when you least expect it.\n          </li>\n        </ul>\n\n      </section>\n\n\n      <section>\n        <h2>What is a cookie?</h2>\n        <ul>\n          <li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">cookie</a>: a small amount of information stored within\n          the computer browser</li>\n          <li>cookies have many uses:\n              <ul>\n                  <li>authentication</li>\n                  <li>user tracking</li>\n                  <li>maintaining user preferences, shopping carts, etc.</li>\n              </ul>\n          </li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>A \"tracking cookie\"</h2>\n        <img src=\"img/tracking-cookie.png\">\n        <ul>\n          <li>an advertising company can put a cookie on your machine when you visit one\n          site, and see it when you visit another site that also uses that advertising\n          company\n          </li>\n          <li>therefore they can tell that the same person (you) visited both sites</li>\n          <li>can be thwarted by telling your browser not to accept \"third-party cookies\"</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Ever changing web</h2>\n        <p>New privacy laws in Europe (<a href=\"https://en.wikipedia.org/wiki/General_Data_Protection_Regulation\">GDPR</a>)\n          are making website owners rethink using cookies\n        </p>\n        <img style=\"height: 400px\" class=\"simpleimg\" src=\"img/updatedGDPR.png\" alt=\"updated GDPR notice example\">\n      </section>\n\n\n      <section>\n        <h2>How cookies are set and retrieved</h2>\n        <ul>\n          <li>Client side (JavaScript):\n              <ul>\n                  <li>JavaScript commands can set and retrieved using\n                      <code>document.cookie</code></li>\n              </ul>\n          </li>\n          <li>Server Side (PHP):\n              <ul>\n                <li>\n                  When the browser requests a page, the server may send back a cookie(s)\n                  with it to store on the client\n                </li>\n                <li>\n                  If your server has previously sent any cookies to the browser, the browser\n                  will send them back on subsequent requests to remind the server who is connecting\n                  to it.\n                 </li>\n              </ul>\n          </li>\n        </ul>\n      </section>\n\n      <section>\n        <h2>Facts about cookies</h2>\n        <ul>\n          <li>Cookies are only data, not program code.</li>\n          <li>Cookies can have set expiration dates.</li>\n          <li>Cookies help websites remember who you are (and if you are logged in).</li>\n          <li>Cookies CAN be used to track your viewing habits on a particular site.</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> setting</h2>\n        <ul>\n          <li>To set a cookie use <code>document.cookie = cookieString;</code></li>\n          <li><code>cookieString</code> consists of 3 semicolon separated parts (the second two are optional):\n            <ul>\n              <li>name / value pair. E.g., <code>\"lastItemBought=apples\"</code></li>\n              <li>expiration date (by default when browser closed). E.g., <code>\"expires=Thu, 23 May 2018 12:00:00 UTC\"</code></li>\n              <li>Path where cookie belongs (default is current page). E.g., <code>\"path=/\"</code></li>\n            </ul>\n          </li>\n          <li>If you set a cookie where the name already has a value, the old value gets overwritten.</li>\n        </ul>\n        <pre><code data-trim>document.cookie = \"lastItemBought=apples; \" +\n    \"expires=Thu, 23 May 2018 12:00:00 UTC; \" +\n    \"path=/\";</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Retrieving</h2>\n        <ul>\n          <li>To get a cookie use <code>let cookies = document.cookie;</code></li>\n          <li>\n            This will return a semicolon separated list of all current name=value pairs<br>\n            E.g., <code>\"lastItemBought=apples; numberSiteVisitsToday=57\"</code></li>\n          <li>You have to retrieve the values from the string by parsing yourself.</li>\n        </ul>\n      </section>\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Clearing</h2>\n        <p>To delete a cookie you need to set it's expiration time to be before now\n        </p>\n        <pre><code data-trim>document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';</code></pre>\n<p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n\n      <section>\n        <h2>Cookies Recap</h2>\n        <ul>\n          <li> <del>...delicious, particularly with chocolate chips.</del></li>\n          <li> ...are a way to store information or the state of your website.</li>\n          <li> ...can be set so they expire after a time, or after you close the page.</li>\n          <li> ...are kind of a pain to retreive,\n            if there are many cookies that are set already.</li>\n          <li> ...they only allow up to only 4 KB of data storage.</li>\n          <li> ...they can be used by malicious sites to \"spy\" on browsing behavior.</li>\n        </ul>\n    </section>\n\n\n    <section>\n      <h2><code>localStorage</code> and <code>sessionStorage</code></h2>\n    </section>\n\n      <section>\n        <h2>localStorage and sessionStorage</h2>\n        <div class=\"side-by-side\">\n          <div style=\"width: 800px\">\n            <img class=\"simpleimg\" style=\"margin-top: 50px; margin-right: 10px\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c7/Public_Storage_doors.jpg\" alt=\"storage doors\">\n            <p>From <a href=\"https://en.wikipedia.org/wiki/File:Public_Storage_doors.jpg\">Wikipedia</a></p>\n          </div>\n          <div>\n            <p>\n              <code>localStorage</code> is a <code>document</code> property that allows\n              you to save information across browser sessions (i.e after you close the browser)\n            </p>\n            <p>\n              <code>sessionStorage</code> is a <code>document</code> property that allows\n              you to save information for this session only, and will be cleared when\n              the page is closed.\n            </p>\n            <p>Both <code>localStorage</code> and <code>sessionStorage</code>\n              inherit from <code>Storage</code> class.\n            </p>\n            <p>Name/value pairs (seen in cookies and Storage) are supported by\n              <a href=\"https://caniuse.com/#search=localstorage\">most every\n                browser</a>\n            </p>\n          </div>\n      \n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">Storage</a></h2>\n        <p>There are three methods we're interested in from <code>Storage</code> </p>\n        <table>\n          <tr>\n            <th>method</th>\n            <th>description</th>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem(keyName, keyValue)</a></td>\n            <td>Sets the <code>keyName</code> location in localStorage to be <code>keyValue</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem(keyName)</a></td>\n            <td>Retrieves the <code>keyValue</code> in localStorage associated with <code>keyName</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem(keyName)</a></td>\n            <td>Removes the <code>keyName</code> location in localStorage</td>\n          </tr>\n        </table>\n\n      </section>\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> example</h2>\n        <pre><code data-trim>window.localStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.localStorage.setItem(\"Lauren\", \"Spot\");\nwindow.localStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.localStorage.getItem(\"Lauren\");\nwindow.localStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">sessionStorage</a> example</h2>\n        <p>Similarly for sessionStorage</p>\n        <pre><code data-trim>window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.sessionStorage.setItem(\"Lauren\", \"Spot\");\nwindow.sessionStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.sessionStorage.getItem(\"Lauren\");\nwindow.sessionStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/sessionStorage.png\" alt=\"sessionStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/sessionStorageAfter.png\" alt=\"sessionStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n      <section>\n        <h2><code>indexDB</code></h2>\n      </section>\n\n      <section>\n        <section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\"><code>indexDB</code></a></h2>\n          <p><code>cookies</code>, <code>localStorage</code>,\n            <code>sessionStorage</code> can only store small amounts of\n            data\n          </p>\n          <p>\n            <code>indexDB</code> is a \"a low-level API for client-side storage\n            of significant amounts of structured data, including files/blobs\"\n          </p>\n          <p>\n            Look down through the slides if you want to know more...\n          </p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>There are many flavors types of indexDB - so apparently you have to cover your\n            bases with creating the database for your page:\n          </p>\n          <pre><code data-trim>// This works on all devices/browsers, and uses\n// IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(&lt;dbname&gt;, &lt;version&gt;);</code></pre>\n          <p class=\"code-caption\">JavaScript (template)</p>\n          <pre><code data-trim>// This works on all devices/browsers,\n// and uses IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(\"terms\", 1);</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>You need to set callbacks on the new database object, so once\n            the database is created, the tables (schema) can be created.\n          </p>\n          <pre><code data-trim>openDB.onupgradeneeded = function() {\n  let db = openDB.result;\n  let store = db.createObjectStore(\"terms\", {keyPath: \"term\"});\n  let index = store.createIndex(\"definition\", \"definition\", { unique: false });\n};\nopenDB.onsuccess = function() {\n  console.log(\"Database created!\");\n}</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> setting values</h2>\n          <pre><code data-trim>// Start a new transaction\nlet db = openDB.result;\nlet tx = db.transaction(\"terms\", \"readwrite\");\nlet store = tx.objectStore(\"terms\");\nlet index = store.index(\"definition\");\n\n// get the term and definition from the user\n\nstore.put({key: userTerm, definition: userDef});\n\n// Close the db when the transaction is done\ntx.oncomplete = function() {\n  db.close();\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> getting values</h2>\n          <pre><code data-trim>// assume the variable term has been set\nlet getValue = store.get(term);\n\ngetValue.onsuccess = function() {\n  alert(getValue.result.definition);\n};\n\ngetValue.onerror = function() {\n  // error handling here\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n      </section>\n\n\n      <section>\n        <h2>Phew... that was a lot of work. And confusing too </h2>\n        <p>Dexie to the rescue</p>\n      </section>\n\n\n      <section>\n        <h2><a href=\"http://dexie.org/\">Dexie</a></h2>\n        <p>Dexie is a wrapper around <code>indexDB</code> that makes it MUCH easier to use. </p>\n        <pre><code class=\"small-font\" data-trim>// create the database (module global)\nlet db = new Dexie(&lt;name of database&gt;);\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    // this is the table with the columns that are to be indexed.\n    &lt;tableName&gt;: '&lt;column1&gt;, &lt;column2&gt;...'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code class=\"small-font\" data-trim>let db = new Dexie(\"definitions\");\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    terms: 'term,definition'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.put()\">put</a></h2>\n        <p>Putting an item in a table is pretty straight forward: </p>\n        <pre><code data-trim>db.&lt;tableName&gt;.put({\"column1\": &lt;value1&gt;, \"column2\": &lt;value2&gt;, ...});</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.put({\"term\": term, \"definition\": definition});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.get()\">get</a></h2>\n        <p>There are two ways to get information back out of a table, using either a\n        callback, or a <code>Promise</code> </p>\n        <pre><code data-trim>// get with a callback\ndb.&lt;tableName&gt;.get(&lt;key&gt;, function (item) {\n  // do something here\n});\n// get with a Promise.\ndb.&lt;tableName&gt;.get(&lt;key&gt;).then (function (item) {\n  // do something here\n}); </code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.get(term, function (item) {\n  console.log(\"Callback: Item at \" + term + \" is \" + item.definition);\n});\n\ndb.terms.get(term).then (function (item) {\n  console.log(\"Promise: Item at \" + term + \" is \" + item.definition);\n});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Compliance</h2>\n        <p>\n          The one issue with all of these newer technologies\n          (<code>localStorage</code>, <code>sessionStorage</code>,\n          <code>indexDB</code>, and frameworks like <code>Dexie</code>) is cross\n          browser compatibilty\n        </p>\n        <p>\n          <a href=\"https://whatwebcando.today/\">What Web Can Do Today</a>\n          (Try this in different browsers or on your phone)\n        </p>\n        <p>\n          <a href=\"https://www.w3.org/2018/04/web-roadmaps/mobile/\">Roadmap of Web Applications on Mobile</a>\n        </p>\n        <p>\n          <a href=\"https://caniuse.com/\">Can I use</a> - \"provides  up-to-date browser support tables for\n            support of front-end web technologies on desktop and mobile web browsers.\"\n        </p>\n      </section>\n\n        <section>\n          <h2>Post lecture quick check</h2>\n        </section>\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/zZfOgnl2caG4CJvZ0H5kU?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/xgcnByfvFsNndc2YsaRVA?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/XB8ZckXNfHaF17N88o0N8?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/6il27nq5b7hQqQPs5x137?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n\n\n\n      </div>\n    </section></div>\n\n   <script src=\"../../site/reveal/lib/js/head.min.js\"></script>\n      <script src=\"../../site/reveal/js/reveal.js\"></script>\n\n      <script>\n\n        Reveal.initialize({\n          controls: true,\n          progress: true,\n          history: true,\n          center: true,\n\n          transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n          // More info https://github.com/hakimel/reveal.js#dependencies\n          dependencies: [\n            { src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },\n            { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n            { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n            { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n            { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true },\n            { src: '../../site/reveal/plugin/notes/notes.js', async: true },\n            { src: '../../site/reveal/plugin/search/search.js', async: true },\n            { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true }\n          ]\n        });\n\n      </script>\n\n    </section>", "text": "Quick check By the end of today you should be able to decide which of these technologies are best in each situation cookies localStorage sessionStorage indexDB/Dexie Storing the status a user has successfully logged into a website, but ensuring the log in status is deleted when they close the browser tab. Keeping track of which emojis are used on the client only. Storing a value in the browser that is accessible from the server. \" Temporarily retaining large pieces of information that are being downloaded from a website, but most of your users primarily use mobile phones to access the site. <!-- --> HTTP and State HTTP is a stateless protocol; it simply allows a browser to request a single document from a web server Once the document has been sent to the client, the server does not keep track of any information about what was sent (other than maybe in a log file of the transaction). Stateful client/server interaction Sites like amazon.com seem to \"know who I am.\" How do they do this? How does a client uniquely identify itself to a server, and how does the server provide specific content to each client? When has this happened to you? What sites were involved? Today we'll learn some technologies that are used to store \"state\" on your client machine. Sometimes state is kept simply to aid in the user experience. Sometimes state is passed back to the server from the client... and sometimes that happens when you least expect it. What is a cookie? cookie: a small amount of information stored within the computer browser cookies have many uses: authentication user tracking maintaining user preferences, shopping carts, etc. A \"tracking cookie\" an advertising company can put a cookie on your machine when you visit one site, and see it when you visit another site that also uses that advertising company therefore they can tell that the same person (you) visited both sites can be thwarted by telling your browser not to accept \"third-party cookies\" Ever changing web New privacy laws in Europe (GDPR) are making website owners rethink using cookies How cookies are set and retrieved Client side (JavaScript): JavaScript commands can set and retrieved using document.cookie Server Side (PHP): When the browser requests a page, the server may send back a cookie(s) with it to store on the client If your server has previously sent any cookies to the browser, the browser will send them back on subsequent requests to remind the server who is connecting to it. Facts about cookies Cookies are only data, not program code. Cookies can have set expiration dates. Cookies help websites remember who you are (and if you are logged in). Cookies CAN be used to track your viewing habits on a particular site. Cookies in JavaScript: setting To set a cookie use document.cookie = cookieString; cookieString consists of 3 semicolon separated parts (the second two are optional): name / value pair. E.g., \"lastItemBought=apples\" expiration date (by default when browser closed). E.g., \"expires=Thu, 23 May 2018 12:00:00 UTC\" Path where cookie belongs (default is current page). E.g., \"path=/\" If you set a cookie where the name already has a value, the old value gets overwritten. document.cookie = \"lastItemBought=apples; \" + \"expires=Thu, 23 May 2018 12:00:00 UTC; \" + \"path=/\"; JavaScript (example) Cookies in JavaScript: Retrieving To get a cookie use let cookies = document.cookie; This will return a semicolon separated list of all current name=value pairs E.g., \"lastItemBought=apples; numberSiteVisitsToday=57\" You have to retrieve the values from the string by parsing yourself. Cookies in JavaScript: Clearing To delete a cookie you need to set it's expiration time to be before now document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';JavaScript (example) Cookies Recap ...delicious, particularly with chocolate chips. ...are a way to store information or the state of your website. ...can be set so they expire after a time, or after you close the page. ...are kind of a pain to retreive, if there are many cookies that are set already. ...they only allow up to only 4 KB of data storage. ...they can be used by malicious sites to \"spy\" on browsing behavior. localStorage and sessionStorage localStorage and sessionStorage From Wikipedia localStorage is a document property that allows you to save information across browser sessions (i.e after you close the browser) sessionStorage is a document property that allows you to save information for this session only, and will be cleared when the page is closed. Both localStorage and sessionStorage inherit from Storage class. Name/value pairs (seen in cookies and Storage) are supported by most every browser Storage There are three methods we're interested in from Storage method description setItem(keyName, keyValue) Sets the keyName location in localStorage to be keyValue getItem(keyName) Retrieves the keyValue in localStorage associated with keyName removeItem(keyName) Removes the keyName location in localStorage localStorage example window.localStorage.setItem(\"Melissa\", \"Mowgli\");window.localStorage.setItem(\"Lauren\", \"Spot\");window.localStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.localStorage.getItem(\"Lauren\");window.localStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab sessionStorage example Similarly for sessionStorage window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");window.sessionStorage.setItem(\"Lauren\", \"Spot\");window.sessionStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.sessionStorage.getItem(\"Lauren\");window.sessionStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab indexDB indexDB cookies, localStorage, sessionStorage can only store small amounts of data indexDB is a \"a low-level API for client-side storage of significant amounts of structured data, including files/blobs\" Look down through the slides if you want to know more... indexDB usage There are many flavors types of indexDB - so apparently you have to cover your bases with creating the database for your page: // This works on all devices/browsers, and uses// IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(<dbname>, <version>); JavaScript (template) // This works on all devices/browsers,// and uses IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(\"terms\", 1); JavaScript (example) indexDB usage You need to set callbacks on the new database object, so once the database is created, the tables (schema) can be created. openDB.onupgradeneeded = function() { let db = openDB.result; let store = db.createObjectStore(\"terms\", {keyPath: \"term\"}); let index = store.createIndex(\"definition\", \"definition\", { unique: false });};openDB.onsuccess = function() { console.log(\"Database created!\");} JavaScript (example) indexDB setting values // Start a new transactionlet db = openDB.result;let tx = db.transaction(\"terms\", \"readwrite\");let store = tx.objectStore(\"terms\");let index = store.index(\"definition\");// get the term and definition from the userstore.put({key: userTerm, definition: userDef});// Close the db when the transaction is donetx.oncomplete = function() { db.close();}; JavaScript (example) indexDB getting values // assume the variable term has been setlet getValue = store.get(term);getValue.onsuccess = function() { alert(getValue.result.definition);};getValue.onerror = function() { // error handling here}; JavaScript (example) Phew... that was a lot of work. And confusing too Dexie to the rescue Dexie Dexie is a wrapper around indexDB that makes it MUCH easier to use. // create the database (module global)let db = new Dexie(<name of database>);window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ // this is the table with the columns that are to be indexed. <tableName>: '<column1>, <column2>...' });}; JavaScript (template) let db = new Dexie(\"definitions\");window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ terms: 'term,definition' });}; JavaScript (example) Dexie put Putting an item in a table is pretty straight forward: db.<tableName>.put({\"column1\": <value1>, \"column2\": <value2>, ...}); JavaScript (template) db.terms.put({\"term\": term, \"definition\": definition}); JavaScript (example) Dexie get There are two ways to get information back out of a table, using either a callback, or a Promise // get with a callbackdb.<tableName>.get(<key>, function (item) { // do something here});// get with a Promise.db.<tableName>.get(<key>).then (function (item) { // do something here}); JavaScript (template) db.terms.get(term, function (item) { console.log(\"Callback: Item at \" + term + \" is \" + item.definition);});db.terms.get(term).then (function (item) { console.log(\"Promise: Item at \" + term + \" is \" + item.definition);}); JavaScript (example) Compliance The one issue with all of these newer technologies (localStorage, sessionStorage, indexDB, and frameworks like Dexie) is cross browser compatibilty What Web Can Do Today (Try this in different browsers or on your phone) Roadmap of Web Applications on Mobile Can I use - \"provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.\" Post lecture quick check Reveal.initialize({ controls: true, progress: true, history: true, center: true, transition: 'slide', // none/fade/slide/convex/concave/zoom // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: '../../site/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../site/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../site/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../site/reveal/plugin/highlight/highlight.pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../site/reveal/plugin/zoom-js/zoom.js', async: true }, { src: '../../site/reveal/plugin/notes/notes.js', async: true }, { src: '../../site/reveal/plugin/search/search.js', async: true }, { src: '../../site/reveal/plugin/print-pdf/printpdfbtn.js', async: true } ] });", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>APIs</h2>\n      </section>", "text": "APIs", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>Application Program Interfaces (APIs)</h2>\n        <p>\n          An application programming interface (API) is a communication protocols that\n          allows two pieces of software to communicate.\n        </p>\n        <p>\n          A Web API is a set of pre-defined URLs with parameters that allow a user to get\n          information from a web server.\n        </p>\n        <p>\n          API examples we'll be demonstrating in class\n        </p>\n        <ul class=\"no-bullets\">\n          <li><a href=\"https://api.nasa.gov/#getting-started\" target=\"_blank\">NASA API</a></li>\n          <li><a href=\"https://opentdb.com/api_config.php\" target=\"_blank\">Trivia API</a></li>\n          <li><a href=\"http://numbersapi.com/\" target=\"_blank\">Numbers API</a></li>\n        </ul>\n      </section>", "text": "Application Program Interfaces (APIs) An application programming interface (API) is a communication protocols that allows two pieces of software to communicate. A Web API is a set of pre-defined URLs with parameters that allow a user to get information from a web server. API examples we'll be demonstrating in class NASA API Trivia API Numbers API", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n        <h2>AJAX Demo</h2>\n        <p>\n          On Monday we will be talking about \"how\" to actually get data from the API.\n        </p><p>\n        </p><p>\n          But the first thing you need to do to use an API is <strong>Read the documentation</strong>\n        </p>\n        <ul>\n          <li>Do you need a key to use the API?</li>\n          <li>What are the different types of responses (txt, JSON, HTML, etc.)?</li>\n          <li>\n            What is a use case or a question you could ask with the data available? How could\n            you use this data on your page?\n          </li>\n        </ul>\n        <p>\n          Let's look at\n           <a href=\"https://api.nasa.gov/#getting-started\" target=\"_blank\">NASA API</a>\n         </p>\n          <p class=\"fragment\">Result: <a href=\"apod/apod.html\" target=\"_blank\">Astronomy Picture of the Day</a></p>\n      </section>", "text": "AJAX Demo On Monday we will be talking about \"how\" to actually get data from the API. But the first thing you need to do to use an API is Read the documentation Do you need a key to use the API? What are the different types of responses (txt, JSON, HTML, etc.)? What is a use case or a question you could ask with the data available? How could you use this data on your page? Let's look at NASA API Result: Astronomy Picture of the Day", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>Running through MAMP</h2>\n          <p>\n            In preparation for working with our server side code we installed and\n            and configured a server on our machine called MAMP (Mac Apache MySQL PHP)\n          </p>\n          <p>\n            Now instead of your urls being\n            <code>file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html</code></p>\n          \n          <p>\n            We will run them through <strong>locahost</strong>, e.g.\n          </p>\n          <ul class=\"no-bullets\">\n            <li>Mac: <br> <code>localhost:8888/154-19sp/hw2-set-bricker/set.html</code> </li>\n            <li>Windows: <br>  <code>localhost/154-19sp/hw2-set-bricker/set.html</code></li>\n          </ul>\n        </section>", "text": "Running through MAMP In preparation for working with our server side code we installed and and configured a server on our machine called MAMP (Mac Apache MySQL PHP) Now instead of your urls being file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html We will run them through locahost, e.g. Mac: localhost:8888/154-19sp/hw2-set-bricker/set.html Windows: localhost/154-19sp/hw2-set-bricker/set.html", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>\n          <h2>CORS error</h2>\n          <p>\n            The fetch interaction will not work between some clients and servers due to\n            configurations on the server (whether the server allows \"Cross Origin Requests\")\n          </p>\n          <img class=\"simpleimg\" src=\"hidden/images/cors-problem.png\" alt=\"example of the cors problem\">\n          <div class=\"medium-small-font\">\n          <p>Demo:</p>\n            <ul>\n              <li>APOD running as a file:/// vs localhost/ or localhost:8888/</li>\n              <li>Randomizer running as a file:/// (error) vs localhost/ or localhost:8888/</li>\n            </ul>\n          </div>\n        </section>", "text": "CORS error The fetch interaction will not work between some clients and servers due to configurations on the server (whether the server allows \"Cross Origin Requests\") Demo: APOD running as a file:/// vs localhost/ or localhost:8888/ Randomizer running as a file:/// (error) vs localhost/ or localhost:8888/", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section>CP3 and Weekend Homework\n          <p>\n            CP3 is out - you will be dynamically adding data from an API to your webpage in\n            response to an event.\n          </p>\n          <p>\n            In order to effectively do this, you must first figure out what API you want to use\n            and how you want to use\n          </p>\n          <p>\n            Fill in <a href=\"https://docs.google.com/forms/d/1duo7bJm6td9aeJl5Cea0ruy1ZsiK7CSv3aaWfxOoNDw/edit\">this form</a>\n            by Monday classtime.\n          </p>\n        </section>", "text": "CP3 and Weekend Homework CP3 is out - you will be dynamically adding data from an API to your webpage in response to an event. In order to effectively do this, you must first figure out what API you want to use and how you want to use Fill in this form by Monday classtime.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec12-json/"},
{"html": "<section id=\"hr-tag\">\n            <h2>\n              Horizontal rule:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a horizontal line to visually separate sections of a page (block)</p>\n\n            <pre>\n            <code class=\"hljs\">&lt;&gt;First paragraph&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Third paragraph&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>First paragraph</p>\n              <hr>\n              <p>Second paragraph</p>\n              <hr>\n              <p>Third paragraph</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n            This is the first example we've seen of a void (<q>self-closing</q>) tag:\n            <a href=\"https://www.w3.org/TR/html51/syntax.html#writing-html-documents-elements\">more on HTML Element types</a>\n            </p>\n          </section>", "text": "Horizontal rule: <hr> a horizontal line to visually separate sections of a page (block) <>First paragraph</p><hr /><p>Second paragraph</p><hr><p>Third paragraph</p> HTML First paragraph Second paragraph Third paragraph output This is the first example we've seen of a void (self-closing) tag: more on HTML Element types", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"br-tag\">\n            <h2>\n              Line Break:\n              <a href=\"http://www.w3schools.com/tags/tag_br.asp\"><code>&lt;br /&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">forces a line break in the middle of a block element (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The woods are lovely, dark and deep, &lt;br /&gt;\n  But I have promises to keep, &lt;br /&gt;And miles\n  to go before I sleep, &lt;br /&gt;And miles to go before\n  I sleep.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <p>\n              The woods are lovely, dark and deep, <br>\n              But I have promises to keep, <br>And miles\n              to go before I sleep, <br>And miles to go before\n\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Warning: Don't over-use <code>br</code> (guideline: &gt;= 2 in a row is bad, better to not use any)\n            </p>\n            <p>\n            <code>br</code> tags should not be used to separate paragraphs or used multiple times in a row to create spacing\n            </p>\n          </section>", "text": "Line Break: <br /> forces a line break in the middle of a block element (inline) <p> The woods are lovely, dark and deep, <br /> But I have promises to keep, <br />And miles to go before I sleep, <br />And miles to go before I sleep.</p> HTML The woods are lovely, dark and deep, But I have promises to keep, And miles to go before I sleep, And miles to go before output Warning: Don't over-use br (guideline: >= 2 in a row is bad, better to not use any) br tags should not be used to separate paragraphs or used multiple times in a row to create spacing", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"a-tag\">\n            <h2>\n              Links:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">links, or \"anchors\", to other pages (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Search for it on <a href=\"http://www.google.com/\">Google</a>!\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Uses the <code>href</code> (Hypertext REFerence) attribute to specify the destination URL\n            </p><ul>\n              <li>\n                Can be absolute (to another web site) or\n                relative (to another page on this site)\n              </li>\n            </ul>\n            \n            <p>Anchors are inline elements; must be placed in a block element such as\n            <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code>\n            </p>\n          </section>", "text": "Links: <a> links, or \"anchors\", to other pages (inline) <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML Search for it on Google! output Uses the href (Hypertext REFerence) attribute to specify the destination URL Can be absolute (to another web site) or relative (to another page on this site) Anchors are inline elements; must be placed in a block element such as <p> or <h1>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"img-tag\">\n            <h2>\n              Images:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a>\n            </h2>\n\n            <p>Inserts a graphical image into the page (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\n            <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>The <code>src</code> attribute specifies the image URL</p>\n            <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\n            <a href=\"https://moz.com/learn/seo/alt-text\">improves\n              accessibility</a> for users who can't otherwise see it</p>\n          </section>", "text": "Images: <img> Inserts a graphical image into the page (inline) <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /> HTML output The src attribute specifies the image URL HTML5 also requires an alt attribute describing the image, which improves accessibility for users who can't otherwise see it", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>More About Images</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\n  &lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\n   title=\"dumbo!\" /&gt;&lt;/a&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <a href=\"http://en.wikipedia.org/wiki/Koala/\">\n                <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\n              </a>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>If placed in an <code>&lt;a&gt;</code> anchor tag, the image becomes a link</p>\n\n            <p><strong>What's the title attribute?</strong></p>\n            <ul class=\"medium-small-font\">\n              <li title=\"See? Even this bullet right here.\"><code>title</code> attribute is an optional tooltip (on ANY element)</li>\n              <li title=\"Wah wahhhn programming is hard :(\">BUT the <code>title</code> attribute doesn't always work well for mobile and\n                accessibility, so its usage and future are debated</li>\n            </ul>\n          </section>", "text": "More About Images <a href=\"http://en.wikipedia.org/wiki/Koala/\"> <img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo!\" /></a> HTML output If placed in an <a> anchor tag, the image becomes a link What's the title attribute? title attribute is an optional tooltip (on ANY element) BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"em-strong-tags\">\n            <h2>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\">\n                Phrase elements\n              </a>:\n              <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>\n            </h2>\n\n            <p>\n            <code>em</code>: emphasized text (usually rendered in italic) <br>\n            <code>strong</code>: strongly emphasized text (usually rendered in bold)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>As usual, the tags must be properly nested for a valid page</p>\n          </section>", "text": "Phrase elements : <em>, <strong> em: emphasized text (usually rendered in italic) strong: strongly emphasized text (usually rendered in bold) <p> HTML is <em>really</em>, <strong>REALLY</strong> fun!</p> HTML As usual, the tags must be properly nested for a valid page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"abbr-tag\">\n            <h2>\n              Abbreviations:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"><code>&lt;abbr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            an abbreviation, acronym, or slang term (inline)\n            </p>\n\n            <pre><code class=\"hljs \" data-trim>&lt;p&gt;\n  Safe divers always remember to check their\n  &lt;abbr title=\"Self-Contained Underwater Breathing Apparatus\"&gt;\n  SCUBA&lt;/abbr&gt; gear.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Safe divers always remember to check their\n              <abbr title=\"Self-Contained Underwater Breathing Apparatus\">\n                SCUBA</abbr> gear.\n              </p>\n              <p class=\"output-caption\">output</p>\n\n            </div>\n          </section>", "text": "Abbreviations: <abbr> an abbreviation, acronym, or slang term (inline) <p> Safe divers always remember to check their <abbr title=\"Self-Contained Underwater Breathing Apparatus\"> SCUBA</abbr> gear.</p> HTML Safe divers always remember to check their SCUBA gear. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"ul-li-tags\">\n            <h2>\n              Unordered List:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>ul</code> represents a bulleted list of items (block)<br>\n            <code>li</code> represents a single item within the list (block)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;No shoes&lt;/li&gt;\n  &lt;li&gt;No shirt&lt;/li&gt;\n  &lt;li&gt;No problem&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <ul>\n                <li>No shoes</li>\n                <li>No shirt</li>\n                <li>No problem</li>\n              </ul>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Unordered List: <ul>, <li> ul represents a bulleted list of items (block) li represents a single item within the list (block) <ul> <li>No shoes</li> <li>No shirt</li> <li>No problem</li></ul> HTML No shoes No shirt No problem output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n            <h2>More About Unordered Lists</h2>\n            <p>A list can contain other lists:</p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;Simpsons:\n    &lt;ul&gt;\n      &lt;li&gt;Homer&lt;/li&gt;\n      &lt;li&gt;Marge&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Family Guy:\n    &lt;ul&gt;\n      &lt;li&gt;Peter&lt;/li&gt;\n      &lt;li&gt;Lois&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <ul>\n                  <li>Simpsons:\n                    <ul>\n                      <li>Homer</li>\n                      <li>Marge</li>\n                    </ul>\n                  </li>\n                  <li>Family Guy:\n                    <ul>\n                      <li>Peter</li>\n                      <li>Lois</li>\n                    </ul>\n                  </li>\n                </ul>\n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>", "text": "More About Unordered Lists A list can contain other lists: <ul> <li>Simpsons: <ul> <li>Homer</li> <li>Marge</li> </ul> </li> <li>Family Guy: <ul> <li>Peter</li> <li>Lois</li> </ul> </li></ul> HTML Simpsons: Homer Marge Family Guy: Peter Lois output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"ol-tag\">\n            <h2>Ordered List: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a></h2>\n\n            <p class=\"term-definition\">\n            <code>ol</code> represents a numbered list of items (block)\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;p&gt;RIAA business model:&lt;/p&gt;\n&lt;ol&gt;\n  &lt;li&gt;Sue customers&lt;/li&gt;\n  &lt;li&gt;???&lt;/li&gt;\n  &lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right medium-small-font\">\n                <p>RIAA business model:\n                </p><ol>\n                  <li>Sue customers</li>\n                  <li>???</li>\n                  <li>Profit!</li>\n                </ol>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n\n            <p>\n            We can make lists with letters or Roman numerals using CSS (later)\n            </p>\n          </section>", "text": "Ordered List: <ol> ol represents a numbered list of items (block) <p>RIAA business model:</p><ol> <li>Sue customers</li> <li>???</li> <li>Profit!</li></ol> HTML RIAA business model: Sue customers ??? Profit! output We can make lists with letters or Roman numerals using CSS (later)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"definition-list-tags\">\n            <h2>Definition list:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"><code>&lt;dl&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"><code>&lt;dt&gt;</code></a>,\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"><code>&lt;dd&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>dl</code> represents a list of definitions of terms (block) <br>\n            <code>dt</code> represents each term, and <code>dd</code> its definition\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;dl&gt;\n  &lt;dt&gt;newbie&lt;/dt&gt;\n  &lt;dd&gt;\n    one who does not have\n    mad skills\n  &lt;/dd&gt;\n  &lt;dt&gt;own&lt;/dt&gt;\n  &lt;dd&gt;\n    to soundly defeat (e.g.\n    I owned that newbie!)\n  &lt;/dd&gt;\n  &lt;dt&gt;frag&lt;/dt&gt;\n  &lt;dd&gt;\n    a kill in a shooting game\n  &lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <p>\n                </p><dl>\n                  <dt>newbie</dt>\n                  <dd>one who does not have mad skills</dd>\n                  <dt>own</dt>\n                  <dd>to soundly defeat (e.g. I owned that newbie!)</dd>\n                  <dt>frag</dt>\n                  <dd>a kill in a shooting game</dd>\n                </dl>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>", "text": "Definition list: <dl>, <dt>, <dd> dl represents a list of definitions of terms (block) dt represents each term, and dd its definition <dl> <dt>newbie</dt> <dd> one who does not have mad skills </dd> <dt>own</dt> <dd> to soundly defeat (e.g. I owned that newbie!) </dd> <dt>frag</dt> <dd> a kill in a shooting game </dd></dl> HTML newbie one who does not have mad skills own to soundly defeat (e.g. I owned that newbie!) frag a kill in a shooting game output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"blockquote-tag\">\n            <h2>\n              Quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"><code>&lt;blockquote&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a quotation (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;As Lincoln said in his famous Gettysburg Address:&lt;/p&gt;\n&lt;blockquote&gt;\n  &lt;p&gt;\n    Fourscore and seven years ago, our fathers brought forth\n    on this continent a new nation, conceived in liberty, and\n    dedicated to the proposition that all men are created equal.\n  &lt;/p&gt;\n&lt;/blockquote&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output medium-small-font\">\n              <p>\n              As Lincoln said in his famous Gettysburg Address:\n              </p>\n              <blockquote>\n                <p>\n                Fourscore and seven years ago, our fathers brought forth\n                on this continent a new nation, conceived in liberty, and\n                dedicated to the proposition that all men are created equal.\n                </p>\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Quotations: <blockquote> a quotation (block) <p>As Lincoln said in his famous Gettysburg Address:</p><blockquote> <p> Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. </p></blockquote> HTML As Lincoln said in his famous Gettysburg Address: Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"q-tag\">\n            <h2>Inline quotations: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"><code>&lt;q&gt;</code></a></h2>\n\n            <p class=\"term-definition\">a short quotation (inline)</p>\n\n            <pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, &lt;q&gt;Nevermore.&lt;/q&gt;&lt;/p&gt;</code></pre>\n\n            <p class=\"code-caption\">HTML</p>\n            <p>\n            Why not just write the following?<br>\n            </p><pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, \"Nevermore.\"&lt;/p&gt;</code></pre>\n            \n\n            <div>\n              <p>We don't use \" marks for two reasons:</p>\n              <ol>\n                <li>HTML shouldn't contain literal quotation mark characters; they should be written as <code>&amp;quot;</code></li>\n                <li>Using <code>&lt;q&gt;</code> allows us to apply CSS styles to quotations (seen later)</li>\n              </ol>\n            </div>\n          </section>", "text": "Inline quotations: <q> a short quotation (inline) <p>Quoth the Raven, <q>Nevermore.</q></p> HTML Why not just write the following? <p>Quoth the Raven, \"Nevermore.\"</p> We don't use \" marks for two reasons: HTML shouldn't contain literal quotation mark characters; they should be written as &quot; Using <q> allows us to apply CSS styles to quotations (seen later)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"code-tag\">\n            <h2>\n              Computer Code:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"><code>&lt;code&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            a short section of computer code (usually shown in a fixed-width font)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt;\n  tags make lists.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              The <code>ul</code> and <code>ol</code>\n              tags make lists.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Computer Code: <code> a short section of computer code (usually shown in a fixed-width font) <p> The <code>ul</code> and <code>ol</code> tags make lists.</p> HTML The ul and ol tags make lists. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section id=\"pre-tag\">\n            <h2>\n              Preformatted Text:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a large section of pre-formatted text (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;pre&gt;\n     Steve Jobs spoke loudly\n      reality distortion\n       Apple fans bow down\n&lt;/pre&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              </p><pre>\n     Steve Jobs speaks loudly\n      reality distortion\n       Apple fans bow down\n              </pre>\n              \n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Displayed with exactly the whitespace / line breaks given in the text</p>\n            <p>Shown in a fixed-width font by default</p>\n            <p>\n              How would it look if we had instead enclosed it in <code>code</code>\n              tags?\n            </p>\n          </section>", "text": "Preformatted Text: <pre> a large section of pre-formatted text (block) <pre> Steve Jobs spoke loudly reality distortion Apple fans bow down</pre> HTML Steve Jobs speaks loudly reality distortion Apple fans bow down output Displayed with exactly the whitespace / line breaks given in the text Shown in a fixed-width font by default How would it look if we had instead enclosed it in code tags?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Nesting Tags</h2>\n          <p>Tags can \"nest\" inside of other tags</p><p>\n\n          </p><pre><code class=\"hljs small-font\" data-trim>&lt;body&gt;\n  &lt;p&gt;\n    This is a &lt;em&gt;really, &lt;strong&gt;REALLY&lt;/strong&gt;&lt;/em&gt; stupid sentence. Here's why:\n  &lt;/p&gt;\n  &lt;ol&gt;\n    &lt;li&gt;I had nothing to say&lt;/li&gt;\n    &lt;li&gt;It is adding little meaning to the discussion&lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/body&gt;</code></pre>\n        <p class=\"code-caption\">HTML</p>\n\n          <div class=\"output small-font\">\n            <p>This is a <em>really, <strong>REALLY</strong></em> stupid sentence. Here's why:</p><p>\n            </p><ol>\n              <li>I had nothing to say</li>\n              <li>It is adding little meaning to the discussion</li>\n            </ol>\n          </div>\n          <p class=\"code-caption\">output</p>\n        </section>", "text": "Nesting Tags Tags can \"nest\" inside of other tags <body> <p> This is a <em>really, <strong>REALLY</strong></em> stupid sentence. Here's why: </p> <ol> <li>I had nothing to say</li> <li>It is adding little meaning to the discussion</li> </ol></body> HTML This is a really, REALLY stupid sentence. Here's why: I had nothing to say It is adding little meaning to the discussion output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Block and Inline Elements\n            (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\">explanation</a>)</h2>\n\n          <div>\n            <img class=\"full-width centered-figure\" src=\"../img/layout2.png\" alt=\"elements\">\n          </div>\n\n          <p><span class=\"term\"><a href=\"http://htmlhelp.com/reference/html40/block.html\">Block</a></span> elements contain an entire large region of content\n          </p><ul>\n            <li>Examples: paragraphs, lists, table cells</li>\n            <li>The browser places a margin of whitespace between block elements for separation</li>\n          </ul>\n          \n          <p><span class=\"term\"><a href=\"http://www.cs.sfu.ca/CC/165/sbrown1/wdgxhtml10/inline.html\">Inline</a></span> elements affect a small amount of content\n          </p><ul>\n            <li>Examples: bold text, code fragments, images</li>\n            <li>The browser allows many inline elements to appear on the same line</li>\n            <li>Must be nested inside a block element</li>\n          </ul>\n          \n        </section>", "text": "Block and Inline Elements (explanation) Block elements contain an entire large region of content Examples: paragraphs, lists, table cells The browser places a margin of whitespace between block elements for separation Inline elements affect a small amount of content Examples: bold text, code fragments, images The browser allows many inline elements to appear on the same line Must be nested inside a block element", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Rules and exceptions...</h2>\n\n          <p><strong>Block vs. inline:</strong></p>\n          <ul>\n            <li>\n              Some block elements can contain only other block elements:\n              <code>&lt;body&gt;</code>, <code>&lt;form&gt;</code>\n            </li>\n\n            <li>\n              <code>&lt;p&gt;</code> tags can contain only <strong>inline</strong> elements and plain text\n            </li>\n\n            <li>\n              Some block elements can contain either: <code>&lt;div&gt;, &lt;li&gt;</code>\n            </li>\n          </ul>\n\n          <p>\n            <strong>Some elements are only allowed to contain certain other\n            elements:</strong>\n          </p>\n          <ul>\n            <li>\n              <code>&lt;ul&gt;</code> is only allowed to contain <code>&lt;li&gt;</code>\n            </li>\n          </ul>\n\n          <p>\n            <strong>Some elements are only allowed once per document:</strong>\n          </p>\n          <ul>\n            <li><code>&lt;html&gt;</code></li>\n            <li><code>&lt;body&gt;</code></li>\n            <li><code>&lt;head&gt;</code></li>\n            <li><code>&lt;main&gt;</code></li>\n          </ul>\n        </section>", "text": "Rules and exceptions... Block vs. inline: Some block elements can contain only other block elements: <body>, <form> <p> tags can contain only inline elements and plain text Some block elements can contain either: <div>, <li> Some elements are only allowed to contain certain other elements: <ul> is only allowed to contain <li> Some elements are only allowed once per document: <html> <body> <head> <main>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Incorrectly Nesting Tags</h2>\n          <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really,\n  &lt;strong&gt;REALLY<em class=\"bad\">&lt;/em&gt;</em> lots of&lt;/strong&gt; fun!\n&lt;/p&gt;\n</code></pre>\n<p class=\"code-caption\">Incorrectly nested HTML</p>\n\n          <p>Tags must be correctly nested</p>\n          <ul>\n            <li>A closing tag must match the most recently opened tag</li>\n            <li>The browser may render it correctly anyway, but it is invalid HTML</li>\n          </ul>\n          <p>How would we get the above effect in a valid way?</p>\n\n          <div class=\"fragment\">\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really,\n  &lt;strong&gt;REALLY lots of&lt;/strong&gt;<em class=\"good\">&lt;/em&gt;</em> fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">Correctly nested HTML</p>\n          </div>\n        </section>", "text": "Incorrectly Nesting Tags <p> HTML is <em>really, <strong>REALLY</em> lots of</strong> fun!</p>Incorrectly nested HTML Tags must be correctly nested A closing tag must match the most recently opened tag The browser may render it correctly anyway, but it is invalid HTML How would we get the above effect in a valid way? <p> HTML is <em>really, <strong>REALLY lots of</strong></em> fun!</p> Correctly nested HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>How can we check? W3C HTML Validator</h2>\n          <p><a href=\"http://validator.w3.org/\" target=\"_blank\">validator.w3.org</a></p>\n          <ul>\n            <li>\n              Checks your HTML code to make sure it follows the\n              official HTML syntax\n            </li>\n            <li>More picky than the browser, which may render bad HTML correctly</li>\n          </ul>\n          <div class=\"fragment\">\n            <p>\n              Example: Try validating <a href=\"lec01source/validateme.html\">validateme.html</a>\n            </p>\n            <p>\n              <strong>NOTE:</strong> To receive full credit on your creative projects and homework assignments\n              you MUST validate all of your files and pass with no errors.\n            </p>\n\n          </div>\n        </section>", "text": "How can we check? W3C HTML Validator validator.w3.org Checks your HTML code to make sure it follows the official HTML syntax More picky than the browser, which may render bad HTML correctly Example: Try validating validateme.html NOTE: To receive full credit on your creative projects and homework assignments you MUST validate all of your files and pass with no errors.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 17: Intro to PHP</h3>\n          <p><a href=\"https://xkcd.com/869/\">\n            <img class=\"simpleimg\" src=\"hidden/servers.png\" alt=\"servers\">\n            </a>\n          </p>\n          <cite class=\"small-font\">XKCD 869</cite>\n        </section>", "text": "CSE 154 Lecture 17: Intro to PHP XKCD 869", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Administrivia</h2>\n          <p>HW3 due Monday</p>\n          <p>Introduction to Module 4 and PHP!</p>\n        </section>", "text": "Administrivia HW3 due Monday Introduction to Module 4 and PHP!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h2>Review: Web Services</h2>\n        <p>\n          <strong>Web service</strong>: software functionality that can be invoked through the\n          internet using common protocols</p>\n        <p>It's like a remote function(s) you can call. Done by contacting a program on a web server</p>\n        <ul>\n          <li>Web services can be written in a variety of languages</li>\n          <li>Many web services accept parameters and produce results</li>\n          <li>Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code</li>\n          <li>The service's output might be HTML but could be text, XML, JSON, or other content</li>\n        </ul>\n      </section>", "text": "Review: Web Services Web service: software functionality that can be invoked through the internet using common protocols It's like a remote function(s) you can call. Done by contacting a program on a web server Web services can be written in a variety of languages Many web services accept parameters and produce results Client contact the servier through the browser using XML over HTTP and/or AJAX Fetch code The service's output might be HTML but could be text, XML, JSON, or other content", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h3>Some Web Services We've Used as Clients</h3>\n        <p>Merriam-Webster Dictionary API</p>\n        <p>NASA APOD API</p>\n        <p>CSE154 web services:</p>\n        <ul>\n          <li>groupizer.php</li>\n          <li>pizza.php</li>\n          <li>pokedex.php and game.php</li>\n          <li>wpl.php</li>\n          <li>mowgliscafe.php</li>\n        </ul>\n      </section>", "text": "Some Web Services We've Used as Clients Merriam-Webster Dictionary API NASA APOD API CSE154 web services: groupizer.php pizza.php pokedex.php and game.php wpl.php mowgliscafe.php", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h2>Wednesday's WPL Example</h2>\n        <p>Used to show a few input validation methods before sending\n        a request to the <code>wpl.php</code> web service.</p>\n        <img class=\"half-width centered-figure\" src=\"hidden/wpl1.png\" alt=\"WPL example\">\n      </section>", "text": "Wednesday's WPL Example Used to show a few input validation methods before sending a request to the wpl.php web service.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h2>Sending a Request</h2>\n        <p>Once we've validated the input a bit, the request is sent and we recieve a response from\n        <code>wpl.php</code></p>\n        <img class=\"half-width centered-figure\" src=\"hidden/wpl2.png\" alt=\"WPL example\">\n      </section>", "text": "Sending a Request Once we've validated the input a bit, the request is sent and we recieve a response from wpl.php", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Motivating the Client-Server Relationship</h2>\n          <p>\n            We've used the analogy of a customer (client) ordering from a waiter at a restaurant \n            (server). In this analogy, what might a customer ask for from \"GET\" request? \n            What might a \"POST\" request be?\n          </p>\n          <img src=\"hidden/client-server-no-pl.png\" alt=\"get/post image\" class=\"space-above centered-figure\">\n          <p class=\"font-16pt space-above\">\n            <a href=\"https://blog.codeanalogies.com/2018/04/07/front-end-v-back-end-explained-by-waiting-tables-at-a-restaurant/\">Image source</a> (a wonderful reading to explain front-end vs. back-end/server relationships)</p>\n        </section>", "text": "Motivating the Client-Server Relationship We've used the analogy of a customer (client) ordering from a waiter at a restaurant (server). In this analogy, what might a customer ask for from \"GET\" request? What might a \"POST\" request be? Image source (a wonderful reading to explain front-end vs. back-end/server relationships)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n\t\t\t\t    <h2>Client (JS) GET Request</h2>\n    <pre><code class=\"hljs\">function requestMenu() {\n  let url = RESTAURANT_URL;\n  url += \"?menu=all\";\n\n  //fetch by default is a GET request\n  fetch(url)\n    .then(checkStatus)\n    .then(JSON.parse)\n    .then(handleResponse)\n    .catch(handleError);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n\t</section>", "text": "Client (JS) GET Request function requestMenu() { let url = RESTAURANT_URL; url += \"?menu=all\"; //fetch by default is a GET request fetch(url) .then(checkStatus) .then(JSON.parse) .then(handleResponse) .catch(handleError);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n    <h2>Client (JS) POST Request</h2>\n    <pre><code class=\"hljs\">function sendOrder() {\n  let url = RESTAURANT_URL;\n\n  let params =  new FormData();\n  params.append(\"name\", \"Mowgli\");\n  params.append(\"order\", \"coffee\");\n  params.append(\"qty\", 154);\n\n  fetch(url, {method: \"POST\", body: params})\n    .then(checkStatus)\n    .then(JSON.parse)\n    .then(handleResponse)\n    .catch(handleError);\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n\t</section>", "text": "Client (JS) POST Request function sendOrder() { let url = RESTAURANT_URL; let params = new FormData(); params.append(\"name\", \"Mowgli\"); params.append(\"order\", \"coffee\"); params.append(\"qty\", 154); fetch(url, {method: \"POST\", body: params}) .then(checkStatus) .then(JSON.parse) .then(handleResponse) .catch(handleError);} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h3>How Does a Web Service (like wpl.php or cafe.php) Respond to Requests?</h3>\n          <img src=\"hidden/fullstackimage.png\" alt=\"full stack analogy\" class=\"no-border\n          two-thirds-width centered-figure\">\n          <p class=\"font-16pt space-above\">\n            <a href=\"https://blog.codeanalogies.com/2018/04/07/front-end-v-back-end-explained-by-waiting-tables-at-a-restaurant/\">Image source</a>\n          </p>\n      </section>", "text": "How Does a Web Service (like wpl.php or cafe.php) Respond to Requests? Image source", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h2>CSE 154 Modules: Where We're At</h2>\n        <ol>\n          <li>\n            Webpage structure and appearance with HTML5 and CSS. <i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li>\n            Client-side interactivity with JS DOM and events.<i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li>\n            Using web services (API's) as a client with JS.<i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li class=\"bolded\">\n            Writing JSON-based web services with PHP.\n          </li>\n          <li class=\"faded\">\n            Storing and retreiving information in a database with MySQL and server-side\n            programs.\n          </li>\n        </ol>\n      </section>", "text": "CSE 154 Modules: Where We're At Webpage structure and appearance with HTML5 and CSS. Client-side interactivity with JS DOM and events. Using web services (API's) as a client with JS. Writing JSON-based web services with PHP. Storing and retreiving information in a database with MySQL and server-side programs.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>URLs and Web Servers</h2>\n          <pre><code class=\"hljs\" data-trim>https://server/path/file</code></pre>\n          <p>Usually when you type a URL in your browser:</p>\n          <ol>\n            <li>Your computer looks up the server's IP address using\n              <a href=\"https://en.wikipedia.org/wiki/Domain_Name_System\">DNS</a>\n            </li>\n            <li>Your browser connects to that IP address and requests the given file</li>\n            <li>\n              The web server software (e.g. Apache) grabs that file from the server's local file\n              system and then send back its contents to you\n            </li>\n          </ol>\n          <p>\n            Some URLs actually specify <em>programs</em> that the web server should run, and then\n            send their output back to you as the result:\n          </p>\n          <p>\n          <a href=\"https://webster.cs.washington.edu/cse154/quote.php\"><code>https://webster.cs.washington.edu/cse154/quote.php</code></a>\n          </p>\n          <p>The above URL tells the server <code>webster.cs.washington.edu</code> to run the\n          program <code>quote.php</code> and send back its output</p>\n        </section>", "text": "URLs and Web Servers https://server/path/file Usually when you type a URL in your browser: Your computer looks up the server's IP address using DNS Your browser connects to that IP address and requests the given file The web server software (e.g. Apache) grabs that file from the server's local file system and then send back its contents to you Some URLs actually specify programs that the web server should run, and then send their output back to you as the result: https://webster.cs.washington.edu/cse154/quote.php The above URL tells the server webster.cs.washington.edu to run the program quote.php and send back its output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h3>Why Do We Need a Server to Handle Web Service Requests?</h3>\n          <img src=\"hidden/server-analogy.png\" class=\"no-border rightfigure\" width=\"40%\" alt=\"server analogy\">\n          <p>\n          Servers are dedicated computers for processing data efficiently and delegating requests\n          sent from many clients (often at once).\n          </p>\n          <p class=\"fragment\">\n            Thinking back to the restaurant transaction analogy, what kind of information:\n          </p>\n          <ol class=\"fragment\">\n            <li>should be accessible to clients to freely request (\"GET\")?</li>\n            <li>might be useful for a client to update (\"POST\") on the server?</li>\n            <li>might need to be kept private on the server?</li>\n          </ol>\n        </section>", "text": "Why Do We Need a Server to Handle Web Service Requests? Servers are dedicated computers for processing data efficiently and delegating requests sent from many clients (often at once). Thinking back to the restaurant transaction analogy, what kind of information: should be accessible to clients to freely request (\"GET\")? might be useful for a client to update (\"POST\") on the server? might need to be kept private on the server?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Languages for Server-Side Programming</h2>\n          <p><img class=\"centered-figure\" src=\"hidden/serversidelanguages2.png\" alt=\"server side languages\" style=\"width:50%\"></p>\n          <p>Server-side programs are written using programming\n          languages/frameworks such as:</p>\n          <ul>\n            <li>\n              <a href=\"http://php.net/docs.php\" target=\"_blank\">PHP</a>,\n              <a href=\"https://www.tutorialspoint.com/jsp/\" target=\"_blank\">Java/JSP</a>,\n              <a href=\"http://rubyonrails.org/\" target=\"_blank\">Ruby on Rails</a>,\n              <a href=\"https://www.asp.net/\" target=\"_blank\">ASP.NET</a>,\n              <a href=\"https://www.python.org/\" target=\"_blank\">Python</a>,\n              <a href=\"https://www.perl.org/about.html\" target=\"_blank\">Perl</a>,\n              <a href=\"https://nodejs.org/en/\" target=\"_blank\">NodeJS</a>\n            </li>\n          </ul>\n          <p>Web servers (including those you setup yesterday) contain software to run those programs and send back their output.</p>\n        <!--\n          <p>Each language/framework has tradeoffs.</p>\n          <p>Popularity of languages/frameworks can change quickly:\n          <ul>\n            <li><a href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\">Programming Language Popularity</a></li>\n            <li>Google Trends for <a href=\"https://trends.google.com/trends/explore?date=all&geo=US-CA-807&q=ruby%20on%20rails,python%20django,java%20spring,nodeJs\" target=\"_blank\">popular framworks</a>, and those <a href=\"https://trends.google.com/trends/explore?date=all&geo=US-CA-807&q=ruby%20on%20rails,python%20django,java%20spring,nodeJs,php\" target=\"_blank\">plus php</a>.\n          </ul>\n          </p>\n        -->\n        </section>", "text": "Languages for Server-Side Programming Server-side programs are written using programming languages/frameworks such as: PHP, Java/JSP, Ruby on Rails, ASP.NET, Python, Perl, NodeJS Web servers (including those you setup yesterday) contain software to run those programs and send back their output. <!-- Each language/framework has tradeoffs. Popularity of languages/frameworks can change quickly: Programming Language Popularity Google Trends for popular framworks, and those plus php. -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>PHP: Our Server-Side Language</h2>\n          <div class=\"side-by-side\" style=\"justify-content: end\">\n            <div class=\"half-width\">\n          <img src=\"hidden/PHP-work.png\" alt=\"PHP as server-side language\">\n          <p class=\"right-align font-14pt\"><a href=\"http://www.codekul.com/blog/learn-php-beginners/\">Image source</a></p>\n            </div>\n            <div>\n              <ul>\n                <li>Open-source</li>\n                <li>Widely supported</li>\n                <li>Few dependencies (already ready-to-go with MAMP!)</li>\n                <li>You can explore other server-side languages after this course!</li>\n              </ul>\n            </div>\n          </div>\n        </section>", "text": "PHP: Our Server-Side Language Image source Open-source Widely supported Few dependencies (already ready-to-go with MAMP!) You can explore other server-side languages after this course!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Lifecycle of a PHP Web Request</h2>\n          <p class=\"half-width centered-figure\"><img src=\"hidden/phplifecycle.png\" alt=\"PHP web request lifecycle\"></p>\n          <p class=\"font-18pt\">When a browser requests:</p>\n          <ul class=\"font-18pt\">\n            <li>a <code>.html</code> file (<strong>static content</strong>): server\n          just sends that file</li>\n            <li>a <code>.php</code> file (<strong>dynamic content</strong>): server\n          reads it, runs any script code inside it, then returns the output (possibly as\n          JSON/text/HTML)</li>\n          </ul>\n          <p class=\"font-18pt\">Note: We will be using PHP to write web services, not embedding it in HTML - you will see this still in some online\n          resources (what do you think are limitations to embedding PHP in HTML, knowing what we've\n          learned so far?)</p>\n        </section>", "text": "Lifecycle of a PHP Web Request When a browser requests: a .html file (static content): server just sends that file a .php file (dynamic content): server reads it, runs any script code inside it, then returns the output (possibly as JSON/text/HTML) Note: We will be using PHP to write web services, not embedding it in HTML - you will see this still in some online resources (what do you think are limitations to embedding PHP in HTML, knowing what we've learned so far?)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>JS vs. PHP</h2>\n          <table>\n            <tr>\n              <th></th>\n              <th>JS</th>\n              <th>PHP</th>\n            </tr>\n            <tr>\n              <td>Language Type</td>\n              <td>Client-side Scripting</td>\n              <td>Server-side Scripting</td>\n            </tr>\n            <tr>\n              <td>File Extension</td>\n              <td>.js</td>\n              <td>.php</td>\n            </tr>\n            <tr>\n              <td>Code Execution</td>\n              <td>Web Browser</td>\n              <td>Web Server</td>\n            </tr>\n            <tr>\n              <td>Access to File System</td>\n              <td>No</td>\n              <td>Yes</td>\n            </tr>\n            <tr>\n              <td>Access to Database</td>\n              <td>No</td>\n              <td>Yes</td>\n            </tr>\n          </table>\n        </section>", "text": "JS vs. PHP JS PHP Language Type Client-side Scripting Server-side Scripting File Extension .js .php Code Execution Web Browser Web Server Access to File System No Yes Access to Database No Yes", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <section>\n          <h2>Getting started with PHP</h2>\n          <p>\n            You will have PHP installed already with your MAMP local server \n            So you should be ready to go!\n          </p>\n          <p>\n            When practicing PHP, you can also find it useful to play around with the interactive PHP\n            mode on a the command line, which is analogous to the Chrome JS console (see slide\n            below).\n          </p>\n        </section>\n        <section>\n          <h2>Handy Interactive Mode in PHP (Command Line)</h2>\n          <p>\n            When first learning the syntax of PHP, it can be helpful to use an \"interactive\n            environment\", which is very similar to the interactive JavaScript console we've used.\n            You can start an interactive coding session using <code>php -a</code>:\n          </p>\n          <img src=\"hidden/interactive-php.png\" alt=\"Interactive PHP\" class=\"centered-figure\n          two-thirds-width\">\n        </section>\n        </section>", "text": "Getting started with PHP You will have PHP installed already with your MAMP local server So you should be ready to go! When practicing PHP, you can also find it useful to play around with the interactive PHP mode on a the command line, which is analogous to the Chrome JS console (see slide below). Handy Interactive Mode in PHP (Command Line) When first learning the syntax of PHP, it can be helpful to use an \"interactive environment\", which is very similar to the interactive JavaScript console we've used. You can start an interactive coding session using php -a:", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Getting started with PHP</h2>\n          <p>\n            You will have PHP installed already with your MAMP local server \n            So you should be ready to go!\n          </p>\n          <p>\n            When practicing PHP, you can also find it useful to play around with the interactive PHP\n            mode on a the command line, which is analogous to the Chrome JS console (see slide\n            below).\n          </p>\n        </section>", "text": "Getting started with PHP You will have PHP installed already with your MAMP local server So you should be ready to go! When practicing PHP, you can also find it useful to play around with the interactive PHP mode on a the command line, which is analogous to the Chrome JS console (see slide below).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Handy Interactive Mode in PHP (Command Line)</h2>\n          <p>\n            When first learning the syntax of PHP, it can be helpful to use an \"interactive\n            environment\", which is very similar to the interactive JavaScript console we've used.\n            You can start an interactive coding session using <code>php -a</code>:\n          </p>\n          <img src=\"hidden/interactive-php.png\" alt=\"Interactive PHP\" class=\"centered-figure\n          two-thirds-width\">\n        </section>", "text": "Handy Interactive Mode in PHP (Command Line) When first learning the syntax of PHP, it can be helpful to use an \"interactive environment\", which is very similar to the interactive JavaScript console we've used. You can start an interactive coding session using php -a:", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Writing/Running <code>.php</code> Files with MAMP</h2>\n          <p>Editing PHP: Atom (just like you've been doing already)</p>\n          <p>Running/viewing PHP: You can view the output of a .php program in the browser\n          (through localhost) - MAMP must be running! \n          </p>\n          <ul>\n            <li>Remember to edit your PHP/other code <strong>in the folder MAMP points to</strong>\n              so you can run them through <strong>locahost</strong>:\n        <ul class=\"no-bullets\">\n          <li>Mac: <code>localhost:8888/php-practice.php</code> </li>\n          <li>Windows: <code>localhost/php-practice.php</code></li>\n        </ul>\n            </li></ul>\n          <p>\n          You can also <code>fetch</code> the output with a\n          request to your PHP program the same way you've done with other web services as a client\n          (more next week)!\n          </p>\n      </section>", "text": "Writing/Running .php Files with MAMP Editing PHP: Atom (just like you've been doing already) Running/viewing PHP: You can view the output of a .php program in the browser (through localhost) - MAMP must be running! Remember to edit your PHP/other code in the folder MAMP points to so you can run them through locahost: Mac: localhost:8888/php-practice.php Windows: localhost/php-practice.php You can also fetch the output with a request to your PHP program the same way you've done with other web services as a client (more next week)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>The PHP file skeleton</h2>\n          <p>PHP files must start with <code>&lt;?php</code> an end with <code>?&gt;</code>. It is\n          common to forget these when you're first starting PHP, so make sure to start each file\n          with them! Anything PHP statements inside will be executed when the program is ran.</p>\n          <img src=\"hidden/atom-browser-php.png\" alt=\"running php\">\n        </section>", "text": "The PHP file skeleton PHP files must start with <?php an end with ?>. It is common to forget these when you're first starting PHP, so make sure to start each file with them! Anything PHP statements inside will be executed when the program is ran.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>The Basics of PHP</h2>\n          <p>Now that we've got a way to run PHP code, let's get started with the basics!</p>\n          <p>We've provided a <code>php-examples.php</code> program in\n          <a href=\"php-examples.zip\">php-examples.zip</a> with examples for variables/types/functions in PHP - try\n          uncommenting the different statements and changing them to practice with the new syntax!\n          We'll get through Strings today but will review the rest of the examples (arrays, if/else,\n          loops, and functions) on Monday.\n          </p>\n        </section>", "text": "The Basics of PHP Now that we've got a way to run PHP code, let's get started with the basics! We've provided a php-examples.php program in php-examples.zip with examples for variables/types/functions in PHP - try uncommenting the different statements and changing them to practice with the new syntax! We'll get through Strings today but will review the rest of the examples (arrays, if/else, loops, and functions) on Monday.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Console Output: <code>print</code>/<code>echo</code></h2>\n          <p>There are two ways to print in PHP (you may use either, as long as you're consistent):</p>\n          <pre><code class=\"hljs\" data-trim>print \"text\";\necho \"text\"; </code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n\n          <pre><code class=\"no-syntax-highlight\" data-trim>print \"Hello, World!\\n\";\necho \"Escape \\\"chars\\\" are the SAME as in Java!\\n\";\necho \"you can have\nline breaks in a string.\";\n\necho 'A string can use \"single-quotes\". It\\'s cool!';</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n\n          <p>The following two slides demonstrate this program in both interactive mode and running\n          the program. Try both out on your own!</p>\n        </section>", "text": "Console Output: print/echo There are two ways to print in PHP (you may use either, as long as you're consistent): print \"text\";echo \"text\"; PHP (template) print \"Hello, World!\\n\";echo \"Escape \\\"chars\\\" are the SAME as in Java!\\n\";echo \"you can haveline breaks in a string.\";echo 'A string can use \"single-quotes\". It\\'s cool!'; PHP (example) The following two slides demonstrate this program in both interactive mode and running the program. Try both out on your own!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Console Output: Interactive Mode</h2>\n          <img src=\"hidden/console-output-a.png\">\n        </section>", "text": "Console Output: Interactive Mode", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Console Output: Running console-output.php</h2>\n          <img src=\"hidden/console-output-browser.png\">\n          <p>Note: By default, your PHP will output to the body of the HTML page (check the\n          inspector!). Since we aren't using PHP to output HTML, we will often use\n          <code>header(\"Content-type: text/plain\");</code> at the top of our PHP program to output\n          plain text (otherwise we won't get the \\n character in our output in this example)</p>\n        </section>", "text": "Console Output: Running console-output.php Note: By default, your PHP will output to the body of the HTML page (check the inspector!). Since we aren't using PHP to output HTML, we will often use header(\"Content-type: text/plain\"); at the top of our PHP program to output plain text (otherwise we won't get the \\n character in our output in this example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n         <h2>Summary of Java vs. JS vs. Python</h2>\n         <p>Final thoughts about JavaScript as a language</p>\n         <table>\n           <tr>\n             <th></th>\n             <th>Java</th>\n             <th>JS</th>\n             <th>Python</th>\n           </tr>\n           <tr>\n             <td>Compiled vs. Interpreted</td>\n             <td>Compiled</td>\n             <td>Interpreted</td>\n             <td>Interpreted</td>\n           </tr>\n           <tr>\n             <td>Typing</td>\n             <td>Strong</td>\n             <td>Loose</td>\n             <td>Loose</td>\n           </tr>\n           <tr>\n             <td>Variable Declaration</td>\n             <td>Must be declared before use</td>\n             <td>Does not need to be declared before use</td>\n             <td>Does not need to be declared before use</td>\n           </tr>\n           <tr>\n             <td>Key Construct</td>\n             <td>Classes (OOP)</td>\n             <td>Function</td>\n             <td>Function</td>\n           </tr>\n         </table>\n       </section>", "text": "Summary of Java vs. JS vs. Python Final thoughts about JavaScript as a language Java JS Python Compiled vs. Interpreted Compiled Interpreted Interpreted Typing Strong Loose Loose Variable Declaration Must be declared before use Does not need to be declared before use Does not need to be declared before use Key Construct Classes (OOP) Function Function", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n        <h2>CSE 154 Modules</h2>\n        <ol>\n          <li>\n            Webpage structure and appearance with HTML5 and CSS. <i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li>\n            Client-side interactivity with JS DOM and events.<i class=\"fa fa-check\n              good fragment\" aria-hidden=\"true\"></i>\n          </li>\n          <li class=\"bolded\">\n            Using web services (API's) as a client with JS.\n          </li>\n          <li class=\"faded\">\n            Writing JSON-based web services with PHP.\n          </li>\n          <li class=\"faded\">\n            Storing and retreiving information in a database with MySQL and server-side\n            programs.\n          </li>\n        </ol>\n      </section>", "text": "CSE 154 Modules Webpage structure and appearance with HTML5 and CSS. Client-side interactivity with JS DOM and events. Using web services (API's) as a client with JS. Writing JSON-based web services with PHP. Storing and retreiving information in a database with MySQL and server-side programs.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n        <h2>MAMP</h2>\n        <p>\n          In preparation for working with our server side code we will be installing\n          and configuring a server on our machine called MAMP (Mac Apache MySQL PHP)\n        </p>\n        <p>\n          Now instead of your urls being\n          <code>file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html</code></p>\n        \n        <p>\n          We will run them through <strong>locahost</strong>, e.g.\n        </p>\n        <ul class=\"no-bullets\">\n          <li>Mac: <br> <code>http://localhost:8888/154-19sp/hw2-set-bricker/set.html</code> </li>\n          <li>Windows: <br>  <code>http://localhost/154-19sp/hw2-set-bricker/set.html</code></li>\n        </ul>\n      </section>", "text": "MAMP In preparation for working with our server side code we will be installing and configuring a server on our machine called MAMP (Mac Apache MySQL PHP) Now instead of your urls being file:///Users/lauren/Desktop/cse154/hw2-set-bricker/set.html We will run them through locahost, e.g. Mac: http://localhost:8888/154-19sp/hw2-set-bricker/set.html Windows: http://localhost/154-19sp/hw2-set-bricker/set.html", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec11-more-js/"},
{"html": "<section>\n        <h2>HTTP and State</h2>\n        <p>\n          HTTP is a stateless protocol; it\n          simply allows a browser to request a\n          single document from a web server\n        </p>\n        <p>\n          Once the document has been sent to the client, the server\n          does not keep track of any information about what was sent\n          (other than maybe in a log file of the transaction).\n        </p>\n      </section>", "text": "HTTP and State HTTP is a stateless protocol; it simply allows a browser to request a single document from a web server Once the document has been sent to the client, the server does not keep track of any information about what was sent (other than maybe in a log file of the transaction).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Stateful client/server interaction</h2>\n        <p><em>Sites like amazon.com seem to \"know\n          who I am.\" How do they do this? How\n          does a client uniquely identify itself to\n          a server, and how does the server\n          provide specific content to each client?\n        </em></p>\n        <p class=\"space-above\">\n          When has this happened to you? What sites were involved?\n        </p>\n        <p class=\"space-above\">\n          Today we'll learn some technologies that are used to store\n          \"state\" on your client machine.\n        </p>\n        <ul>\n          <li>\n            Sometimes state is kept simply to aid in the user experience.\n          </li>\n          <li>\n            Sometimes state is passed back to the server from the client... and sometimes that\n            happens when you least expect it.\n          </li>\n        </ul>\n\n      </section>", "text": "Stateful client/server interaction Sites like amazon.com seem to \"know who I am.\" How do they do this? How does a client uniquely identify itself to a server, and how does the server provide specific content to each client? When has this happened to you? What sites were involved? Today we'll learn some technologies that are used to store \"state\" on your client machine. Sometimes state is kept simply to aid in the user experience. Sometimes state is passed back to the server from the client... and sometimes that happens when you least expect it.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>What is a cookie?</h2>\n        <ul>\n          <li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">cookie</a>: a small amount of information stored within\n          the computer browser</li>\n          <li>cookies have many uses:\n              <ul>\n                  <li>authentication</li>\n                  <li>user tracking</li>\n                  <li>maintaining user preferences, shopping carts, etc.</li>\n              </ul>\n          </li>\n        </ul>\n      </section>", "text": "What is a cookie? cookie: a small amount of information stored within the computer browser cookies have many uses: authentication user tracking maintaining user preferences, shopping carts, etc.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>A \"tracking cookie\"</h2>\n        <img src=\"img/tracking-cookie.png\">\n        <ul>\n          <li>an advertising company can put a cookie on your machine when you visit one\n          site, and see it when you visit another site that also uses that advertising\n          company\n          </li>\n          <li>therefore they can tell that the same person (you) visited both sites</li>\n          <li>can be thwarted by telling your browser not to accept \"third-party cookies\"</li>\n        </ul>\n      </section>", "text": "A \"tracking cookie\" an advertising company can put a cookie on your machine when you visit one site, and see it when you visit another site that also uses that advertising company therefore they can tell that the same person (you) visited both sites can be thwarted by telling your browser not to accept \"third-party cookies\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Ever changing web</h2>\n        <p>New privacy laws in Europe (<a href=\"https://en.wikipedia.org/wiki/General_Data_Protection_Regulation\">GDPR</a>)\n          are making website owners rethink using cookies\n        </p>\n        <img style=\"height: 400px\" class=\"simpleimg\" src=\"img/updatedGDPR.png\" alt=\"updated GDPR notice example\">\n      </section>", "text": "Ever changing web New privacy laws in Europe (GDPR) are making website owners rethink using cookies", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>How cookies are set and retrieved</h2>\n        <ul>\n          <li>Client side (JavaScript):\n              <ul>\n                  <li>JavaScript commands can set and retrieved using\n                      <code>document.cookie</code></li>\n              </ul>\n          </li>\n          <li>Server Side (PHP):\n              <ul>\n                <li>\n                  When the browser requests a page, the server may send back a cookie(s)\n                  with it to store on the client\n                </li>\n                <li>\n                  If your server has previously sent any cookies to the browser, the browser\n                  will send them back on subsequent requests to remind the server who is connecting\n                  to it.\n                 </li>\n              </ul>\n          </li>\n        </ul>\n      </section>", "text": "How cookies are set and retrieved Client side (JavaScript): JavaScript commands can set and retrieved using document.cookie Server Side (PHP): When the browser requests a page, the server may send back a cookie(s) with it to store on the client If your server has previously sent any cookies to the browser, the browser will send them back on subsequent requests to remind the server who is connecting to it.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Facts about cookies</h2>\n        <ul>\n          <li>Cookies are only data, not program code.</li>\n          <li>Cookies can have set expiration dates.</li>\n          <li>Cookies help websites remember who you are (and if you are logged in).</li>\n          <li>Cookies CAN be used to track your viewing habits on a particular site.</li>\n        </ul>\n      </section>", "text": "Facts about cookies Cookies are only data, not program code. Cookies can have set expiration dates. Cookies help websites remember who you are (and if you are logged in). Cookies CAN be used to track your viewing habits on a particular site.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> setting</h2>\n        <ul>\n          <li>To set a cookie use <code>document.cookie = cookieString;</code></li>\n          <li><code>cookieString</code> consists of 3 semicolon separated parts (the second two are optional):\n            <ul>\n              <li>name / value pair. E.g., <code>\"lastItemBought=apples\"</code></li>\n              <li>expiration date (by default when browser closed). E.g., <code>\"expires=Thu, 23 May 2018 12:00:00 UTC\"</code></li>\n              <li>Path where cookie belongs (default is current page). E.g., <code>\"path=/\"</code></li>\n            </ul>\n          </li>\n          <li>If you set a cookie where the name already has a value, the old value gets overwritten.</li>\n        </ul>\n        <pre><code data-trim>document.cookie = \"lastItemBought=apples; \" +\n    \"expires=Thu, 23 May 2018 12:00:00 UTC; \" +\n    \"path=/\";</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>", "text": "Cookies in JavaScript: setting To set a cookie use document.cookie = cookieString; cookieString consists of 3 semicolon separated parts (the second two are optional): name / value pair. E.g., \"lastItemBought=apples\" expiration date (by default when browser closed). E.g., \"expires=Thu, 23 May 2018 12:00:00 UTC\" Path where cookie belongs (default is current page). E.g., \"path=/\" If you set a cookie where the name already has a value, the old value gets overwritten. document.cookie = \"lastItemBought=apples; \" + \"expires=Thu, 23 May 2018 12:00:00 UTC; \" + \"path=/\"; JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Retrieving</h2>\n        <ul>\n          <li>To get a cookie use <code>let cookies = document.cookie;</code></li>\n          <li>\n            This will return a semicolon separated list of all current name=value pairs<br>\n            E.g., <code>\"lastItemBought=apples; numberSiteVisitsToday=57\"</code></li>\n          <li>You have to retrieve the values from the string by parsing yourself.</li>\n        </ul>\n      </section>", "text": "Cookies in JavaScript: Retrieving To get a cookie use let cookies = document.cookie; This will return a semicolon separated list of all current name=value pairs E.g., \"lastItemBought=apples; numberSiteVisitsToday=57\" You have to retrieve the values from the string by parsing yourself.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies in JavaScript:</a> Clearing</h2>\n        <p>To delete a cookie you need to set it's expiration time to be before now\n        </p>\n        <pre><code data-trim>document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';</code></pre>\n<p class=\"code-caption\">JavaScript (example)</p>\n      </section>", "text": "Cookies in JavaScript: Clearing To delete a cookie you need to set it's expiration time to be before now document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Cookies Recap</h2>\n        <ul>\n          <li> <del>...delicious, particularly with chocolate chips.</del></li>\n          <li> ...are a way to store information or the state of your website.</li>\n          <li> ...can be set so they expire after a time, or after you close the page.</li>\n          <li> ...are kind of a pain to retreive,\n            if there are many cookies that are set already.</li>\n          <li> ...they only allow up to only 4 KB of data storage.</li>\n          <li> ...they can be used by malicious sites to \"spy\" on browsing behavior.</li>\n        </ul>\n    </section>", "text": "Cookies Recap ...delicious, particularly with chocolate chips. ...are a way to store information or the state of your website. ...can be set so they expire after a time, or after you close the page. ...are kind of a pain to retreive, if there are many cookies that are set already. ...they only allow up to only 4 KB of data storage. ...they can be used by malicious sites to \"spy\" on browsing behavior.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n      <h2><code>localStorage</code> and <code>sessionStorage</code></h2>\n    </section>", "text": "localStorage and sessionStorage", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>localStorage and sessionStorage</h2>\n        <div class=\"side-by-side\">\n          <div style=\"width: 800px\">\n            <img class=\"simpleimg\" style=\"margin-top: 50px; margin-right: 10px\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c7/Public_Storage_doors.jpg\" alt=\"storage doors\">\n            <p>From <a href=\"https://en.wikipedia.org/wiki/File:Public_Storage_doors.jpg\">Wikipedia</a></p>\n          </div>\n          <div>\n            <p>\n              <code>localStorage</code> is a <code>document</code> property that allows\n              you to save information across browser sessions (i.e after you close the browser)\n            </p>\n            <p>\n              <code>sessionStorage</code> is a <code>document</code> property that allows\n              you to save information for this session only, and will be cleared when\n              the page is closed.\n            </p>\n            <p>Both <code>localStorage</code> and <code>sessionStorage</code>\n              inherit from <code>Storage</code> class.\n            </p>\n            <p>Name/value pairs (seen in cookies and Storage) are supported by\n              <a href=\"https://caniuse.com/#search=localstorage\">most every\n                browser</a>\n            </p>\n          </div>\n      \n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">Storage</a></h2>\n        <p>There are three methods we're interested in from <code>Storage</code> </p>\n        <table>\n          <tr>\n            <th>method</th>\n            <th>description</th>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem(keyName, keyValue)</a></td>\n            <td>Sets the <code>keyName</code> location in localStorage to be <code>keyValue</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem(keyName)</a></td>\n            <td>Retrieves the <code>keyValue</code> in localStorage associated with <code>keyName</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem(keyName)</a></td>\n            <td>Removes the <code>keyName</code> location in localStorage</td>\n          </tr>\n        </table>\n\n      </section>\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> example</h2>\n        <pre><code data-trim>window.localStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.localStorage.setItem(\"Lauren\", \"Spot\");\nwindow.localStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.localStorage.getItem(\"Lauren\");\nwindow.localStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n\n      <section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">sessionStorage</a> example</h2>\n        <p>Similarly for sessionStorage</p>\n        <pre><code data-trim>window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.sessionStorage.setItem(\"Lauren\", \"Spot\");\nwindow.sessionStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.sessionStorage.getItem(\"Lauren\");\nwindow.sessionStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/sessionStorage.png\" alt=\"sessionStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/sessionStorageAfter.png\" alt=\"sessionStorage after example\">\n          </div>\n        </div>\n      </section>\n\n\n      <section>\n        <h2><code>indexDB</code></h2>\n      </section>\n\n      <section>\n        <section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\"><code>indexDB</code></a></h2>\n          <p><code>cookies</code>, <code>localStorage</code>,\n            <code>sessionStorage</code> can only store small amounts of\n            data\n          </p>\n          <p>\n            <code>indexDB</code> is a \"a low-level API for client-side storage\n            of significant amounts of structured data, including files/blobs\"\n          </p>\n          <p>\n            Look down through the slides if you want to know more...\n          </p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>There are many flavors types of indexDB - so apparently you have to cover your\n            bases with creating the database for your page:\n          </p>\n          <pre><code data-trim>// This works on all devices/browsers, and uses\n// IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(&lt;dbname&gt;, &lt;version&gt;);</code></pre>\n          <p class=\"code-caption\">JavaScript (template)</p>\n          <pre><code data-trim>// This works on all devices/browsers,\n// and uses IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(\"terms\", 1);</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>You need to set callbacks on the new database object, so once\n            the database is created, the tables (schema) can be created.\n          </p>\n          <pre><code data-trim>openDB.onupgradeneeded = function() {\n  let db = openDB.result;\n  let store = db.createObjectStore(\"terms\", {keyPath: \"term\"});\n  let index = store.createIndex(\"definition\", \"definition\", { unique: false });\n};\nopenDB.onsuccess = function() {\n  console.log(\"Database created!\");\n}</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> setting values</h2>\n          <pre><code data-trim>// Start a new transaction\nlet db = openDB.result;\nlet tx = db.transaction(\"terms\", \"readwrite\");\nlet store = tx.objectStore(\"terms\");\nlet index = store.index(\"definition\");\n\n// get the term and definition from the user\n\nstore.put({key: userTerm, definition: userDef});\n\n// Close the db when the transaction is done\ntx.oncomplete = function() {\n  db.close();\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> getting values</h2>\n          <pre><code data-trim>// assume the variable term has been set\nlet getValue = store.get(term);\n\ngetValue.onsuccess = function() {\n  alert(getValue.result.definition);\n};\n\ngetValue.onerror = function() {\n  // error handling here\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n      </section>\n\n\n      <section>\n        <h2>Phew... that was a lot of work. And confusing too </h2>\n        <p>Dexie to the rescue</p>\n      </section>\n\n\n      <section>\n        <h2><a href=\"http://dexie.org/\">Dexie</a></h2>\n        <p>Dexie is a wrapper around <code>indexDB</code> that makes it MUCH easier to use. </p>\n        <pre><code class=\"small-font\" data-trim>// create the database (module global)\nlet db = new Dexie(&lt;name of database&gt;);\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    // this is the table with the columns that are to be indexed.\n    &lt;tableName&gt;: '&lt;column1&gt;, &lt;column2&gt;...'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code class=\"small-font\" data-trim>let db = new Dexie(\"definitions\");\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    terms: 'term,definition'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.put()\">put</a></h2>\n        <p>Putting an item in a table is pretty straight forward: </p>\n        <pre><code data-trim>db.&lt;tableName&gt;.put({\"column1\": &lt;value1&gt;, \"column2\": &lt;value2&gt;, ...});</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.put({\"term\": term, \"definition\": definition});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n\n      <section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.get()\">get</a></h2>\n        <p>There are two ways to get information back out of a table, using either a\n        callback, or a <code>Promise</code> </p>\n        <pre><code data-trim>// get with a callback\ndb.&lt;tableName&gt;.get(&lt;key&gt;, function (item) {\n  // do something here\n});\n// get with a Promise.\ndb.&lt;tableName&gt;.get(&lt;key&gt;).then (function (item) {\n  // do something here\n}); </code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.get(term, function (item) {\n  console.log(\"Callback: Item at \" + term + \" is \" + item.definition);\n});\n\ndb.terms.get(term).then (function (item) {\n  console.log(\"Promise: Item at \" + term + \" is \" + item.definition);\n});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>\n\n      <section>\n        <h2>Compliance</h2>\n        <p>\n          The one issue with all of these newer technologies\n          (<code>localStorage</code>, <code>sessionStorage</code>,\n          <code>indexDB</code>, and frameworks like <code>Dexie</code>) is cross\n          browser compatibilty\n        </p>\n        <p>\n          <a href=\"https://whatwebcando.today/\">What Web Can Do Today</a>\n          (Try this in different browsers or on your phone)\n        </p>\n        <p>\n          <a href=\"https://www.w3.org/2018/04/web-roadmaps/mobile/\">Roadmap of Web Applications on Mobile</a>\n        </p>\n        <p>\n          <a href=\"https://caniuse.com/\">Can I use</a> - \"provides  up-to-date browser support tables for\n            support of front-end web technologies on desktop and mobile web browsers.\"\n        </p>\n      </section>\n\n        <section>\n          <h2>Post lecture quick check</h2>\n        </section>\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/zZfOgnl2caG4CJvZ0H5kU?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/xgcnByfvFsNndc2YsaRVA?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/XB8ZckXNfHaF17N88o0N8?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n      <section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/6il27nq5b7hQqQPs5x137?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>\n\n\n\n\n      </div>\n    </section>", "text": "localStorage and sessionStorage From Wikipedia localStorage is a document property that allows you to save information across browser sessions (i.e after you close the browser) sessionStorage is a document property that allows you to save information for this session only, and will be cleared when the page is closed. Both localStorage and sessionStorage inherit from Storage class. Name/value pairs (seen in cookies and Storage) are supported by most every browser Storage There are three methods we're interested in from Storage method description setItem(keyName, keyValue) Sets the keyName location in localStorage to be keyValue getItem(keyName) Retrieves the keyValue in localStorage associated with keyName removeItem(keyName) Removes the keyName location in localStorage localStorage example window.localStorage.setItem(\"Melissa\", \"Mowgli\");window.localStorage.setItem(\"Lauren\", \"Spot\");window.localStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.localStorage.getItem(\"Lauren\");window.localStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab sessionStorage example Similarly for sessionStorage window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");window.sessionStorage.setItem(\"Lauren\", \"Spot\");window.sessionStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.sessionStorage.getItem(\"Lauren\");window.sessionStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab indexDB indexDB cookies, localStorage, sessionStorage can only store small amounts of data indexDB is a \"a low-level API for client-side storage of significant amounts of structured data, including files/blobs\" Look down through the slides if you want to know more... indexDB usage There are many flavors types of indexDB - so apparently you have to cover your bases with creating the database for your page: // This works on all devices/browsers, and uses// IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(<dbname>, <version>); JavaScript (template) // This works on all devices/browsers,// and uses IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(\"terms\", 1); JavaScript (example) indexDB usage You need to set callbacks on the new database object, so once the database is created, the tables (schema) can be created. openDB.onupgradeneeded = function() { let db = openDB.result; let store = db.createObjectStore(\"terms\", {keyPath: \"term\"}); let index = store.createIndex(\"definition\", \"definition\", { unique: false });};openDB.onsuccess = function() { console.log(\"Database created!\");} JavaScript (example) indexDB setting values // Start a new transactionlet db = openDB.result;let tx = db.transaction(\"terms\", \"readwrite\");let store = tx.objectStore(\"terms\");let index = store.index(\"definition\");// get the term and definition from the userstore.put({key: userTerm, definition: userDef});// Close the db when the transaction is donetx.oncomplete = function() { db.close();}; JavaScript (example) indexDB getting values // assume the variable term has been setlet getValue = store.get(term);getValue.onsuccess = function() { alert(getValue.result.definition);};getValue.onerror = function() { // error handling here}; JavaScript (example) Phew... that was a lot of work. And confusing too Dexie to the rescue Dexie Dexie is a wrapper around indexDB that makes it MUCH easier to use. // create the database (module global)let db = new Dexie(<name of database>);window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ // this is the table with the columns that are to be indexed. <tableName>: '<column1>, <column2>...' });}; JavaScript (template) let db = new Dexie(\"definitions\");window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ terms: 'term,definition' });}; JavaScript (example) Dexie put Putting an item in a table is pretty straight forward: db.<tableName>.put({\"column1\": <value1>, \"column2\": <value2>, ...}); JavaScript (template) db.terms.put({\"term\": term, \"definition\": definition}); JavaScript (example) Dexie get There are two ways to get information back out of a table, using either a callback, or a Promise // get with a callbackdb.<tableName>.get(<key>, function (item) { // do something here});// get with a Promise.db.<tableName>.get(<key>).then (function (item) { // do something here}); JavaScript (template) db.terms.get(term, function (item) { console.log(\"Callback: Item at \" + term + \" is \" + item.definition);});db.terms.get(term).then (function (item) { console.log(\"Promise: Item at \" + term + \" is \" + item.definition);}); JavaScript (example) Compliance The one issue with all of these newer technologies (localStorage, sessionStorage, indexDB, and frameworks like Dexie) is cross browser compatibilty What Web Can Do Today (Try this in different browsers or on your phone) Roadmap of Web Applications on Mobile Can I use - \"provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.\" Post lecture quick check", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">Storage</a></h2>\n        <p>There are three methods we're interested in from <code>Storage</code> </p>\n        <table>\n          <tr>\n            <th>method</th>\n            <th>description</th>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem(keyName, keyValue)</a></td>\n            <td>Sets the <code>keyName</code> location in localStorage to be <code>keyValue</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem(keyName)</a></td>\n            <td>Retrieves the <code>keyValue</code> in localStorage associated with <code>keyName</code></td>\n          </tr>\n          <tr>\n            <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem(keyName)</a></td>\n            <td>Removes the <code>keyName</code> location in localStorage</td>\n          </tr>\n        </table>\n\n      </section>", "text": "Storage There are three methods we're interested in from Storage method description setItem(keyName, keyValue) Sets the keyName location in localStorage to be keyValue getItem(keyName) Retrieves the keyValue in localStorage associated with keyName removeItem(keyName) Removes the keyName location in localStorage", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> example</h2>\n        <pre><code data-trim>window.localStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.localStorage.setItem(\"Lauren\", \"Spot\");\nwindow.localStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.localStorage.getItem(\"Lauren\");\nwindow.localStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/localStorage.png\" alt=\"localStorage after example\">\n          </div>\n        </div>\n      </section>", "text": "localStorage example window.localStorage.setItem(\"Melissa\", \"Mowgli\");window.localStorage.setItem(\"Lauren\", \"Spot\");window.localStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.localStorage.getItem(\"Lauren\");window.localStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2>Web Standards</h2>\n          <p>\n            Moreover, it is important to write proper HTML code and follow proper syntax\n          </p>\n          <p>Why use valid HTML5 and web standards?</p>\n          <ul>\n            <li>More interoperable across different web browsers</li>\n            <li>More likely that our pages will display correctly now and in the future</li>\n            <li>To ensure accessibilty</li>\n          </ul>\n        </section>", "text": "Web Standards Moreover, it is important to write proper HTML code and follow proper syntax Why use valid HTML5 and web standards? More interoperable across different web browsers More likely that our pages will display correctly now and in the future To ensure accessibilty", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>More About HTML Tags</h2>\n\n          <p>\n            Some tags can contain additional information called\n            <strong>attributes</strong>\n          </p>\n          <ul>\n            <li class=\"medium-small-font\">Syntax: <br><code>&lt;element\n                attribute=\"value\"\n                attribute=\"value\"&gt;\n                <var>content</var> &lt;/<var>element</var>&gt;</code></li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;a href=\"page2.html\"&gt;Next page&lt;/a&gt;</code></li>\n          </ul>\n\n          <p>Some tags don't contain content and can be opened and closed in one tag</p>\n          <ul>\n            <li class=\"medium-small-font\">Syntax: <br><code>&lt;<var>element</var> <var>attribute</var>=\"<var>value</var>\" <var>attribute</var>=\"<var>value</var>\" /&gt;</code></li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;br /&gt;, &lt;hr /&gt;, &lt;br&gt;, &lt;hr&gt;</code> </li>\n            <li class=\"medium-small-font\">Example: <br><code>&lt;img src=\"bunny.jpg\" alt=\"pic from Easter\" /&gt;</code></li>\n          </ul>\n        </section>", "text": "More About HTML Tags Some tags can contain additional information called attributes Syntax: <element attribute=\"value\" attribute=\"value\"> content </element> Example: <a href=\"page2.html\">Next page</a> Some tags don't contain content and can be opened and closed in one tag Syntax: <element attribute=\"value\" attribute=\"value\" /> Example: <br />, <hr />, <br>, <hr> Example: <img src=\"bunny.jpg\" alt=\"pic from Easter\" />", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Comments: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#HTML_comments\"><code>&lt;!--</code> ...<code>--&gt;</code></a></h2>\n\n          <p class=\"term-definition\">comments to document your HTML file or \"comment out\" text</p>\n\n          <pre><code class=\"hljs\" data-trim>&lt;!-- My web page, by Mowgli Hovik\n     CSE 154, Spring 2048     --&gt;\n&lt;p&gt;CSE courses are &lt;!-- NOT --&gt; a lot of fun!&lt;/p&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <div class=\"output\">\n            <!-- My web page, by Suzy Student\n              CSE 154 D, Spring 2048     -->\n              <p>CSE courses are <!-- NOT --> a lot of fun!</p>\n              <p class=\"output-caption\">output</p>\n          </div>\n\n          <p>Many web pages are not thoroughly commented (or at all)</p>\n          <p>Still useful at top of page and for disabling code</p>\n          <p>Comments cannot be nested and cannot contain a <code>--</code></p>\n          <p><strong>Do not leave commented-out HTML code in your homework assignments!</strong></p>\n        </section>", "text": "Comments: <!-- ...--> comments to document your HTML file or \"comment out\" text <!-- My web page, by Mowgli Hovik CSE 154, Spring 2048 --><p>CSE courses are <!-- NOT --> a lot of fun!</p> HTML CSE courses are a lot of fun! output Many web pages are not thoroughly commented (or at all) Still useful at top of page and for disabling code Comments cannot be nested and cannot contain a -- Do not leave commented-out HTML code in your homework assignments!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>HTML Character Entities</h2>\n          <p class=\"term-definition\">\n          a way of representing any <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> character within a web page\n          </p>\n\n          <table class=\"standard\">\n            <tr><th class=\"spaced slidetable\">character(s)</th><th class=\"slidetable\">entity</th></tr>\n            <tr class=\"code\"><td>&lt; &gt;</td><td>&amp;lt; &amp;gt;</td></tr>\n            <tr class=\"code\"><td>\u00e9 \u00e8 \u00f1</td><td>&amp;eacute; &amp;egrave; &amp;ntilde;</td></tr>\n            <tr class=\"code\"><td>\u2122 \u00a9</td><td>&amp;trade; &amp;copy;</td></tr>\n            <tr class=\"code\"><td>\u03c0 \u03b4 \u0394</td><td>&amp;pi; &amp;delta; &amp;Delta;</td></tr>\n            <tr class=\"code\"><td>\u0418</td><td>&amp;#1048;</td></tr>\n            <tr class=\"code\"><td>\" &amp;</td><td>&amp;quot; &amp;amp;</td></tr>\n          </table>\n\n          <ul>\n            <li><a href=\"http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references\">Complete list of HTML entities</a></li>\n            <li>How would you display the text <code>&amp;amp;</code> on a web page?</li>\n          </ul>\n        </section>", "text": "HTML Character Entities a way of representing any Unicode character within a web page character(s)entity < >&lt; &gt; \u00e9 \u00e8 \u00f1&eacute; &egrave; &ntilde; \u2122 \u00a9&trade; &copy; \u03c0 \u03b4 \u0394&pi; &delta; &Delta; \u0418&#1048; \" &&quot; &amp; Complete list of HTML entities How would you display the text &amp; on a web page?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Example: HTML-encoding text</h2>\n          <p>What if I wanted to put THIS into a rendered web page?</p>\n          <div class=\"output small-font\">\n            <p>\n            &lt;p&gt;\n            &lt;a href=\"http://google.com/search?q=Mowgli&amp;ie=utf-8\"&gt;\n            Search Google for Mowgli\n            &lt;/a&gt;\n            &lt;/p&gt;\n            </p>\n            <p class=\"output-caption\">output</p>\n          </div>\n\n          <div class=\"fragment\">\n            <p>\n              To display the link text in a web page, its special characters\n              must be encoded like this <em>in</em> the HTML:\n            </p>\n\n            <pre><code class=\"hljs no-syntax-highlight small-font\" data-trim>&amp;lt;p&amp;gt;\n  &amp;lt;a href=&amp;quot;http://google.com/search?q=Mowgli&amp;amp;ie=utf-8&amp;quot;&amp;gt;\n    Search Google for Mowgli\n  &amp;lt;/a&amp;gt;\n&amp;lt;/p&amp;gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </div>\n        </section>", "text": "Example: HTML-encoding text What if I wanted to put THIS into a rendered web page? <p> <a href=\"http://google.com/search?q=Mowgli&ie=utf-8\"> Search Google for Mowgli </a> </p> output To display the link text in a web page, its special characters must be encoded like this in the HTML: &lt;p&gt; &lt;a href=&quot;http://google.com/search?q=Mowgli&amp;ie=utf-8&quot;&gt; Search Google for Mowgli &lt;/a&gt;&lt;/p&gt; HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Homework 0</h2>\n          <p>Due tomorrow</p>\n          <p>Bring a computer with the development environment\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/setup.html\">installed</a>\n            to section. (This is Homework 0 due tomorrow!)\n          </p>\n        </section>", "text": "Homework 0 Due tomorrow Bring a computer with the development environment installed to section. (This is Homework 0 due tomorrow!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec01-intro-html/"},
{"html": "<section>\n          <h2>Comments</h2>\n          <pre><code class=\"hljs\" data-trim># single-line comment\n\n// single-line comment\n\n/*\n * multi-line\n * comment\n */</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n          <p>\n          Like Java, but <code>#</code> is allowed\n          </p>\n          <ul>\n            <li>A lot of PHP code uses <code>#</code> comments instead of <code>//</code></li>\n            <li>We recommend <code>#</code> and will use it in our examples</li>\n          </ul>\n        </section>", "text": "Comments # single-line comment// single-line comment/* * multi-line * comment */ PHP Like Java, but # is allowed A lot of PHP code uses # comments instead of // We recommend # and will use it in our examples", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Arithmetic Operations</h2>\n          <p>\n          <code>+ - * / %</code>\n          <br>\n          <code>. ++ --</code>\n          <br>\n          <code>= += -= *= /= %= .=</code>\n          </p>\n          <p>Many operators auto-convert types: <code>5 + \"7\"</code> is <code>12</code></p>\n        </section>", "text": "Arithmetic Operations + - * / % . ++ -- = += -= *= /= %= .= Many operators auto-convert types: 5 + \"7\" is 12", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/language.variables.basics.php\" target=\"_blank\">Variables</a></h2>\n          <pre><code class=\"hljs\" data-trim>$name = expression;</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>$user_name = \"Pokemon4Lyfe\";\n$age = 25;\n$age_in_dog_years = $age / 7;\n$this_class_rocks = true;</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n\n          <p>Names are case-sensitive; separate multiple words with <code>_</code> (as in\n          <code>$user_name</code>)</p>\n          <p>Names <em>always</em> begin with <code>$</code> on both declaration and usage</p>\n          <p>\n          Implicitly declared by assignment (type is not written; a \"loosely-typed\" language)\n          </p>\n        </section>", "text": "Variables $name = expression; PHP (template) $user_name = \"Pokemon4Lyfe\";$age = 25;$age_in_dog_years = $age / 7;$this_class_rocks = true; PHP (example) Names are case-sensitive; separate multiple words with _ (as in $user_name) Names always begin with $ on both declaration and usage Implicitly declared by assignment (type is not written; a \"loosely-typed\" language)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Types</h2>\n          <p>Basic types:\n          <a href=\"http://php.net/manual/en/language.types.integer.php\" target=\"_blank\">\n            <code>integer</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.float.php\" target=\"_blank\">\n            <code>float</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.bool.php\" target=\"_blank\">\n            <code>boolean</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.string.php\" target=\"_blank\">\n            <code>string</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.array.php\" target=\"_blank\">\n            <code>array</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.object.php\" target=\"_blank\">\n            <code>object</code>\n          </a>,\n          <a href=\"http://php.net/manual/en/language.types.null.php\" target=\"_blank\">\n            <code>NULL</code>\n          </a>\n          </p>\n          <p>Test what type a variable is with <code>is_<em>type</em></code> functions, e.g. <a href=\"http://php.net/manual/en/function.is-string.php\" target=\"_blank\"><code>is_string</code></a>\n          </p>\n          <p>\n          <a href=\"http://php.net/manual/en/function.gettype.php\" target=\"_blank\"><code>gettype</code></a> function returns a variable's type as a string (not\n          often needed)\n          </p>\n          <p>\n          PHP <a href=\"http://php.net/manual/en/language.types.type-juggling.php\" target=\"_blank\">converts between types automatically</a> in many cases:\n          </p>\n          <ul>\n            <li><code>string</code> to <code>int</code> auto-conversion on <code>+</code> for\n              <code>(\"1\" + 1 == 2)</code></li>\n            <li><code>int</code> to <code>float</code> auto-conversion on <code>/</code> for\n              <code>(3 / 2 == 1.5)</code></li>\n          </ul>\n          <p>\n          Type-cast with (<em>type</em>):\n          </p>\n          <ul>\n            <li><code>$age = (int) \"21\";</code></li>\n          </ul>\n        </section>", "text": "Types Basic types: integer , float , boolean , string , array , object , NULL Test what type a variable is with is_type functions, e.g. is_string gettype function returns a variable's type as a string (not often needed) PHP converts between types automatically in many cases: string to int auto-conversion on + for (\"1\" + 1 == 2) int to float auto-conversion on / for (3 / 2 == 1.5) Type-cast with (type): $age = (int) \"21\";", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>String Type</h2>\n          <p>Can be specified with \"\" or ''</p>\n          <pre><code class=\"hljs\" data-trim>$favorite_food = \"coffee!\";\necho $favorite_food[2]; # prints \"o\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>0-based indexing using <code>[]</code> bracket notation</p>\n        </section>", "text": "String Type Can be specified with \"\" or '' $favorite_food = \"coffee!\";echo $favorite_food[2]; # prints \"o\" PHP 0-based indexing using [] bracket notation", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>String Concatenation</h2>\n          <p>\n            Important note! String concatenation is <code>.</code>\n            (period) not <code>+</code>\n          </p>\n          <ul>\n            <li><code>5 + \"2 turtle doves\"</code> produces 7</li>\n            <li><code>5 . \"2 turtle doves\"</code> produces \"52 turtle doves\"</li>\n          </ul>\n          <p>Seriously. You will make this mistake at least once. It's ok :) just add it to your\n          list of \"common PHP bugs\" (yes, you might want to start a list).</p>\n        </section>", "text": "String Concatenation Important note! String concatenation is . (period) not + 5 + \"2 turtle doves\" produces 7 5 . \"2 turtle doves\" produces \"52 turtle doves\" Seriously. You will make this mistake at least once. It's ok :) just add it to your list of \"common PHP bugs\" (yes, you might want to start a list).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>More PHP Syntax Examples</h2>\n          <p>(Will review for first part of Monday, but included for practice over the weekend</p>\n        </section>", "text": "More PHP Syntax Examples (Will review for first part of Monday, but included for practice over the weekend", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <section>\n          <h2>String Functions</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n          <table class=\"code-table small-font\">\n            <tr>\n              <th>Name</th>\n              <th>Java Equivalent</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strlen.php\" target=\"_blank\">strlen($str)</a></td>\n              <td><code>str.length</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos($str, $ch)</a></td>\n              <td><code>str.indexOf(ch)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.substr.php\" target=\"_blank\">substr($str, $start, $end)</a></td>\n              <td><code>str.substring(start, end)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strtolower.php\" target=\"_blank\">strtolower($str)</a>, <a href=\"http://php.net/manual/en/function.strtoupper.php\" target=\"_blank\">strtoupper($str)</a></td>\n              <td><code>str.toLowerCase</code>, <code>str.toUpperCase</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.trim.php\" target=\"_blank\">trim($str)</a></td>\n              <td><code>str.trim()</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.explode.php\" target=\"_blank\">explode($delim, $str)</a>, <a href=\"http://php.net/manual/en/function.implode.php\" target=\"_blank\">implode($delim, $arr)</a></td>\n              <td><code>str.split(delim)</code>, <code>String.join(delim, values)</code></td>\n            </tr>\n          </table>\n          <p>See slides below for Java and Python equivalents!</p>\n        </section>\n        <section>\n          <h2>PHP vs. Java Strings</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\nString name = \"Mowgli Hovik\";\nint length = strlen($name);             # 12\nint indexOfH = name.indexOf(\"H\");       # 7\nString last = name.substring(7, 12);    # \"Hovik\"\nname = name.toUpperCase();              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>\n        </section>", "text": "String Functions # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP Name Java Equivalent strlen($str) str.length strpos($str, $ch) str.indexOf(ch) substr($str, $start, $end) str.substring(start, end) strtolower($str), strtoupper($str) str.toLowerCase, str.toUpperCase trim($str) str.trim() explode($delim, $str), implode($delim, $arr) str.split(delim), String.join(delim, values) See slides below for Java and Python equivalents! PHP vs. Java Strings # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP # index 012345678901String name = \"Mowgli Hovik\";int length = strlen($name); # 12int indexOfH = name.indexOf(\"H\"); # 7String last = name.substring(7, 12); # \"Hovik\"name = name.toUpperCase(); # \"MOWGLI HOVIK\" Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>String Functions</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n          <table class=\"code-table small-font\">\n            <tr>\n              <th>Name</th>\n              <th>Java Equivalent</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strlen.php\" target=\"_blank\">strlen($str)</a></td>\n              <td><code>str.length</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos($str, $ch)</a></td>\n              <td><code>str.indexOf(ch)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.substr.php\" target=\"_blank\">substr($str, $start, $end)</a></td>\n              <td><code>str.substring(start, end)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strtolower.php\" target=\"_blank\">strtolower($str)</a>, <a href=\"http://php.net/manual/en/function.strtoupper.php\" target=\"_blank\">strtoupper($str)</a></td>\n              <td><code>str.toLowerCase</code>, <code>str.toUpperCase</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.trim.php\" target=\"_blank\">trim($str)</a></td>\n              <td><code>str.trim()</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.explode.php\" target=\"_blank\">explode($delim, $str)</a>, <a href=\"http://php.net/manual/en/function.implode.php\" target=\"_blank\">implode($delim, $arr)</a></td>\n              <td><code>str.split(delim)</code>, <code>String.join(delim, values)</code></td>\n            </tr>\n          </table>\n          <p>See slides below for Java and Python equivalents!</p>\n        </section>", "text": "String Functions # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP Name Java Equivalent strlen($str) str.length strpos($str, $ch) str.indexOf(ch) substr($str, $start, $end) str.substring(start, end) strtolower($str), strtoupper($str) str.toLowerCase, str.toUpperCase trim($str) str.trim() explode($delim, $str), implode($delim, $arr) str.split(delim), String.join(delim, values) See slides below for Java and Python equivalents!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>PHP vs. Java Strings</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\nString name = \"Mowgli Hovik\";\nint length = strlen($name);             # 12\nint indexOfH = name.indexOf(\"H\");       # 7\nString last = name.substring(7, 12);    # \"Hovik\"\nname = name.toUpperCase();              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>", "text": "PHP vs. Java Strings # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP # index 012345678901String name = \"Mowgli Hovik\";int length = strlen($name); # 12int indexOfH = name.indexOf(\"H\"); # 7String last = name.substring(7, 12); # \"Hovik\"name = name.toUpperCase(); # \"MOWGLI HOVIK\" Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Interpreted Strings</h2>\n          <pre><code class=\"hljs\" data-trim data-noescape>$age = 16;\n<del class=\"bad\">echo \"You are \" . $age . \" years old.\\n\";</del>\necho \"You are <span class=\"good\">$age</span> years old.\\n\"; # You are 16 years old.</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Strings inside <code>\" \"</code> <strong>are</strong> interpreted</p>\n          <ul>\n            <li>Variables that appear inside them will have their values inserted into the string</li>\n          </ul>\n          <p>Strings inside <code>' '</code> <strong>are not</strong> interpreted:\n          </p>\n          <pre><code class=\"hljs\" data-trim>echo 'You are $age years old.\\n'; # You are $age years old.</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>If necessary to avoid ambiguity, you can enclose the variable in <code>{}</code>:</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">echo \"Today is your $ageth birthday.\\n\"; # ageth not found</del>\necho \"Today is your <span class=\"good\">{$age}th </span>birthday.\\n\";</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Interpreted Strings $age = 16;echo \"You are \" . $age . \" years old.\\n\";echo \"You are $age years old.\\n\"; # You are 16 years old. PHP Strings inside \" \" are interpreted Variables that appear inside them will have their values inserted into the string Strings inside ' ' are not interpreted: echo 'You are $age years old.\\n'; # You are $age years old. PHP If necessary to avoid ambiguity, you can enclose the variable in {}: echo \"Today is your $ageth birthday.\\n\"; # ageth not foundecho \"Today is your {$age}th birthday.\\n\"; PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><code>bool</code> (Boolean) Type</h2>\n          <pre><code class=\"hljs\" data-trim>$feels_like_summer = FALSE;\n$php_is_rad = TRUE;\n$student_count = 217;\n$nonzero = (bool) $student_count; # TRUE</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>PHP has similar \"truthy/falsy\" properties as JS (<a href=\"http://php.net/manual/en/language.types.type-juggling.php\">more\n             details</a>)</p>\n          <p>The following values are considered to be <code>FALSE</code> (all others are\n          <code>TRUE</code>):</p>\n          <ul>\n            <li>0 and 0.0</li>\n            <li>\"\", \"0\", and <code>NULL</code> (includes unset variables)</li>\n            <li>arrays with 0 elements</li>\n          </ul>\n          <p><code>FALSE</code> prints as an empty string (no output); <code>TRUE</code> prints as\n          a 1 (why do you think that is?)</p>\n        </section>", "text": "bool (Boolean) Type $feels_like_summer = FALSE;$php_is_rad = TRUE;$student_count = 217;$nonzero = (bool) $student_count; # TRUE PHP PHP has similar \"truthy/falsy\" properties as JS (more details) The following values are considered to be FALSE (all others are TRUE): 0 and 0.0 \"\", \"0\", and NULL (includes unset variables) arrays with 0 elements FALSE prints as an empty string (no output); TRUE prints as a 1 (why do you think that is?)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.for.php\">For Loops</a></h2>\n          <pre>\n      <code class=\"hljs\" data-trim>for (initialization; condition; update) {\n  statements\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n\n          <pre>\n      <code class=\"hljs\" data-trim>for ($i = 0; $i &lt; 10; $i++) {\n  print \"$i squared is \" . $i * $i . \"\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>(remember . not + for string concatenation)</p>\n        </section>", "text": "For Loops for (initialization; condition; update) { statements} PHP (template) for ($i = 0; $i < 10; $i++) { print \"$i squared is \" . $i * $i . \"\\n\";} PHP (example) (remember . not + for string concatenation)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.elseif.php\">If/Else</a> Statements</h2>\n          <pre>\n      <code class=\"hljs\" data-trim>if (condition) {\n  statements;\n} else if (condition) {\n  statements;\n} else {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n\n          <p>Can also use <code>elseif</code> instead of <code>else if </code></p>\n        </section>", "text": "If/Else Statements if (condition) { statements;} else if (condition) { statements;} else { statements;} PHP (template) Can also use elseif instead of else if", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.while.php\">While Loop</a> (same as Java)</h2>\n          <pre>\n      <code class=\"hljs\" data-trim>while (condition) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>do {\n  statements;\n} while (condition);</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <p>\n          <a href=\"http://php.net/manual/en/control-structures.break.php\"><code>break</code></a> and\n          <a href=\"http://php.net/manual/en/control-structures.continue.php\"><code>continue</code></a>\n          keywords also behave as in Java (do not use these in this course)\n          </p>\n        </section>", "text": "While Loop (same as Java) while (condition) { statements;} PHP (template) do { statements;} while (condition); PHP (template) break and continue keywords also behave as in Java (do not use these in this course)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Functions</h2>\n          <pre><code class=\"hljs\" data-trim>function name(parameterName, ..., parameterName) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>function calculate_profit($cost, $price, $qty) {\n  return ($price / $cost) * $qty;\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n\n          <ul>\n            <li>parameter types and return types are not written</li>\n            <li>a function with no return statements is implicitly \"void\"</li>\n          </ul>\n        </section>", "text": "Functions function name(parameterName, ..., parameterName) { statements;} PHP (template) function calculate_profit($cost, $price, $qty) { return ($price / $cost) * $qty;} PHP (example) parameter types and return types are not written a function with no return statements is implicitly \"void\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Calling Functions</h2>\n          <pre><code class=\"hljs\" data-trim>name(expression, ..., expression); </code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>$qty = 154; # quantity\n$bagel_price = 0.85; # A plain bagel costs .85 to make!\n$bagel_sell  = 3.50; # A plain bagel sells for 3.50!\n$profit = calculate_profit($bagel_cost, $bagel_price, $qty);\n# Who needs a degree when you can sell bagels?</code></pre>\n        <p class=\"code-caption\">PHP (example)</p>\n\n        </section>", "text": "Calling Functions name(expression, ..., expression); PHP (template) $qty = 154; # quantity$bagel_price = 0.85; # A plain bagel costs .85 to make!$bagel_sell = 3.50; # A plain bagel sells for 3.50!$profit = calculate_profit($bagel_cost, $bagel_price, $qty);# Who needs a degree when you can sell bagels? PHP (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Practice</h2>\n          <p><a href=\"https://www.codestepbystep.com/problem/view/php/strings/repeat\">Write a\n            function</a> named <code>repeat</code> that accepts a string and a number of repetitions as\n          parameters and returns the string concatenated that many times. \n          </p>\n          <p>For example, the call of\n          repeat(\"hello\", 3) returns \"hellohellohello\". If the number of repetitions is 0 or less,\n          return an empty string.</p>\n        </section>", "text": "Practice Write a function named repeat that accepts a string and a number of repetitions as parameters and returns the string concatenated that many times. For example, the call of repeat(\"hello\", 3) returns \"hellohellohello\". If the number of repetitions is 0 or less, return an empty string.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n        <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">sessionStorage</a> example</h2>\n        <p>Similarly for sessionStorage</p>\n        <pre><code data-trim>window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");\nwindow.sessionStorage.setItem(\"Lauren\", \"Spot\");\nwindow.sessionStorage.setItem(\"Jacki\", \"Moss\");\nlet bestPet = window.sessionStorage.getItem(\"Lauren\");\nwindow.sessionStorage.removeItem(\"Jacki\");</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        <div class=\"side-by-side\">\n          <div>\n            <p>before closing the browser tab</p>\n            <img src=\"img/sessionStorage.png\" alt=\"sessionStorage before example\">\n          </div>\n          <div>\n            <p>after closing the browser tab</p>\n            <img src=\"img/sessionStorageAfter.png\" alt=\"sessionStorage after example\">\n          </div>\n        </div>\n      </section>", "text": "sessionStorage example Similarly for sessionStorage window.sessionStorage.setItem(\"Melissa\", \"Mowgli\");window.sessionStorage.setItem(\"Lauren\", \"Spot\");window.sessionStorage.setItem(\"Jacki\", \"Moss\");let bestPet = window.sessionStorage.getItem(\"Lauren\");window.sessionStorage.removeItem(\"Jacki\"); JavaScript (example) before closing the browser tab after closing the browser tab", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><code>indexDB</code></h2>\n      </section>", "text": "indexDB", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\"><code>indexDB</code></a></h2>\n          <p><code>cookies</code>, <code>localStorage</code>,\n            <code>sessionStorage</code> can only store small amounts of\n            data\n          </p>\n          <p>\n            <code>indexDB</code> is a \"a low-level API for client-side storage\n            of significant amounts of structured data, including files/blobs\"\n          </p>\n          <p>\n            Look down through the slides if you want to know more...\n          </p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>There are many flavors types of indexDB - so apparently you have to cover your\n            bases with creating the database for your page:\n          </p>\n          <pre><code data-trim>// This works on all devices/browsers, and uses\n// IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(&lt;dbname&gt;, &lt;version&gt;);</code></pre>\n          <p class=\"code-caption\">JavaScript (template)</p>\n          <pre><code data-trim>// This works on all devices/browsers,\n// and uses IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(\"terms\", 1);</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>You need to set callbacks on the new database object, so once\n            the database is created, the tables (schema) can be created.\n          </p>\n          <pre><code data-trim>openDB.onupgradeneeded = function() {\n  let db = openDB.result;\n  let store = db.createObjectStore(\"terms\", {keyPath: \"term\"});\n  let index = store.createIndex(\"definition\", \"definition\", { unique: false });\n};\nopenDB.onsuccess = function() {\n  console.log(\"Database created!\");\n}</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n\n        <section>\n          <h2><code>indexDB</code> setting values</h2>\n          <pre><code data-trim>// Start a new transaction\nlet db = openDB.result;\nlet tx = db.transaction(\"terms\", \"readwrite\");\nlet store = tx.objectStore(\"terms\");\nlet index = store.index(\"definition\");\n\n// get the term and definition from the user\n\nstore.put({key: userTerm, definition: userDef});\n\n// Close the db when the transaction is done\ntx.oncomplete = function() {\n  db.close();\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n\n        <section>\n          <h2><code>indexDB</code> getting values</h2>\n          <pre><code data-trim>// assume the variable term has been set\nlet getValue = store.get(term);\n\ngetValue.onsuccess = function() {\n  alert(getValue.result.definition);\n};\n\ngetValue.onerror = function() {\n  // error handling here\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>\n      </section>", "text": "indexDB cookies, localStorage, sessionStorage can only store small amounts of data indexDB is a \"a low-level API for client-side storage of significant amounts of structured data, including files/blobs\" Look down through the slides if you want to know more... indexDB usage There are many flavors types of indexDB - so apparently you have to cover your bases with creating the database for your page: // This works on all devices/browsers, and uses// IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(<dbname>, <version>); JavaScript (template) // This works on all devices/browsers,// and uses IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(\"terms\", 1); JavaScript (example) indexDB usage You need to set callbacks on the new database object, so once the database is created, the tables (schema) can be created. openDB.onupgradeneeded = function() { let db = openDB.result; let store = db.createObjectStore(\"terms\", {keyPath: \"term\"}); let index = store.createIndex(\"definition\", \"definition\", { unique: false });};openDB.onsuccess = function() { console.log(\"Database created!\");} JavaScript (example) indexDB setting values // Start a new transactionlet db = openDB.result;let tx = db.transaction(\"terms\", \"readwrite\");let store = tx.objectStore(\"terms\");let index = store.index(\"definition\");// get the term and definition from the userstore.put({key: userTerm, definition: userDef});// Close the db when the transaction is donetx.oncomplete = function() { db.close();}; JavaScript (example) indexDB getting values // assume the variable term has been setlet getValue = store.get(term);getValue.onsuccess = function() { alert(getValue.result.definition);};getValue.onerror = function() { // error handling here}; JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\"><code>indexDB</code></a></h2>\n          <p><code>cookies</code>, <code>localStorage</code>,\n            <code>sessionStorage</code> can only store small amounts of\n            data\n          </p>\n          <p>\n            <code>indexDB</code> is a \"a low-level API for client-side storage\n            of significant amounts of structured data, including files/blobs\"\n          </p>\n          <p>\n            Look down through the slides if you want to know more...\n          </p>\n        </section>", "text": "indexDB cookies, localStorage, sessionStorage can only store small amounts of data indexDB is a \"a low-level API for client-side storage of significant amounts of structured data, including files/blobs\" Look down through the slides if you want to know more...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>There are many flavors types of indexDB - so apparently you have to cover your\n            bases with creating the database for your page:\n          </p>\n          <pre><code data-trim>// This works on all devices/browsers, and uses\n// IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(&lt;dbname&gt;, &lt;version&gt;);</code></pre>\n          <p class=\"code-caption\">JavaScript (template)</p>\n          <pre><code data-trim>// This works on all devices/browsers,\n// and uses IndexedDBShim as a final fallback\nlet indexedDB = window.indexedDB || window.mozIndexedDB ||\n                window.webkitIndexedDB || window.msIndexedDB ||\n                window.shimIndexedDB;\n// Open (or create) the database\nlet openDB = indexedDB.open(\"terms\", 1);</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>", "text": "indexDB usage There are many flavors types of indexDB - so apparently you have to cover your bases with creating the database for your page: // This works on all devices/browsers, and uses// IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(<dbname>, <version>); JavaScript (template) // This works on all devices/browsers,// and uses IndexedDBShim as a final fallbacklet indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;// Open (or create) the databaselet openDB = indexedDB.open(\"terms\", 1); JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><code>indexDB</code> usage</h2>\n          <p>You need to set callbacks on the new database object, so once\n            the database is created, the tables (schema) can be created.\n          </p>\n          <pre><code data-trim>openDB.onupgradeneeded = function() {\n  let db = openDB.result;\n  let store = db.createObjectStore(\"terms\", {keyPath: \"term\"});\n  let index = store.createIndex(\"definition\", \"definition\", { unique: false });\n};\nopenDB.onsuccess = function() {\n  console.log(\"Database created!\");\n}</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n        </section>", "text": "indexDB usage You need to set callbacks on the new database object, so once the database is created, the tables (schema) can be created. openDB.onupgradeneeded = function() { let db = openDB.result; let store = db.createObjectStore(\"terms\", {keyPath: \"term\"}); let index = store.createIndex(\"definition\", \"definition\", { unique: false });};openDB.onsuccess = function() { console.log(\"Database created!\");} JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><code>indexDB</code> setting values</h2>\n          <pre><code data-trim>// Start a new transaction\nlet db = openDB.result;\nlet tx = db.transaction(\"terms\", \"readwrite\");\nlet store = tx.objectStore(\"terms\");\nlet index = store.index(\"definition\");\n\n// get the term and definition from the user\n\nstore.put({key: userTerm, definition: userDef});\n\n// Close the db when the transaction is done\ntx.oncomplete = function() {\n  db.close();\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>", "text": "indexDB setting values // Start a new transactionlet db = openDB.result;let tx = db.transaction(\"terms\", \"readwrite\");let store = tx.objectStore(\"terms\");let index = store.index(\"definition\");// get the term and definition from the userstore.put({key: userTerm, definition: userDef});// Close the db when the transaction is donetx.oncomplete = function() { db.close();}; JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><code>indexDB</code> getting values</h2>\n          <pre><code data-trim>// assume the variable term has been set\nlet getValue = store.get(term);\n\ngetValue.onsuccess = function() {\n  alert(getValue.result.definition);\n};\n\ngetValue.onerror = function() {\n  // error handling here\n};</code></pre>\n          <p class=\"code-caption\">JavaScript (example)</p>\n        </section>", "text": "indexDB getting values // assume the variable term has been setlet getValue = store.get(term);getValue.onsuccess = function() { alert(getValue.result.definition);};getValue.onerror = function() { // error handling here}; JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Phew... that was a lot of work. And confusing too </h2>\n        <p>Dexie to the rescue</p>\n      </section>", "text": "Phew... that was a lot of work. And confusing too Dexie to the rescue", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2><a href=\"http://dexie.org/\">Dexie</a></h2>\n        <p>Dexie is a wrapper around <code>indexDB</code> that makes it MUCH easier to use. </p>\n        <pre><code class=\"small-font\" data-trim>// create the database (module global)\nlet db = new Dexie(&lt;name of database&gt;);\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    // this is the table with the columns that are to be indexed.\n    &lt;tableName&gt;: '&lt;column1&gt;, &lt;column2&gt;...'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code class=\"small-font\" data-trim>let db = new Dexie(\"definitions\");\nwindow.addEventListener(\"load\", init);\nfunction init () {\n  // set up the schema\n  db.version(1).stores({\n    terms: 'term,definition'\n  });\n};</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>", "text": "Dexie Dexie is a wrapper around indexDB that makes it MUCH easier to use. // create the database (module global)let db = new Dexie(<name of database>);window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ // this is the table with the columns that are to be indexed. <tableName>: '<column1>, <column2>...' });}; JavaScript (template) let db = new Dexie(\"definitions\");window.addEventListener(\"load\", init);function init () { // set up the schema db.version(1).stores({ terms: 'term,definition' });}; JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.put()\">put</a></h2>\n        <p>Putting an item in a table is pretty straight forward: </p>\n        <pre><code data-trim>db.&lt;tableName&gt;.put({\"column1\": &lt;value1&gt;, \"column2\": &lt;value2&gt;, ...});</code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.put({\"term\": term, \"definition\": definition});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>", "text": "Dexie put Putting an item in a table is pretty straight forward: db.<tableName>.put({\"column1\": <value1>, \"column2\": <value2>, ...}); JavaScript (template) db.terms.put({\"term\": term, \"definition\": definition}); JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Dexie <a href=\"http://dexie.org/docs/Table/Table.get()\">get</a></h2>\n        <p>There are two ways to get information back out of a table, using either a\n        callback, or a <code>Promise</code> </p>\n        <pre><code data-trim>// get with a callback\ndb.&lt;tableName&gt;.get(&lt;key&gt;, function (item) {\n  // do something here\n});\n// get with a Promise.\ndb.&lt;tableName&gt;.get(&lt;key&gt;).then (function (item) {\n  // do something here\n}); </code></pre>\n        <p class=\"code-caption\">JavaScript (template)</p>\n        <pre><code data-trim>db.terms.get(term, function (item) {\n  console.log(\"Callback: Item at \" + term + \" is \" + item.definition);\n});\n\ndb.terms.get(term).then (function (item) {\n  console.log(\"Promise: Item at \" + term + \" is \" + item.definition);\n});</code></pre>\n        <p class=\"code-caption\">JavaScript (example)</p>\n      </section>", "text": "Dexie get There are two ways to get information back out of a table, using either a callback, or a Promise // get with a callbackdb.<tableName>.get(<key>, function (item) { // do something here});// get with a Promise.db.<tableName>.get(<key>).then (function (item) { // do something here}); JavaScript (template) db.terms.get(term, function (item) { console.log(\"Callback: Item at \" + term + \" is \" + item.definition);});db.terms.get(term).then (function (item) { console.log(\"Promise: Item at \" + term + \" is \" + item.definition);}); JavaScript (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <h2>Compliance</h2>\n        <p>\n          The one issue with all of these newer technologies\n          (<code>localStorage</code>, <code>sessionStorage</code>,\n          <code>indexDB</code>, and frameworks like <code>Dexie</code>) is cross\n          browser compatibilty\n        </p>\n        <p>\n          <a href=\"https://whatwebcando.today/\">What Web Can Do Today</a>\n          (Try this in different browsers or on your phone)\n        </p>\n        <p>\n          <a href=\"https://www.w3.org/2018/04/web-roadmaps/mobile/\">Roadmap of Web Applications on Mobile</a>\n        </p>\n        <p>\n          <a href=\"https://caniuse.com/\">Can I use</a> - \"provides  up-to-date browser support tables for\n            support of front-end web technologies on desktop and mobile web browsers.\"\n        </p>\n      </section>", "text": "Compliance The one issue with all of these newer technologies (localStorage, sessionStorage, indexDB, and frameworks like Dexie) is cross browser compatibilty What Web Can Do Today (Try this in different browsers or on your phone) Roadmap of Web Applications on Mobile Can I use - \"provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2>Post lecture quick check</h2>\n        </section>", "text": "Post lecture quick check", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/zZfOgnl2caG4CJvZ0H5kU?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>", "text": "", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/xgcnByfvFsNndc2YsaRVA?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>", "text": "", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/XB8ZckXNfHaF17N88o0N8?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>", "text": "", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n        <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/6il27nq5b7hQqQPs5x137?controls=none&amp;short_poll=true\" width=\"800px\" height=\"400px\" frameborder=\"0\"></iframe>\n      </section>", "text": "", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/"},
{"html": "<section>\n          <h2><a href=\"https://www.w3schools.com/php/php_arrays.asp\">Arrays</a></h2>\n          <pre><code class=\"hljs\" data-trim>$name = array(); # create\n$name = array(value0, value1, ..., valueN);\n$name[index] # get element value\n$name[index] = value; # set element value\n$name[] = value; # append PHP</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>$a = array(); # empty array (length 0)\n$a[0] = 23; # stores 23 at index 0 (length 1)\n$a2 = array(\"some\", \"strings\", \"in\", \"an\", \"array\");\n$a2[] = \"Ooh!\"; # add string to end (at index 5) </code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <ul>\n            <li> to append, use bracket notation without specifying an index</li>\n            <li> element type is not specified; can mix types</li>\n          </ul>\n        </section>", "text": "Arrays $name = array(); # create$name = array(value0, value1, ..., valueN);$name[index] # get element value$name[index] = value; # set element value$name[] = value; # append PHP PHP $a = array(); # empty array (length 0)$a[0] = 23; # stores 23 at index 0 (length 1)$a2 = array(\"some\", \"strings\", \"in\", \"an\", \"array\");$a2[] = \"Ooh!\"; # add string to end (at index 5) PHP to append, use bracket notation without specifying an index element type is not specified; can mix types", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2><a href=\"https://www.w3schools.com/php/php_arrays.asp\">Associative Arrays</a></h2>\n          <p>Associative arrays are arrays that use named keys that you assign to them.</p>\n          <pre><code class=\"hljs\" data-trim>$age = array(\"Spot\"=&gt;16, \"Whitney\"=&gt;16, \"Jack\"=&gt;12); # create\n$age[\"Mowgli\"] = 1;\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>$a = array(); # empty array (length 0)\n$age[\"Whitney\"] = 17; # stores 17 at the location where \"Whitney\" is stored\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n        </section>", "text": "Associative Arrays Associative arrays are arrays that use named keys that you assign to them. $age = array(\"Spot\"=>16, \"Whitney\"=>16, \"Jack\"=>12); # create$age[\"Mowgli\"] = 1; PHP $a = array(); # empty array (length 0)$age[\"Whitney\"] = 17; # stores 17 at the location where \"Whitney\" is stored PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Array Functions</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Function name(s)</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/count\" target=\"_blank\">count</a></td>\n              <td>number of elements in the array</td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/print_r\" target=\"_blank\">print_r</a></td>\n              <td>print array's contents</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_pop\" target=\"_blank\">array_pop</a>,\n                <a href=\"http://php.net/array_push\" target=\"_blank\">array_push</a>,\n                <a href=\"http://php.net/array_shift\" target=\"_blank\">array_shift</a>,\n                <a href=\"http://php.net/array_unshift\" target=\"_blank\">array_unshift</a>\n              </td>\n              <td>using an array as a stack/queue</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/in_array\" target=\"_blank\">in_array</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">array_search</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">array_reverse</a>\n                <a href=\"http://php.net/in_array\" target=\"_blank\">sort</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">rsort</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">shuffle</a>\n              </td>\n              <td>searching and reordering</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_fill\" target=\"_blank\">array_fill</a>,\n                <a href=\"http://php.net/array_merge\" target=\"_blank\">array_merge</a>,\n                <a href=\"http://php.net/array_intersect\" target=\"_blank\">array_intersect</a>,\n                <a href=\"http://php.net/array_diff\" target=\"_blank\">array_diff</a>,\n                <a href=\"http://php.net/array_slice\" target=\"_blank\">array_slice</a>,\n                <a href=\"http://php.net/range\" target=\"_blank\">range</a>\n              </td>\n              <td>creating, filling, filtering</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_sum\" target=\"_blank\">array_sum</a>,\n                <a href=\"http://php.net/array_product\" target=\"_blank\">array_product</a>,\n                <a href=\"http://php.net/array_unique\" target=\"_blank\">array_unique</a>,\n                <a href=\"http://php.net/array_filter\" target=\"_blank\">array_filter</a>,\n                <a href=\"http://php.net/array_reduce\" target=\"_blank\">array_reduce</a>\n              </td>\n              <td>\n                processing elements\n              </td>\n            </tr>\n          </table>\n  \t\t\t</section>", "text": "Array Functions Function name(s) Description count number of elements in the array print_r print array's contents array_pop, array_push, array_shift, array_unshift using an array as a stack/queue in_array, array_search, array_reverse sort, rsort, shuffle searching and reordering array_fill, array_merge, array_intersect, array_diff, array_slice, range creating, filling, filtering array_sum, array_product, array_unique, array_filter, array_reduce processing elements", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Array Function Example</h2>\n  \t\t\t\t<pre><code class=\"hljs\" data-trim>$tas = array(\"CA\", \"MJ\", \"MG\", \"SK\", \"KC\", \"DH\", \"JZ\");\nfor ($i = 0; i &lt; count($tas); $i++) {\n  $tas[$i}] = strtolower($tas[$i]);\n} # (\"ca\", \"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"jz\")\n\n$conner = array_shift($tas);   # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"jz\")\narray_pop($tas);               # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\")\narray_push($tas, \"kt\");        # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"kt\")\narray_reverse($tas);           # (\"kt\", \"dh\", \"kc\", \"sk\", \"mg\", \"mj\")\nsort($tas);                    # (\"dh\", \"kc\", \"kt\", \"mg\", \"mj\", \"sk\")\n$ks = array_slice($tas, 2, 3); # (\"kt\")</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>The array in PHP replaces many other data structures in Java</p>\n          <ul>\n            <li>e.g. list, stack, queue, set, map, ...</li>\n          </ul>\n\n  \t\t\t</section>", "text": "Array Function Example \t\t\t\t$tas = array(\"CA\", \"MJ\", \"MG\", \"SK\", \"KC\", \"DH\", \"JZ\");for ($i = 0; i < count($tas); $i++) { $tas[$i}] = strtolower($tas[$i]);} # (\"ca\", \"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"jz\")$conner = array_shift($tas); # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"jz\")array_pop($tas); # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\")array_push($tas, \"kt\"); # (\"mj\", \"mg\", \"sk\", \"kc\", \"dh\", \"kt\")array_reverse($tas); # (\"kt\", \"dh\", \"kc\", \"sk\", \"mg\", \"mj\")sort($tas); # (\"dh\", \"kc\", \"kt\", \"mg\", \"mj\", \"sk\")$ks = array_slice($tas, 2, 3); # (\"kt\") PHP The array in PHP replaces many other data structures in Java e.g. list, stack, queue, set, map, ...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>The foreach loop</h2>\n          <p>A convenient way to loop over each element of an array without indices</p>\n\n          <pre>\n            <code class=\"hljs\" data-trim>foreach ($array as $variableName) {\n  ...\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre>\n            <code class=\"hljs\" data-trim>$pups = array (\"Mowgli\", \"Abby\", \"Archie\", \"Pascal\");\nforeach ($pups as $pup) {\n  echo \"Mowgli boops $pup\\n\"; # even himself\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n        </section>", "text": "The foreach loop A convenient way to loop over each element of an array without indices foreach ($array as $variableName) { ...} PHP (template) $pups = array (\"Mowgli\", \"Abby\", \"Archie\", \"Pascal\");foreach ($pups as $pup) { echo \"Mowgli boops $pup\\n\"; # even himself} PHP (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec17-intro-php/"},
{"html": "<section>\n          <h2>Review: PHP Basics so Far</h2>\n          <div class=\"side-by-side\">\n            <div>\n          <pre><code class=\"hljs\" data-trim>&lt;?php\n  header(\"Content-type: text/plain\");\n  $name = \"Spot\";\n  $day = \"Monday\";\n  echo \"Hello \" . $name . \"!\\n\";\n  echo \"It's \" . $day . \"!\";\n?&gt;</code></pre>\n          <p class=\"code-caption\">PHP</p>\n            </div>\n            <div>\n              <pre><code>Hello Spot!\nIt's Monday!\n\n\n\n\n\n</code></pre>\n              <p class=\"code-caption\">output (plain text)</p>\n            </div>\n          </div>\n          <p>Variables always declared <em>and referenced</em> with <code>$</code></p>\n          <p>Variable names can only contain A-Z, 0-9, and _ (underscore) characters (must start\n          with letter). Variable/function naming follows <code>lowercase_under_score</code> naming\n          conventions.</p>\n          <p>Can use echo or print to output, as long as you're consistent</p>\n          <p>To output new lines, use \"\\n\"</p>\n        </section>", "text": "Review: PHP Basics so Far <?php header(\"Content-type: text/plain\"); $name = \"Spot\"; $day = \"Monday\"; echo \"Hello \" . $name . \"!\\n\"; echo \"It's \" . $day . \"!\";?> PHP Hello Spot!It's Monday! output (plain text) Variables always declared and referenced with $ Variable names can only contain A-Z, 0-9, and _ (underscore) characters (must start with letter). Variable/function naming follows lowercase_under_score naming conventions. Can use echo or print to output, as long as you're consistent To output new lines, use \"\\n\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 18: More PHP with GET Requests</h3>\n        </section>", "text": "CSE 154 Lecture 18: More PHP with GET Requests", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>\n            Wrapping up PHP Language Basics:\n          </p>\n          <ul>\n            <li>Strings and String Interpolation\n            </li><li>Booleans/Equality/NULL</li>\n            <li>Conditionals/Loops/Functions</li>\n            <li>Arrays: Basic and Associative</li>\n          </ul>\n          <p>Writing a basic PHP Web Service:</p>\n          <ul>\n            <li>Accessing GET parameters from PHP</li>\n            <li>Setting content type with header</li>\n            <li>Setting error messages with header</li>\n          </ul>\n        </section>", "text": "Agenda Wrapping up PHP Language Basics: Strings and String Interpolation Booleans/Equality/NULL Conditionals/Loops/Functions Arrays: Basic and Associative Writing a basic PHP Web Service: Accessing GET parameters from PHP Setting content type with header Setting error messages with header", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Recall: String Concatenation</h2>\n          <p>\n            Important note! String concatenation is <code>.</code> (period) not <code>+</code>\n          </p>\n          <pre><code>$month = 5;\n$day = 13;\n$year = 2019;\nprint(\"It's \" . $month . \"/\" + $day . \"/\" . $year); # <span class=\"fragment\">It's 5/13/2019</span>\nprint(\"It's \" + $month + \"/\" + $day + \"/\" + $year); # <span class=\"fragment\">2037</span>\n<span class=\"fragment\">#          0  + 5      +  0  + 13   + 0   + 2019    = 2037</span></code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p class=\"fragment\">Behind the scenes, each String is evaluated with <code>intval</code>, which is 0 for\n          strings without numbers.</p>\n          <p class=\"fragment\">Seriously. You will make this mistake at least once. It's ok :) just add it to your\n          list of \"common PHP bugs\" (yes, you might want to start a list).</p>\n        </section>", "text": "Recall: String Concatenation Important note! String concatenation is . (period) not + $month = 5;$day = 13;$year = 2019;print(\"It's \" . $month . \"/\" + $day . \"/\" . $year); # It's 5/13/2019print(\"It's \" + $month + \"/\" + $day + \"/\" + $year); # 2037# 0 + 5 + 0 + 13 + 0 + 2019 = 2037 PHP Behind the scenes, each String is evaluated with intval, which is 0 for strings without numbers. Seriously. You will make this mistake at least once. It's ok :) just add it to your list of \"common PHP bugs\" (yes, you might want to start a list).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <section>\n          <h2>String Functions</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n          <table class=\"code-table small-font\">\n            <tr>\n              <th>Name</th>\n              <th>Java Equivalent</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strlen.php\" target=\"_blank\">strlen($str)</a></td>\n              <td><code>str.length</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos($str, $ch)</a></td>\n              <td><code>str.indexOf(ch)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.substr.php\" target=\"_blank\">substr($str, $start, $end)</a></td>\n              <td><code>str.substring(start, end)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strtolower.php\" target=\"_blank\">strtolower($str)</a>, <a href=\"http://php.net/manual/en/function.strtoupper.php\" target=\"_blank\">strtoupper($str)</a></td>\n              <td><code>str.toLowerCase</code>, <code>str.toUpperCase</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.trim.php\" target=\"_blank\">trim($str)</a></td>\n              <td><code>str.trim()</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.explode.php\" target=\"_blank\">explode($delim, $str)</a>, <a href=\"http://php.net/manual/en/function.implode.php\" target=\"_blank\">implode($delim, $arr)</a></td>\n              <td><code>str.split(delim)</code>, <code>String.join(delim, values)</code></td>\n            </tr>\n          </table>\n          <p>See slides below for Java equivalents!</p>\n        </section>\n        <section>\n          <h2>PHP vs. Java Strings</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\nString name = \"Mowgli Hovik\";\nint length = strlen($name);             # 12\nint indexOfH = name.indexOf(\"H\");       # 7\nString last = name.substring(7, 12);    # \"Hovik\"\nname = name.toUpperCase();              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>\n        </section>", "text": "String Functions # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP Name Java Equivalent strlen($str) str.length strpos($str, $ch) str.indexOf(ch) substr($str, $start, $end) str.substring(start, end) strtolower($str), strtoupper($str) str.toLowerCase, str.toUpperCase trim($str) str.trim() explode($delim, $str), implode($delim, $arr) str.split(delim), String.join(delim, values) See slides below for Java equivalents! PHP vs. Java Strings # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP # index 012345678901String name = \"Mowgli Hovik\";int length = strlen($name); # 12int indexOfH = name.indexOf(\"H\"); # 7String last = name.substring(7, 12); # \"Hovik\"name = name.toUpperCase(); # \"MOWGLI HOVIK\" Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>String Functions</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n\n          <table class=\"code-table small-font\">\n            <tr>\n              <th>Name</th>\n              <th>Java Equivalent</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strlen.php\" target=\"_blank\">strlen($str)</a></td>\n              <td><code>str.length</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos($str, $ch)</a></td>\n              <td><code>str.indexOf(ch)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.substr.php\" target=\"_blank\">substr($str, $start, $end)</a></td>\n              <td><code>str.substring(start, end)</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.strtolower.php\" target=\"_blank\">strtolower($str)</a>, <a href=\"http://php.net/manual/en/function.strtoupper.php\" target=\"_blank\">strtoupper($str)</a></td>\n              <td><code>str.toLowerCase</code>, <code>str.toUpperCase</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.trim.php\" target=\"_blank\">trim($str)</a></td>\n              <td><code>str.trim()</code></td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/manual/en/function.explode.php\" target=\"_blank\">explode($delim, $str)</a>, <a href=\"http://php.net/manual/en/function.implode.php\" target=\"_blank\">implode($delim, $arr)</a></td>\n              <td><code>str.split(delim)</code>, <code>String.join(delim, values)</code></td>\n            </tr>\n          </table>\n          <p>See slides below for Java equivalents!</p>\n        </section>", "text": "String Functions # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP Name Java Equivalent strlen($str) str.length strpos($str, $ch) str.indexOf(ch) substr($str, $start, $end) str.substring(start, end) strtolower($str), strtoupper($str) str.toLowerCase, str.toUpperCase trim($str) str.trim() explode($delim, $str), implode($delim, $arr) str.split(delim), String.join(delim, values) See slides below for Java equivalents!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>PHP vs. Java Strings</h2>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\n$name = \"Mowgli Hovik\";\n$length = strlen($name);                # 12\n$index_of_h = strpos($name, \"H\");       # 7\n$last = substr($name, 7, 12);           # \"Hovik\"\n$name = strtoupper($name);              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim># index  012345678901\nString name = \"Mowgli Hovik\";\nint length = strlen($name);             # 12\nint indexOfH = name.indexOf(\"H\");       # 7\nString last = name.substring(7, 12);    # \"Hovik\"\nname = name.toUpperCase();              # \"MOWGLI HOVIK\"</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>", "text": "PHP vs. Java Strings # index 012345678901$name = \"Mowgli Hovik\";$length = strlen($name); # 12$index_of_h = strpos($name, \"H\"); # 7$last = substr($name, 7, 12); # \"Hovik\"$name = strtoupper($name); # \"MOWGLI HOVIK\" PHP # index 012345678901String name = \"Mowgli Hovik\";int length = strlen($name); # 12int indexOfH = name.indexOf(\"H\"); # 7String last = name.substring(7, 12); # \"Hovik\"name = name.toUpperCase(); # \"MOWGLI HOVIK\" Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Interpolated Strings</h2>\n          <p>Variables inside <code>\" \"</code> <strong>are</strong> interpolated (will be evaluated\n          with the result inserted in the string)</p>\n          <p>Variables inside <code>' '</code> <strong>are not</strong> interpolated.\n          </p>\n          <pre class=\"hljs\"><code>$age = 16;\necho \"You are \" . $age . \" years old.\\n\";\necho \"You are $age years old.\\n\"; # You are 16 years old.\necho 'You are $age years old.\\n'; # You are $age years old.</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>To avoid ambiguity, it's best to enclose the variable in <code>{}</code>:</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape><del class=\"bad\">echo \"Today is your $ageth birthday.\\n\"; # ageth not found</del>\necho \"Today is your <span class=\"good\">{$age}th </span>birthday.\\n\";</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Interpolated Strings Variables inside \" \" are interpolated (will be evaluated with the result inserted in the string) Variables inside ' ' are not interpolated. $age = 16;echo \"You are \" . $age . \" years old.\\n\";echo \"You are $age years old.\\n\"; # You are 16 years old.echo 'You are $age years old.\\n'; # You are $age years old. PHP To avoid ambiguity, it's best to enclose the variable in {}: echo \"Today is your $ageth birthday.\\n\"; # ageth not foundecho \"Today is your {$age}th birthday.\\n\"; PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Using Interpolated Strings in our Example</h2>\n          <pre><code class=\"hljs\" data-trim>$month = 5;\n$day = 13;\n$year = 2019;\nprint(\"It's \" . $month . \"/\" . $day . \"/\" . $year);\nprint(\"It's {$month}/{$day}/{$year}\");  # outputs: It's 5/13/2019\nprint(\"It's {$month}/{$date}/{$year}\"); # outputs: It's 5//2019</code></pre>\n          \n          <p class=\"code-caption\">PHP</p>\n          <p>Make sure your variables are defined correctly! Otherwise, you'll get missing output (no error)</p>\n        </section>", "text": "Using Interpolated Strings in our Example $month = 5;$day = 13;$year = 2019;print(\"It's \" . $month . \"/\" . $day . \"/\" . $year);print(\"It's {$month}/{$day}/{$year}\"); # outputs: It's 5/13/2019print(\"It's {$month}/{$date}/{$year}\"); # outputs: It's 5//2019 PHP Make sure your variables are defined correctly! Otherwise, you'll get missing output (no error)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Booleans and Equality in PHP</h2>\n          <pre><code class=\"hljs\" data-trim>$php_is_fun = true;\n0 &amp;&amp; 1;    # false\ntrue &amp;&amp; 1; # true\n$loose_test  = (\"1\" == 1);  # true\n$strict_test = (\"1\" === 1); # false</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>PHP has similar \"truthy/falsy\" properties as JS (<a href=\"http://php.net/manual/en/language.types.type-juggling.php\">more\n             details</a>)</p>\n          <p>Similar to JS, use === instead of == for strict equality</p>\n          <p>The following values are considered to be <code>false</code> (all others are\n          <code>true</code>):</p>\n          <ul>\n            <li>0 and 0.0</li>\n            <li>\"\", \"0\", and <code>NULL</code> (includes unset variables)</li>\n            <li>arrays with 0 elements</li>\n          </ul>\n          <p><code>false</code> prints as an empty string (no output); <code>true</code> prints as\n          a 1 (why do you think that is?)</p>\n        </section>", "text": "Booleans and Equality in PHP $php_is_fun = true;0 && 1; # falsetrue && 1; # true$loose_test = (\"1\" == 1); # true$strict_test = (\"1\" === 1); # false PHP PHP has similar \"truthy/falsy\" properties as JS (more details) Similar to JS, use === instead of == for strict equality The following values are considered to be false (all others are true): 0 and 0.0 \"\", \"0\", and NULL (includes unset variables) arrays with 0 elements false prints as an empty string (no output); true prints as a 1 (why do you think that is?)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.for.php\">For Loops</a></h2>\n          <pre><code class=\"hljs\" data-trim>for (initialization; condition; update) {\n  statements\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n\n          <pre><code class=\"hljs\" data-trim>for ($i = 0; $i &lt; 10; $i++) {\n  print \"$i squared is \" . $i * $i . \"\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>(remember . not + for string concatenation)</p>\n        </section>", "text": "For Loops for (initialization; condition; update) { statements} PHP (template) for ($i = 0; $i < 10; $i++) { print \"$i squared is \" . $i * $i . \"\\n\";} PHP (example) (remember . not + for string concatenation)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>PHP vs. JavaScript vs. Java</h2>\n          <pre><code class=\"hljs\" data-trim>for ($i = 0; $i &lt; 10; $i++) {\n  echo \"$i squared is \" . $i * $i . \"\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>for (let i = 0; i &lt; 10; i++) {\n  console.log(i + \" squared is \" + (i * i));\n}</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hljs\" data-trim>for (int i = 0; i &lt; 10; i++) {\n  System.out.println(i + \" squared is \" + (i * i));\n}</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>", "text": "PHP vs. JavaScript vs. Java for ($i = 0; $i < 10; $i++) { echo \"$i squared is \" . $i * $i . \"\\n\";} PHP for (let i = 0; i < 10; i++) { console.log(i + \" squared is \" + (i * i));} JS for (int i = 0; i < 10; i++) { System.out.println(i + \" squared is \" + (i * i));} Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.elseif.php\">If/Else</a> Statements</h2>\n          <pre><code class=\"hljs\" data-trim>if (condition) {\n  statements;\n} else if (condition) {\n  statements;\n} else {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n        </section>", "text": "If/Else Statements if (condition) { statements;} else if (condition) { statements;} else { statements;} PHP (template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2><a href=\"http://php.net/manual/en/control-structures.while.php\">While Loop</a> (same as Java)</h2>\n          <pre><code class=\"hljs\" data-trim>while (condition) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>do {\n  statements;\n} while (condition);</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <p>\n          <a href=\"http://php.net/manual/en/control-structures.break.php\"><code>break</code></a> and\n          <a href=\"http://php.net/manual/en/control-structures.continue.php\"><code>continue</code></a>\n          keywords also behave as in Java (do not use these in this course)\n          </p>\n        </section>", "text": "While Loop (same as Java) while (condition) { statements;} PHP (template) do { statements;} while (condition); PHP (template) break and continue keywords also behave as in Java (do not use these in this course)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Functions</h2>\n          <pre><code class=\"hljs\" data-trim>function name(parameterName, ..., parameterName) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>function calculate_profit($cost, $price, $qty) {\n  return ($price / $cost) * $qty;\n}</code></pre>\n          <p class=\"code-caption\">PHP (example defining a function)</p>\n          <pre><code class=\"no-syntax-highlight\" data-trim>$qty = 154;\n$bagel_cost  = 0.85; # A plain bagel costs .85 to make!\n$bagel_price = 3.50; # A plain bagel sells for 3.50!\n\n$profit = calculate_profit($bagel_cost, $bagel_price, $qty);</code></pre>\n        <p class=\"code-caption\">PHP (example calling a function)</p>\n          <!--\n<pre><code class=\"hljs\" data-trim>function item_cost($qty, $unit_cost, $tax) {\n  $total_cost = $qty * $unit_cost;     # e.g. 4 * 1.25 = 6.00\n  $tax_amount = $total_cost * $tax;    # e.g. 6.00 * 0.1 = 0.60\n  $result = $total_cost + $tax_amount; # e.g. 6.00 + 0.6 = 6.60\n  return $result;\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          -->\n\n          <p>Very similar to writing JavaScript functions!</p>\n          <ul>\n            <li>Parameter types and return types are not written</li>\n            <li>A function with no return statements is implicitly \"void\"</li>\n          </ul>\n\n        </section>", "text": "Functions function name(parameterName, ..., parameterName) { statements;} PHP (template) function calculate_profit($cost, $price, $qty) { return ($price / $cost) * $qty;} PHP (example defining a function) $qty = 154;$bagel_cost = 0.85; # A plain bagel costs .85 to make!$bagel_price = 3.50; # A plain bagel sells for 3.50!$profit = calculate_profit($bagel_cost, $bagel_price, $qty); PHP (example calling a function) <!--function item_cost($qty, $unit_cost, $tax) { $total_cost = $qty * $unit_cost; # e.g. 4 * 1.25 = 6.00 $tax_amount = $total_cost * $tax; # e.g. 6.00 * 0.1 = 0.60 $result = $total_cost + $tax_amount; # e.g. 6.00 + 0.6 = 6.60 return $result;} PHP (example) --> Very similar to writing JavaScript functions! Parameter types and return types are not written A function with no return statements is implicitly \"void\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <section>\n          <h2><a href=\"https://www.tutorialrepublic.com/php-tutorial/php-arrays.php\">Arrays</a></h2>\n          <pre><code class=\"hljs\" data-trim>$name = array();    # create empty\n$name = array(value0, value1, ..., valueN); # create filled\n$name[index]              # get element value\n$name[index] = value;     # set element value\n$name[] = value;          # one way to append value\narray_push($name, value); # another way to append value</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>$a = array();             # empty array (length 0)\n$a[0] = 23;                       # stores 23 at index 0 (length 1)\n$drinks = array(\"coffee\", \"tea\", \"water\");\n$drinks[] = \"hot cocoa\";          # add \"hot cocoa\" to end (at index 3)\narray_push($drinks, \"hot cocoa\"); # identical to above line</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Similar to JS, arrays can have mixed types (but generally shouldn't)</p>\n        </section>\n<section>\n          <h2>PHP vs. JS vs. Java</h2>\n          <pre><code class=\"hljs\" data-trim>$a = array(); # empty array (length 0)\n$a[0] = 23;                       # stores 23 at index 0 (length 1)\n$drinks = array(\"coffee\", \"tea\", \"water\");\n$drinks[] = \"hot cocoa\";          # add \"hot cocoa\" to end (at index 3)\n$drink_count = count($drinks);    # 4 </code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>let a = [];\na[0] = 23;\nlet drinks = [\"coffee\", \"tea\", \"water\"];\ndrinks[] = \"hot cocoa\";\nlet drinkCount = drinks.length; </code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hljs\" data-trim>int[] a = new int[1]; // need length when creating array in Java!\na[0] = 23;\nString[] drinks = new String[]{\"coffee\", \"tea\", \"water\", \"\"};\ndrinks[3] = \"hot cocoa\";\nint drinkCount = drinks.length;</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>\n      </section>", "text": "Arrays $name = array(); # create empty$name = array(value0, value1, ..., valueN); # create filled$name[index] # get element value$name[index] = value; # set element value$name[] = value; # one way to append valuearray_push($name, value); # another way to append value PHP $a = array(); # empty array (length 0)$a[0] = 23; # stores 23 at index 0 (length 1)$drinks = array(\"coffee\", \"tea\", \"water\");$drinks[] = \"hot cocoa\"; # add \"hot cocoa\" to end (at index 3)array_push($drinks, \"hot cocoa\"); # identical to above line PHP Similar to JS, arrays can have mixed types (but generally shouldn't) PHP vs. JS vs. Java $a = array(); # empty array (length 0)$a[0] = 23; # stores 23 at index 0 (length 1)$drinks = array(\"coffee\", \"tea\", \"water\");$drinks[] = \"hot cocoa\"; # add \"hot cocoa\" to end (at index 3)$drink_count = count($drinks); # 4 PHP let a = [];a[0] = 23;let drinks = [\"coffee\", \"tea\", \"water\"];drinks[] = \"hot cocoa\";let drinkCount = drinks.length; JS int[] a = new int[1]; // need length when creating array in Java!a[0] = 23;String[] drinks = new String[]{\"coffee\", \"tea\", \"water\", \"\"};drinks[3] = \"hot cocoa\";int drinkCount = drinks.length; Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2><a href=\"https://www.tutorialrepublic.com/php-tutorial/php-arrays.php\">Arrays</a></h2>\n          <pre><code class=\"hljs\" data-trim>$name = array();    # create empty\n$name = array(value0, value1, ..., valueN); # create filled\n$name[index]              # get element value\n$name[index] = value;     # set element value\n$name[] = value;          # one way to append value\narray_push($name, value); # another way to append value</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>$a = array();             # empty array (length 0)\n$a[0] = 23;                       # stores 23 at index 0 (length 1)\n$drinks = array(\"coffee\", \"tea\", \"water\");\n$drinks[] = \"hot cocoa\";          # add \"hot cocoa\" to end (at index 3)\narray_push($drinks, \"hot cocoa\"); # identical to above line</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Similar to JS, arrays can have mixed types (but generally shouldn't)</p>\n        </section>", "text": "Arrays $name = array(); # create empty$name = array(value0, value1, ..., valueN); # create filled$name[index] # get element value$name[index] = value; # set element value$name[] = value; # one way to append valuearray_push($name, value); # another way to append value PHP $a = array(); # empty array (length 0)$a[0] = 23; # stores 23 at index 0 (length 1)$drinks = array(\"coffee\", \"tea\", \"water\");$drinks[] = \"hot cocoa\"; # add \"hot cocoa\" to end (at index 3)array_push($drinks, \"hot cocoa\"); # identical to above line PHP Similar to JS, arrays can have mixed types (but generally shouldn't)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>PHP vs. JS vs. Java</h2>\n          <pre><code class=\"hljs\" data-trim>$a = array(); # empty array (length 0)\n$a[0] = 23;                       # stores 23 at index 0 (length 1)\n$drinks = array(\"coffee\", \"tea\", \"water\");\n$drinks[] = \"hot cocoa\";          # add \"hot cocoa\" to end (at index 3)\n$drink_count = count($drinks);    # 4 </code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>let a = [];\na[0] = 23;\nlet drinks = [\"coffee\", \"tea\", \"water\"];\ndrinks[] = \"hot cocoa\";\nlet drinkCount = drinks.length; </code></pre>\n          <p class=\"code-caption\">JS</p>\n          <pre><code class=\"hljs\" data-trim>int[] a = new int[1]; // need length when creating array in Java!\na[0] = 23;\nString[] drinks = new String[]{\"coffee\", \"tea\", \"water\", \"\"};\ndrinks[3] = \"hot cocoa\";\nint drinkCount = drinks.length;</code></pre>\n          <p class=\"code-caption\">Java</p>\n        </section>", "text": "PHP vs. JS vs. Java $a = array(); # empty array (length 0)$a[0] = 23; # stores 23 at index 0 (length 1)$drinks = array(\"coffee\", \"tea\", \"water\");$drinks[] = \"hot cocoa\"; # add \"hot cocoa\" to end (at index 3)$drink_count = count($drinks); # 4 PHP let a = [];a[0] = 23;let drinks = [\"coffee\", \"tea\", \"water\"];drinks[] = \"hot cocoa\";let drinkCount = drinks.length; JS int[] a = new int[1]; // need length when creating array in Java!a[0] = 23;String[] drinks = new String[]{\"coffee\", \"tea\", \"water\", \"\"};drinks[3] = \"hot cocoa\";int drinkCount = drinks.length; Java", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n        <h3>Practice: Writing a <samp>to_string</samp> function for arrays</h3>\n        <p>Write a PHP function <code>to_string</code> which takes an array as a\n        parameter and returns a comma-separated, bracketed string representation.\n        </p>\n        <p>\n        For example, if the following code is executed:\n        </p>\n        <pre><code>$drinks = array(\"coffee\", \"tea\", \"water\");\n$result = to_string($drinks);</code></pre>\n        <p class=\"code-caption\">PHP</p>\n        <p>\n        then <code>$result</code> should hold the string value <code>\"[coffee, tea, water]\"</code>.\n        </p>\n      </section>", "text": "Practice: Writing a to_string function for arrays Write a PHP function to_string which takes an array as a parameter and returns a comma-separated, bracketed string representation. For example, if the following code is executed: $drinks = array(\"coffee\", \"tea\", \"water\");$result = to_string($drinks); PHP then $result should hold the string value \"[coffee, tea, water]\".", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n        <h3><samp>to_string</samp> Solution</h3>\n        <p>One solution is given below:</p>\n        <pre class=\"hljs\" data-trim><code>function to_string($arr) {\n  $result = \"[\";\n  if (count($arr) &gt; 0) {\n    $result .= $arr[0];\n    for ($i = 1; $i &lt; count($arr); $i++) {\n      $result .= (\", \" . $arr[$i]);\n    }\n  }\n  return $result . \"]\";\n}</code></pre>\n        <p class=\"code-caption\">PHP</p>\n        <!--\n        <p>Working example in <code>tostring-solution.php</code> (from <samp><a\n           href=\"examples/php-examples-ii.zip\">php-examples-ii.zip</a></samp>)</p>\n        -->\n      </section>", "text": "to_string Solution One solution is given below: function to_string($arr) { $result = \"[\"; if (count($arr) > 0) { $result .= $arr[0]; for ($i = 1; $i < count($arr); $i++) { $result .= (\", \" . $arr[$i]); } } return $result . \"]\";} PHP <!-- Working example in tostring-solution.php (from php-examples-ii.zip) -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n        <h2><a href=\"https://www.tutorialrepublic.com/php-tutorial/php-arrays.php\">Associative Arrays</a></h2>\n        <p>Associative arrays are arrays that have keys with assigned values (similar to Maps in\n        Java, dictionaries in Python, or JSON data in JS)</p>\n        <pre><code class=\"hljs\" data-trim>$order = array(\"tea\"=&gt;2, \"coffee\"=&gt;3, \"water\"=&gt;1); # create\n$order[\"hot cocoa\"] = 1; # add 4th key/value pair\n$order[\"coffee\"] = 17; # stores 17 at the location where \"coffee\" is stored\n</code></pre>\n        <p class=\"code-caption\">PHP</p>\n        <pre><code class=\"hljs\" data-trim>$a = array(); # empty array (length 0)\n$a[\"foo\"] = \"bar\"; # adds a new key/value pair to $a\n</code></pre>\n        <p class=\"code-caption\">PHP</p>\n      </section>", "text": "Associative Arrays Associative arrays are arrays that have keys with assigned values (similar to Maps in Java, dictionaries in Python, or JSON data in JS) $order = array(\"tea\"=>2, \"coffee\"=>3, \"water\"=>1); # create$order[\"hot cocoa\"] = 1; # add 4th key/value pair$order[\"coffee\"] = 17; # stores 17 at the location where \"coffee\" is stored PHP $a = array(); # empty array (length 0)$a[\"foo\"] = \"bar\"; # adds a new key/value pair to $a PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Array Functions</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Function name(s)</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/count\" target=\"_blank\">count</a></td>\n              <td>number of elements in the array</td>\n            </tr>\n            <tr>\n              <td><a href=\"http://php.net/print_r\" target=\"_blank\">print_r</a></td>\n              <td>print array's contents</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_pop\" target=\"_blank\">array_pop</a>,\n                <a href=\"http://php.net/array_push\" target=\"_blank\">array_push</a>,\n                <a href=\"http://php.net/array_shift\" target=\"_blank\">array_shift</a>,\n                <a href=\"http://php.net/array_unshift\" target=\"_blank\">array_unshift</a>\n              </td>\n              <td>using an array as a stack/queue</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/in_array\" target=\"_blank\">in_array</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">array_search</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">array_reverse</a>\n                <a href=\"http://php.net/in_array\" target=\"_blank\">sort</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">rsort</a>,\n                <a href=\"http://php.net/in_array\" target=\"_blank\">shuffle</a>\n              </td>\n              <td>searching and reordering</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_fill\" target=\"_blank\">array_fill</a>,\n                <a href=\"http://php.net/array_merge\" target=\"_blank\">array_merge</a>,\n                <a href=\"http://php.net/array_intersect\" target=\"_blank\">array_intersect</a>,\n                <a href=\"http://php.net/array_diff\" target=\"_blank\">array_diff</a>,\n                <a href=\"http://php.net/array_slice\" target=\"_blank\">array_slice</a>,\n                <a href=\"http://php.net/range\" target=\"_blank\">range</a>\n              </td>\n              <td>creating, filling, filtering</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"http://php.net/array_sum\" target=\"_blank\">array_sum</a>,\n                <a href=\"http://php.net/array_product\" target=\"_blank\">array_product</a>,\n                <a href=\"http://php.net/array_unique\" target=\"_blank\">array_unique</a>,\n                <a href=\"http://php.net/array_filter\" target=\"_blank\">array_filter</a>,\n                <a href=\"http://php.net/array_reduce\" target=\"_blank\">array_reduce</a>\n              </td>\n              <td>\n                processing elements\n              </td>\n            </tr>\n          </table>\n        </section>", "text": "Array Functions Function name(s) Description count number of elements in the array print_r print array's contents array_pop, array_push, array_shift, array_unshift using an array as a stack/queue in_array, array_search, array_reverse sort, rsort, shuffle searching and reordering array_fill, array_merge, array_intersect, array_diff, array_slice, range creating, filling, filtering array_sum, array_product, array_unique, array_filter, array_reduce processing elements", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Array Function Example</h2>\n          <pre><code class=\"hljs\" data-trim>$langs = array(\"HTML\", \"CSS\", \"JS\", \"PHP\");\nfor ($i = 0; i &lt; count($langs); $i++) {\n  $langs[$i] = strtolower($langs[$i]);\n} # (\"html\", \"css\", \"js\", \"php\")\n\n$html = array_shift($langs);   # (\"css\", \"js\", \"php\")\narray_pop($langs);             # (\"css\", \"js\")\narray_push($langs, \"html\");    # (\"css\", \"js\", \"html\")\narray_reverse($langs);         # (\"html\", \"js\", \"css\")\nsort($langs);                  # (\"css\", \"html\", \"js\")\n$html2 = array_slice($langs, 1, 2); # (\"css\", \"js\")</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>The array in PHP replaces many other data structures in Java</p>\n          <ul>\n            <li>e.g. list, stack, queue, set, map, ...</li>\n          </ul>\n        </section>", "text": "Array Function Example $langs = array(\"HTML\", \"CSS\", \"JS\", \"PHP\");for ($i = 0; i < count($langs); $i++) { $langs[$i] = strtolower($langs[$i]);} # (\"html\", \"css\", \"js\", \"php\")$html = array_shift($langs); # (\"css\", \"js\", \"php\")array_pop($langs); # (\"css\", \"js\")array_push($langs, \"html\"); # (\"css\", \"js\", \"html\")array_reverse($langs); # (\"html\", \"js\", \"css\")sort($langs); # (\"css\", \"html\", \"js\")$html2 = array_slice($langs, 1, 2); # (\"css\", \"js\") PHP The array in PHP replaces many other data structures in Java e.g. list, stack, queue, set, map, ...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>The foreach loop</h2>\n          <p>A convenient way to loop over each element of an array without indices</p>\n\n          <pre>\n            <code class=\"hljs\" data-trim>foreach ($arr as $item) {\n  ...\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre>\n            <code class=\"hljs\" data-trim>$pups = array (\"Mowgli\", \"Abby\", \"Archie\", \"Pascal\");\nforeach ($pups as $pup) {\n  echo \"Mowgli boops {$pup}\\n\"; # even himself\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n        </section>", "text": "The foreach loop A convenient way to loop over each element of an array without indices foreach ($arr as $item) { ...} PHP (template) $pups = array (\"Mowgli\", \"Abby\", \"Archie\", \"Pascal\");foreach ($pups as $pup) { echo \"Mowgli boops {$pup}\\n\"; # even himself} PHP (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Back to PHP Web Services<h2>\n        </h2></h2></section>", "text": "Back to PHP Web Services", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h1>Query Parameters in PHP</h1>\n          <ul>\n            <li>PHP includes built-in arrays to hold GET and POST parameters called <code>$_GET</code> and <code>$_POST</code></li>\n            <li>To can access these parameters by putting the parameter name as a string index for\n              the GET/POST array.\n            </li>\n            <li>For example, to access a GET parameter <code>name</code>, reference it in PHP as\n              <code>$_GET[\"name\"]</code> (case-sensitive)</li>\n            <li>If it were instead passed as a POST parameter (e.g. through FormData with fetch) you\n              would access it in PHP with <code>$_POST[\"name\"]</code></li>\n            <li>Most of the web services you will write in this class will accept GET parameters,\n              but when we start using PHP to update files/databases, we will use POST requests to\n              modify this data on the server.</li>\n          </ul>\n        </section>", "text": "Query Parameters in PHP PHP includes built-in arrays to hold GET and POST parameters called $_GET and $_POST To can access these parameters by putting the parameter name as a string index for the GET/POST array. For example, to access a GET parameter name, reference it in PHP as $_GET[\"name\"] (case-sensitive) If it were instead passed as a POST parameter (e.g. through FormData with fetch) you would access it in PHP with $_POST[\"name\"] Most of the web services you will write in this class will accept GET parameters, but when we start using PHP to update files/databases, we will use POST requests to modify this data on the server.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Examples of GET in PHP</h2>\n          <pre class=\"hljs font-16pt\" data-trim><code>&lt;?php\n  $name = $_GET[\"name\"];\n  echo \"Hi {$name}!\";\n?&gt;</code></pre>\n          <p class=\"code-caption\"><a href=\"examples/hello.php?name=mowgli\">hello.php?name=mowgli</a></p>\n          <pre class=\"hljs font-16pt\" data-trim><code>&lt;?php\n  $name = $_GET[\"name\"];\n  $age = (int) $_GET[\"age\"];\n  $dog_age = $age * 7;\n  echo \"Hi {$name}! You are {$age} years old!\\n\";\n  echo \"That's {$dog_age} in dog years!\";\n?&gt;\n</code></pre>\n          <p class=\"code-caption\"><a href=\"examples/hello2.php?name=mowgli&amp;age=2\">hello2.php?name=mowgli&amp;age=2</a></p>\n          <p class=\"fragment\">But are these web services missing anything?</p><p>\n        </p></section>", "text": "Examples of GET in PHP <?php $name = $_GET[\"name\"]; echo \"Hi {$name}!\";?> hello.php?name=mowgli <?php $name = $_GET[\"name\"]; $age = (int) $_GET[\"age\"]; $dog_age = $age * 7; echo \"Hi {$name}! You are {$age} years old!\\n\"; echo \"That's {$dog_age} in dog years!\";?> hello2.php?name=mowgli&age=2 But are these web services missing anything?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>Essential Ingredients for a PHP Web Service</h2>\n            <ul>\n              <li>A way to check for missing query parameters</li>\n              <li>Specifying response header options with <code>header</code>:\n                <ul>\n                  <li>Content type of response output (text or JSON)</li>\n                  <li>Error code/messages for invalid requests (usually 400 Invalid Request)</li>\n                </ul>\n              </li>\n            </ul>\n          </section>", "text": "Essential Ingredients for a PHP Web Service A way to check for missing query parameters Specifying response header options with header: Content type of response output (text or JSON) Error code/messages for invalid requests (usually 400 Invalid Request)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>NULL in PHP</h2>\n            <p>NULL is used to represent empty variables in PHP.\n            </p><p>A variable has the value of <code>NULL</code> if:</p>\n            <ul>\n              <li>It has not been set to any value (undefined)</li>\n              <li>It has been assigned the constant <code>NULL</code></li>\n              <li>It is referenced as a key that does not exist in an array (like\n                <samp>$_GET</samp>/<samp>$_POST</samp>)</li>\n            </ul>\n  \t\t\t</section>", "text": "NULL in PHP NULL is used to represent empty variables in PHP. A variable has the value of NULL if: It has not been set to any value (undefined) It has been assigned the constant NULL It is referenced as a key that does not exist in an array (like $_GET/$_POST)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Checking for array values with <code>isset</code></h2>\n            <p>You can test if a variable is <code>NULL</code> using the <code>isset</code> function</p>\n\n          <pre><code class=\"hljs\" data-trim>$order = array(\"tea\"=&gt;2, \"coffee\"=&gt;3, \"water\"=&gt;1);\nif (isset($order[\"coffee\"]))\n  echo \"Coffee is in the order!\"; # this line is output\n}\nif (isset($order[\"cocoa\"])) {\n  echo \"Cocoa is in the order!\";  # this line isn't output\n}\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Checking for array values with isset You can test if a variable is NULL using the isset function $order = array(\"tea\"=>2, \"coffee\"=>3, \"water\"=>1);if (isset($order[\"coffee\"])) echo \"Coffee is in the order!\"; # this line is output}if (isset($order[\"cocoa\"])) { echo \"Cocoa is in the order!\"; # this line isn't output} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>\"Silent\" NULL Bugs</h2>\n          <p><code>NULL</code> prints as an empty string (no output), which can be result in subtle\n          PHP bugs</p>\n<pre><code class=\"hljs\" data-trim>$order = array(\"tea\"=&gt;2, \"coffee\"=&gt;3, \"water\"=&gt;1);\necho \"You ordered {$order[\"coffee\"]} cups of coffee\\n\";\necho \"You ordered {$order[\"cocoa\"]} cups of cocoa\\n\";\necho \"You ordered {$order[\"TEA\"]} cups of tea\";\n</code></pre>\n<p class=\"code-caption\">PHP</p>\n        <pre><code>You ordered 3 cups of coffee\nYou ordered cups of cocoa\nYou ordered cups of tea</code></pre>\n        <p class=\"code-caption\">output</p>\n</section>", "text": "\"Silent\" NULL Bugs NULL prints as an empty string (no output), which can be result in subtle PHP bugs$order = array(\"tea\"=>2, \"coffee\"=>3, \"water\"=>1);echo \"You ordered {$order[\"coffee\"]} cups of coffee\\n\";echo \"You ordered {$order[\"cocoa\"]} cups of cocoa\\n\";echo \"You ordered {$order[\"TEA\"]} cups of tea\";PHP You ordered 3 cups of coffeeYou ordered cups of cocoaYou ordered cups of tea output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>Using <code>isset</code> to Check Missing Parameters</h2>\n            <p>\n              To respond to GET requests made to our web services, we can't just assume the user\n              passes the correct query parameter. To check whether a parameter has been passed in\n              the URL, we use the <code>isset($val)</code> function, which returns true only if $val\n              is not NULL (in other words, it was passed in the url).\n            </p>\n            <pre><code>if (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Using isset to Check Missing Parameters To respond to GET requests made to our web services, we can't just assume the user passes the correct query parameter. To check whether a parameter has been passed in the URL, we use the isset($val) function, which returns true only if $val is not NULL (in other words, it was passed in the url). if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>Setting Content Type and Response Errors with <code>header</code></h2>\n            <p><code>header</code> is a PHP function to set different information in the response\n            header. In our web services, we will use it to set content types and 400 errors.\n            </p>\n            <p>\n              To handle error cases, we want to send back the Invalid Request header\n              <code>header(\"HTTP/1.1 400 Invalid Request\");</code>\n            </p>\n            <p>\n            Remember to set the content type with <code>header</code> before any output (e.g.\n            <code>print</code> or <code>echo</code> statements).\n            </p>\n  \t\t\t\t</section>", "text": "Setting Content Type and Response Errors with header header is a PHP function to set different information in the response header. In our web services, we will use it to set content types and 400 errors. To handle error cases, we want to send back the Invalid Request header header(\"HTTP/1.1 400 Invalid Request\"); Remember to set the content type with header before any output (e.g. print or echo statements).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>Using <code>header</code> to Set the Output Type</h2>\n            <p>Remember that the default output is HTML, but we want our web services to be JSON\n            (for structured data) or\n            plain text (for brief/unstructured data).</p>\n            <pre><code data-trim>header(\"Content-type: type/subtype\");</code></pre>\n            <p class=\"code-caption\">PHP (template)</p>\n            <ul>\n              <li>For plain text: <code>header(\"Content-type: text/plain\");</code></li>\n              <li>For JSON: <code>header(\"Content-type: application/json\");</code></li>\n            </ul>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Using header to Set the Output Type Remember that the default output is HTML, but we want our web services to be JSON (for structured data) or plain text (for brief/unstructured data). header(\"Content-type: type/subtype\"); PHP (template) For plain text: header(\"Content-type: text/plain\"); For JSON: header(\"Content-type: application/json\"); header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n            <h2>Using <code>header</code> to Set Error Response Codes</h2>\n            <p>Remember the 400 errors you've seen as a client (JS) of web services?\n            We also use the <code>header</code> to specify the response code to handle these.</p>\n            <p>The 400 error code (Invalid Request) is often used to tell a client they did not\n            request data from your API correctly.</p>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  # This error is also sent as plain text due to the first line\n  header(\"HTTP/1.1 400 Invalid Request\");\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Using header to Set Error Response Codes Remember the 400 errors you've seen as a client (JS) of web services? We also use the header to specify the response code to handle these. The 400 error code (Invalid Request) is often used to tell a client they did not request data from your API correctly. header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { # This error is also sent as plain text due to the first line header(\"HTTP/1.1 400 Invalid Request\"); echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>An Improved <code>hello.php</code> Web Service</h2>\n          <p>\n            <a href=\"examples/hello-solution.zip\">hello-solution.zip</a>\n          </p>\n          <p>\n            Contains:\n            </p><ul>\n              <li>\n                <a href=\"examples/hello-solution/hello.php\">hello.php</a> (an improved hello.php\n                with error-handling)\n              </li>\n              <li>\n                <a href=\"examples/hello-solution/greeter.html\">greeter.html</a> a simple webpage\n                using greeter.js to fetch from hello.php\n              </li>\n              <li>\n                 <a href=\"examples/hello-solution/greeter.js\">greeter.js</a> \n              </li>\n            </ul>\n          \n        </section>", "text": "An Improved hello.php Web Service hello-solution.zip Contains: hello.php (an improved hello.php with error-handling) greeter.html a simple webpage using greeter.js to fetch from hello.php greeter.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec18-php-ii/"},
{"html": "<section>\n          <h2>Code Quality in JS</h2>\n          <p>\n            Talk with your neighbor: Try to list at least 5 Code Quality standards we expect\n            to achieve for your JS in this course (e.g. as specific as \"line lengths &lt; 100 characters\" or\n            \"good variable descriptive identifier names\")\n          </p><p>\n          </p><div class=\"fragment\">\n            <p>Did they include some of the following? </p>\n            <ul>\n              <li class=\"fragment\">Using proper naming conventions (camelCase and ALL_CAPS) for JS</li>\n              <li class=\"fragment\">Good indentation and curly brace style</li>\n              <li class=\"fragment\">Using descriptive JSdoc to comment functions</li>\n              <li class=\"fragment\">Use the module pattern and \"use strict;\"</li>\n              <li class=\"fragment\">Localizing variables, not overusing module globals</li>\n              <li class=\"fragment\">Using functions to capture functionality</li>\n              <li class=\"fragment\">Refactoring common code and sub-operations into function</li>\n              <li class=\"fragment\">Do not mix HTML/CSS/JS</li>\n            </ul>\n            <p class=\"fragment\">\n              We will see how these transfer to PHP as we develop our web services\n            </p>\n          </div>\n        </section>", "text": "Code Quality in JS Talk with your neighbor: Try to list at least 5 Code Quality standards we expect to achieve for your JS in this course (e.g. as specific as \"line lengths < 100 characters\" or \"good variable descriptive identifier names\") Did they include some of the following? Using proper naming conventions (camelCase and ALL_CAPS) for JS Good indentation and curly brace style Using descriptive JSdoc to comment functions Use the module pattern and \"use strict;\" Localizing variables, not overusing module globals Using functions to capture functionality Refactoring common code and sub-operations into function Do not mix HTML/CSS/JS We will see how these transfer to PHP as we develop our web services", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 19 - PHP III: Web Services with File I/O and JSON</h3>\n        </section>", "text": "CSE 154 Lecture 19 - PHP III: Web Services with File I/O and JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>Important Course Details</p><p>\n          </p><ul class=\"fragment\">\n            <li>No exploration session this week. Next week on React</li>\n            <li>Reminder: CP4 out.</li>\n            <li>HW4 is out, due May 24th, 11:00pm</li>\n          </ul>\n          <p class=\"fragment\">Web Services with JSON</p>\n          <p class=\"fragment\">PHP File I/O</p>\n          <p class=\"fragment\">Web Services with File I/O</p>\n          <p class=\"fragment\">Web Services with File I/O and JSON</p>\n        </section>", "text": "Agenda Important Course Details No exploration session this week. Next week on React Reminder: CP4 out. HW4 is out, due May 24th, 11:00pm Web Services with JSON PHP File I/O Web Services with File I/O Web Services with File I/O and JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Reminder:\n            <a href=\"https://www.tutorialrepublic.com/php-tutorial/php-arrays.php\">Associative Arrays</a>\n          </h2>\n          <p>Associative arrays are arrays that have keys with assigned values (similar to Maps in\n          Java, dictionaries in Python, or JSON objects in JS)</p>\n          <pre><code class=\"hljs\" data-trim>$tas = array(\"AA\" =&gt; \"Daniel Hsu\", \"AB\" =&gt; \"Chao Hsu Lin\",\n             \"AC\" =&gt; \"Jack Venberg\", \"AD\" =&gt; \"Sandy Yang\",\n             \"AE\" =&gt; \"Ann Shan\", \"AF\" =&gt; \"Manchen Jin\",\n             \"AG\" =&gt; \"Hudson Gilmore\", \"AH\" =&gt; \"Manny Munoz\",\n             \"AI\" =&gt; \"Will Bigelow\", \"AJ\" =&gt; \"Zach Wu\");\n$tas[\"ZZ\"] = \"Jeremy Zhang\";\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <pre><code class=\"hljs\" data-trim>$ages = array(); # empty array (length 0)\n$ages[\"Whitney\"] = 18; # stores 17 at the location where \"Whitney\" is stored\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Reminder: Associative Arrays Associative arrays are arrays that have keys with assigned values (similar to Maps in Java, dictionaries in Python, or JSON objects in JS) $tas = array(\"AA\" => \"Daniel Hsu\", \"AB\" => \"Chao Hsu Lin\", \"AC\" => \"Jack Venberg\", \"AD\" => \"Sandy Yang\", \"AE\" => \"Ann Shan\", \"AF\" => \"Manchen Jin\", \"AG\" => \"Hudson Gilmore\", \"AH\" => \"Manny Munoz\", \"AI\" => \"Will Bigelow\", \"AJ\" => \"Zach Wu\");$tas[\"ZZ\"] = \"Jeremy Zhang\"; PHP $ages = array(); # empty array (length 0)$ages[\"Whitney\"] = 18; # stores 17 at the location where \"Whitney\" is stored PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2><code>foreach</code> and associative arrays</h2>\n          <pre><code class=\"hljs\" data-trim>foreach ($array_name as $key =&gt; $value)  {\n  ...\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n          <pre><code class=\"hljs\" data-trim>$tas = array(\"AA\" =&gt; \"Daniel Hsu\", ...);\nforeach ($tas as $section =&gt; $ta)  {\n  echo \"{$ta} leads section {$section}.\\n\";\n}\n</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <pre><code class=\"hljs\" data-trim>Daniel Hsu leads section AA.\nChao Hsu Lin leads section AB.\nJack Venberg leads section AC.\nSandy Yang Chen leads section AD.\n...</code></pre>\n        <p class=\"code-caption\">Output</p>\n        </section>", "text": "foreach and associative arrays foreach ($array_name as $key => $value) { ...} PHP (template) $tas = array(\"AA\" => \"Daniel Hsu\", ...);foreach ($tas as $section => $ta) { echo \"{$ta} leads section {$section}.\\n\";} PHP (example) Daniel Hsu leads section AA.Chao Hsu Lin leads section AB.Jack Venberg leads section AC.Sandy Yang Chen leads section AD.... Output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2><code>in_array</code> vs <code>array_key_exists</code></h2>\n          <p>\n            <a href=\"http://php.net/manual/en/function.in-array.php\"><code>in_array</code></a> tests\n            whether a value is in an array\n          </p>\n          <p>\n            <a href=\"http://php.net/manual/en/function.array-key-exists.php\"><code>array_key_exists</code></a>\n            tests whether a key is in an array\n          </p>\n          <pre><code class=\"hljs\" data-trim>$tas = array(\"AA\" =&gt; \"Daniel Hsu\", ...);\nin_array(\"AA\", $tas);           # false\nin_array(\"Jeremy Zhang\", $tas); # true\narray_key_exists(\"AA\", $tas);   # true\n</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n        </section>", "text": "in_array vs array_key_exists in_array tests whether a value is in an array array_key_exists tests whether a key is in an array $tas = array(\"AA\" => \"Daniel Hsu\", ...);in_array(\"AA\", $tas); # falsein_array(\"Jeremy Zhang\", $tas); # truearray_key_exists(\"AA\", $tas); # true PHP (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h1>Web services with JSON</h1>\n          </section>", "text": "Web services with JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <section>\n              <h2>A simple case study: JSONtest</h2>\n              <p>\n                For this example let's write a simple web service <code>jsontest.php</code>\n                that takes no query parameters and returns a JSON like the one\n                below.\n              </p>\n              <p>\n                This result will be used in a web page <code>jsontest.html</code>,\n                <code>jsontest.css</code>, and <code>jsontest.js</code>.\n              </p>\n              <p><a href=\"examples/jsontest.zip\">Sample code</a></p>\n              <pre><code>{\n  \"name\": \"Miranda\",\n  \"hobbies\": [\n    \"pottery\",\n    \"softball\",\n    \"cycling\",\n    \"watching youtube\"\n  ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n              <h4>Look down for HTML and JS...</h4>\n            </section>\n\n            <section>\n              <h2>JSONtest HTML</h2>\n              <div class=\"side-by-side\">\n                <div class=\"two-thirds-width space-right\">\n                  <pre><code>&lt;body&gt;\n&lt;header&gt;\n  &lt;h1&gt;JSON Test&lt;/h1&gt;\n&lt;/header&gt;\n&lt;section&gt;\n  &lt;button id=\"test-btn\"&gt;Get JSON data.&lt;/button&gt;\n  &lt;h2&gt;Response&lt;/h2&gt;\n  &lt;p id=\"response\"&gt;&lt;/p&gt;\n&lt;/section&gt;\n&lt;/body&gt;</code></pre>\n                  <p class=\"code-caption\">HTML</p>\n                </div>\n                <div class=\"space-top\">\n                  <img src=\"hidden/jsontest.png\" alt=\"JSONtest screen\">\n                </div>\n            \n\n            <section>\n              <h2>JSONtest Fetch load data handler</h2>\n              <pre><code>function loadData(data) {\n  let response = id(\"response\");\n  response.innerText = data[\"name\"] + \"'s Hobbies\";\n  let ul = document.createElement(\"ul\");\n  response.appendChild(ul);\n  for(let i = 0; i &lt; data[\"hobbies\"].length; i++) {\n    let li = document.createElement(\"li\");\n    li.innerText = data[\"hobbies\"][i];\n    ul.appendChild(li);\n  }\n}</code></pre>\n             <p class=\"code-caption\">JS</p>\n            </section>\n          \n\n          <section>\n            <section>\n              <h2>Reminder: Setting Content Type with <code>header</code></h2>\n              <pre><code data-trim>header(\"Content-type: type/subtype\");</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <p>\n                Most of the time we'll use\n                <code>header(\"Content-type: text/plain\");</code> or\n                <code>header(\"Content-type: application/json\");</code>\n\n              </p>\n              <p>\n                Also remember that in error cases we want to send back the Invalid Request header\n                <code>header(\"HTTP/1.1 400 Invalid Request\");</code>\n              </p>\n              <p>\n                Remember that you can not <code>print</code> or <code>echo</code> before a header\n                statement but it doesn't have to be the first line of code.\n              </p>\n              <p>Helpful Slides from Tuesday's section on what header information in the Network's tab\n                for Text and HTML look like are\n                <a href=\"../../sections/week07-tues/slides/#/4/5\" target=\"_blank\">here</a>,\n              look below for \"application/json\"</p>\n            </section>\n\n            <section>\n              <h2>Inspecting Header Information in Networks Tab</h2>\n              <img src=\"hidden/hello-json.png\" class=\"w-80 centered-figure\">\n              <p>This example shows the result of setting Content-Type as application/json</p>\n              <img src=\"hidden/hello-json-response.png\" class=\"w-80 centered-figure\">\n              <p>and the JSONs in the response</p>\n            </section>\n          </section>\n\n          <section>\n            <h2>Building a simple service that returns JSON</h2>\n            <p>Try using the following steps in <code>jsontest.php</code></p>\n            <ol>\n              <li>Create an array and assign it to a variable (<code>$output = array()</code> for example )\n              </li><li>\n                Gather your data in the associative array ($output)\n                with the key/value pairs you want to return in your JSON object\n              </li>\n              <li>\n                Use\n                <code><a href=\"http://php.net/manual/en/function.json-encode.php\">json_encode</a>($output)</code>\n                to \"stringify\" your associative array into a\n                JSON formatted string.\n              </li>\n              <li>Ensure you have set your header correctly before you print anything! <br>\n                (e.g. <code>header(\"Content-Type: application/json\");</code>)\n              </li>\n              <li>Print the JSON formatted string!</li>\n            </ol>\n            <p>NOTE: we can also use json_decode to convert JSON strings into PHP arrays.</p>\n          </section>\n\n          <section>\n            <h2>Example: JSONtest server code</h2>\n            <pre><code>&lt;?php\n  header(\"Content-Type: application/json\");\n\n  $output = array();\n  $output[\"name\"] = \"Miranda\";\n  $output[\"hobbies\"] = array(\"pottery\", \"softball\",\n                             \"cycling\", \"watching youtube\");\n\n  print(json_encode($output));\n?&gt;</code></pre>\n            <p>Produces:</p>\n            <pre><code>{\n  \"name\":\"Miranda\",\n  \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>\n\n\n        <section>\n          <h1>Now let's build a web service</h1>\n          <h2>New case study: Points Of Interest</h2>\n        </section>\n\n        <section>\n          <p>\n            &lt;backstory&gt;<br>\n            It's week 7 and I'm ready for a vacation, but I can't decide\n            where to go. So I want a tool that will randomly pick from a list of\n            \"Points of Interests\" (vacation spots) and give me some guidance.\n            I know I have already built the randomizer and JSONTest - so I want something similar...<br>\n            &lt;/backstory&gt;\n          </p>\n          <p class=\"space-above\">To start we will use a modified version of JSONtest as a prototype</p>\n          <p><a href=\"examples/pointsofinterest.zip\">Sample code</a></p>\n        </section>\n\n\n        <section>\n          <h2>Step 1: Define the API</h2>\n          <p>\n            Let's first determine how the users will interact with the API. Questions we can\n            ask might be:\n          </p>\n          <ul>\n            <li>What data might a user need?</li>\n            <li>What might be the easiest format for the user to use this data in?</li>\n          </ul>\n          <p>For Points of Interest we're looking for:</p>\n          <ul>\n            <li>A city that one might want to travel to</li>\n            <li>A list of Points of Interest (sites) for that city, including for each:\n              <ul>\n                <li>The name of the site</li>\n                <li>An image of the site</li>\n                <li>A review of the site</li>\n              </ul>\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interest sample output</h2>\n          <div class=\"side-by-side\">\n            <p>The general format of the response could look like this for all of our cities:</p>\n            <div>\n              <pre class=\"font-12pt\"><code>{\n  \"cities\" : [\n    {\n      \"name\": \"Seattle\",\n      \"sites\": [\n        {\n          \"name\": \"Space Needle\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    },\n    {\n      \"name\": \"New York\",\n      \"sites\": [\n        {\n          \"name\": \"Ellis Island\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        },\n        {\n          \"name\": \"Statue of Liberty\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    }\n    ...\n  ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <h2>Step 2: Determine how to view the data</h2>\n          <p>Given the information we may store in the server, how might we want to view it?</p>\n          <ul>\n            <li>Is the data simple enough to return as plain text (so the end user doesn't have to\n              <code>split</code> to view different parts)?\n            </li>\n            <li>\n              Where might I need more structured information that requires responding with\n              JSON encoded data?\n            </li>\n            <li>\n              What \"filters\" might I want on that data? Do I want all of it? Some of it?\n              Just one at a time?\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interest requests</h2>\n          <p>For our Points of Interest API we want three types of data: </p>\n          <ul>\n            <li>All of the cities we have with at least one point of interest each. (city=all) </li>\n            <li>A random city with the point of interest(s) for that city (city=random)</li>\n            <li>The Point(s) of Interest for a city that is specified by the user (city={cityname})</li>\n          </ul>\n          <p>For each Point of Interest we want:</p>\n          <ul>\n            <li>The name (e.g. Space Needle)</li>\n            <li>An image</li>\n            <li>A review</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Step 3: Write your server code to handle the requests</h2>\n          <ul>\n            <li>Think of the conditionals you need to handle your request</li>\n            <li>\n              Remember to check if the <code>$_GET</code> and <code>$_POST</code> indices for those\n              requests are set (using <code>isset</code>), and handle the error correctly if not.\n            </li>\n            <li>\n              You can use conditional statements to figure out which query parameter to handle.\n            </li>\n            <li>\n              Remember to be careful about using <code>$_GET</code> vs <code>$_POST</code> where\n              needed (for now we're using <code>$_GET</code>).\n            </li>\n            <li>\n              Oh and don't forget to handle other error cases as well.\n            </li>\n            <li>\n              Put the correct headers in each part of the conditional... then look to see if\n              there is any refactoring you can do!\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Step 4: Write code to handle each request type</h2>\n          <p>How will your data be stored on the server?</p>\n          <p>\n            How will you convert the data into the right format for sending back to the caller?\n          </p>\n        </section>\n\n        <section>\n          <section>\n            <h2>Example: Points of Interest Web Service, simple version</h2>\n            <p>Write a simple web service that accepts a <code>city</code> and\n            outputs an attraction that you should visit in that city</p>\n            <pre><code data-trim>http://example.com/pointsofinterest.php?city=Seattle</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre><code>The best place to visit in Seattle is Space Needle.</code></pre>\n            <p class=\"code-caption\">Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <h2>Solution\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n  header(\"Content-type: text/plain\");\n  if (isset($_GET[\"city\"])) {\n    $attractions = get_list();\n    $city = $_GET[\"city\"];\n    echo \"The best place to visit in \" . $city .  \" is \" .\n          $attractions[$city] . \".\\n\";\n  }\n\n  function get_list() {\n    $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                         \"New York\" =&gt; \"Ellis Island\",\n                          ...\n                         \"London\" =&gt; \"Big Ben\");\n  }\n?&gt;</code></pre>\n            </h2><p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>\n\n        <section>\n          <section>\n            <h2>Example: Points of Interest Web Service</h2>\n            <p>What if we want to return all of the cities/points of interest? </p>\n            <pre class=\"font-16pt\"><code data-trim>http://example.com/pointsofinterest.php?city=all</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre class=\"font-16pt\"><code>{\n    \"Seattle\":\"Space Needle\",\n    \"New York\":\"Ellis Island\",\n    ...\n    \"San Franciso\":\"Fisherman's Warf\"\n}</code></pre>\n            <p class=\"code-caption\">JSON Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <p>Solution</p>\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n    if (isset($_GET[\"city\"])) {\n      $attractions = get_list();\n      $city = $_GET[\"city\"];\n\n      if (strcmp($city, \"all\") === 0) {\n        header(\"Content-type: application/json\");\n        print_r(json_encode($attractions));\n      }\n    }\n\n    function get_list() {\n      $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                           ...);\n    }\n?&gt;</code></pre>\n            <p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>\n\n        <section>\n          <p>\n            That's all great, but I don't want to have my PHP file get bloated\n            with the associative array. There has to be a better way to store this\n            information.\n          </p>\n          <p>\n            Besides, I'm still missing the images, and multiple Points of Interest per city!\n          </p>\n\n          <h2>Let's explore storing the data in a different way</h2>\n        </section>\n\n        <section>\n          <h1>PHP File I/O</h1>\n          <img class=\"half-width simpleimg\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c0/Spice_rack%2C_2014.jpg\" alt=\"spice rack\">\n          <p class=\"small-font\">From <a href=\"https://commons.wikimedia.org/wiki/File:Spice_rack,_2014.jpg\">Wikipedia</a></p>\n        </section>\n\n        <section>\n          <h2>PHP I/O Functions</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function name(s)</th>\n              <th>category</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.file.php\" target=\"_blank\">file</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-get-contents.php\" target=\"_blank\">file_get_contents</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-put-contents.php\" target=\"_blank\">file_put_contents</a>\n              </td>\n              <td>reading/writing entire files</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.basename.php\" target=\"_blank\">basename</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-exists.php\" target=\"_blank\">file_exists</a>,\n                <a href=\"https://www.php.net/manual/en/function.filesize.php\" target=\"_blank\">filesize</a>,\n                <a href=\"https://www.php.net/manual/en/function.fileperms.php\" target=\"_blank\">fileperms</a>,\n                <a href=\"https://www.php.net/manual/en/function.filemtime.php\" target=\"_blank\">filemtime</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-dir.php\" target=\"_blank\">is_dir</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-readable.php\" target=\"_blank\">is_readable</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-writable.php\" target=\"_blank\">is_writable</a>,\n                <a href=\"https://www.php.net/manual/en/function.disk-free-space.php\" target=\"_blank\">disk_free_space</a>\n              </td>\n              <td>asking for information</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.copy.php\" target=\"_blank\">copy</a>,\n                <a href=\"https://www.php.net/manual/en/function.rename.php\" target=\"_blank\">rename</a>,\n                <a href=\"https://www.php.net/manual/en/function.unlink.php\" target=\"_blank\">unlink</a>,\n                <a href=\"https://www.php.net/manual/en/function.chmod.php\" target=\"_blank\">chmod</a>,\n                <a href=\"https://www.php.net/manual/en/function.chgrp.php\" target=\"_blank\">chgrp</a>,\n                <a href=\"https://www.php.net/manual/en/function.chown.php\" target=\"_blank\">chown</a>,\n                <a href=\"https://www.php.net/manual/en/function.mkdir.php\" target=\"_blank\">mkdir</a>,\n                <a href=\"https://www.php.net/manual/en/function.rmdir.php\" target=\"_blank\">rmdir</a>\n              </td>\n              <td>manipulating files and directories</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.glob.php\" target=\"_blank\">glob</a>,\n                <a href=\"https://www.php.net/manual/en/function.scandir.php\" target=\"_blank\">scandir</a>\n              </td>\n              <td>reading directories</td>\n            </tr>\n          </table>\n\n        </section>\n\n      <style>\n      table.code-table tr td pre {\n      font-size: 16pt;\n      }</style>\n\n\n        <section>\n          <h2>Reading Files  - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th><strong>contents of foo.txt</strong></th>\n              <th><strong>file(\"foo.txt\")</strong></th>\n              <th><strong>file_get_contents(\"foo.txt\")</strong></th>\n            </tr>\n            <tr>\n              <td>\n                <pre>Hello\n  how r u?\n\n  I'm fine\n\n                </pre>\n              </td>\n              <td>\n                <pre>array(\"Hello\\n\", #0\n  \"how r u?\\n\",    #1\n  \"\\n\",            #2\n  \"I'm fine\\n\"     #3\n  )\n                </pre>\n              </td>\n              <td>\n                <pre>\"Hello\\n\n  how r u\\n    # a single\n  \\n           # string\n  I'm fine\\n\"\n                </pre>\n              </td>\n            </tr>\n          </table>\n          <p>\n            The <code>file</code> function returns lines of a file as an array (\\n at end of each).\n          </p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a single string.</p>\n          <p><code>file_put_contents</code> writes a string into a file.</p>\n        </section>\n\n\n        <section>\n          <h2>Sidebar: Default Parameter Values</h2>\n          <p>A quick note because you will see this in some of the PHP documentation</p>\n          <pre><code data-trim>function name(parameterName=value, ..., parameterName=value) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n      <pre><code data-trim>function print_separated($str, $separator=\", \") {\n  if (strlen($str) &lt; 0) {\n    echo $str[0];\n    for ($i = 1; $i &lt; strlen($str); $i++) {\n      echo $separator . $str[$i];\n    }\n  }\n}\nprint_separated(\"hello\");      # h, e, l, l, o\nprint_separated(\"hello\", \"-\"); # h-e-l-l-o</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>\n            If no value is passed, the default will be used (defaults must come last)\n          </p>\n        </section>\n\n\n        <section>\n          <h2>The <code>file</code> Function</h2>\n          <p><a href=\"https://www.php.net/manual/en/function.file.php\"><code>file</code></a>returns the lines of a file as an array of strings.</p>\n          <p>But each ends with \\n; to strip it, use an optional second parameter:</p>\n          <pre><code data-trim>$cities = file(\"cities.txt\");\nforeach ($cities as $city) { # for ($i = 0; $i &lt; count($cities); $i++)\n  echo $city;                # no newline needed here!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n  <pre><code data-trim>$lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);\nforeach ($cities as $city) {\n  echo \"{$city}\\n\";              # a newline is now needed!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Common idiom: foreach or for loop over lines of file</p>\n        </section>\n\n\n\n        <section>\n          <h2>Reading/Writing an Entire File</h2>\n          <pre><code data-trim># reverse a file\n$text = file_get_contents(\"poem.txt\");\n$text = strrev($text);\nfile_put_contents(\"poem.txt\", $text);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a string</p>\n          <ul>\n            <li>if the file doesn't exist, you will get a warning and an empty return string</li>\n          </ul>\n          <p><code>file_put_contents</code> writes a string into a file, <em>replacing its old\n            contents</em></p>\n          <ul>\n            <li>if the file doesn't exist, it will be created</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Appending to a File</h2>\n          <pre><code data-trim># add a new line to a file\n$new_text = \"P.S. ILY, GTG TTYL!~\";\nfile_put_contents(\"poem.txt\", $new_text, FILE_APPEND);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <table>\n            <tr>\n              <th><strong>old contents</strong></th>\n              <th><strong>new contents</strong></th>\n            </tr>\n            <tr>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n              </td>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n                P.S. ILY, GTG TTYL!~\n              </td>\n            </tr>\n          </table>\n          <p><code>file_put_contents</code> can be called with an optional third parameter to append\n          (add to\n          end) rather than overwrite.</p>\n        </section>\n\n\n            <section>\n              <h2>Splitting/Joining Strings</h2>\n              <pre><code data-trim>$arr = explode(delimiter, string);\n$str = implode(delimiter, array);</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>$s = \"CSE 154 A\";\n$a = explode(\" \", $s);     # (\"CSE\", \"154\", \"A\")\n$s2 = implode(\"...\", $a);  # \"CSE...154...A\"  </code></pre>\n              <p class=\"code-caption\">PHP (example)</p>\n              <p><code>explode</code> and <code>implode</code> convert between strings and arrays.</p>\n              <p>For more complex strings, you can use regular expressions.</p>\n            </section>\n\n            <section>\n              <h2>Example with <code>explode</code></h2>\n              <pre><code data-trim>Seattle, Space Needle\nNew York, Ellis Island\nBoston, Boston Harbor\nPhiladelphia, Valley Forge</code></pre>\n              <p class=\"code-caption\">contents of cities.txt</p>\n              <pre><code data-trim>foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) {\n  $tokens = explode(\",\", $city);\n  echo \"The best place to visit in \" . $tokens[0] .\n         \" is \" . $tokens[1] . \".\\n\";\n}</code></pre>\n              <p class=\"code-caption\">PHP</p>\n              <div class=\"output\">The best place to visit in Seattle is Space Needle.<br>\nThe best place to visit in New York is Ellis Island.<br>\nThe best place to visit in Boston is Boston Harbor.<br>\nThe best place to visit in Philadelphia is Valley Forge.\n              </div>\n              <p class=\"output-caption\">output</p>\n            </section>\n\n            <section>\n              <h2>Unpacking an array: <a href=\"https://www.w3schools.com/php/func_array_list.asp\" target=\"_blank\"><code>list</code></a></h2>\n             <p>The list function \"unpacks\" an array into a set of variables.</p>\n             <p>When you now a file or line's exact length/format, use file and list to unpack it</p>\n              <pre><code data-trim>list($var1, ..., $varN) = array;</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>Kyle Thayer\n(206) 154 2017\n17-154-0123</code></pre>\n              <p class=\"code-caption\">contents of personal.txt</p>\n              <pre><code data-trim>list($name, $phone, $ssn) = file(\"personal.txt\");\n...\nlist($area_code, $prefix, $suffix) = explode(\" \", $phone);  </code></pre>\n              <p class=\"code-caption\">PHP</p>\n            </section>\n\n\n        <section>\n          <h2>Reading Directories - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_glob.asp\" target=\"_blank\">glob</a></td>\n              <td>returns an array of all file names that match a given pattern\n              (returns a file path and name, such as \"foo/bar/myfile.txt\")</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_scandir.asp\" target=\"_blank\">scandir</a></td>\n              <td>\n                returns an array of all file names in a given directory\n                (returns just the file names, such as \"myfile.txt\")</td>\n            </tr>\n          </table>\n          <p>Can accept a general path with the * wildcard (more powerful).</p>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interests in Files</h2>\n          <div class=\"side-by-side\">\n            <div>\n              <img class=\"simpleimg half-width\" src=\"hidden/citiesdirectory.png\" alt=\"directory structure for cities\">\n            </div>\n            <div>\n              <p>\n                Suppose we store information about each Point of Interest in a file\n                in a city subdirectory.\n              </p>\n              <p>The name of the file is the name of the Point of Interest</p>\n              <p>\n                Each file contains 2 lines\n              </p><p>\n              </p><ul>\n                <li>The URL of an image of the Point of Interest</li>\n                <li>The review of the Point of Interest</li>\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <h2><code>glob</code> Example</h2>\n          <pre><code data-trim># Get all of the information from the cities\n$cities = glob(\"cities/*/*\");\nforeach ($cities as $city) {\n  $text = file_get_contents($city);\n  echo (basename($city) . \" : \" . $text . \"\\n\");\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>glob can match a wildcard path with the * character</p>\n          <ul>\n            <li><code>glob(\"foo/bar/*.doc\")</code> returns all .doc files in the foo/bar\n              subdirectory</li>\n            <li><code>glob(\"food*\")</code> returns all files whose names begin with \"food\"</li>\n          </ul>\n          <p>The <code>basename</code> function strips any leading directory from a file path</p>\n          <ul>\n            <li><code>basename(\"foo/bar/baz.txt\")</code> returns \"baz.txt\"</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2><code>scandir</code> Example</h2>\n          <pre><code data-trim>foreach (scandir(\"cities/\") as $city) {\n  echo \"I found a city: {$city}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <div class=\"output\">\n            <p>I found a city: .</p>\n            <p>I found a city: ..</p>\n            <p>I found a city: Ann_Arbor</p>\n            <p>I found a city: Beijing</p>\n            <p>...</p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p><code>scandir</code> includes current directory (\".\") and parent (\"..\") in the array.</p>\n          <p>Don't need <code>basename</code> with <code>scandir</code>; returns file names only\n          without directory</p>\n        </section>\n\n\n        <section>\n          <h2>Putting it all together: File Based Points of Interest</h2>\n          <p>\n            The <a href=\"examples/pointsofinterest.zip\">pointsofinterest.zip</a> example\n            has been put together for you to look explore (note that it is not yet finished, and\n            also could use some refactoring to meet the Code Quality Guide!)\n          </p>\n        </section>\n\n        <section>\n          <h1>Code Quality in a Web Service</h1>\n          <p>Where did you see adherence to the similar code quality guidlines as for JS? </p>\n          <p>What was similar?</p>\n          <p>What was different?</p>\n        </section>\n\n\n\n        <!-- end of slides (last section tag) -->\n      </div>\n    </section></section>", "text": "A simple case study: JSONtest For this example let's write a simple web service jsontest.php that takes no query parameters and returns a JSON like the one below. This result will be used in a web page jsontest.html, jsontest.css, and jsontest.js. Sample code { \"name\": \"Miranda\", \"hobbies\": [ \"pottery\", \"softball\", \"cycling\", \"watching youtube\" ]} JSON Look down for HTML and JS... JSONtest HTML <body><header> <h1>JSON Test</h1></header><section> <button id=\"test-btn\">Get JSON data.</button> <h2>Response</h2> <p id=\"response\"></p></section></body> HTML JSONtest Fetch load data handler function loadData(data) { let response = id(\"response\"); response.innerText = data[\"name\"] + \"'s Hobbies\"; let ul = document.createElement(\"ul\"); response.appendChild(ul); for(let i = 0; i < data[\"hobbies\"].length; i++) { let li = document.createElement(\"li\"); li.innerText = data[\"hobbies\"][i]; ul.appendChild(li); }} JS Reminder: Setting Content Type with header header(\"Content-type: type/subtype\"); PHP (template) Most of the time we'll use header(\"Content-type: text/plain\"); or header(\"Content-type: application/json\"); Also remember that in error cases we want to send back the Invalid Request header header(\"HTTP/1.1 400 Invalid Request\"); Remember that you can not print or echo before a header statement but it doesn't have to be the first line of code. Helpful Slides from Tuesday's section on what header information in the Network's tab for Text and HTML look like are here, look below for \"application/json\" Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as application/json and the JSONs in the response Building a simple service that returns JSON Try using the following steps in jsontest.php Create an array and assign it to a variable ($output = array() for example ) Gather your data in the associative array ($output) with the key/value pairs you want to return in your JSON object Use json_encode($output) to \"stringify\" your associative array into a JSON formatted string. Ensure you have set your header correctly before you print anything! (e.g. header(\"Content-Type: application/json\");) Print the JSON formatted string! NOTE: we can also use json_decode to convert JSON strings into PHP arrays. Example: JSONtest server code <?php header(\"Content-Type: application/json\"); $output = array(); $output[\"name\"] = \"Miranda\"; $output[\"hobbies\"] = array(\"pottery\", \"softball\", \"cycling\", \"watching youtube\"); print(json_encode($output));?> Produces: { \"name\":\"Miranda\", \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]} PHP Now let's build a web service New case study: Points Of Interest <backstory> It's week 7 and I'm ready for a vacation, but I can't decide where to go. So I want a tool that will randomly pick from a list of \"Points of Interests\" (vacation spots) and give me some guidance. I know I have already built the randomizer and JSONTest - so I want something similar... </backstory> To start we will use a modified version of JSONtest as a prototype Sample code Step 1: Define the API Let's first determine how the users will interact with the API. Questions we can ask might be: What data might a user need? What might be the easiest format for the user to use this data in? For Points of Interest we're looking for: A city that one might want to travel to A list of Points of Interest (sites) for that city, including for each: The name of the site An image of the site A review of the site Example: Points of Interest sample output The general format of the response could look like this for all of our cities: { \"cities\" : [ { \"name\": \"Seattle\", \"sites\": [ { \"name\": \"Space Needle\", \"image\": \"....\", \"review\": \".... \" } ] }, { \"name\": \"New York\", \"sites\": [ { \"name\": \"Ellis Island\", \"image\": \"....\", \"review\": \".... \" }, { \"name\": \"Statue of Liberty\", \"image\": \"....\", \"review\": \".... \" } ] } ... ]} JSON Step 2: Determine how to view the data Given the information we may store in the server, how might we want to view it? Is the data simple enough to return as plain text (so the end user doesn't have to split to view different parts)? Where might I need more structured information that requires responding with JSON encoded data? What \"filters\" might I want on that data? Do I want all of it? Some of it? Just one at a time? Example: Points of Interest requests For our Points of Interest API we want three types of data: All of the cities we have with at least one point of interest each. (city=all) A random city with the point of interest(s) for that city (city=random) The Point(s) of Interest for a city that is specified by the user (city={cityname}) For each Point of Interest we want: The name (e.g. Space Needle) An image A review Step 3: Write your server code to handle the requests Think of the conditionals you need to handle your request Remember to check if the $_GET and $_POST indices for those requests are set (using isset), and handle the error correctly if not. You can use conditional statements to figure out which query parameter to handle. Remember to be careful about using $_GET vs $_POST where needed (for now we're using $_GET). Oh and don't forget to handle other error cases as well. Put the correct headers in each part of the conditional... then look to see if there is any refactoring you can do! Step 4: Write code to handle each request type How will your data be stored on the server? How will you convert the data into the right format for sending back to the caller? Example: Points of Interest Web Service, simple version Write a simple web service that accepts a city and outputs an attraction that you should visit in that city http://example.com/pointsofinterest.php?city=Seattle GET request The best place to visit in Seattle is Space Needle. Output See below for sample code Solution <?php header(\"Content-type: text/plain\"); if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; echo \"The best place to visit in \" . $city . \" is \" . $attractions[$city] . \".\\n\"; } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", \"New York\" => \"Ellis Island\", ... \"London\" => \"Big Ben\"); }?> PHP \t\t\t\t Example: Points of Interest Web Service What if we want to return all of the cities/points of interest? http://example.com/pointsofinterest.php?city=all GET request { \"Seattle\":\"Space Needle\", \"New York\":\"Ellis Island\", ... \"San Franciso\":\"Fisherman's Warf\"} JSON Output See below for sample code Solution <?php if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; if (strcmp($city, \"all\") === 0) { header(\"Content-type: application/json\"); print_r(json_encode($attractions)); } } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", ...); }?> PHP \t\t\t\t That's all great, but I don't want to have my PHP file get bloated with the associative array. There has to be a better way to store this information. Besides, I'm still missing the images, and multiple Points of Interest per city! Let's explore storing the data in a different way PHP File I/O From Wikipedia PHP I/O Functions function name(s) category file, file_get_contents, file_put_contents reading/writing entire files basename, file_exists, filesize, fileperms, filemtime, is_dir, is_readable, is_writable, disk_free_space asking for information copy, rename, unlink, chmod, chgrp, chown, mkdir, rmdir manipulating files and directories glob, scandir reading directories table.code-table tr td pre { font-size: 16pt; } Reading Files - IMPORTANT SLIDE! contents of foo.txt file(\"foo.txt\") file_get_contents(\"foo.txt\") Hello how r u? I'm fine array(\"Hello\\n\", #0 \"how r u?\\n\", #1 \"\\n\", #2 \"I'm fine\\n\" #3 ) \"Hello\\n how r u\\n # a single \\n # string I'm fine\\n\" The file function returns lines of a file as an array (\\n at end of each). file_get_contents returns entire contents of a file as a single string. file_put_contents writes a string into a file. Sidebar: Default Parameter Values A quick note because you will see this in some of the PHP documentation function name(parameterName=value, ..., parameterName=value) { statements;} PHP (template) function print_separated($str, $separator=\", \") { if (strlen($str) < 0) { echo $str[0]; for ($i = 1; $i < strlen($str); $i++) { echo $separator . $str[$i]; } }}print_separated(\"hello\"); # h, e, l, l, oprint_separated(\"hello\", \"-\"); # h-e-l-l-o PHP (example) If no value is passed, the default will be used (defaults must come last) The file Function filereturns the lines of a file as an array of strings. But each ends with \\n; to strip it, use an optional second parameter: $cities = file(\"cities.txt\");foreach ($cities as $city) { # for ($i = 0; $i < count($cities); $i++) echo $city; # no newline needed here!} PHP $lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);foreach ($cities as $city) { echo \"{$city}\\n\"; # a newline is now needed!} PHP Common idiom: foreach or for loop over lines of file Reading/Writing an Entire File # reverse a file$text = file_get_contents(\"poem.txt\");$text = strrev($text);file_put_contents(\"poem.txt\", $text); PHP file_get_contents returns entire contents of a file as a string if the file doesn't exist, you will get a warning and an empty return string file_put_contents writes a string into a file, replacing its old contents if the file doesn't exist, it will be created Appending to a File # add a new line to a file$new_text = \"P.S. ILY, GTG TTYL!~\";file_put_contents(\"poem.txt\", $new_text, FILE_APPEND); PHP old contents new contents Roses are red Violets are blue All my base Are belong to you. Roses are red Violets are blue All my base Are belong to you. P.S. ILY, GTG TTYL!~ file_put_contents can be called with an optional third parameter to append (add to end) rather than overwrite. Splitting/Joining Strings $arr = explode(delimiter, string);$str = implode(delimiter, array); PHP (template) $s = \"CSE 154 A\";$a = explode(\" \", $s); # (\"CSE\", \"154\", \"A\")$s2 = implode(\"...\", $a); # \"CSE...154...A\" PHP (example) explode and implode convert between strings and arrays. For more complex strings, you can use regular expressions. Example with explode Seattle, Space NeedleNew York, Ellis IslandBoston, Boston HarborPhiladelphia, Valley Forge contents of cities.txt foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) { $tokens = explode(\",\", $city); echo \"The best place to visit in \" . $tokens[0] . \" is \" . $tokens[1] . \".\\n\";} PHP The best place to visit in Seattle is Space Needle.The best place to visit in New York is Ellis Island.The best place to visit in Boston is Boston Harbor.The best place to visit in Philadelphia is Valley Forge. output Unpacking an array: list The list function \"unpacks\" an array into a set of variables. When you now a file or line's exact length/format, use file and list to unpack it list($var1, ..., $varN) = array; PHP (template) Kyle Thayer(206) 154 201717-154-0123 contents of personal.txt list($name, $phone, $ssn) = file(\"personal.txt\");...list($area_code, $prefix, $suffix) = explode(\" \", $phone); PHP Reading Directories - IMPORTANT SLIDE! function description glob returns an array of all file names that match a given pattern (returns a file path and name, such as \"foo/bar/myfile.txt\") scandir returns an array of all file names in a given directory (returns just the file names, such as \"myfile.txt\") Can accept a general path with the * wildcard (more powerful). Example: Points of Interests in Files Suppose we store information about each Point of Interest in a file in a city subdirectory. The name of the file is the name of the Point of Interest Each file contains 2 lines The URL of an image of the Point of Interest The review of the Point of Interest glob Example # Get all of the information from the cities$cities = glob(\"cities/*/*\");foreach ($cities as $city) { $text = file_get_contents($city); echo (basename($city) . \" : \" . $text . \"\\n\");} PHP glob can match a wildcard path with the * character glob(\"foo/bar/*.doc\") returns all .doc files in the foo/bar subdirectory glob(\"food*\") returns all files whose names begin with \"food\" The basename function strips any leading directory from a file path basename(\"foo/bar/baz.txt\") returns \"baz.txt\" scandir Example foreach (scandir(\"cities/\") as $city) { echo \"I found a city: {$city}\\n\";} PHP I found a city: . I found a city: .. I found a city: Ann_Arbor I found a city: Beijing ... output scandir includes current directory (\".\") and parent (\"..\") in the array. Don't need basename with scandir; returns file names only without directory Putting it all together: File Based Points of Interest The pointsofinterest.zip example has been put together for you to look explore (note that it is not yet finished, and also could use some refactoring to meet the Code Quality Guide!) Code Quality in a Web Service Where did you see adherence to the similar code quality guidlines as for JS? What was similar? What was different?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>A simple case study: JSONtest</h2>\n              <p>\n                For this example let's write a simple web service <code>jsontest.php</code>\n                that takes no query parameters and returns a JSON like the one\n                below.\n              </p>\n              <p>\n                This result will be used in a web page <code>jsontest.html</code>,\n                <code>jsontest.css</code>, and <code>jsontest.js</code>.\n              </p>\n              <p><a href=\"examples/jsontest.zip\">Sample code</a></p>\n              <pre><code>{\n  \"name\": \"Miranda\",\n  \"hobbies\": [\n    \"pottery\",\n    \"softball\",\n    \"cycling\",\n    \"watching youtube\"\n  ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n              <h4>Look down for HTML and JS...</h4>\n            </section>", "text": "A simple case study: JSONtest For this example let's write a simple web service jsontest.php that takes no query parameters and returns a JSON like the one below. This result will be used in a web page jsontest.html, jsontest.css, and jsontest.js. Sample code { \"name\": \"Miranda\", \"hobbies\": [ \"pottery\", \"softball\", \"cycling\", \"watching youtube\" ]} JSON Look down for HTML and JS...", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>JSONtest HTML</h2>\n              <div class=\"side-by-side\">\n                <div class=\"two-thirds-width space-right\">\n                  <pre><code>&lt;body&gt;\n&lt;header&gt;\n  &lt;h1&gt;JSON Test&lt;/h1&gt;\n&lt;/header&gt;\n&lt;section&gt;\n  &lt;button id=\"test-btn\"&gt;Get JSON data.&lt;/button&gt;\n  &lt;h2&gt;Response&lt;/h2&gt;\n  &lt;p id=\"response\"&gt;&lt;/p&gt;\n&lt;/section&gt;\n&lt;/body&gt;</code></pre>\n                  <p class=\"code-caption\">HTML</p>\n                </div>\n                <div class=\"space-top\">\n                  <img src=\"hidden/jsontest.png\" alt=\"JSONtest screen\">\n                </div>\n            \n\n            <section>\n              <h2>JSONtest Fetch load data handler</h2>\n              <pre><code>function loadData(data) {\n  let response = id(\"response\");\n  response.innerText = data[\"name\"] + \"'s Hobbies\";\n  let ul = document.createElement(\"ul\");\n  response.appendChild(ul);\n  for(let i = 0; i &lt; data[\"hobbies\"].length; i++) {\n    let li = document.createElement(\"li\");\n    li.innerText = data[\"hobbies\"][i];\n    ul.appendChild(li);\n  }\n}</code></pre>\n             <p class=\"code-caption\">JS</p>\n            </section>\n          \n\n          <section>\n            <section>\n              <h2>Reminder: Setting Content Type with <code>header</code></h2>\n              <pre><code data-trim>header(\"Content-type: type/subtype\");</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <p>\n                Most of the time we'll use\n                <code>header(\"Content-type: text/plain\");</code> or\n                <code>header(\"Content-type: application/json\");</code>\n\n              </p>\n              <p>\n                Also remember that in error cases we want to send back the Invalid Request header\n                <code>header(\"HTTP/1.1 400 Invalid Request\");</code>\n              </p>\n              <p>\n                Remember that you can not <code>print</code> or <code>echo</code> before a header\n                statement but it doesn't have to be the first line of code.\n              </p>\n              <p>Helpful Slides from Tuesday's section on what header information in the Network's tab\n                for Text and HTML look like are\n                <a href=\"../../sections/week07-tues/slides/#/4/5\" target=\"_blank\">here</a>,\n              look below for \"application/json\"</p>\n            </section>\n\n            <section>\n              <h2>Inspecting Header Information in Networks Tab</h2>\n              <img src=\"hidden/hello-json.png\" class=\"w-80 centered-figure\">\n              <p>This example shows the result of setting Content-Type as application/json</p>\n              <img src=\"hidden/hello-json-response.png\" class=\"w-80 centered-figure\">\n              <p>and the JSONs in the response</p>\n            </section>\n          </section>\n\n          <section>\n            <h2>Building a simple service that returns JSON</h2>\n            <p>Try using the following steps in <code>jsontest.php</code></p>\n            <ol>\n              <li>Create an array and assign it to a variable (<code>$output = array()</code> for example )\n              </li><li>\n                Gather your data in the associative array ($output)\n                with the key/value pairs you want to return in your JSON object\n              </li>\n              <li>\n                Use\n                <code><a href=\"http://php.net/manual/en/function.json-encode.php\">json_encode</a>($output)</code>\n                to \"stringify\" your associative array into a\n                JSON formatted string.\n              </li>\n              <li>Ensure you have set your header correctly before you print anything! <br>\n                (e.g. <code>header(\"Content-Type: application/json\");</code>)\n              </li>\n              <li>Print the JSON formatted string!</li>\n            </ol>\n            <p>NOTE: we can also use json_decode to convert JSON strings into PHP arrays.</p>\n          </section>\n\n          <section>\n            <h2>Example: JSONtest server code</h2>\n            <pre><code>&lt;?php\n  header(\"Content-Type: application/json\");\n\n  $output = array();\n  $output[\"name\"] = \"Miranda\";\n  $output[\"hobbies\"] = array(\"pottery\", \"softball\",\n                             \"cycling\", \"watching youtube\");\n\n  print(json_encode($output));\n?&gt;</code></pre>\n            <p>Produces:</p>\n            <pre><code>{\n  \"name\":\"Miranda\",\n  \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>\n\n\n        <section>\n          <h1>Now let's build a web service</h1>\n          <h2>New case study: Points Of Interest</h2>\n        </section>\n\n        <section>\n          <p>\n            &lt;backstory&gt;<br>\n            It's week 7 and I'm ready for a vacation, but I can't decide\n            where to go. So I want a tool that will randomly pick from a list of\n            \"Points of Interests\" (vacation spots) and give me some guidance.\n            I know I have already built the randomizer and JSONTest - so I want something similar...<br>\n            &lt;/backstory&gt;\n          </p>\n          <p class=\"space-above\">To start we will use a modified version of JSONtest as a prototype</p>\n          <p><a href=\"examples/pointsofinterest.zip\">Sample code</a></p>\n        </section>\n\n\n        <section>\n          <h2>Step 1: Define the API</h2>\n          <p>\n            Let's first determine how the users will interact with the API. Questions we can\n            ask might be:\n          </p>\n          <ul>\n            <li>What data might a user need?</li>\n            <li>What might be the easiest format for the user to use this data in?</li>\n          </ul>\n          <p>For Points of Interest we're looking for:</p>\n          <ul>\n            <li>A city that one might want to travel to</li>\n            <li>A list of Points of Interest (sites) for that city, including for each:\n              <ul>\n                <li>The name of the site</li>\n                <li>An image of the site</li>\n                <li>A review of the site</li>\n              </ul>\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interest sample output</h2>\n          <div class=\"side-by-side\">\n            <p>The general format of the response could look like this for all of our cities:</p>\n            <div>\n              <pre class=\"font-12pt\"><code>{\n  \"cities\" : [\n    {\n      \"name\": \"Seattle\",\n      \"sites\": [\n        {\n          \"name\": \"Space Needle\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    },\n    {\n      \"name\": \"New York\",\n      \"sites\": [\n        {\n          \"name\": \"Ellis Island\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        },\n        {\n          \"name\": \"Statue of Liberty\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    }\n    ...\n  ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <h2>Step 2: Determine how to view the data</h2>\n          <p>Given the information we may store in the server, how might we want to view it?</p>\n          <ul>\n            <li>Is the data simple enough to return as plain text (so the end user doesn't have to\n              <code>split</code> to view different parts)?\n            </li>\n            <li>\n              Where might I need more structured information that requires responding with\n              JSON encoded data?\n            </li>\n            <li>\n              What \"filters\" might I want on that data? Do I want all of it? Some of it?\n              Just one at a time?\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interest requests</h2>\n          <p>For our Points of Interest API we want three types of data: </p>\n          <ul>\n            <li>All of the cities we have with at least one point of interest each. (city=all) </li>\n            <li>A random city with the point of interest(s) for that city (city=random)</li>\n            <li>The Point(s) of Interest for a city that is specified by the user (city={cityname})</li>\n          </ul>\n          <p>For each Point of Interest we want:</p>\n          <ul>\n            <li>The name (e.g. Space Needle)</li>\n            <li>An image</li>\n            <li>A review</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Step 3: Write your server code to handle the requests</h2>\n          <ul>\n            <li>Think of the conditionals you need to handle your request</li>\n            <li>\n              Remember to check if the <code>$_GET</code> and <code>$_POST</code> indices for those\n              requests are set (using <code>isset</code>), and handle the error correctly if not.\n            </li>\n            <li>\n              You can use conditional statements to figure out which query parameter to handle.\n            </li>\n            <li>\n              Remember to be careful about using <code>$_GET</code> vs <code>$_POST</code> where\n              needed (for now we're using <code>$_GET</code>).\n            </li>\n            <li>\n              Oh and don't forget to handle other error cases as well.\n            </li>\n            <li>\n              Put the correct headers in each part of the conditional... then look to see if\n              there is any refactoring you can do!\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Step 4: Write code to handle each request type</h2>\n          <p>How will your data be stored on the server?</p>\n          <p>\n            How will you convert the data into the right format for sending back to the caller?\n          </p>\n        </section>\n\n        <section>\n          <section>\n            <h2>Example: Points of Interest Web Service, simple version</h2>\n            <p>Write a simple web service that accepts a <code>city</code> and\n            outputs an attraction that you should visit in that city</p>\n            <pre><code data-trim>http://example.com/pointsofinterest.php?city=Seattle</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre><code>The best place to visit in Seattle is Space Needle.</code></pre>\n            <p class=\"code-caption\">Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <h2>Solution\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n  header(\"Content-type: text/plain\");\n  if (isset($_GET[\"city\"])) {\n    $attractions = get_list();\n    $city = $_GET[\"city\"];\n    echo \"The best place to visit in \" . $city .  \" is \" .\n          $attractions[$city] . \".\\n\";\n  }\n\n  function get_list() {\n    $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                         \"New York\" =&gt; \"Ellis Island\",\n                          ...\n                         \"London\" =&gt; \"Big Ben\");\n  }\n?&gt;</code></pre>\n            </h2><p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>\n\n        <section>\n          <section>\n            <h2>Example: Points of Interest Web Service</h2>\n            <p>What if we want to return all of the cities/points of interest? </p>\n            <pre class=\"font-16pt\"><code data-trim>http://example.com/pointsofinterest.php?city=all</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre class=\"font-16pt\"><code>{\n    \"Seattle\":\"Space Needle\",\n    \"New York\":\"Ellis Island\",\n    ...\n    \"San Franciso\":\"Fisherman's Warf\"\n}</code></pre>\n            <p class=\"code-caption\">JSON Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <p>Solution</p>\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n    if (isset($_GET[\"city\"])) {\n      $attractions = get_list();\n      $city = $_GET[\"city\"];\n\n      if (strcmp($city, \"all\") === 0) {\n        header(\"Content-type: application/json\");\n        print_r(json_encode($attractions));\n      }\n    }\n\n    function get_list() {\n      $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                           ...);\n    }\n?&gt;</code></pre>\n            <p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>\n\n        <section>\n          <p>\n            That's all great, but I don't want to have my PHP file get bloated\n            with the associative array. There has to be a better way to store this\n            information.\n          </p>\n          <p>\n            Besides, I'm still missing the images, and multiple Points of Interest per city!\n          </p>\n\n          <h2>Let's explore storing the data in a different way</h2>\n        </section>\n\n        <section>\n          <h1>PHP File I/O</h1>\n          <img class=\"half-width simpleimg\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c0/Spice_rack%2C_2014.jpg\" alt=\"spice rack\">\n          <p class=\"small-font\">From <a href=\"https://commons.wikimedia.org/wiki/File:Spice_rack,_2014.jpg\">Wikipedia</a></p>\n        </section>\n\n        <section>\n          <h2>PHP I/O Functions</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function name(s)</th>\n              <th>category</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.file.php\" target=\"_blank\">file</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-get-contents.php\" target=\"_blank\">file_get_contents</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-put-contents.php\" target=\"_blank\">file_put_contents</a>\n              </td>\n              <td>reading/writing entire files</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.basename.php\" target=\"_blank\">basename</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-exists.php\" target=\"_blank\">file_exists</a>,\n                <a href=\"https://www.php.net/manual/en/function.filesize.php\" target=\"_blank\">filesize</a>,\n                <a href=\"https://www.php.net/manual/en/function.fileperms.php\" target=\"_blank\">fileperms</a>,\n                <a href=\"https://www.php.net/manual/en/function.filemtime.php\" target=\"_blank\">filemtime</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-dir.php\" target=\"_blank\">is_dir</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-readable.php\" target=\"_blank\">is_readable</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-writable.php\" target=\"_blank\">is_writable</a>,\n                <a href=\"https://www.php.net/manual/en/function.disk-free-space.php\" target=\"_blank\">disk_free_space</a>\n              </td>\n              <td>asking for information</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.copy.php\" target=\"_blank\">copy</a>,\n                <a href=\"https://www.php.net/manual/en/function.rename.php\" target=\"_blank\">rename</a>,\n                <a href=\"https://www.php.net/manual/en/function.unlink.php\" target=\"_blank\">unlink</a>,\n                <a href=\"https://www.php.net/manual/en/function.chmod.php\" target=\"_blank\">chmod</a>,\n                <a href=\"https://www.php.net/manual/en/function.chgrp.php\" target=\"_blank\">chgrp</a>,\n                <a href=\"https://www.php.net/manual/en/function.chown.php\" target=\"_blank\">chown</a>,\n                <a href=\"https://www.php.net/manual/en/function.mkdir.php\" target=\"_blank\">mkdir</a>,\n                <a href=\"https://www.php.net/manual/en/function.rmdir.php\" target=\"_blank\">rmdir</a>\n              </td>\n              <td>manipulating files and directories</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.glob.php\" target=\"_blank\">glob</a>,\n                <a href=\"https://www.php.net/manual/en/function.scandir.php\" target=\"_blank\">scandir</a>\n              </td>\n              <td>reading directories</td>\n            </tr>\n          </table>\n\n        </section>\n\n      <style>\n      table.code-table tr td pre {\n      font-size: 16pt;\n      }</style>\n\n\n        <section>\n          <h2>Reading Files  - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th><strong>contents of foo.txt</strong></th>\n              <th><strong>file(\"foo.txt\")</strong></th>\n              <th><strong>file_get_contents(\"foo.txt\")</strong></th>\n            </tr>\n            <tr>\n              <td>\n                <pre>Hello\n  how r u?\n\n  I'm fine\n\n                </pre>\n              </td>\n              <td>\n                <pre>array(\"Hello\\n\", #0\n  \"how r u?\\n\",    #1\n  \"\\n\",            #2\n  \"I'm fine\\n\"     #3\n  )\n                </pre>\n              </td>\n              <td>\n                <pre>\"Hello\\n\n  how r u\\n    # a single\n  \\n           # string\n  I'm fine\\n\"\n                </pre>\n              </td>\n            </tr>\n          </table>\n          <p>\n            The <code>file</code> function returns lines of a file as an array (\\n at end of each).\n          </p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a single string.</p>\n          <p><code>file_put_contents</code> writes a string into a file.</p>\n        </section>\n\n\n        <section>\n          <h2>Sidebar: Default Parameter Values</h2>\n          <p>A quick note because you will see this in some of the PHP documentation</p>\n          <pre><code data-trim>function name(parameterName=value, ..., parameterName=value) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n      <pre><code data-trim>function print_separated($str, $separator=\", \") {\n  if (strlen($str) &lt; 0) {\n    echo $str[0];\n    for ($i = 1; $i &lt; strlen($str); $i++) {\n      echo $separator . $str[$i];\n    }\n  }\n}\nprint_separated(\"hello\");      # h, e, l, l, o\nprint_separated(\"hello\", \"-\"); # h-e-l-l-o</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>\n            If no value is passed, the default will be used (defaults must come last)\n          </p>\n        </section>\n\n\n        <section>\n          <h2>The <code>file</code> Function</h2>\n          <p><a href=\"https://www.php.net/manual/en/function.file.php\"><code>file</code></a>returns the lines of a file as an array of strings.</p>\n          <p>But each ends with \\n; to strip it, use an optional second parameter:</p>\n          <pre><code data-trim>$cities = file(\"cities.txt\");\nforeach ($cities as $city) { # for ($i = 0; $i &lt; count($cities); $i++)\n  echo $city;                # no newline needed here!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n  <pre><code data-trim>$lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);\nforeach ($cities as $city) {\n  echo \"{$city}\\n\";              # a newline is now needed!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Common idiom: foreach or for loop over lines of file</p>\n        </section>\n\n\n\n        <section>\n          <h2>Reading/Writing an Entire File</h2>\n          <pre><code data-trim># reverse a file\n$text = file_get_contents(\"poem.txt\");\n$text = strrev($text);\nfile_put_contents(\"poem.txt\", $text);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a string</p>\n          <ul>\n            <li>if the file doesn't exist, you will get a warning and an empty return string</li>\n          </ul>\n          <p><code>file_put_contents</code> writes a string into a file, <em>replacing its old\n            contents</em></p>\n          <ul>\n            <li>if the file doesn't exist, it will be created</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2>Appending to a File</h2>\n          <pre><code data-trim># add a new line to a file\n$new_text = \"P.S. ILY, GTG TTYL!~\";\nfile_put_contents(\"poem.txt\", $new_text, FILE_APPEND);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <table>\n            <tr>\n              <th><strong>old contents</strong></th>\n              <th><strong>new contents</strong></th>\n            </tr>\n            <tr>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n              </td>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n                P.S. ILY, GTG TTYL!~\n              </td>\n            </tr>\n          </table>\n          <p><code>file_put_contents</code> can be called with an optional third parameter to append\n          (add to\n          end) rather than overwrite.</p>\n        </section>\n\n\n            <section>\n              <h2>Splitting/Joining Strings</h2>\n              <pre><code data-trim>$arr = explode(delimiter, string);\n$str = implode(delimiter, array);</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>$s = \"CSE 154 A\";\n$a = explode(\" \", $s);     # (\"CSE\", \"154\", \"A\")\n$s2 = implode(\"...\", $a);  # \"CSE...154...A\"  </code></pre>\n              <p class=\"code-caption\">PHP (example)</p>\n              <p><code>explode</code> and <code>implode</code> convert between strings and arrays.</p>\n              <p>For more complex strings, you can use regular expressions.</p>\n            </section>\n\n            <section>\n              <h2>Example with <code>explode</code></h2>\n              <pre><code data-trim>Seattle, Space Needle\nNew York, Ellis Island\nBoston, Boston Harbor\nPhiladelphia, Valley Forge</code></pre>\n              <p class=\"code-caption\">contents of cities.txt</p>\n              <pre><code data-trim>foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) {\n  $tokens = explode(\",\", $city);\n  echo \"The best place to visit in \" . $tokens[0] .\n         \" is \" . $tokens[1] . \".\\n\";\n}</code></pre>\n              <p class=\"code-caption\">PHP</p>\n              <div class=\"output\">The best place to visit in Seattle is Space Needle.<br>\nThe best place to visit in New York is Ellis Island.<br>\nThe best place to visit in Boston is Boston Harbor.<br>\nThe best place to visit in Philadelphia is Valley Forge.\n              </div>\n              <p class=\"output-caption\">output</p>\n            </section>\n\n            <section>\n              <h2>Unpacking an array: <a href=\"https://www.w3schools.com/php/func_array_list.asp\" target=\"_blank\"><code>list</code></a></h2>\n             <p>The list function \"unpacks\" an array into a set of variables.</p>\n             <p>When you now a file or line's exact length/format, use file and list to unpack it</p>\n              <pre><code data-trim>list($var1, ..., $varN) = array;</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>Kyle Thayer\n(206) 154 2017\n17-154-0123</code></pre>\n              <p class=\"code-caption\">contents of personal.txt</p>\n              <pre><code data-trim>list($name, $phone, $ssn) = file(\"personal.txt\");\n...\nlist($area_code, $prefix, $suffix) = explode(\" \", $phone);  </code></pre>\n              <p class=\"code-caption\">PHP</p>\n            </section>\n\n\n        <section>\n          <h2>Reading Directories - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_glob.asp\" target=\"_blank\">glob</a></td>\n              <td>returns an array of all file names that match a given pattern\n              (returns a file path and name, such as \"foo/bar/myfile.txt\")</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_scandir.asp\" target=\"_blank\">scandir</a></td>\n              <td>\n                returns an array of all file names in a given directory\n                (returns just the file names, such as \"myfile.txt\")</td>\n            </tr>\n          </table>\n          <p>Can accept a general path with the * wildcard (more powerful).</p>\n        </section>\n\n        <section>\n          <h2>Example: Points of Interests in Files</h2>\n          <div class=\"side-by-side\">\n            <div>\n              <img class=\"simpleimg half-width\" src=\"hidden/citiesdirectory.png\" alt=\"directory structure for cities\">\n            </div>\n            <div>\n              <p>\n                Suppose we store information about each Point of Interest in a file\n                in a city subdirectory.\n              </p>\n              <p>The name of the file is the name of the Point of Interest</p>\n              <p>\n                Each file contains 2 lines\n              </p><p>\n              </p><ul>\n                <li>The URL of an image of the Point of Interest</li>\n                <li>The review of the Point of Interest</li>\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        <section>\n          <h2><code>glob</code> Example</h2>\n          <pre><code data-trim># Get all of the information from the cities\n$cities = glob(\"cities/*/*\");\nforeach ($cities as $city) {\n  $text = file_get_contents($city);\n  echo (basename($city) . \" : \" . $text . \"\\n\");\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>glob can match a wildcard path with the * character</p>\n          <ul>\n            <li><code>glob(\"foo/bar/*.doc\")</code> returns all .doc files in the foo/bar\n              subdirectory</li>\n            <li><code>glob(\"food*\")</code> returns all files whose names begin with \"food\"</li>\n          </ul>\n          <p>The <code>basename</code> function strips any leading directory from a file path</p>\n          <ul>\n            <li><code>basename(\"foo/bar/baz.txt\")</code> returns \"baz.txt\"</li>\n          </ul>\n        </section>\n\n        <section>\n          <h2><code>scandir</code> Example</h2>\n          <pre><code data-trim>foreach (scandir(\"cities/\") as $city) {\n  echo \"I found a city: {$city}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <div class=\"output\">\n            <p>I found a city: .</p>\n            <p>I found a city: ..</p>\n            <p>I found a city: Ann_Arbor</p>\n            <p>I found a city: Beijing</p>\n            <p>...</p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p><code>scandir</code> includes current directory (\".\") and parent (\"..\") in the array.</p>\n          <p>Don't need <code>basename</code> with <code>scandir</code>; returns file names only\n          without directory</p>\n        </section>\n\n\n        <section>\n          <h2>Putting it all together: File Based Points of Interest</h2>\n          <p>\n            The <a href=\"examples/pointsofinterest.zip\">pointsofinterest.zip</a> example\n            has been put together for you to look explore (note that it is not yet finished, and\n            also could use some refactoring to meet the Code Quality Guide!)\n          </p>\n        </section>\n\n        <section>\n          <h1>Code Quality in a Web Service</h1>\n          <p>Where did you see adherence to the similar code quality guidlines as for JS? </p>\n          <p>What was similar?</p>\n          <p>What was different?</p>\n        </section>\n\n\n\n        <!-- end of slides (last section tag) -->\n      </div>\n    </section>", "text": "JSONtest HTML <body><header> <h1>JSON Test</h1></header><section> <button id=\"test-btn\">Get JSON data.</button> <h2>Response</h2> <p id=\"response\"></p></section></body> HTML JSONtest Fetch load data handler function loadData(data) { let response = id(\"response\"); response.innerText = data[\"name\"] + \"'s Hobbies\"; let ul = document.createElement(\"ul\"); response.appendChild(ul); for(let i = 0; i < data[\"hobbies\"].length; i++) { let li = document.createElement(\"li\"); li.innerText = data[\"hobbies\"][i]; ul.appendChild(li); }} JS Reminder: Setting Content Type with header header(\"Content-type: type/subtype\"); PHP (template) Most of the time we'll use header(\"Content-type: text/plain\"); or header(\"Content-type: application/json\"); Also remember that in error cases we want to send back the Invalid Request header header(\"HTTP/1.1 400 Invalid Request\"); Remember that you can not print or echo before a header statement but it doesn't have to be the first line of code. Helpful Slides from Tuesday's section on what header information in the Network's tab for Text and HTML look like are here, look below for \"application/json\" Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as application/json and the JSONs in the response Building a simple service that returns JSON Try using the following steps in jsontest.php Create an array and assign it to a variable ($output = array() for example ) Gather your data in the associative array ($output) with the key/value pairs you want to return in your JSON object Use json_encode($output) to \"stringify\" your associative array into a JSON formatted string. Ensure you have set your header correctly before you print anything! (e.g. header(\"Content-Type: application/json\");) Print the JSON formatted string! NOTE: we can also use json_decode to convert JSON strings into PHP arrays. Example: JSONtest server code <?php header(\"Content-Type: application/json\"); $output = array(); $output[\"name\"] = \"Miranda\"; $output[\"hobbies\"] = array(\"pottery\", \"softball\", \"cycling\", \"watching youtube\"); print(json_encode($output));?> Produces: { \"name\":\"Miranda\", \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]} PHP Now let's build a web service New case study: Points Of Interest <backstory> It's week 7 and I'm ready for a vacation, but I can't decide where to go. So I want a tool that will randomly pick from a list of \"Points of Interests\" (vacation spots) and give me some guidance. I know I have already built the randomizer and JSONTest - so I want something similar... </backstory> To start we will use a modified version of JSONtest as a prototype Sample code Step 1: Define the API Let's first determine how the users will interact with the API. Questions we can ask might be: What data might a user need? What might be the easiest format for the user to use this data in? For Points of Interest we're looking for: A city that one might want to travel to A list of Points of Interest (sites) for that city, including for each: The name of the site An image of the site A review of the site Example: Points of Interest sample output The general format of the response could look like this for all of our cities: { \"cities\" : [ { \"name\": \"Seattle\", \"sites\": [ { \"name\": \"Space Needle\", \"image\": \"....\", \"review\": \".... \" } ] }, { \"name\": \"New York\", \"sites\": [ { \"name\": \"Ellis Island\", \"image\": \"....\", \"review\": \".... \" }, { \"name\": \"Statue of Liberty\", \"image\": \"....\", \"review\": \".... \" } ] } ... ]} JSON Step 2: Determine how to view the data Given the information we may store in the server, how might we want to view it? Is the data simple enough to return as plain text (so the end user doesn't have to split to view different parts)? Where might I need more structured information that requires responding with JSON encoded data? What \"filters\" might I want on that data? Do I want all of it? Some of it? Just one at a time? Example: Points of Interest requests For our Points of Interest API we want three types of data: All of the cities we have with at least one point of interest each. (city=all) A random city with the point of interest(s) for that city (city=random) The Point(s) of Interest for a city that is specified by the user (city={cityname}) For each Point of Interest we want: The name (e.g. Space Needle) An image A review Step 3: Write your server code to handle the requests Think of the conditionals you need to handle your request Remember to check if the $_GET and $_POST indices for those requests are set (using isset), and handle the error correctly if not. You can use conditional statements to figure out which query parameter to handle. Remember to be careful about using $_GET vs $_POST where needed (for now we're using $_GET). Oh and don't forget to handle other error cases as well. Put the correct headers in each part of the conditional... then look to see if there is any refactoring you can do! Step 4: Write code to handle each request type How will your data be stored on the server? How will you convert the data into the right format for sending back to the caller? Example: Points of Interest Web Service, simple version Write a simple web service that accepts a city and outputs an attraction that you should visit in that city http://example.com/pointsofinterest.php?city=Seattle GET request The best place to visit in Seattle is Space Needle. Output See below for sample code Solution <?php header(\"Content-type: text/plain\"); if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; echo \"The best place to visit in \" . $city . \" is \" . $attractions[$city] . \".\\n\"; } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", \"New York\" => \"Ellis Island\", ... \"London\" => \"Big Ben\"); }?> PHP \t\t\t\t Example: Points of Interest Web Service What if we want to return all of the cities/points of interest? http://example.com/pointsofinterest.php?city=all GET request { \"Seattle\":\"Space Needle\", \"New York\":\"Ellis Island\", ... \"San Franciso\":\"Fisherman's Warf\"} JSON Output See below for sample code Solution <?php if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; if (strcmp($city, \"all\") === 0) { header(\"Content-type: application/json\"); print_r(json_encode($attractions)); } } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", ...); }?> PHP \t\t\t\t That's all great, but I don't want to have my PHP file get bloated with the associative array. There has to be a better way to store this information. Besides, I'm still missing the images, and multiple Points of Interest per city! Let's explore storing the data in a different way PHP File I/O From Wikipedia PHP I/O Functions function name(s) category file, file_get_contents, file_put_contents reading/writing entire files basename, file_exists, filesize, fileperms, filemtime, is_dir, is_readable, is_writable, disk_free_space asking for information copy, rename, unlink, chmod, chgrp, chown, mkdir, rmdir manipulating files and directories glob, scandir reading directories table.code-table tr td pre { font-size: 16pt; } Reading Files - IMPORTANT SLIDE! contents of foo.txt file(\"foo.txt\") file_get_contents(\"foo.txt\") Hello how r u? I'm fine array(\"Hello\\n\", #0 \"how r u?\\n\", #1 \"\\n\", #2 \"I'm fine\\n\" #3 ) \"Hello\\n how r u\\n # a single \\n # string I'm fine\\n\" The file function returns lines of a file as an array (\\n at end of each). file_get_contents returns entire contents of a file as a single string. file_put_contents writes a string into a file. Sidebar: Default Parameter Values A quick note because you will see this in some of the PHP documentation function name(parameterName=value, ..., parameterName=value) { statements;} PHP (template) function print_separated($str, $separator=\", \") { if (strlen($str) < 0) { echo $str[0]; for ($i = 1; $i < strlen($str); $i++) { echo $separator . $str[$i]; } }}print_separated(\"hello\"); # h, e, l, l, oprint_separated(\"hello\", \"-\"); # h-e-l-l-o PHP (example) If no value is passed, the default will be used (defaults must come last) The file Function filereturns the lines of a file as an array of strings. But each ends with \\n; to strip it, use an optional second parameter: $cities = file(\"cities.txt\");foreach ($cities as $city) { # for ($i = 0; $i < count($cities); $i++) echo $city; # no newline needed here!} PHP $lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);foreach ($cities as $city) { echo \"{$city}\\n\"; # a newline is now needed!} PHP Common idiom: foreach or for loop over lines of file Reading/Writing an Entire File # reverse a file$text = file_get_contents(\"poem.txt\");$text = strrev($text);file_put_contents(\"poem.txt\", $text); PHP file_get_contents returns entire contents of a file as a string if the file doesn't exist, you will get a warning and an empty return string file_put_contents writes a string into a file, replacing its old contents if the file doesn't exist, it will be created Appending to a File # add a new line to a file$new_text = \"P.S. ILY, GTG TTYL!~\";file_put_contents(\"poem.txt\", $new_text, FILE_APPEND); PHP old contents new contents Roses are red Violets are blue All my base Are belong to you. Roses are red Violets are blue All my base Are belong to you. P.S. ILY, GTG TTYL!~ file_put_contents can be called with an optional third parameter to append (add to end) rather than overwrite. Splitting/Joining Strings $arr = explode(delimiter, string);$str = implode(delimiter, array); PHP (template) $s = \"CSE 154 A\";$a = explode(\" \", $s); # (\"CSE\", \"154\", \"A\")$s2 = implode(\"...\", $a); # \"CSE...154...A\" PHP (example) explode and implode convert between strings and arrays. For more complex strings, you can use regular expressions. Example with explode Seattle, Space NeedleNew York, Ellis IslandBoston, Boston HarborPhiladelphia, Valley Forge contents of cities.txt foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) { $tokens = explode(\",\", $city); echo \"The best place to visit in \" . $tokens[0] . \" is \" . $tokens[1] . \".\\n\";} PHP The best place to visit in Seattle is Space Needle.The best place to visit in New York is Ellis Island.The best place to visit in Boston is Boston Harbor.The best place to visit in Philadelphia is Valley Forge. output Unpacking an array: list The list function \"unpacks\" an array into a set of variables. When you now a file or line's exact length/format, use file and list to unpack it list($var1, ..., $varN) = array; PHP (template) Kyle Thayer(206) 154 201717-154-0123 contents of personal.txt list($name, $phone, $ssn) = file(\"personal.txt\");...list($area_code, $prefix, $suffix) = explode(\" \", $phone); PHP Reading Directories - IMPORTANT SLIDE! function description glob returns an array of all file names that match a given pattern (returns a file path and name, such as \"foo/bar/myfile.txt\") scandir returns an array of all file names in a given directory (returns just the file names, such as \"myfile.txt\") Can accept a general path with the * wildcard (more powerful). Example: Points of Interests in Files Suppose we store information about each Point of Interest in a file in a city subdirectory. The name of the file is the name of the Point of Interest Each file contains 2 lines The URL of an image of the Point of Interest The review of the Point of Interest glob Example # Get all of the information from the cities$cities = glob(\"cities/*/*\");foreach ($cities as $city) { $text = file_get_contents($city); echo (basename($city) . \" : \" . $text . \"\\n\");} PHP glob can match a wildcard path with the * character glob(\"foo/bar/*.doc\") returns all .doc files in the foo/bar subdirectory glob(\"food*\") returns all files whose names begin with \"food\" The basename function strips any leading directory from a file path basename(\"foo/bar/baz.txt\") returns \"baz.txt\" scandir Example foreach (scandir(\"cities/\") as $city) { echo \"I found a city: {$city}\\n\";} PHP I found a city: . I found a city: .. I found a city: Ann_Arbor I found a city: Beijing ... output scandir includes current directory (\".\") and parent (\"..\") in the array. Don't need basename with scandir; returns file names only without directory Putting it all together: File Based Points of Interest The pointsofinterest.zip example has been put together for you to look explore (note that it is not yet finished, and also could use some refactoring to meet the Code Quality Guide!) Code Quality in a Web Service Where did you see adherence to the similar code quality guidlines as for JS? What was similar? What was different?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>JSONtest Fetch load data handler</h2>\n              <pre><code>function loadData(data) {\n  let response = id(\"response\");\n  response.innerText = data[\"name\"] + \"'s Hobbies\";\n  let ul = document.createElement(\"ul\");\n  response.appendChild(ul);\n  for(let i = 0; i &lt; data[\"hobbies\"].length; i++) {\n    let li = document.createElement(\"li\");\n    li.innerText = data[\"hobbies\"][i];\n    ul.appendChild(li);\n  }\n}</code></pre>\n             <p class=\"code-caption\">JS</p>\n            </section>", "text": "JSONtest Fetch load data handler function loadData(data) { let response = id(\"response\"); response.innerText = data[\"name\"] + \"'s Hobbies\"; let ul = document.createElement(\"ul\"); response.appendChild(ul); for(let i = 0; i < data[\"hobbies\"].length; i++) { let li = document.createElement(\"li\"); li.innerText = data[\"hobbies\"][i]; ul.appendChild(li); }} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <section>\n              <h2>Reminder: Setting Content Type with <code>header</code></h2>\n              <pre><code data-trim>header(\"Content-type: type/subtype\");</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <p>\n                Most of the time we'll use\n                <code>header(\"Content-type: text/plain\");</code> or\n                <code>header(\"Content-type: application/json\");</code>\n\n              </p>\n              <p>\n                Also remember that in error cases we want to send back the Invalid Request header\n                <code>header(\"HTTP/1.1 400 Invalid Request\");</code>\n              </p>\n              <p>\n                Remember that you can not <code>print</code> or <code>echo</code> before a header\n                statement but it doesn't have to be the first line of code.\n              </p>\n              <p>Helpful Slides from Tuesday's section on what header information in the Network's tab\n                for Text and HTML look like are\n                <a href=\"../../sections/week07-tues/slides/#/4/5\" target=\"_blank\">here</a>,\n              look below for \"application/json\"</p>\n            </section>\n\n            <section>\n              <h2>Inspecting Header Information in Networks Tab</h2>\n              <img src=\"hidden/hello-json.png\" class=\"w-80 centered-figure\">\n              <p>This example shows the result of setting Content-Type as application/json</p>\n              <img src=\"hidden/hello-json-response.png\" class=\"w-80 centered-figure\">\n              <p>and the JSONs in the response</p>\n            </section>\n          </section>", "text": "Reminder: Setting Content Type with header header(\"Content-type: type/subtype\"); PHP (template) Most of the time we'll use header(\"Content-type: text/plain\"); or header(\"Content-type: application/json\"); Also remember that in error cases we want to send back the Invalid Request header header(\"HTTP/1.1 400 Invalid Request\"); Remember that you can not print or echo before a header statement but it doesn't have to be the first line of code. Helpful Slides from Tuesday's section on what header information in the Network's tab for Text and HTML look like are here, look below for \"application/json\" Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as application/json and the JSONs in the response", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Lecture 20: More File I/O with scandir and glob</h3>\n        </section>", "text": "CSE 154 Lecture 20: More File I/O with scandir and glob", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Agenda</h2>\n          <p>PHP Web Services with File I/O</p><p>\n          </p><p>Building and using a PHP JSON API</p>\n        </section>", "text": "Agenda PHP Web Services with File I/O Building and using a PHP JSON API", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Q&amp;A</h2>\n          <p>Q: What is the one thing that PHP does well that JavaScript isn't well known for?</p>\n          <p class=\"fragment\">File processing</p>\n          <p>Q: From the client perspective, what is an advantage of JSON over plain text?</p>\n          <p class=\"fragment\">Easier to parse structured data, less error prone than using/managing plain text</p>\n        </section>", "text": "Q&A Q: What is the one thing that PHP does well that JavaScript isn't well known for? File processing Q: From the client perspective, what is an advantage of JSON over plain text? Easier to parse structured data, less error prone than using/managing plain text", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Getting information from a file</h2>\n          <p>Recall: What are the functions to do PHP file I/O?</p>\n       </section>", "text": "Getting information from a file Recall: What are the functions to do PHP file I/O?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n         <h2>PHP I/O Functions</h2>\n         <table class=\"code-table\">\n           <tr>\n             <th>function name(s)</th>\n             <th>category</th>\n           </tr>\n           <tr>\n             <td>\n               <a href=\"https://www.php.net/manual/en/function.file.php\" target=\"_blank\">file</a>,\n               <a href=\"https://www.php.net/manual/en/function.file-get-contents.php\" target=\"_blank\">file_get_contents</a>,\n               <a href=\"https://www.php.net/manual/en/function.file-put-contents.php\" target=\"_blank\">file_put_contents</a>\n             </td>\n             <td>reading/writing entire files</td>\n           </tr>\n           <tr>\n             <td>\n               <a href=\"https://www.php.net/manual/en/function.basename.php\" target=\"_blank\">basename</a>,\n               <a href=\"https://www.php.net/manual/en/function.file-exists.php\" target=\"_blank\">file_exists</a>,\n               <a href=\"https://www.php.net/manual/en/function.filesize.php\" target=\"_blank\">filesize</a>,\n               <a href=\"https://www.php.net/manual/en/function.fileperms.php\" target=\"_blank\">fileperms</a>,\n               <a href=\"https://www.php.net/manual/en/function.filemtime.php\" target=\"_blank\">filemtime</a>,\n               <a href=\"https://www.php.net/manual/en/function.is-dir.php\" target=\"_blank\">is_dir</a>,\n               <a href=\"https://www.php.net/manual/en/function.is-readable.php\" target=\"_blank\">is_readable</a>,\n               <a href=\"https://www.php.net/manual/en/function.is-writable.php\" target=\"_blank\">is_writable</a>,\n               <a href=\"https://www.php.net/manual/en/function.disk-free-space.php\" target=\"_blank\">disk_free_space</a>\n             </td>\n             <td>asking for information</td>\n           </tr>\n           <tr>\n             <td>\n               <a href=\"https://www.php.net/manual/en/function.copy.php\" target=\"_blank\">copy</a>,\n               <a href=\"https://www.php.net/manual/en/function.rename.php\" target=\"_blank\">rename</a>,\n               <a href=\"https://www.php.net/manual/en/function.unlink.php\" target=\"_blank\">unlink</a>,\n               <a href=\"https://www.php.net/manual/en/function.chmod.php\" target=\"_blank\">chmod</a>,\n               <a href=\"https://www.php.net/manual/en/function.chgrp.php\" target=\"_blank\">chgrp</a>,\n               <a href=\"https://www.php.net/manual/en/function.chown.php\" target=\"_blank\">chown</a>,\n               <a href=\"https://www.php.net/manual/en/function.mkdir.php\" target=\"_blank\">mkdir</a>,\n               <a href=\"https://www.php.net/manual/en/function.rmdir.php\" target=\"_blank\">rmdir</a>\n             </td>\n             <td>manipulating files and directories</td>\n           </tr>\n           <tr>\n             <td>\n               <a href=\"https://www.php.net/manual/en/function.glob.php\" target=\"_blank\">glob</a>,\n               <a href=\"https://www.php.net/manual/en/function.scandir.php\" target=\"_blank\">scandir</a>\n             </td>\n             <td>reading directories</td>\n           </tr>\n         </table>\n       </section>", "text": "PHP I/O Functions function name(s) category file, file_get_contents, file_put_contents reading/writing entire files basename, file_exists, filesize, fileperms, filemtime, is_dir, is_readable, is_writable, disk_free_space asking for information copy, rename, unlink, chmod, chgrp, chown, mkdir, rmdir manipulating files and directories glob, scandir reading directories", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Returning to the Points of Interest Web Service</h2>\n          <p>\n            For our Points of Interest API on Wednesday (<code>pointsofinterest.php</code>), we had the goal of supporting 3 different GET requests:\n          </p>\n          <ul>\n            <li>All of the cities we have with at least one point of interest each. (city=all)</li>\n            <li>The Point(s) of Interest for a city that is specified by the user (city={cityname})</li>\n            <li>The POI for a random city (city=random)</li>\n          </ul>\n        </section>", "text": "Returning to the Points of Interest Web Service For our Points of Interest API on Wednesday (pointsofinterest.php), we had the goal of supporting 3 different GET requests: All of the cities we have with at least one point of interest each. (city=all) The Point(s) of Interest for a city that is specified by the user (city={cityname}) The POI for a random city (city=random)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Getting City/POI Associations</h2>\n         <p>\n            Each requires a way to associate city names and their Points of Interest.\n            We use 2 methods to create these associative arrays:\n          </p>\n          <ol>\n            <li>V1: <code>get_list()</code> hard-code the <code>$attractions</code> array.</li>\n            <li>V2: <code>get_list_from_file()</code> used file processing to read cities.txt and create the <code>$attractions</code> array.</li>\n\n           </ol>\n\n        </section>", "text": "Getting City/POI Associations Each requires a way to associate city names and their Points of Interest. We use 2 methods to create these associative arrays: V1: get_list() hard-code the $attractions array. V2: get_list_from_file() used file processing to read cities.txt and create the $attractions array.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n            <h2>Initial (V1) Solution (with <code>get_list()</code>)</h2>\n            <pre><code class=\"hljs font-16pt\" data-trim>function get_list() {\n  $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                       \"New York\" =&gt; \"Ellis Island\",\n                       \"Boston\" =&gt; \"Boston Harbor\",\n                       \"Philadelphia\" =&gt; \"Valley Forge\",\n                       \"Detroit\" =&gt; \"The Henry Ford Museum\",\n                       \"Paris\" =&gt; \"Eiffel Tower\",\n                       \"Vancouver BC\" =&gt; \"Stanley Park\",\n                       \"Tokyo\" =&gt; \"Mt. Fuji\",\n                       \"Beijing\" =&gt; \"Great Wall\",\n                       \"London\" =&gt; \"Big Ben\");\n return $attractions;\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Initial (V1) Solution (with get_list()) function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", \"New York\" => \"Ellis Island\", \"Boston\" => \"Boston Harbor\", \"Philadelphia\" => \"Valley Forge\", \"Detroit\" => \"The Henry Ford Museum\", \"Paris\" => \"Eiffel Tower\", \"Vancouver BC\" => \"Stanley Park\", \"Tokyo\" => \"Mt. Fuji\", \"Beijing\" => \"Great Wall\", \"London\" => \"Big Ben\"); return $attractions;} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h3>V2 Solution File I/O (<code>get_list_from_file()</code>)</h3>\n          <p>\n            We used file processing to generalize our <code>get_list()</code> function\n            to generate the associative array based on the contents in our <code>cities.txt</code>:\n          </p>\n          <div class=\"side-by-side\">\n\n        <div style=\"width: 34%\">\n        <pre><code class=\"no-syntax-highlight font-12pt\">Seattle, Space Needle\nNew York, Ellis Island\nBoston, Boston Harbor\nPhiladelphia, Valley Forge\nDetroit, The Henry Ford Museum\nParis, Eiffel Tower\n...\nBeijing, Great Wall\nLondon, Big Ben</code></pre>\n      <p class=\"code-caption\">cities.txt</p>\n      </div>\n      <div style=\"width: 65%\">\n    <pre><code class=\"hljs font-12pt\">function get_list_from_file() {\n  $contents = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);\n  $attractions = array();\n  foreach ($contents as $line) {\n    $parts = explode(\",\", $line);\n    $city = $parts[0];\n    $attraction = $parts[1];\n\n    # could also do:\n    # list($city, $attraction) = explode(\",\", $line);\n\n    # e.g. { \"Seattle\" =&gt; \"Space Needle\" }\n    $attractions[$city] = $attraction;\n  }\n  return $attractions;\n}</code></pre>\n<p class=\"code-caption\">PHP</p>\n  </div>\n    </div>\n        </section>", "text": "V2 Solution File I/O (get_list_from_file()) We used file processing to generalize our get_list() function to generate the associative array based on the contents in our cities.txt: Seattle, Space NeedleNew York, Ellis IslandBoston, Boston HarborPhiladelphia, Valley ForgeDetroit, The Henry Ford MuseumParis, Eiffel Tower...Beijing, Great WallLondon, Big Ben cities.txt function get_list_from_file() { $contents = file(\"cities.txt\", FILE_IGNORE_NEW_LINES); $attractions = array(); foreach ($contents as $line) { $parts = explode(\",\", $line); $city = $parts[0]; $attraction = $parts[1]; # could also do: # list($city, $attraction) = explode(\",\", $line); # e.g. { \"Seattle\" => \"Space Needle\" } $attractions[$city] = $attraction; } return $attractions;}PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2><code>city={cityname}</code> (text)</h2>\n        <pre><code data-trim>http://example.com/pointsofinterest.php?city=Seattle</code></pre>\n        <p class=\"code-caption\">GET request</p>\n        <pre><code class=\"no-syntax-highlight\">The best place to visit in Seattle is Space Needle.</code></pre>\n        <p class=\"code-caption\">Output</p>\n      </section>", "text": "city={cityname} (text) http://example.com/pointsofinterest.php?city=Seattle GET request The best place to visit in Seattle is Space Needle. Output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>A Start to <code>city=all</code> (JSON)</h2>\n          <pre><code class=\"no-syntax-highlight\">{\n    \"Seattle\": \" Space Needle\",\n    \"New York\": \" Ellis Island\",\n    \"Boston\": \" Boston Harbor\",\n    \"Philadelphia\": \" Valley Forge\",\n    \"Detroit\": \" The Henry Ford Museum\",\n    \"Paris\": \" Eiffel Tower\",\n    \"Vancouver BC\": \" Stanley Park\",\n    \"Tokyo\": \" Mt. Fuji\",\n    \"San Francisco\": \" Fisherman's Terminal\",\n    \"Beijing\": \" Great Wall\",\n    \"London\": \" Big Ben\"\n}</code></pre>\n<p class=\"code-caption\">JSON</p>\n        </section>", "text": "A Start to city=all (JSON) { \"Seattle\": \" Space Needle\", \"New York\": \" Ellis Island\", \"Boston\": \" Boston Harbor\", \"Philadelphia\": \" Valley Forge\", \"Detroit\": \" The Henry Ford Museum\", \"Paris\": \" Eiffel Tower\", \"Vancouver BC\": \" Stanley Park\", \"Tokyo\": \" Mt. Fuji\", \"San Francisco\": \" Fisherman's Terminal\", \"Beijing\": \" Great Wall\", \"London\": \" Big Ben\"}JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Adding More Information with Directory Processing</h2>\n\n          <p>\n            For both solutions, we left off with each value of the array being the name of the site.\n            But how can we add more information for each site?\n          </p>\n          <p>Recall that for each POI in a city, we eventually wanted:</p>\n          <ul>\n            <li>The name (e.g. Space Needle)</li>\n            <li>An image</li>\n            <li>A review</li>\n          </ul>\n        </section>", "text": "Adding More Information with Directory Processing For both solutions, we left off with each value of the array being the name of the site. But how can we add more information for each site? Recall that for each POI in a city, we eventually wanted: The name (e.g. Space Needle) An image A review", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section id=\"json-v3\">\n          <h2>Adding More to our JSON Response</h2>\n          <div class=\"side-by-side\">\n            <div>\n            <p>A general (improved) JSON format of the <code>pointsofinterest.php?city=all</code> request:</p>\n          <p class=\"fragment\">This information is much more nicely structured with JSON! But we don't have the image/review information from cities.txt...</p>\n            </div>\n            <div>\n                <pre class=\"font-12pt\"><code>{\n    \"cities\" : [\n      {\n        \"name\": \"Seattle\",\n        \"sites\": [\n          {\n            \"name\": \"Space Needle\",\n            \"image\": \"....\",\n            \"review\": \".... \"\n          }\n        ]\n      },\n      {\n        \"name\": \"New York\",\n        \"sites\": [\n          {\n            \"name\": \"Ellis Island\",\n            \"image\": \"....\",\n            \"review\": \".... \"\n          },\n          {\n            \"name\": \"Statue of Liberty\",\n            \"image\": \"....\",\n            \"review\": \".... \"\n          }\n        ]\n      }\n      ...\n    ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n            </div>\n          </div>\n\n        </section>", "text": "Adding More to our JSON Response A general (improved) JSON format of the pointsofinterest.php?city=all request: This information is much more nicely structured with JSON! But we don't have the image/review information from cities.txt... { \"cities\" : [ { \"name\": \"Seattle\", \"sites\": [ { \"name\": \"Space Needle\", \"image\": \"....\", \"review\": \".... \" } ] }, { \"name\": \"New York\", \"sites\": [ { \"name\": \"Ellis Island\", \"image\": \"....\", \"review\": \".... \" }, { \"name\": \"Statue of Liberty\", \"image\": \"....\", \"review\": \".... \" } ] } ... ]} JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h1>Reading From Directories</h1>\n        </section>", "text": "Reading From Directories", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Getting information from a directory</h2>\n          <p>\n            From Yesterday: What are the PHP functions that can get information from directories\n            on the server?\n          </p>\n          <div class=\"fragment\">\n\n            <table class=\"code-table\">\n              <tr>\n                <th>function</th>\n                <th>description</th>\n              </tr>\n              <tr>\n                <td><a href=\"https://www.w3schools.com/php/func_filesystem_glob.asp\" target=\"_blank\">glob</a></td>\n                <td>returns an array of all file names that match a given pattern\n                (returns a file path and name, such as \"foo/bar/myfile.txt\")</td>\n              </tr>\n              <tr>\n                <td><a href=\"https://www.w3schools.com/php/func_filesystem_scandir.asp\" target=\"_blank\">scandir</a></td>\n                <td>\n                  returns an array of all file names in a given directory\n                  (returns just the file names, such as \"myfile.txt\")</td>\n              </tr>\n            </table>\n          </div>\n        </section>", "text": "Getting information from a directory From Yesterday: What are the PHP functions that can get information from directories on the server? function description glob returns an array of all file names that match a given pattern (returns a file path and name, such as \"foo/bar/myfile.txt\") scandir returns an array of all file names in a given directory (returns just the file names, such as \"myfile.txt\")", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Motivation: A (V3) Directory-based POI Web Service</h2>\n          <div class=\"side-by-side\">\n            <div>\n              <img class=\"simpleimg half-width\" src=\"hidden/citiesdirectory.png\" alt=\"directory structure for cities\">\n            </div>\n            <div>\n              <p>\n                Suppose we store information about each Point of Interest in a file\n                in a city subdirectory.\n              </p>\n              <p>The name of the file is the name of the Point of Interest (e.g. \"Space_Needle.txt\")</p>\n              <p>\n                Each file contains 2 lines:\n              </p><p>\n              </p><ul>\n                <li>The absolute URL of an image of the Point of Interest</li>\n                <li>A review of the Point of Interest</li>\n              </ul>\n            </div>\n          </div>\n        </section>", "text": "Motivation: A (V3) Directory-based POI Web Service Suppose we store information about each Point of Interest in a file in a city subdirectory. The name of the file is the name of the Point of Interest (e.g. \"Space_Needle.txt\") Each file contains 2 lines: The absolute URL of an image of the Point of Interest A review of the Point of Interest", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h3><code>glob</code> vs. <code>scandir</code> Exercise: City Names</h3>\n          <p>How would you get an array of all city directory names?</p>\n          <div class=\"side-by-side r-1-3\">\n             <img src=\"hidden/citiesdirectory.png\" alt=\"directory structure for cities\">\n             <div class=\"fragment\">\n            <pre><code class=\"font-14pt\">$all_folders = scandir(\"cities/\");\n$cities = array_diff($all_folders, array(\".\", \"..\"));</code></pre>\n  <p>Or alternatively...</p>\n  <pre><code class=\"font-14pt\">$full_paths = glob(\"cities/*\");\n$cities = array();\nforeach ($full_paths as $path) {\n  array_push($cities, basename($path));\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n             </div>\n          </div>\n        </section>", "text": "glob vs. scandir Exercise: City Names How would you get an array of all city directory names? $all_folders = scandir(\"cities/\");$cities = array_diff($all_folders, array(\".\", \"..\")); Or alternatively... $full_paths = glob(\"cities/*\");$cities = array();foreach ($full_paths as $path) { array_push($cities, basename($path));} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Extracting POI File Contents</h2>\n          <p>How could you get the name, image url, and review (as an associative array) for\n          a path to a POI file? \n        </p>\n        <p>Example: for <code class=\"font-14pt\">\"cities/Seattle/Space_Needle\"</code>, return\n        <br>\n        <code class=\"font-14pt\">{\"name\":\"Space Needle\", \"image\":\"...\", \"review\":\"...\" }</code>\n          (abbreviated)\n          </p>\n          <div class=\"fragment\">\n            <pre><code class=\"font-12pt\">function get_info_from_file($file_path) {\n  # Remember you can use list to assign variables quickly when you know\n  # how many parts there are in an array (each POI file has two lines)\n  list($image, $review) = file($file_path, FILE_IGNORE_NEW_LINES);\n\n  # e.g. get \"Space Needle\" from \n  # \"cities/Seattle/Space_Needle\" POI file path\n  $name = str_replace(\"_\", \" \", basename($file_path));\n  return array(\"name\" =&gt; $name,\n               \"image\" =&gt; $image,\n               \"review\" =&gt; $review);\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </div>\n\n        </section>", "text": "Extracting POI File Contents How could you get the name, image url, and review (as an associative array) for a path to a POI file? Example: for \"cities/Seattle/Space_Needle\", return {\"name\":\"Space Needle\", \"image\":\"...\", \"review\":\"...\" } (abbreviated) function get_info_from_file($file_path) { # Remember you can use list to assign variables quickly when you know # how many parts there are in an array (each POI file has two lines) list($image, $review) = file($file_path, FILE_IGNORE_NEW_LINES); # e.g. get \"Space Needle\" from # \"cities/Seattle/Space_Needle\" POI file path $name = str_replace(\"_\", \" \", basename($file_path)); return array(\"name\" => $name, \"image\" => $image, \"review\" => $review);} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>Putting it All Together: V3</h2>\n          <pre class=\"h450px\"><code class=\"font-12pt\">function get_all_data() {\n  /* Get all of the cities in the cities directory */\n  $cities = glob(\"cities/*\");\n  $output = array();\n  foreach ($cities as $city) {\n\n    // Now get the POIs for each city (here, $city still has the full file path)\n    $poi_files = glob($city . \"/*\");\n    $pois = array();\n    foreach ($poi_files as $poi_file) {\n      // From the previous slide!\n      $poi_data = get_info_from_file($poi_file);\n      array_push($pois, $poi_data);\n    }\n\n    // Create the associative array for the city with the city name and its POI sites. \n    $city_info = array();\n    $city_info[\"name\"] = str_replace(\"_\", \" \", basename($city));\n    $city_info[\"sites\"] = $pois;\n\n    // Add this city data to our output array\n    array_push($output, $city_info);\n  }\n\n  /* Final step!!! Don't forget the last association for our JSON!!! */\n  return array(\"cities\" =&gt; $output);\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>This version gives us the <a href=\"#/json-v3\">JSON we wanted</a>!</p>\n        </section>", "text": "Putting it All Together: V3 function get_all_data() { /* Get all of the cities in the cities directory */ $cities = glob(\"cities/*\"); $output = array(); foreach ($cities as $city) { // Now get the POIs for each city (here, $city still has the full file path) $poi_files = glob($city . \"/*\"); $pois = array(); foreach ($poi_files as $poi_file) { // From the previous slide! $poi_data = get_info_from_file($poi_file); array_push($pois, $poi_data); } // Create the associative array for the city with the city name and its POI sites. $city_info = array(); $city_info[\"name\"] = str_replace(\"_\", \" \", basename($city)); $city_info[\"sites\"] = $pois; // Add this city data to our output array array_push($output, $city_info); } /* Final step!!! Don't forget the last association for our JSON!!! */ return array(\"cities\" => $output);} PHP This version gives us the JSON we wanted!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h2>A Directory-Based POI Service (V3): <code>poi-v3.php</code></h2>\n          <p>\n            A complete <a href=\"examples/pointsofinterest.zip\">pointsofinterest.zip</a> example,\n            including our front-end using the web service previewed on Wednesday!\n          </p>\n        </section>", "text": "A Directory-Based POI Service (V3): poi-v3.php A complete pointsofinterest.zip example, including our front-end using the web service previewed on Wednesday!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec20-php-iv/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 4: Page Layout With CSS</h3>\n        </section>", "text": "CSE 154 Section 4: Page Layout With CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n            <h3>Agenda</h3>\n            <ul>\n              <li>Flexbox Overview</li>\n              <li>Practice flexbox through the Flexbox Ducky game!</li>\n              <li>Flexbox card exercise\n              </li><li>Extra layout practice using the box model</li>\n            </ul>\n        </section>", "text": "Agenda Flexbox Overview Practice flexbox through the Flexbox Ducky game! Flexbox card exercise Extra layout practice using the box model", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>Flexbox</h3>\n          <p>\n            Flexbox is a set of CSS properties for aligning block level content.\n          </p>\n\n          <p>\n            Flexbox defines two types of content - \"containers\" and \"items\".\n          </p>\n\n          <p>\n            Anything directly nested inside of a flex container becomes a flex item.\n          </p>\n\n          <p>\n            Various properties on the container determine how its items are layed out.\n          </p>\n        </section>", "text": "Flexbox Flexbox is a set of CSS properties for aligning block level content. Flexbox defines two types of content - \"containers\" and \"items\". Anything directly nested inside of a flex container becomes a flex item. Various properties on the container determine how its items are layed out.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>Basic properties for the flex container</h3>\n          <dl style=\"font-size: 60%;\">\n            <dt><code>display: flex;</code> </dt>\n            <dd>makes an element a \"container\", items inside automatically become \"items\"</dd>\n\n            <dt><code>justify-content: flex-end; (flex-start, space-around,...)</code></dt>\n            <dd>indicates how to space the items inside the container along the main axis</dd>\n\n            <dt><code>align-items: flex-end; (flex-start, center, baseline,...)</code></dt>\n            <dd>indicates how to space the items inside the container along the cross axis</dd>\n\n            <dt><code>flex-direction: row; (column)</code></dt>\n            <dd>indicates whether the container flows horizontally or vertically</dd>\n          </dl>\n        </section>", "text": "Basic properties for the flex container display: flex; makes an element a \"container\", items inside automatically become \"items\" justify-content: flex-end; (flex-start, space-around,...) indicates how to space the items inside the container along the main axis align-items: flex-end; (flex-start, center, baseline,...) indicates how to space the items inside the container along the cross axis flex-direction: row; (column) indicates whether the container flows horizontally or vertically", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n              <h2>Reminder: Setting Content Type with <code>header</code></h2>\n              <pre><code data-trim>header(\"Content-type: type/subtype\");</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <p>\n                Most of the time we'll use\n                <code>header(\"Content-type: text/plain\");</code> or\n                <code>header(\"Content-type: application/json\");</code>\n\n              </p>\n              <p>\n                Also remember that in error cases we want to send back the Invalid Request header\n                <code>header(\"HTTP/1.1 400 Invalid Request\");</code>\n              </p>\n              <p>\n                Remember that you can not <code>print</code> or <code>echo</code> before a header\n                statement but it doesn't have to be the first line of code.\n              </p>\n              <p>Helpful Slides from Tuesday's section on what header information in the Network's tab\n                for Text and HTML look like are\n                <a href=\"../../sections/week07-tues/slides/#/4/5\" target=\"_blank\">here</a>,\n              look below for \"application/json\"</p>\n            </section>", "text": "Reminder: Setting Content Type with header header(\"Content-type: type/subtype\"); PHP (template) Most of the time we'll use header(\"Content-type: text/plain\"); or header(\"Content-type: application/json\"); Also remember that in error cases we want to send back the Invalid Request header header(\"HTTP/1.1 400 Invalid Request\"); Remember that you can not print or echo before a header statement but it doesn't have to be the first line of code. Helpful Slides from Tuesday's section on what header information in the Network's tab for Text and HTML look like are here, look below for \"application/json\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>Inspecting Header Information in Networks Tab</h2>\n              <img src=\"hidden/hello-json.png\" class=\"w-80 centered-figure\">\n              <p>This example shows the result of setting Content-Type as application/json</p>\n              <img src=\"hidden/hello-json-response.png\" class=\"w-80 centered-figure\">\n              <p>and the JSONs in the response</p>\n            </section>", "text": "Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as application/json and the JSONs in the response", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h2>Building a simple service that returns JSON</h2>\n            <p>Try using the following steps in <code>jsontest.php</code></p>\n            <ol>\n              <li>Create an array and assign it to a variable (<code>$output = array()</code> for example )\n              </li><li>\n                Gather your data in the associative array ($output)\n                with the key/value pairs you want to return in your JSON object\n              </li>\n              <li>\n                Use\n                <code><a href=\"http://php.net/manual/en/function.json-encode.php\">json_encode</a>($output)</code>\n                to \"stringify\" your associative array into a\n                JSON formatted string.\n              </li>\n              <li>Ensure you have set your header correctly before you print anything! <br>\n                (e.g. <code>header(\"Content-Type: application/json\");</code>)\n              </li>\n              <li>Print the JSON formatted string!</li>\n            </ol>\n            <p>NOTE: we can also use json_decode to convert JSON strings into PHP arrays.</p>\n          </section>", "text": "Building a simple service that returns JSON Try using the following steps in jsontest.php Create an array and assign it to a variable ($output = array() for example ) Gather your data in the associative array ($output) with the key/value pairs you want to return in your JSON object Use json_encode($output) to \"stringify\" your associative array into a JSON formatted string. Ensure you have set your header correctly before you print anything! (e.g. header(\"Content-Type: application/json\");) Print the JSON formatted string! NOTE: we can also use json_decode to convert JSON strings into PHP arrays.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h2>Example: JSONtest server code</h2>\n            <pre><code>&lt;?php\n  header(\"Content-Type: application/json\");\n\n  $output = array();\n  $output[\"name\"] = \"Miranda\";\n  $output[\"hobbies\"] = array(\"pottery\", \"softball\",\n                             \"cycling\", \"watching youtube\");\n\n  print(json_encode($output));\n?&gt;</code></pre>\n            <p>Produces:</p>\n            <pre><code>{\n  \"name\":\"Miranda\",\n  \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Example: JSONtest server code <?php header(\"Content-Type: application/json\"); $output = array(); $output[\"name\"] = \"Miranda\"; $output[\"hobbies\"] = array(\"pottery\", \"softball\", \"cycling\", \"watching youtube\"); print(json_encode($output));?> Produces: { \"name\":\"Miranda\", \"hobbies\":[\"pottery\",\"softball\", \"cycling\", \"watching youtube\"]} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>Now let's build a web service</h1>\n          <h2>New case study: Points Of Interest</h2>\n        </section>", "text": "Now let's build a web service New case study: Points Of Interest", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <p>\n            &lt;backstory&gt;<br>\n            It's week 7 and I'm ready for a vacation, but I can't decide\n            where to go. So I want a tool that will randomly pick from a list of\n            \"Points of Interests\" (vacation spots) and give me some guidance.\n            I know I have already built the randomizer and JSONTest - so I want something similar...<br>\n            &lt;/backstory&gt;\n          </p>\n          <p class=\"space-above\">To start we will use a modified version of JSONtest as a prototype</p>\n          <p><a href=\"examples/pointsofinterest.zip\">Sample code</a></p>\n        </section>", "text": "<backstory> It's week 7 and I'm ready for a vacation, but I can't decide where to go. So I want a tool that will randomly pick from a list of \"Points of Interests\" (vacation spots) and give me some guidance. I know I have already built the randomizer and JSONTest - so I want something similar... </backstory> To start we will use a modified version of JSONtest as a prototype Sample code", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Step 1: Define the API</h2>\n          <p>\n            Let's first determine how the users will interact with the API. Questions we can\n            ask might be:\n          </p>\n          <ul>\n            <li>What data might a user need?</li>\n            <li>What might be the easiest format for the user to use this data in?</li>\n          </ul>\n          <p>For Points of Interest we're looking for:</p>\n          <ul>\n            <li>A city that one might want to travel to</li>\n            <li>A list of Points of Interest (sites) for that city, including for each:\n              <ul>\n                <li>The name of the site</li>\n                <li>An image of the site</li>\n                <li>A review of the site</li>\n              </ul>\n            </li>\n          </ul>\n        </section>", "text": "Step 1: Define the API Let's first determine how the users will interact with the API. Questions we can ask might be: What data might a user need? What might be the easiest format for the user to use this data in? For Points of Interest we're looking for: A city that one might want to travel to A list of Points of Interest (sites) for that city, including for each: The name of the site An image of the site A review of the site", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Example: Points of Interest sample output</h2>\n          <div class=\"side-by-side\">\n            <p>The general format of the response could look like this for all of our cities:</p>\n            <div>\n              <pre class=\"font-12pt\"><code>{\n  \"cities\" : [\n    {\n      \"name\": \"Seattle\",\n      \"sites\": [\n        {\n          \"name\": \"Space Needle\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    },\n    {\n      \"name\": \"New York\",\n      \"sites\": [\n        {\n          \"name\": \"Ellis Island\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        },\n        {\n          \"name\": \"Statue of Liberty\",\n          \"image\": \"....\",\n          \"review\": \".... \"\n        }\n      ]\n    }\n    ...\n  ]\n}</code></pre>\n              <p class=\"code-caption\">JSON</p>\n            </div>\n          </div>\n        </section>", "text": "Example: Points of Interest sample output The general format of the response could look like this for all of our cities: { \"cities\" : [ { \"name\": \"Seattle\", \"sites\": [ { \"name\": \"Space Needle\", \"image\": \"....\", \"review\": \".... \" } ] }, { \"name\": \"New York\", \"sites\": [ { \"name\": \"Ellis Island\", \"image\": \"....\", \"review\": \".... \" }, { \"name\": \"Statue of Liberty\", \"image\": \"....\", \"review\": \".... \" } ] } ... ]} JSON", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Step 2: Determine how to view the data</h2>\n          <p>Given the information we may store in the server, how might we want to view it?</p>\n          <ul>\n            <li>Is the data simple enough to return as plain text (so the end user doesn't have to\n              <code>split</code> to view different parts)?\n            </li>\n            <li>\n              Where might I need more structured information that requires responding with\n              JSON encoded data?\n            </li>\n            <li>\n              What \"filters\" might I want on that data? Do I want all of it? Some of it?\n              Just one at a time?\n            </li>\n          </ul>\n        </section>", "text": "Step 2: Determine how to view the data Given the information we may store in the server, how might we want to view it? Is the data simple enough to return as plain text (so the end user doesn't have to split to view different parts)? Where might I need more structured information that requires responding with JSON encoded data? What \"filters\" might I want on that data? Do I want all of it? Some of it? Just one at a time?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Example: Points of Interest requests</h2>\n          <p>For our Points of Interest API we want three types of data: </p>\n          <ul>\n            <li>All of the cities we have with at least one point of interest each. (city=all) </li>\n            <li>A random city with the point of interest(s) for that city (city=random)</li>\n            <li>The Point(s) of Interest for a city that is specified by the user (city={cityname})</li>\n          </ul>\n          <p>For each Point of Interest we want:</p>\n          <ul>\n            <li>The name (e.g. Space Needle)</li>\n            <li>An image</li>\n            <li>A review</li>\n          </ul>\n        </section>", "text": "Example: Points of Interest requests For our Points of Interest API we want three types of data: All of the cities we have with at least one point of interest each. (city=all) A random city with the point of interest(s) for that city (city=random) The Point(s) of Interest for a city that is specified by the user (city={cityname}) For each Point of Interest we want: The name (e.g. Space Needle) An image A review", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Step 3: Write your server code to handle the requests</h2>\n          <ul>\n            <li>Think of the conditionals you need to handle your request</li>\n            <li>\n              Remember to check if the <code>$_GET</code> and <code>$_POST</code> indices for those\n              requests are set (using <code>isset</code>), and handle the error correctly if not.\n            </li>\n            <li>\n              You can use conditional statements to figure out which query parameter to handle.\n            </li>\n            <li>\n              Remember to be careful about using <code>$_GET</code> vs <code>$_POST</code> where\n              needed (for now we're using <code>$_GET</code>).\n            </li>\n            <li>\n              Oh and don't forget to handle other error cases as well.\n            </li>\n            <li>\n              Put the correct headers in each part of the conditional... then look to see if\n              there is any refactoring you can do!\n            </li>\n          </ul>\n        </section>", "text": "Step 3: Write your server code to handle the requests Think of the conditionals you need to handle your request Remember to check if the $_GET and $_POST indices for those requests are set (using isset), and handle the error correctly if not. You can use conditional statements to figure out which query parameter to handle. Remember to be careful about using $_GET vs $_POST where needed (for now we're using $_GET). Oh and don't forget to handle other error cases as well. Put the correct headers in each part of the conditional... then look to see if there is any refactoring you can do!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Step 4: Write code to handle each request type</h2>\n          <p>How will your data be stored on the server?</p>\n          <p>\n            How will you convert the data into the right format for sending back to the caller?\n          </p>\n        </section>", "text": "Step 4: Write code to handle each request type How will your data be stored on the server? How will you convert the data into the right format for sending back to the caller?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <section>\n            <h2>Example: Points of Interest Web Service, simple version</h2>\n            <p>Write a simple web service that accepts a <code>city</code> and\n            outputs an attraction that you should visit in that city</p>\n            <pre><code data-trim>http://example.com/pointsofinterest.php?city=Seattle</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre><code>The best place to visit in Seattle is Space Needle.</code></pre>\n            <p class=\"code-caption\">Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <h2>Solution\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n  header(\"Content-type: text/plain\");\n  if (isset($_GET[\"city\"])) {\n    $attractions = get_list();\n    $city = $_GET[\"city\"];\n    echo \"The best place to visit in \" . $city .  \" is \" .\n          $attractions[$city] . \".\\n\";\n  }\n\n  function get_list() {\n    $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                         \"New York\" =&gt; \"Ellis Island\",\n                          ...\n                         \"London\" =&gt; \"Big Ben\");\n  }\n?&gt;</code></pre>\n            </h2><p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>", "text": "Example: Points of Interest Web Service, simple version Write a simple web service that accepts a city and outputs an attraction that you should visit in that city http://example.com/pointsofinterest.php?city=Seattle GET request The best place to visit in Seattle is Space Needle. Output See below for sample code Solution <?php header(\"Content-type: text/plain\"); if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; echo \"The best place to visit in \" . $city . \" is \" . $attractions[$city] . \".\\n\"; } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", \"New York\" => \"Ellis Island\", ... \"London\" => \"Big Ben\"); }?> PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h2>Example: Points of Interest Web Service, simple version</h2>\n            <p>Write a simple web service that accepts a <code>city</code> and\n            outputs an attraction that you should visit in that city</p>\n            <pre><code data-trim>http://example.com/pointsofinterest.php?city=Seattle</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre><code>The best place to visit in Seattle is Space Needle.</code></pre>\n            <p class=\"code-caption\">Output</p>\n            <p>See below for sample code</p>\n          </section>", "text": "Example: Points of Interest Web Service, simple version Write a simple web service that accepts a city and outputs an attraction that you should visit in that city http://example.com/pointsofinterest.php?city=Seattle GET request The best place to visit in Seattle is Space Needle. Output See below for sample code", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h2>Solution\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n  header(\"Content-type: text/plain\");\n  if (isset($_GET[\"city\"])) {\n    $attractions = get_list();\n    $city = $_GET[\"city\"];\n    echo \"The best place to visit in \" . $city .  \" is \" .\n          $attractions[$city] . \".\\n\";\n  }\n\n  function get_list() {\n    $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                         \"New York\" =&gt; \"Ellis Island\",\n                          ...\n                         \"London\" =&gt; \"Big Ben\");\n  }\n?&gt;</code></pre>\n            </h2><p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>", "text": "Solution <?php header(\"Content-type: text/plain\"); if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; echo \"The best place to visit in \" . $city . \" is \" . $attractions[$city] . \".\\n\"; } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", \"New York\" => \"Ellis Island\", ... \"London\" => \"Big Ben\"); }?> PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <section>\n            <h2>Example: Points of Interest Web Service</h2>\n            <p>What if we want to return all of the cities/points of interest? </p>\n            <pre class=\"font-16pt\"><code data-trim>http://example.com/pointsofinterest.php?city=all</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre class=\"font-16pt\"><code>{\n    \"Seattle\":\"Space Needle\",\n    \"New York\":\"Ellis Island\",\n    ...\n    \"San Franciso\":\"Fisherman's Warf\"\n}</code></pre>\n            <p class=\"code-caption\">JSON Output</p>\n            <p>See below for sample code</p>\n          </section>\n          <section>\n            <p>Solution</p>\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n    if (isset($_GET[\"city\"])) {\n      $attractions = get_list();\n      $city = $_GET[\"city\"];\n\n      if (strcmp($city, \"all\") === 0) {\n        header(\"Content-type: application/json\");\n        print_r(json_encode($attractions));\n      }\n    }\n\n    function get_list() {\n      $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                           ...);\n    }\n?&gt;</code></pre>\n            <p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>\n        </section>", "text": "Example: Points of Interest Web Service What if we want to return all of the cities/points of interest? http://example.com/pointsofinterest.php?city=all GET request { \"Seattle\":\"Space Needle\", \"New York\":\"Ellis Island\", ... \"San Franciso\":\"Fisherman's Warf\"} JSON Output See below for sample code Solution <?php if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; if (strcmp($city, \"all\") === 0) { header(\"Content-type: application/json\"); print_r(json_encode($attractions)); } } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", ...); }?> PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <h2>Example: Points of Interest Web Service</h2>\n            <p>What if we want to return all of the cities/points of interest? </p>\n            <pre class=\"font-16pt\"><code data-trim>http://example.com/pointsofinterest.php?city=all</code></pre>\n            <p class=\"code-caption\">GET request</p>\n            <pre class=\"font-16pt\"><code>{\n    \"Seattle\":\"Space Needle\",\n    \"New York\":\"Ellis Island\",\n    ...\n    \"San Franciso\":\"Fisherman's Warf\"\n}</code></pre>\n            <p class=\"code-caption\">JSON Output</p>\n            <p>See below for sample code</p>\n          </section>", "text": "Example: Points of Interest Web Service What if we want to return all of the cities/points of interest? http://example.com/pointsofinterest.php?city=all GET request { \"Seattle\":\"Space Needle\", \"New York\":\"Ellis Island\", ... \"San Franciso\":\"Fisherman's Warf\"} JSON Output See below for sample code", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n            <p>Solution</p>\n            <pre class=\"font-16pt\"><code data-trim>&lt;?php\n    if (isset($_GET[\"city\"])) {\n      $attractions = get_list();\n      $city = $_GET[\"city\"];\n\n      if (strcmp($city, \"all\") === 0) {\n        header(\"Content-type: application/json\");\n        print_r(json_encode($attractions));\n      }\n    }\n\n    function get_list() {\n      $attractions = array(\"Seattle\" =&gt; \"Space Needle\",\n                           ...);\n    }\n?&gt;</code></pre>\n            <p class=\"code-caption\">PHP</p>\n  \t\t\t\t</section>", "text": "Solution <?php if (isset($_GET[\"city\"])) { $attractions = get_list(); $city = $_GET[\"city\"]; if (strcmp($city, \"all\") === 0) { header(\"Content-type: application/json\"); print_r(json_encode($attractions)); } } function get_list() { $attractions = array(\"Seattle\" => \"Space Needle\", ...); }?> PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <p>\n            That's all great, but I don't want to have my PHP file get bloated\n            with the associative array. There has to be a better way to store this\n            information.\n          </p>\n          <p>\n            Besides, I'm still missing the images, and multiple Points of Interest per city!\n          </p>\n\n          <h2>Let's explore storing the data in a different way</h2>\n        </section>", "text": "That's all great, but I don't want to have my PHP file get bloated with the associative array. There has to be a better way to store this information. Besides, I'm still missing the images, and multiple Points of Interest per city! Let's explore storing the data in a different way", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>PHP File I/O</h1>\n          <img class=\"half-width simpleimg\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c0/Spice_rack%2C_2014.jpg\" alt=\"spice rack\">\n          <p class=\"small-font\">From <a href=\"https://commons.wikimedia.org/wiki/File:Spice_rack,_2014.jpg\">Wikipedia</a></p>\n        </section>", "text": "PHP File I/O From Wikipedia", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>PHP I/O Functions</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function name(s)</th>\n              <th>category</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.file.php\" target=\"_blank\">file</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-get-contents.php\" target=\"_blank\">file_get_contents</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-put-contents.php\" target=\"_blank\">file_put_contents</a>\n              </td>\n              <td>reading/writing entire files</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.basename.php\" target=\"_blank\">basename</a>,\n                <a href=\"https://www.php.net/manual/en/function.file-exists.php\" target=\"_blank\">file_exists</a>,\n                <a href=\"https://www.php.net/manual/en/function.filesize.php\" target=\"_blank\">filesize</a>,\n                <a href=\"https://www.php.net/manual/en/function.fileperms.php\" target=\"_blank\">fileperms</a>,\n                <a href=\"https://www.php.net/manual/en/function.filemtime.php\" target=\"_blank\">filemtime</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-dir.php\" target=\"_blank\">is_dir</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-readable.php\" target=\"_blank\">is_readable</a>,\n                <a href=\"https://www.php.net/manual/en/function.is-writable.php\" target=\"_blank\">is_writable</a>,\n                <a href=\"https://www.php.net/manual/en/function.disk-free-space.php\" target=\"_blank\">disk_free_space</a>\n              </td>\n              <td>asking for information</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.copy.php\" target=\"_blank\">copy</a>,\n                <a href=\"https://www.php.net/manual/en/function.rename.php\" target=\"_blank\">rename</a>,\n                <a href=\"https://www.php.net/manual/en/function.unlink.php\" target=\"_blank\">unlink</a>,\n                <a href=\"https://www.php.net/manual/en/function.chmod.php\" target=\"_blank\">chmod</a>,\n                <a href=\"https://www.php.net/manual/en/function.chgrp.php\" target=\"_blank\">chgrp</a>,\n                <a href=\"https://www.php.net/manual/en/function.chown.php\" target=\"_blank\">chown</a>,\n                <a href=\"https://www.php.net/manual/en/function.mkdir.php\" target=\"_blank\">mkdir</a>,\n                <a href=\"https://www.php.net/manual/en/function.rmdir.php\" target=\"_blank\">rmdir</a>\n              </td>\n              <td>manipulating files and directories</td>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://www.php.net/manual/en/function.glob.php\" target=\"_blank\">glob</a>,\n                <a href=\"https://www.php.net/manual/en/function.scandir.php\" target=\"_blank\">scandir</a>\n              </td>\n              <td>reading directories</td>\n            </tr>\n          </table>\n\n        </section>", "text": "PHP I/O Functions function name(s) category file, file_get_contents, file_put_contents reading/writing entire files basename, file_exists, filesize, fileperms, filemtime, is_dir, is_readable, is_writable, disk_free_space asking for information copy, rename, unlink, chmod, chgrp, chown, mkdir, rmdir manipulating files and directories glob, scandir reading directories", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Reading Files  - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th><strong>contents of foo.txt</strong></th>\n              <th><strong>file(\"foo.txt\")</strong></th>\n              <th><strong>file_get_contents(\"foo.txt\")</strong></th>\n            </tr>\n            <tr>\n              <td>\n                <pre>Hello\n  how r u?\n\n  I'm fine\n\n                </pre>\n              </td>\n              <td>\n                <pre>array(\"Hello\\n\", #0\n  \"how r u?\\n\",    #1\n  \"\\n\",            #2\n  \"I'm fine\\n\"     #3\n  )\n                </pre>\n              </td>\n              <td>\n                <pre>\"Hello\\n\n  how r u\\n    # a single\n  \\n           # string\n  I'm fine\\n\"\n                </pre>\n              </td>\n            </tr>\n          </table>\n          <p>\n            The <code>file</code> function returns lines of a file as an array (\\n at end of each).\n          </p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a single string.</p>\n          <p><code>file_put_contents</code> writes a string into a file.</p>\n        </section>", "text": "Reading Files - IMPORTANT SLIDE! contents of foo.txt file(\"foo.txt\") file_get_contents(\"foo.txt\") Hello how r u? I'm fine array(\"Hello\\n\", #0 \"how r u?\\n\", #1 \"\\n\", #2 \"I'm fine\\n\" #3 ) \"Hello\\n how r u\\n # a single \\n # string I'm fine\\n\" The file function returns lines of a file as an array (\\n at end of each). file_get_contents returns entire contents of a file as a single string. file_put_contents writes a string into a file.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 3: Selectors And The Box Model</h3>\n        </section>", "text": "CSE 154 Section 3: Selectors And The Box Model", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <div style=\"display: flex\">\n            <div style=\"margin: 10px\">\n              <h2>Agenda</h2>\n              <p>Review The DOM</p>\n              <p>Review Combinator Selectors</p>\n              <p>Debugging With The Chrome Inspector</p>\n              <p>The Box Model (margin/padding/border)</p>\n            </div>\n            <img src=\"https://imgs.xkcd.com/comics/git_2x.png\" alt=\"git comic\" height=\"400px\">\n          </div>\n        </section>", "text": "Agenda Review The DOM Review Combinator Selectors Debugging With The Chrome Inspector The Box Model (margin/padding/border)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Section Goals</h2>\n          <ul>\n            <li>Understand how to traverse the DOM to select elements in CSS</li>\n            <li>Learn critical CSS debugging skills in the browser</li>\n            <li>Utilize the box model to control the positioning of elements on the page</li>\n          </ul>\n        </section>", "text": "Section Goals Understand how to traverse the DOM to select elements in CSS Learn critical CSS debugging skills in the browser Utilize the box model to control the positioning of elements on the page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Exercise 1: Combinator Selectors</h2>\n          <p>GOT Selectors</p>\n        </section>", "text": "Exercise 1: Combinator Selectors GOT Selectors", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n        <section>\n          <div id=\"htmlcode\"></div>\n\n          <div style=\"width: 30%; float: left;\">\n            <div>\n              <p>\n              Write a CSS selector here for:\n              <input type=\"text\" id=\"selector\" style=\"margin-left: 10px; font-family: monospace; font-size: 60%;\" placeholder=\"type CSS here\">\n              </p>\n            </div>\n            <ol class=\"medium-small-font\">\n              <li>all <code>h2</code> elements</li>\n              <li>element with ID <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>houses</code> and <code>footer</code></li>\n              <li><code>p</code> elements inside <code>main</code></li>\n              <li><code>p</code> elements directly inside <code>main</code></li>\n\n              <li>elements with class <code>bordered</code></li>\n              <li><code>h2</code> elements with class <code>bordered</code></li>\n            </ol>\n            <!-- Text area containing real code, used to preserve spacing-->\n            <textarea id=\"htmlcodeenter\" cols=\"1\" rows=\"1\" style=\"display:none;\">\n\n  <header>\n    <h1>Game of Thrones Fan Page</h1>\n  </header>\n  \n\n  <section id=\"intro\">\n    <h2>Introduction</h2>\n    <p>Game of Thrones is the best series ever!</p>\n  </section>\n  \n\n  <main>\n    <p class=\"bordered\">\n      There are 5 books: A Game of Thrones,\n      A Clash of Kings, a Storm of Swords,\n      a Feast for Crows, and a Dance with Dragons.\n    </p>\n    <section id=\"houses\">\n      <h2>Houses:</h2>\n      <ul>\n        <li>House Stark</li>\n        <li>House Targaryen</li>\n        <li>House Lannister</li>\n        <li>House Tully</li>\n      </ul>\n      <h2>Plot</h2>\n      <p>It's too long to describe. Just read the books!</p>\n    </section>\n  </main>\n  \n\n  <footer>\n    <h2 class=\"bordered\">Thank you!</h2>\n  </footer>\n</textarea>\n          </div>\n        </section>\n        <section>\n          <h2>GOT Selectors: Solutions</h2>\n          <ol id=\"answer-list\" style=\"float: left; font-size: 20pt; width: 90%\">\n            <li>all <code>h2</code> elements<span class=\"answer\">h2</span></li>\n            <li>element with ID <code>intro</code><span class=\"answer\">#intro</span></li>\n            <li><code>h2</code> elements inside <code>intro</code><span class=\"answer\">#intro\n                h2</span></li>\n            <li><code>h2</code> elements inside <code>houses, footer</code><span class=\"answer\">#houses h2, footer h2</span></li>\n            <li><code>p</code> elements inside <code>main</code><span class=\"answer\">main p</span></li>\n            <li><code>p</code> elements directly inside <code>main</code><span class=\"answer\">main &gt; p</span></li>\n            <li>elements with class <code>bordered</code><span class=\"answer\">.bordered</span></li>\n            <li><code>h2</code> elements with class <code>bordered</code><span class=\"answer\">h2.bordered</span></li>\n          </ol>\n        </section>\n        </section>", "text": "Write a CSS selector here for: all h2 elements element with ID intro h2 elements inside intro h2 elements inside houses and footer p elements inside main p elements directly inside main elements with class bordered h2 elements with class bordered Game of Thrones Fan Page Introduction Game of Thrones is the best series ever! There are 5 books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. Houses: House Stark House Targaryen House Lannister House Tully Plot It's too long to describe. Just read the books! Thank you! GOT Selectors: Solutions all h2 elementsh2 element with ID intro#intro h2 elements inside intro#intro h2 h2 elements inside houses, footer#houses h2, footer h2 p elements inside mainmain p p elements directly inside mainmain > p elements with class bordered.bordered h2 elements with class borderedh2.bordered", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <div id=\"htmlcode\"></div>\n\n          <div style=\"width: 30%; float: left;\">\n            <div>\n              <p>\n              Write a CSS selector here for:\n              <input type=\"text\" id=\"selector\" style=\"margin-left: 10px; font-family: monospace; font-size: 60%;\" placeholder=\"type CSS here\">\n              </p>\n            </div>\n            <ol class=\"medium-small-font\">\n              <li>all <code>h2</code> elements</li>\n              <li>element with ID <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>houses</code> and <code>footer</code></li>\n              <li><code>p</code> elements inside <code>main</code></li>\n              <li><code>p</code> elements directly inside <code>main</code></li>\n\n              <li>elements with class <code>bordered</code></li>\n              <li><code>h2</code> elements with class <code>bordered</code></li>\n            </ol>\n            <!-- Text area containing real code, used to preserve spacing-->\n            <textarea id=\"htmlcodeenter\" cols=\"1\" rows=\"1\" style=\"display:none;\">\n\n  <header>\n    <h1>Game of Thrones Fan Page</h1>\n  </header>\n  \n\n  <section id=\"intro\">\n    <h2>Introduction</h2>\n    <p>Game of Thrones is the best series ever!</p>\n  </section>\n  \n\n  <main>\n    <p class=\"bordered\">\n      There are 5 books: A Game of Thrones,\n      A Clash of Kings, a Storm of Swords,\n      a Feast for Crows, and a Dance with Dragons.\n    </p>\n    <section id=\"houses\">\n      <h2>Houses:</h2>\n      <ul>\n        <li>House Stark</li>\n        <li>House Targaryen</li>\n        <li>House Lannister</li>\n        <li>House Tully</li>\n      </ul>\n      <h2>Plot</h2>\n      <p>It's too long to describe. Just read the books!</p>\n    </section>\n  </main>\n  \n\n  <footer>\n    <h2 class=\"bordered\">Thank you!</h2>\n  </footer>\n</textarea>\n          </div>\n        </section>", "text": "Write a CSS selector here for: all h2 elements element with ID intro h2 elements inside intro h2 elements inside houses and footer p elements inside main p elements directly inside main elements with class bordered h2 elements with class bordered Game of Thrones Fan Page Introduction Game of Thrones is the best series ever! There are 5 books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. Houses: House Stark House Targaryen House Lannister House Tully Plot It's too long to describe. Just read the books! Thank you!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section id=\"intro\">\n    <h2>Introduction</h2>\n    <p>Game of Thrones is the best series ever!</p>\n  </section>", "text": "Introduction Game of Thrones is the best series ever!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section id=\"houses\">\n      <h2>Houses:</h2>\n      <ul>\n        <li>House Stark</li>\n        <li>House Targaryen</li>\n        <li>House Lannister</li>\n        <li>House Tully</li>\n      </ul>\n      <h2>Plot</h2>\n      <p>It's too long to describe. Just read the books!</p>\n    </section>", "text": "Houses: House Stark House Targaryen House Lannister House Tully Plot It's too long to describe. Just read the books!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>GOT Selectors: Solutions</h2>\n          <ol id=\"answer-list\" style=\"float: left; font-size: 20pt; width: 90%\">\n            <li>all <code>h2</code> elements<span class=\"answer\">h2</span></li>\n            <li>element with ID <code>intro</code><span class=\"answer\">#intro</span></li>\n            <li><code>h2</code> elements inside <code>intro</code><span class=\"answer\">#intro\n                h2</span></li>\n            <li><code>h2</code> elements inside <code>houses, footer</code><span class=\"answer\">#houses h2, footer h2</span></li>\n            <li><code>p</code> elements inside <code>main</code><span class=\"answer\">main p</span></li>\n            <li><code>p</code> elements directly inside <code>main</code><span class=\"answer\">main &gt; p</span></li>\n            <li>elements with class <code>bordered</code><span class=\"answer\">.bordered</span></li>\n            <li><code>h2</code> elements with class <code>bordered</code><span class=\"answer\">h2.bordered</span></li>\n          </ol>\n        </section>", "text": "GOT Selectors: Solutions all h2 elementsh2 element with ID intro#intro h2 elements inside intro#intro h2 h2 elements inside houses, footer#houses h2, footer h2 p elements inside mainmain p p elements directly inside mainmain > p elements with class bordered.bordered h2 elements with class borderedh2.bordered", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Debugging With The Chrome Inspector</h2>\n          <p><a href=\"../../../resources/assets/debugging/chrome-inspector.html\">\n            Guide to using the Chrome Inspector</a></p>\n        </section>", "text": "Debugging With The Chrome Inspector Guide to using the Chrome Inspector", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h1>The Box Model</h1>\n          <div class=\"side-by-side\">\n            <div>\n            <dl>\n              <dt>margin</dt><dd>(outside) space between different elements</dd>\n              <dt>border</dt><dd>(optionally visible) line that separates elements</dd>\n              <dt>padding</dt><dd>(inside) space between element content and border</dd>\n            </dl>\n            </div>\n          <div>\n            <img width=\"320px\" class=\"space-left\" src=\"../../../lectures/img/box-model.png\" alt=\"the box model\">\n          </div>\n        </div>\n      </section>", "text": "The Box Model margin(outside) space between different elements border(optionally visible) line that separates elements padding(inside) space between element content and border", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n        <section>\n          <h2>Exercise 2: Boxes</h2>\n          <p>Given <code><a href=\"../code/starter/boxes.html\" target=\"_blank\">boxes.html</a></code>, write\n          <code>boxes.css</code> to make the appearance below.</p>\n          <p>Note: Inspect/view page source on boxes.html to see the HTML code!</p>\n          <div style=\"background-color: #fff; margin-top: 15px\">\n            <div id=\"outer-box\" style=\"background-color: teal; width: 300px;\n            height: 300px; padding: 50px;\">\n              <div id=\"inner-box\" style=\"background-color: salmon; width: 200px;\n              height: 200px; border: 50px solid pink;\"></div>\n            </div>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            More details for this exercise are on the slide below.\n          </p>\n        </section>\n\n        <section>\n          <h2>Exercise 2: Expected Output Details</h2>\n          <p>The outer padding of the box is teal with a width of 50 pixels.</p>\n          <p>The inner border of the box is pink with a width of 50 pixels.</p>\n          <p>The inner background color of the box is salmon with a width and height of 200 pixels.</p>\n          <p>The overall box has a total width and height of 400 pixels.</p>\n          <p>Solution: (<a href=\"../code/boxes-section/boxes.html\" target=\"_blank\">result\n            page</a>) (<a href=\"../code/boxes-section/boxes.css\" target=\"_blank\">CSS</a>)\n          </p>\n        </section>\n      </section>", "text": "Exercise 2: Boxes Given boxes.html, write boxes.css to make the appearance below. Note: Inspect/view page source on boxes.html to see the HTML code! output More details for this exercise are on the slide below. Exercise 2: Expected Output Details The outer padding of the box is teal with a width of 50 pixels. The inner border of the box is pink with a width of 50 pixels. The inner background color of the box is salmon with a width and height of 200 pixels. The overall box has a total width and height of 400 pixels. Solution: (result page) (CSS)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Exercise 2: Boxes</h2>\n          <p>Given <code><a href=\"../code/starter/boxes.html\" target=\"_blank\">boxes.html</a></code>, write\n          <code>boxes.css</code> to make the appearance below.</p>\n          <p>Note: Inspect/view page source on boxes.html to see the HTML code!</p>\n          <div style=\"background-color: #fff; margin-top: 15px\">\n            <div id=\"outer-box\" style=\"background-color: teal; width: 300px;\n            height: 300px; padding: 50px;\">\n              <div id=\"inner-box\" style=\"background-color: salmon; width: 200px;\n              height: 200px; border: 50px solid pink;\"></div>\n            </div>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p>\n            More details for this exercise are on the slide below.\n          </p>\n        </section>", "text": "Exercise 2: Boxes Given boxes.html, write boxes.css to make the appearance below. Note: Inspect/view page source on boxes.html to see the HTML code! output More details for this exercise are on the slide below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Exercise 2: Expected Output Details</h2>\n          <p>The outer padding of the box is teal with a width of 50 pixels.</p>\n          <p>The inner border of the box is pink with a width of 50 pixels.</p>\n          <p>The inner background color of the box is salmon with a width and height of 200 pixels.</p>\n          <p>The overall box has a total width and height of 400 pixels.</p>\n          <p>Solution: (<a href=\"../code/boxes-section/boxes.html\" target=\"_blank\">result\n            page</a>) (<a href=\"../code/boxes-section/boxes.css\" target=\"_blank\">CSS</a>)\n          </p>\n        </section>", "text": "Exercise 2: Expected Output Details The outer padding of the box is teal with a width of 50 pixels. The inner border of the box is pink with a width of 50 pixels. The inner background color of the box is salmon with a width and height of 200 pixels. The overall box has a total width and height of 400 pixels. Solution: (result page) (CSS)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h2>Links for More Practice</h2>\n          <p>\n            CodeStepByStep has some more practice problems for selectors and layout (some of which\n            were from past exams!) Here are a few (keep an eye out for recommended problems on the\n            calendar too!)\n          </p>\n          <ul>\n            <li>\n              <a href=\"https://www.codestepbystep.com/problem/view/html/css/selectorMystery1\">selectorMystery1</a>\n            </li>\n            <li>\n              <a href=\"https://www.codestepbystep.com/problem/view/html/css/selectorMystery2\">selectorMystery2</a>\n            </li>\n            <li>\n              <a href=\"https://www.codestepbystep.com/problem/view/html/layout/abbysStyleGuide\">abbysStyleGuide</a> (CSS\n              styles and layout practice)\n            </li>\n          </ul>\n          <p>\n          Check out this CSS selector <a href=\"https://flukeout.github.io/\">game</a> mentioned from lecture too!\n          </p>\n        </section>", "text": "Links for More Practice CodeStepByStep has some more practice problems for selectors and layout (some of which were from past exams!) Here are a few (keep an eye out for recommended problems on the calendar too!) selectorMystery1 selectorMystery2 abbysStyleGuide (CSS styles and layout practice) Check out this CSS selector game mentioned from lecture too!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-tues/slides/"},
{"html": "<section>\n          <h3>Basic properties for the flex items</h3>\n          <ul>\n            <li>It is less common to add flex properties to flex items, but on occasion you will need to.</li>\n          </ul>\n          <dl style=\"font-size: 60%;\">\n            <dt><code>flex-basis: 20%; (3em, 50px,...)</code></dt>\n            <dd>\n              indicates the default size of an element before the extra space is distributed\n              among the items\n            </dd>\n            <dt><code>align-self: flex-end; (flex-start, center, stretch,...)</code></dt>\n            <dd>indicates where to place this specific item along the cross axis</dd>\n          </dl>\n        </section>", "text": "Basic properties for the flex items It is less common to add flex properties to flex items, but on occasion you will need to. flex-basis: 20%; (3em, 50px,...) indicates the default size of an element before the extra space is distributed among the items align-self: flex-end; (flex-start, center, stretch,...) indicates where to place this specific item along the cross axis", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>More Flexbox Resources</h3>\n          <p>\n            There are great tutorials out in the world to help learn flexbox. This\n            <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks</a> one\n            goes into a deeper explanation of the flex properties and has some great examples to\n            compare each - it's a great bookmark resource to reference for this class!\n          </p>\n        </section>", "text": "More Flexbox Resources There are great tutorials out in the world to help learn flexbox. This CSS-Tricks one goes into a deeper explanation of the flex properties and has some great examples to compare each - it's a great bookmark resource to reference for this class!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>Exercise 1: Flexbox Ducky</h3>\n          <p>\n          <a href=\"../../../resources/assets/flexboxducky/index.html\">Flexbox Ducky</a>, is a\n          CSS game for learning the basics of Flexbox. It's fairly self-contained, but feel free to talk to your\n          neighbors with any questions or let your TA know if you run into anything you're not sure about along the way!\n          </p>\n\n          <h4><a href=\"../../../resources/assets/flexboxducky/index.html\">Flexbox Ducky</a></h4>\n        </section>", "text": "Exercise 1: Flexbox Ducky Flexbox Ducky, is a CSS game for learning the basics of Flexbox. It's fairly self-contained, but feel free to talk to your neighbors with any questions or let your TA know if you run into anything you're not sure about along the way! Flexbox Ducky", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <section>\n          <h3>Exercise 2: Flex with Number Card</h3>\n          <p>\n            Download this <a href=\"../code/starter/number-card-ex.zip\">starter code</a> which contains a\n            starter HTML file and four images. You will use this starter code to write CSS with flex\n            layout to generate the following:\n          </p>\n          <p class=\"half-width centered-figure\"><img style=\"border: none; box-shadow: none;\" src=\"images/number-card-output.png\"></p>\n          <p>\n            Follow the specification requirements on the slide below to write <code>number-card.css</code>\n          </p>\n        </section>\n        <section>\n          <h3>Exercise 2: Appearance Details</h3>\n          <p class=\"half-width centered-figure\"><img style=\"border: none; box-shadow: none;\" src=\"images/number-card-output.png\"></p>\n          <ul>\n            <li>\n              The card container is represented using a div and has 4 images, each representing a\n              number. This card should be 500px wide and 200px tall with a solid #698733 border of\n              0.5em width and a border radius of 1em.\n            </li>\n            <li>\n              The four images in the card should take up 70% of the height of the card, be centered vertically within, and spaced evenly horizontally.\n            </li>\n            <li>Once you've finished this exercise to get the expected output, how can you modify\n              your CSS to get the numbers in the order \"3 2 1 0\"? How about \"2 3 1 0\"? For the\n              second ordering, try to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Ordering_Flex_Items\">order</a>\n              property.</li>\n          </ul>\n\n        </section>\n\n        </section>", "text": "Exercise 2: Flex with Number Card Download this starter code which contains a starter HTML file and four images. You will use this starter code to write CSS with flex layout to generate the following: Follow the specification requirements on the slide below to write number-card.css Exercise 2: Appearance Details The card container is represented using a div and has 4 images, each representing a number. This card should be 500px wide and 200px tall with a solid #698733 border of 0.5em width and a border radius of 1em. The four images in the card should take up 70% of the height of the card, be centered vertically within, and spaced evenly horizontally. Once you've finished this exercise to get the expected output, how can you modify your CSS to get the numbers in the order \"3 2 1 0\"? How about \"2 3 1 0\"? For the second ordering, try to use the order property.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>Exercise 2: Flex with Number Card</h3>\n          <p>\n            Download this <a href=\"../code/starter/number-card-ex.zip\">starter code</a> which contains a\n            starter HTML file and four images. You will use this starter code to write CSS with flex\n            layout to generate the following:\n          </p>\n          <p class=\"half-width centered-figure\"><img style=\"border: none; box-shadow: none;\" src=\"images/number-card-output.png\"></p>\n          <p>\n            Follow the specification requirements on the slide below to write <code>number-card.css</code>\n          </p>\n        </section>", "text": "Exercise 2: Flex with Number Card Download this starter code which contains a starter HTML file and four images. You will use this starter code to write CSS with flex layout to generate the following: Follow the specification requirements on the slide below to write number-card.css", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h3>Exercise 2: Appearance Details</h3>\n          <p class=\"half-width centered-figure\"><img style=\"border: none; box-shadow: none;\" src=\"images/number-card-output.png\"></p>\n          <ul>\n            <li>\n              The card container is represented using a div and has 4 images, each representing a\n              number. This card should be 500px wide and 200px tall with a solid #698733 border of\n              0.5em width and a border radius of 1em.\n            </li>\n            <li>\n              The four images in the card should take up 70% of the height of the card, be centered vertically within, and spaced evenly horizontally.\n            </li>\n            <li>Once you've finished this exercise to get the expected output, how can you modify\n              your CSS to get the numbers in the order \"3 2 1 0\"? How about \"2 3 1 0\"? For the\n              second ordering, try to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Ordering_Flex_Items\">order</a>\n              property.</li>\n          </ul>\n\n        </section>", "text": "Exercise 2: Appearance Details The card container is represented using a div and has 4 images, each representing a number. This card should be 500px wide and 200px tall with a solid #698733 border of 0.5em width and a border radius of 1em. The four images in the card should take up 70% of the height of the card, be centered vertically within, and spaced evenly horizontally. Once you've finished this exercise to get the expected output, how can you modify your CSS to get the numbers in the order \"3 2 1 0\"? How about \"2 3 1 0\"? For the second ordering, try to use the order property.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h3>Extra Practice: Layout With The Box Model And Flexbox</h3>\n            <p>\n              Download this <a href=\"../code/starter/layout.html\">starter HTML file</a>.\n              It contains all of the instructions for this exercise. To download the file,\n              you will need to right-click and \"view page source\" in Chrome.\n            </p>\n            <p>\n              Also, download this <a href=\"../code/starter/puppy.jpg\">picture</a>\n              of our course mascot Mowgli!\n            </p>\n            <p>\n              Create a style.css file and link it to the HTML file.\n              Follow the instructions in the HTML from there.\n            </p>\n            <p>\n              The <a href=\"../code/solution/layout-solution.html\">solution</a>\n              is available, but don't inspect it until you have finished your\n              solution!\n            </p>\n          </section>\n        </section>", "text": "Extra Practice: Layout With The Box Model And Flexbox Download this starter HTML file. It contains all of the instructions for this exercise. To download the file, you will need to right-click and \"view page source\" in Chrome. Also, download this picture of our course mascot Mowgli! Create a style.css file and link it to the HTML file. Follow the instructions in the HTML from there. The solution is available, but don't inspect it until you have finished your solution!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n            <h3>Extra Practice: Layout With The Box Model And Flexbox</h3>\n            <p>\n              Download this <a href=\"../code/starter/layout.html\">starter HTML file</a>.\n              It contains all of the instructions for this exercise. To download the file,\n              you will need to right-click and \"view page source\" in Chrome.\n            </p>\n            <p>\n              Also, download this <a href=\"../code/starter/puppy.jpg\">picture</a>\n              of our course mascot Mowgli!\n            </p>\n            <p>\n              Create a style.css file and link it to the HTML file.\n              Follow the instructions in the HTML from there.\n            </p>\n            <p>\n              The <a href=\"../code/solution/layout-solution.html\">solution</a>\n              is available, but don't inspect it until you have finished your\n              solution!\n            </p>\n          </section>", "text": "Extra Practice: Layout With The Box Model And Flexbox Download this starter HTML file. It contains all of the instructions for this exercise. To download the file, you will need to right-click and \"view page source\" in Chrome. Also, download this picture of our course mascot Mowgli! Create a style.css file and link it to the HTML file. Follow the instructions in the HTML from there. The solution is available, but don't inspect it until you have finished your solution!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week02-thurs/slides/"},
{"html": "<section>\n          <h2>Sidebar: Default Parameter Values</h2>\n          <p>A quick note because you will see this in some of the PHP documentation</p>\n          <pre><code data-trim>function name(parameterName=value, ..., parameterName=value) {\n  statements;\n}</code></pre>\n          <p class=\"code-caption\">PHP (template)</p>\n      <pre><code data-trim>function print_separated($str, $separator=\", \") {\n  if (strlen($str) &lt; 0) {\n    echo $str[0];\n    for ($i = 1; $i &lt; strlen($str); $i++) {\n      echo $separator . $str[$i];\n    }\n  }\n}\nprint_separated(\"hello\");      # h, e, l, l, o\nprint_separated(\"hello\", \"-\"); # h-e-l-l-o</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>\n            If no value is passed, the default will be used (defaults must come last)\n          </p>\n        </section>", "text": "Sidebar: Default Parameter Values A quick note because you will see this in some of the PHP documentation function name(parameterName=value, ..., parameterName=value) { statements;} PHP (template) function print_separated($str, $separator=\", \") { if (strlen($str) < 0) { echo $str[0]; for ($i = 1; $i < strlen($str); $i++) { echo $separator . $str[$i]; } }}print_separated(\"hello\"); # h, e, l, l, oprint_separated(\"hello\", \"-\"); # h-e-l-l-o PHP (example) If no value is passed, the default will be used (defaults must come last)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>The <code>file</code> Function</h2>\n          <p><a href=\"https://www.php.net/manual/en/function.file.php\"><code>file</code></a>returns the lines of a file as an array of strings.</p>\n          <p>But each ends with \\n; to strip it, use an optional second parameter:</p>\n          <pre><code data-trim>$cities = file(\"cities.txt\");\nforeach ($cities as $city) { # for ($i = 0; $i &lt; count($cities); $i++)\n  echo $city;                # no newline needed here!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n  <pre><code data-trim>$lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);\nforeach ($cities as $city) {\n  echo \"{$city}\\n\";              # a newline is now needed!\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>Common idiom: foreach or for loop over lines of file</p>\n        </section>", "text": "The file Function filereturns the lines of a file as an array of strings. But each ends with \\n; to strip it, use an optional second parameter: $cities = file(\"cities.txt\");foreach ($cities as $city) { # for ($i = 0; $i < count($cities); $i++) echo $city; # no newline needed here!} PHP $lines = file(\"cities.txt\", FILE_IGNORE_NEW_LINES);foreach ($cities as $city) { echo \"{$city}\\n\"; # a newline is now needed!} PHP Common idiom: foreach or for loop over lines of file", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Reading/Writing an Entire File</h2>\n          <pre><code data-trim># reverse a file\n$text = file_get_contents(\"poem.txt\");\n$text = strrev($text);\nfile_put_contents(\"poem.txt\", $text);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p><code>file_get_contents</code> returns entire contents of a file as a string</p>\n          <ul>\n            <li>if the file doesn't exist, you will get a warning and an empty return string</li>\n          </ul>\n          <p><code>file_put_contents</code> writes a string into a file, <em>replacing its old\n            contents</em></p>\n          <ul>\n            <li>if the file doesn't exist, it will be created</li>\n          </ul>\n        </section>", "text": "Reading/Writing an Entire File # reverse a file$text = file_get_contents(\"poem.txt\");$text = strrev($text);file_put_contents(\"poem.txt\", $text); PHP file_get_contents returns entire contents of a file as a string if the file doesn't exist, you will get a warning and an empty return string file_put_contents writes a string into a file, replacing its old contents if the file doesn't exist, it will be created", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Appending to a File</h2>\n          <pre><code data-trim># add a new line to a file\n$new_text = \"P.S. ILY, GTG TTYL!~\";\nfile_put_contents(\"poem.txt\", $new_text, FILE_APPEND);</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <table>\n            <tr>\n              <th><strong>old contents</strong></th>\n              <th><strong>new contents</strong></th>\n            </tr>\n            <tr>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n              </td>\n              <td>\n                Roses are red\n                <br>\n                Violets are blue\n                <br>\n                All my base\n                <br>\n                Are belong to you.\n                <br>\n                P.S. ILY, GTG TTYL!~\n              </td>\n            </tr>\n          </table>\n          <p><code>file_put_contents</code> can be called with an optional third parameter to append\n          (add to\n          end) rather than overwrite.</p>\n        </section>", "text": "Appending to a File # add a new line to a file$new_text = \"P.S. ILY, GTG TTYL!~\";file_put_contents(\"poem.txt\", $new_text, FILE_APPEND); PHP old contents new contents Roses are red Violets are blue All my base Are belong to you. Roses are red Violets are blue All my base Are belong to you. P.S. ILY, GTG TTYL!~ file_put_contents can be called with an optional third parameter to append (add to end) rather than overwrite.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>Splitting/Joining Strings</h2>\n              <pre><code data-trim>$arr = explode(delimiter, string);\n$str = implode(delimiter, array);</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>$s = \"CSE 154 A\";\n$a = explode(\" \", $s);     # (\"CSE\", \"154\", \"A\")\n$s2 = implode(\"...\", $a);  # \"CSE...154...A\"  </code></pre>\n              <p class=\"code-caption\">PHP (example)</p>\n              <p><code>explode</code> and <code>implode</code> convert between strings and arrays.</p>\n              <p>For more complex strings, you can use regular expressions.</p>\n            </section>", "text": "Splitting/Joining Strings $arr = explode(delimiter, string);$str = implode(delimiter, array); PHP (template) $s = \"CSE 154 A\";$a = explode(\" \", $s); # (\"CSE\", \"154\", \"A\")$s2 = implode(\"...\", $a); # \"CSE...154...A\" PHP (example) explode and implode convert between strings and arrays. For more complex strings, you can use regular expressions.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>Example with <code>explode</code></h2>\n              <pre><code data-trim>Seattle, Space Needle\nNew York, Ellis Island\nBoston, Boston Harbor\nPhiladelphia, Valley Forge</code></pre>\n              <p class=\"code-caption\">contents of cities.txt</p>\n              <pre><code data-trim>foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) {\n  $tokens = explode(\",\", $city);\n  echo \"The best place to visit in \" . $tokens[0] .\n         \" is \" . $tokens[1] . \".\\n\";\n}</code></pre>\n              <p class=\"code-caption\">PHP</p>\n              <div class=\"output\">The best place to visit in Seattle is Space Needle.<br>\nThe best place to visit in New York is Ellis Island.<br>\nThe best place to visit in Boston is Boston Harbor.<br>\nThe best place to visit in Philadelphia is Valley Forge.\n              </div>\n              <p class=\"output-caption\">output</p>\n            </section>", "text": "Example with explode Seattle, Space NeedleNew York, Ellis IslandBoston, Boston HarborPhiladelphia, Valley Forge contents of cities.txt foreach (file(\"cities.txt\", FILE_IGNORE_NEW_LINES) as $city) { $tokens = explode(\",\", $city); echo \"The best place to visit in \" . $tokens[0] . \" is \" . $tokens[1] . \".\\n\";} PHP The best place to visit in Seattle is Space Needle.The best place to visit in New York is Ellis Island.The best place to visit in Boston is Boston Harbor.The best place to visit in Philadelphia is Valley Forge. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n              <h2>Unpacking an array: <a href=\"https://www.w3schools.com/php/func_array_list.asp\" target=\"_blank\"><code>list</code></a></h2>\n             <p>The list function \"unpacks\" an array into a set of variables.</p>\n             <p>When you now a file or line's exact length/format, use file and list to unpack it</p>\n              <pre><code data-trim>list($var1, ..., $varN) = array;</code></pre>\n              <p class=\"code-caption\">PHP (template)</p>\n              <pre><code data-trim>Kyle Thayer\n(206) 154 2017\n17-154-0123</code></pre>\n              <p class=\"code-caption\">contents of personal.txt</p>\n              <pre><code data-trim>list($name, $phone, $ssn) = file(\"personal.txt\");\n...\nlist($area_code, $prefix, $suffix) = explode(\" \", $phone);  </code></pre>\n              <p class=\"code-caption\">PHP</p>\n            </section>", "text": "Unpacking an array: list The list function \"unpacks\" an array into a set of variables. When you now a file or line's exact length/format, use file and list to unpack it list($var1, ..., $varN) = array; PHP (template) Kyle Thayer(206) 154 201717-154-0123 contents of personal.txt list($name, $phone, $ssn) = file(\"personal.txt\");...list($area_code, $prefix, $suffix) = explode(\" \", $phone); PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Reading Directories - IMPORTANT SLIDE!</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_glob.asp\" target=\"_blank\">glob</a></td>\n              <td>returns an array of all file names that match a given pattern\n              (returns a file path and name, such as \"foo/bar/myfile.txt\")</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_scandir.asp\" target=\"_blank\">scandir</a></td>\n              <td>\n                returns an array of all file names in a given directory\n                (returns just the file names, such as \"myfile.txt\")</td>\n            </tr>\n          </table>\n          <p>Can accept a general path with the * wildcard (more powerful).</p>\n        </section>", "text": "Reading Directories - IMPORTANT SLIDE! function description glob returns an array of all file names that match a given pattern (returns a file path and name, such as \"foo/bar/myfile.txt\") scandir returns an array of all file names in a given directory (returns just the file names, such as \"myfile.txt\") Can accept a general path with the * wildcard (more powerful).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Example: Points of Interests in Files</h2>\n          <div class=\"side-by-side\">\n            <div>\n              <img class=\"simpleimg half-width\" src=\"hidden/citiesdirectory.png\" alt=\"directory structure for cities\">\n            </div>\n            <div>\n              <p>\n                Suppose we store information about each Point of Interest in a file\n                in a city subdirectory.\n              </p>\n              <p>The name of the file is the name of the Point of Interest</p>\n              <p>\n                Each file contains 2 lines\n              </p><p>\n              </p><ul>\n                <li>The URL of an image of the Point of Interest</li>\n                <li>The review of the Point of Interest</li>\n              </ul>\n            </div>\n          </div>\n        </section>", "text": "Example: Points of Interests in Files Suppose we store information about each Point of Interest in a file in a city subdirectory. The name of the file is the name of the Point of Interest Each file contains 2 lines The URL of an image of the Point of Interest The review of the Point of Interest", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2><code>glob</code> Example</h2>\n          <pre><code data-trim># Get all of the information from the cities\n$cities = glob(\"cities/*/*\");\nforeach ($cities as $city) {\n  $text = file_get_contents($city);\n  echo (basename($city) . \" : \" . $text . \"\\n\");\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>glob can match a wildcard path with the * character</p>\n          <ul>\n            <li><code>glob(\"foo/bar/*.doc\")</code> returns all .doc files in the foo/bar\n              subdirectory</li>\n            <li><code>glob(\"food*\")</code> returns all files whose names begin with \"food\"</li>\n          </ul>\n          <p>The <code>basename</code> function strips any leading directory from a file path</p>\n          <ul>\n            <li><code>basename(\"foo/bar/baz.txt\")</code> returns \"baz.txt\"</li>\n          </ul>\n        </section>", "text": "glob Example # Get all of the information from the cities$cities = glob(\"cities/*/*\");foreach ($cities as $city) { $text = file_get_contents($city); echo (basename($city) . \" : \" . $text . \"\\n\");} PHP glob can match a wildcard path with the * character glob(\"foo/bar/*.doc\") returns all .doc files in the foo/bar subdirectory glob(\"food*\") returns all files whose names begin with \"food\" The basename function strips any leading directory from a file path basename(\"foo/bar/baz.txt\") returns \"baz.txt\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2><code>scandir</code> Example</h2>\n          <pre><code data-trim>foreach (scandir(\"cities/\") as $city) {\n  echo \"I found a city: {$city}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <div class=\"output\">\n            <p>I found a city: .</p>\n            <p>I found a city: ..</p>\n            <p>I found a city: Ann_Arbor</p>\n            <p>I found a city: Beijing</p>\n            <p>...</p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p><code>scandir</code> includes current directory (\".\") and parent (\"..\") in the array.</p>\n          <p>Don't need <code>basename</code> with <code>scandir</code>; returns file names only\n          without directory</p>\n        </section>", "text": "scandir Example foreach (scandir(\"cities/\") as $city) { echo \"I found a city: {$city}\\n\";} PHP I found a city: . I found a city: .. I found a city: Ann_Arbor I found a city: Beijing ... output scandir includes current directory (\".\") and parent (\"..\") in the array. Don't need basename with scandir; returns file names only without directory", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Putting it all together: File Based Points of Interest</h2>\n          <p>\n            The <a href=\"examples/pointsofinterest.zip\">pointsofinterest.zip</a> example\n            has been put together for you to look explore (note that it is not yet finished, and\n            also could use some refactoring to meet the Code Quality Guide!)\n          </p>\n        </section>", "text": "Putting it all together: File Based Points of Interest The pointsofinterest.zip example has been put together for you to look explore (note that it is not yet finished, and also could use some refactoring to meet the Code Quality Guide!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h1>Code Quality in a Web Service</h1>\n          <p>Where did you see adherence to the similar code quality guidlines as for JS? </p>\n          <p>What was similar?</p>\n          <p>What was different?</p>\n        </section>", "text": "Code Quality in a Web Service Where did you see adherence to the similar code quality guidlines as for JS? What was similar? What was different?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec19-php-iii/"},
{"html": "<section>\n          <h2>Section 2: More HTML and Intro to CSS</h2>\n          <h3>CSE 154</h3>\n        </section>", "text": "Section 2: More HTML and Intro to CSS CSE 154", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h3>Agenda</h3>\n            <ul>\n              <li>Using Semantic HTML Tags</li>\n              <li>How to Add Style to your Webpage with CSS</li>\n              <li>Time to Work on CP1 and \"Demo GitGrade Submission\"</li>\n            </ul>\n          </section>", "text": "Agenda Using Semantic HTML Tags How to Add Style to your Webpage with CSS Time to Work on CP1 and \"Demo GitGrade Submission\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>Lingering Git/Atom issues?</h2>\n            <p>\n              Check out this REALLY awesome\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/assets/atomgit/atomGitFAQ.html\">FAQ</a>\n             written by our TA Jack!\n           </p>\n          </section>", "text": "Lingering Git/Atom issues? Check out this REALLY awesome FAQ written by our TA Jack!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <section>\n              <h2>Exercise 1 (HTML): What Semantic Tags Should I Use?</h2>\n            </section>\n            <section>\n              <h3>What <a href=\"../../../lectures/lec02-html-css/index.html#/22\">semantic</a>\n                tags do you see in these pages?</h3>\n              <img src=\"images/wiki.png\" alt=\"Wikipedia screenshot\">\n              <p>Remember: Dive down below for each exercise!</p>\n            </section>\n\n            <section>\n              <h3>What <a href=\"../../../lectures/lec02-html-css/index.html#/22\">semantic</a>\n                tags do you see in these pages?</h3>\n              <img src=\"images/ny-times.png\" alt=\"New York Times screenshot\">\n            </section>\n          </section>", "text": "Exercise 1 (HTML): What Semantic Tags Should I Use? What semantic tags do you see in these pages? Remember: Dive down below for each exercise! What semantic tags do you see in these pages?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n              <h2>Exercise 1 (HTML): What Semantic Tags Should I Use?</h2>\n            </section>", "text": "Exercise 1 (HTML): What Semantic Tags Should I Use?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n              <h3>What <a href=\"../../../lectures/lec02-html-css/index.html#/22\">semantic</a>\n                tags do you see in these pages?</h3>\n              <img src=\"images/wiki.png\" alt=\"Wikipedia screenshot\">\n              <p>Remember: Dive down below for each exercise!</p>\n            </section>", "text": "What semantic tags do you see in these pages? Remember: Dive down below for each exercise!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n              <h3>What <a href=\"../../../lectures/lec02-html-css/index.html#/22\">semantic</a>\n                tags do you see in these pages?</h3>\n              <img src=\"images/ny-times.png\" alt=\"New York Times screenshot\">\n            </section>", "text": "What semantic tags do you see in these pages?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 2: Styling our about.html page with style.css</h2>\n          </section>\n          <section>\n            <h2>Cascading Style Sheets (CSS):\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\">&lt;link&gt;</a>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n...\n  &lt;link href=\"filename\" rel=\"stylesheet\" /&gt;\n...\n&lt;/head&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n            <p>\n              <strong>CSS</strong> describes the appearance and layout of information on a\n              web page (as opposed to HTML, which describes the structure for content)\n            </p>\n          </section>\n\n          <section>\n            <h2>Basic CSS Rule Syntax</h2>\n            <pre><code class=\"hljs\" data-trim>selector {\n  property: value;\n  property: value;\n  ...\n  property: value;\n}</code></pre>\n            <p class=\"code-caption\">CSS (template)</p>\n\n            <pre><code class=\"hijs\" data-trim>p {\n  color: red;\n  font-family: sans-serif;\n} </code></pre>\n            <p class=\"code-caption\">CSS (example)</p>\n          </section>\n\n          <section>\n            <h2>Demo: What Rules Should We Apply To about.html?</h2>\n            <p>MDN has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\">\n              great list of CSS properties</a> to look through!<br>Beware, it is a bit long.\n          </p></section>\n\n        </section>", "text": "Exercise 2: Styling our about.html page with style.css Cascading Style Sheets (CSS): <link> <head>... <link href=\"filename\" rel=\"stylesheet\" />...</head> HTML (template) <link href=\"style.css\" rel=\"stylesheet\" /> HTML (example) CSS describes the appearance and layout of information on a web page (as opposed to HTML, which describes the structure for content) Basic CSS Rule Syntax selector { property: value; property: value; ... property: value;} CSS (template) p { color: red; font-family: sans-serif;} CSS (example) Demo: What Rules Should We Apply To about.html? MDN has a great list of CSS properties to look through!Beware, it is a bit long.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Styling our about.html page with style.css</h2>\n          </section>", "text": "Exercise 2: Styling our about.html page with style.css", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>Cascading Style Sheets (CSS):\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\">&lt;link&gt;</a>\n            </h2>\n            <pre><code class=\"hljs\" data-trim>&lt;head&gt;\n...\n  &lt;link href=\"filename\" rel=\"stylesheet\" /&gt;\n...\n&lt;/head&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"style.css\" rel=\"stylesheet\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n            <p>\n              <strong>CSS</strong> describes the appearance and layout of information on a\n              web page (as opposed to HTML, which describes the structure for content)\n            </p>\n          </section>", "text": "Cascading Style Sheets (CSS): <link> <head>... <link href=\"filename\" rel=\"stylesheet\" />...</head> HTML (template) <link href=\"style.css\" rel=\"stylesheet\" /> HTML (example) CSS describes the appearance and layout of information on a web page (as opposed to HTML, which describes the structure for content)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>Basic CSS Rule Syntax</h2>\n            <pre><code class=\"hljs\" data-trim>selector {\n  property: value;\n  property: value;\n  ...\n  property: value;\n}</code></pre>\n            <p class=\"code-caption\">CSS (template)</p>\n\n            <pre><code class=\"hijs\" data-trim>p {\n  color: red;\n  font-family: sans-serif;\n} </code></pre>\n            <p class=\"code-caption\">CSS (example)</p>\n          </section>", "text": "Basic CSS Rule Syntax selector { property: value; property: value; ... property: value;} CSS (template) p { color: red; font-family: sans-serif;} CSS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>Demo: What Rules Should We Apply To about.html?</h2>\n            <p>MDN has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\">\n              great list of CSS properties</a> to look through!<br>Beware, it is a bit long.\n          </p></section>", "text": "Demo: What Rules Should We Apply To about.html? MDN has a great list of CSS properties to look through!Beware, it is a bit long.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <h2>Time to Work on CP1</h2>\n      </section>", "text": "Time to Work on CP1", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <h2>Demo: Submitting CP1 on GitGrade</h2>\n        <p>Note: You should re-submit once you've finished all the requirements by Saturday at\n        11PM!</p>\n      </section>", "text": "Demo: Submitting CP1 on GitGrade Note: You should re-submit once you've finished all the requirements by Saturday at 11PM!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <h2>Resources, Looking Ahead &amp; Extra Practice</h2>\n      </section>", "text": "Resources, Looking Ahead & Extra Practice", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <h2>Debugging In The Browser</h2>\n        <p><a href=\"../../../resources/assets/debugging/chrome-inspector.html\">\n          Guide to using the Chrome Inspector</a></p>\n      </section>", "text": "Debugging In The Browser Guide to using the Chrome Inspector", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <section>\n          <h2>Extra Practice: GOT Selectors</h2>\n          <p>Directions: Use the given HTML code and CSS selector tool on the\n          slide below to improve your skills in CSS selectors!</p>\n          <p>NOTE: We will be visiting <a href=\"https://www.w3schools.com/css/css_combinators.asp\">\n            context selectors</a> (AKA combinators) in depth during Friday's lecture\n            as well as the beginning of next week, but it could be a useful exercise\n            to gain some early familiarity!\n        </p></section>\n\n        <section>\n          <div id=\"htmlcode\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;GOT FTW&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n  &lt;h1&gt;Game of Thrones Page&lt;/h1&gt;\n  &lt;div id=\"intro\"&gt;\n    &lt;h2&gt;Introduction&lt;/h2&gt;\n    &lt;p&gt;Game of Thrones is the best series ever!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"content\"&gt;\n    &lt;div class=\"bordered\"&gt;\n      &lt;p&gt;\n        There are five books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons.\n      &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;h2&gt;Houses&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li&gt;House Stark&lt;/li&gt;\n      &lt;li&gt;House Targaryen&lt;/li&gt;\n      &lt;li&gt;House Lannister&lt;/li&gt;\n      &lt;li&gt;House Tully&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;h2&gt;Plot&lt;/h2&gt;\n    &lt;p&gt;It's too long to describe. Just read the books!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"footer\"&gt;\n    &lt;h2 class=\"bordered\"&gt;Thank you!&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n          \n          <p class=\"code-caption\">HTML</p>\n          </div>\n\n          <div style=\"width: 30%; float: left;\">\n            <div>\n              <p>\n              Write a CSS selector here for:\n              <input type=\"text\" id=\"selector\" style=\"margin-left: 10px; font-family: monospace; font-size: 60%;\" placeholder=\"type CSS here\">\n              </p>\n            </div>\n            <ol class=\"medium-small-font\">\n              <li>all <code>h2</code> elements</li>\n              <li>element with ID <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>content</code> and <code>footer</code></li>\n              <li><code>p</code> elements inside <code>content</code></li>\n              <li><code>p</code> elements directly inside <code>content</code></li>\n              <li>elements with class <code>bordered</code></li>\n              <li><code>h2</code> elements with class <code>bordered</code></li>\n            </ol>\n            <!-- Text area containing real code, used to preserve spacing-->\n            <textarea id=\"htmlcodeenter\" cols=\"1\" rows=\"1\" style=\"display:none;\">\n    \n    <title>GOT FTW</title>\n    \n    <h1>Game of Thrones Fan Page</h1>\n    <div id=\"intro\">\n      <h2>Introduction</h2>\n      <p>Game of Thrones is the best series ever!</p>\n    </div>\n    <div id=\"content\">\n      <div class=\"bordered\">\n        <p>There are 5 books: A Game of Thrones, A Clash\n           of Kings, a Storm of Swords, a Feast for Crows,\n           and a Dance with Dragons.\n        </p>\n      </div>\n      <h2>Houses:</h2>\n      <ul>\n        <li>House Stark</li>\n        <li>House Targaryen</li>\n        <li>House Lannister</li>\n        <li>House Tully</li>\n      </ul>\n      <h2>Plot</h2>\n      <p>It's too long to describe. Just read the books!</p>\n    </div>\n    <div id=\"footer\">\n      <h2 class=\"bordered\">Thank you!</h2>\n    </div>\n    </textarea>\n          </div>\n        </section>\n        <section>\n          <h2>GOT Selectors: Solutions</h2>\n          <ol id=\"answer-list\" style=\"float: left; font-size: 20pt; width: 90%\">\n            <li>all <code>h2</code> elements<span class=\"answer\">h2</span></li>\n            <li>element with ID <code>intro</code><span class=\"answer\">#intro</span></li>\n            <li><code>h2</code> elements inside <code>intro</code><span class=\"answer\">#intro\n                h2</span></li>\n            <li><code>h2</code> elements inside <code>content, footer</code><span class=\"answer\">#content h2, #footer h2</span></li>\n            <li><code>p</code> elements inside <code>content</code><span class=\"answer\">#content p</span></li>\n            <li><code>p</code> elements directly inside <code>content</code><span class=\"answer\">#content &gt; p</span></li>\n            <li>elements with class <code>bordered</code><span class=\"answer\">.bordered</span></li>\n            <li><code>h2</code> elements with class <code>bordered</code><span class=\"answer\">h2.bordered</span></li>\n          </ol>\n        </section>\n      </section>", "text": "Extra Practice: GOT Selectors Directions: Use the given HTML code and CSS selector tool on the slide below to improve your skills in CSS selectors! NOTE: We will be visiting context selectors (AKA combinators) in depth during Friday's lecture as well as the beginning of next week, but it could be a useful exercise to gain some early familiarity! <!DOCTYPE html><html> <head><title>GOT FTW</title></head> <body> <h1>Game of Thrones Page</h1> <div id=\"intro\"> <h2>Introduction</h2> <p>Game of Thrones is the best series ever!</p> </div> <div id=\"content\"> <div class=\"bordered\"> <p> There are five books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. </p> </div> <h2>Houses</h2> <ul> <li>House Stark</li> <li>House Targaryen</li> <li>House Lannister</li> <li>House Tully</li> </ul> <h2>Plot</h2> <p>It's too long to describe. Just read the books!</p> </div> <div id=\"footer\"> <h2 class=\"bordered\">Thank you!</h2> </div> </body></html> HTML Write a CSS selector here for: all h2 elements element with ID intro h2 elements inside intro h2 elements inside content and footer p elements inside content p elements directly inside content elements with class bordered h2 elements with class bordered GOT FTW Game of Thrones Fan Page Introduction Game of Thrones is the best series ever! There are 5 books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. Houses: House Stark House Targaryen House Lannister House Tully Plot It's too long to describe. Just read the books! Thank you! GOT Selectors: Solutions all h2 elementsh2 element with ID intro#intro h2 elements inside intro#intro h2 h2 elements inside content, footer#content h2, #footer h2 p elements inside content#content p p elements directly inside content#content > p elements with class bordered.bordered h2 elements with class borderedh2.bordered", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <h2>Extra Practice: GOT Selectors</h2>\n          <p>Directions: Use the given HTML code and CSS selector tool on the\n          slide below to improve your skills in CSS selectors!</p>\n          <p>NOTE: We will be visiting <a href=\"https://www.w3schools.com/css/css_combinators.asp\">\n            context selectors</a> (AKA combinators) in depth during Friday's lecture\n            as well as the beginning of next week, but it could be a useful exercise\n            to gain some early familiarity!\n        </p></section>", "text": "Extra Practice: GOT Selectors Directions: Use the given HTML code and CSS selector tool on the slide below to improve your skills in CSS selectors! NOTE: We will be visiting context selectors (AKA combinators) in depth during Friday's lecture as well as the beginning of next week, but it could be a useful exercise to gain some early familiarity!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 1: Introductions, HTML, and Getting Started with Git</h3>\n        </section>", "text": "CSE 154 Section 1: Introductions, HTML, and Getting Started with Git", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <p>Introductions/Icebreaker</p>\n          <p>Introduction to web development tools (Atom and your browser)</p>\n          <p>Getting started with your first CSE 154 Git Repository (CP1)</p>\n          <p>Review HTML and Validation</p>\n        </section>", "text": "Today's Agenda Introductions/Icebreaker Introduction to web development tools (Atom and your browser) Getting started with your first CSE 154 Git Repository (CP1) Review HTML and Validation", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Section Goals</h2>\n          <p>By the end of this section, you should be able to:\n          </p><ul>\n            <li>Know your TA and classmates a little better</li>\n            <li>Be able to identify and fix common HTML validation errors, and understand\n            the motivation for valid HTML code</li>\n            <li>Work on your CP1 having your GitGrade repository cloned!</li>\n          </ul>\n        </section>", "text": "Section Goals By the end of this section, you should be able to: Know your TA and classmates a little better Be able to identify and fix common HTML validation errors, and understand the motivation for valid HTML code Work on your CP1 having your GitGrade repository cloned!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Extra WPL Today!</h2>\n          <p>Use to make sure you have CP1 cloned, ask about the course, meet other students, etc.!</p>\n          <p>1:30-3:30PM in the CSE1 4th Floor Breakout! :)</p>\n        </section>", "text": "Extra WPL Today! Use to make sure you have CP1 cloned, ask about the course, meet other students, etc.! 1:30-3:30PM in the CSE1 4th Floor Breakout! :)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Introductions</h2>\n          <pre><code class=\"hljs font-24pt\" data-trim>&lt;ta&gt;Hello world!&lt;/ta&gt;</code></pre>\n        </section>", "text": "Introductions <ta>Hello world!</ta>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Part I: Getting Git Set Up</h3>\n          <p>\n            In this part of the section, we will walk through getting Git setup on your\n            computer with your first CSE 154 GitLab repository: <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/creative/creative-projects.html\">cp1-html-css</a>.\n          </p>\n          <ol>\n            <li><a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/resources/setup.html\" target=\"_blank\">Git Walkthrough</a></li>\n          </ol>\n        </section>", "text": "Part I: Getting Git Set Up In this part of the section, we will walk through getting Git setup on your computer with your first CSE 154 GitLab repository: cp1-html-css. Git Walkthrough", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n        <section>\n          <h3>Part II: Your Web Programming Environment</h3>\n          <p>\n            To get started with your first website, you need 1) a text editor like Atom and 2) a browser.\n          </p>\n          <p>\n            You should have Atom installed on your machine. This is what we will be supporting for or developing websites over the quarter. Note: if you prefer another editor such as Sublime, VSCode, Vim, etc. you may use it but TA's will not be expected to help with these.\n          </p>\n\n          <p>Students are expected to use the Chrome browser for this class due to its web development features, as well as accessibility tools that are not supported on other browsers. Note that when <em>browsing</em> the web, you need Internet access. But when <em>writing</em> HTML webpages, you don't!</p>\n        </section>\n        <section>\n          <h3>Part II (Cont.)</h3>\n          <p>\n          Writing HTML and CSS with an editor is similar to writing Java in an IDE like\n          jGrasp or Eclipse, or writing Python on the command line or your Python IDE of\n          choice. Conveniently, we don't need to compile HTML/CSS, and to \"run\" the code,\n          we just open the HTML page on the browser.\n          </p>\n\n          <p>\n          If you prefer another text editor like VisualStudio, Vim, or Emacs, these all\n          work as well (but we won't go into the details for each).\n          </p>\n        </section>\n      </section>", "text": "Part II: Your Web Programming Environment To get started with your first website, you need 1) a text editor like Atom and 2) a browser. You should have Atom installed on your machine. This is what we will be supporting for or developing websites over the quarter. Note: if you prefer another editor such as Sublime, VSCode, Vim, etc. you may use it but TA's will not be expected to help with these. Students are expected to use the Chrome browser for this class due to its web development features, as well as accessibility tools that are not supported on other browsers. Note that when browsing the web, you need Internet access. But when writing HTML webpages, you don't! Part II (Cont.) Writing HTML and CSS with an editor is similar to writing Java in an IDE like jGrasp or Eclipse, or writing Python on the command line or your Python IDE of choice. Conveniently, we don't need to compile HTML/CSS, and to \"run\" the code, we just open the HTML page on the browser. If you prefer another text editor like VisualStudio, Vim, or Emacs, these all work as well (but we won't go into the details for each).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Part II: Your Web Programming Environment</h3>\n          <p>\n            To get started with your first website, you need 1) a text editor like Atom and 2) a browser.\n          </p>\n          <p>\n            You should have Atom installed on your machine. This is what we will be supporting for or developing websites over the quarter. Note: if you prefer another editor such as Sublime, VSCode, Vim, etc. you may use it but TA's will not be expected to help with these.\n          </p>\n\n          <p>Students are expected to use the Chrome browser for this class due to its web development features, as well as accessibility tools that are not supported on other browsers. Note that when <em>browsing</em> the web, you need Internet access. But when <em>writing</em> HTML webpages, you don't!</p>\n        </section>", "text": "Part II: Your Web Programming Environment To get started with your first website, you need 1) a text editor like Atom and 2) a browser. You should have Atom installed on your machine. This is what we will be supporting for or developing websites over the quarter. Note: if you prefer another editor such as Sublime, VSCode, Vim, etc. you may use it but TA's will not be expected to help with these. Students are expected to use the Chrome browser for this class due to its web development features, as well as accessibility tools that are not supported on other browsers. Note that when browsing the web, you need Internet access. But when writing HTML webpages, you don't!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Part II (Cont.)</h3>\n          <p>\n          Writing HTML and CSS with an editor is similar to writing Java in an IDE like\n          jGrasp or Eclipse, or writing Python on the command line or your Python IDE of\n          choice. Conveniently, we don't need to compile HTML/CSS, and to \"run\" the code,\n          we just open the HTML page on the browser.\n          </p>\n\n          <p>\n          If you prefer another text editor like VisualStudio, Vim, or Emacs, these all\n          work as well (but we won't go into the details for each).\n          </p>\n        </section>", "text": "Part II (Cont.) Writing HTML and CSS with an editor is similar to writing Java in an IDE like jGrasp or Eclipse, or writing Python on the command line or your Python IDE of choice. Conveniently, we don't need to compile HTML/CSS, and to \"run\" the code, we just open the HTML page on the browser. If you prefer another text editor like VisualStudio, Vim, or Emacs, these all work as well (but we won't go into the details for each).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Part III: Writing your first HTML Page</h3>\n          <p>\n            Now that you have Git on your computer and a cloned repository for\n            cp1-html-css made just for you, we can use the provided starter code in that\n            repository to write our first HTML page!\n          </p>\n          <p>\n            Since this is only day 2 of CSE 154, we have filled in most of the structure\n            of the page (this takes time to remember) but you are to complete the page\n            with information about your own answers.\n          </p>\n        </section>", "text": "Part III: Writing your first HTML Page Now that you have Git on your computer and a cloned repository for cp1-html-css made just for you, we can use the provided starter code in that repository to write our first HTML page! Since this is only day 2 of CSE 154, we have filled in most of the structure of the page (this takes time to remember) but you are to complete the page with information about your own answers.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Review: HTML to Structure Webpage Content</h2>\n          <p>Remember to read Monday's readings (such as <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">this overview of HTML</a>) if you haven't yet!\n            Note: These are required to keep up with the course and are a replacement to a course textbook.</p>\n          <p>\n          The following slide column from yesterday's lecture is provided for your convenience! Remember to go \"down\" for a deeper dive.\n          </p>\n        </section>", "text": "Review: HTML to Structure Webpage Content Remember to read Monday's readings (such as this overview of HTML) if you haven't yet! Note: These are required to keep up with the course and are a replacement to a course textbook. The following slide column from yesterday's lecture is provided for your convenience! Remember to go \"down\" for a deeper dive.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>HTML Tags - Table of Common Tags (1/2)</h2>\n            <p class=\"medium-small-font\">\n            There are many different types of HTML tags used to structure web pages (we can't\n            possibly cover all of them within lecture). Here's a table of the most common ones\n            you'll use in CSE 154, but you can find a comprehensive list\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a>\n            (it's a great bookmark page for reference this quarter!) Unless otherwise specified,\n            all of the tags listed are required to be in the <code>&lt;body&gt;</code> of an HTML page\n            rather than the <code>&lt;head&gt;</code>.\n            </p>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#title-tag\"><code>&lt;title&gt;</code></a></td>\n                <td>Page title (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#meta-tag\"><code>&lt;meta&gt;</code></a></td>\n                <td>Meta information tag (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#favicon-tag\"><code>&lt;favicon&gt;</code></a></td>\n                <td>Icon placed in the browser title bar and bookmarks (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#p-tag\"><code>&lt;p&gt;</code></a></td>\n                <td>Paragraph tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#heading-tags\"><code>&lt;h1&gt; ... &lt;h6&gt;</code></a></td>\n                <td>Heading tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#header-footer-tags\"><code>&lt;header&gt;, &lt;footer&gt;</code></a></td>\n                <td>Header/Footer tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#article-section-tags\"><code>&lt;article&gt;, &lt;section&gt;</code></a></td>\n                <td>Article and section tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#hr-tag\"><code>&lt;hr /&gt;</code></a></td>\n                <td>Horizontal rule tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#br-tag\"><code>&lt;br /&gt;</code></a></td>\n                <td>Line break tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#a-tag\"><code>&lt;a&gt;</code></a></td>\n                <td>Anchor tag (page links)</td>\n              </tr>\n            </table>\n          </section>\n\n          <section>\n            <h2>HTML Tags - Table of Common Tags (2/2)</h2>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#img-tag\"><code>&lt;img /&gt;</code></a></td>\n                <td>Image tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#em-strong-tags\"><code>&lt;em&gt;, &lt;strong&gt;</code></a></td>\n                <td>Emphasis (italic) and strong (bold) tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#del-ins-tags\"><code>&lt;del&gt;, &lt;ins&gt;</code></a></td>\n                <td>Deletion (strikethrough) and insertion tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#abbr-tags\"><code>&lt;abbr&gt;</code></a></td>\n                <td>Abbreviation tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;ul&gt;</code></a>, <a href=\"#ol-tag\"><code>&lt;ol&gt;</code></a></td>\n                <td>Unordered and ordered list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;li&gt;</code></a></td>\n                <td>List item tag (used as children of <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> list tags)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#definition-list-tags\">\n                    <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code>\n                  </a>\n                  </td><td>Definition list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#blockquote-tag\"><code>&lt;blockquote&gt;</code></a>,\n                  <a href=\"#q-tag\"><code>&lt;q&gt;</code></a></td>\n                <td>Block and inline quotation tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#code-tags\"><code>&lt;code&gt;</code></a></td>\n                <td>Computer code tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#pre-tags\"><code>&lt;pre&gt;</code></a></td>\n                <td>Preformatting tag</td>\n              </tr>\n            </table>\n          </section>\n\n          <section id=\"title-tag\">\n            <h2>Page Title: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\">&lt;title&gt;</a></code></h2>\n            <pre>\n<code class=\"hljs\" data-trim>&lt;title&gt;\n  Chapter 2: HTML Basics\n&lt;/title&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed within the <code>&lt;head&gt;</code> of the page</p>\n            <p>\n            Displayed in the web browser's title bar and when bookmarking the page,\n            otherwise not visible to the user as page content\n            </p>\n          </section>\n\n          <section id=\"meta-tag\">\n            <h2>\n              Web Page Metadata:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            information about your page (for a browser, search engine, etc.)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"description\"\n      content=\"Authors' web site for\n      Building Java Programs.\" /&gt;\n&lt;meta name=\"keywords\" content=\"java, textbook\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed in the <code>head</code> section of your HTML page</p>\n            <p><code>meta</code> tags often have both the <code>name</code> and <code>content</code> attributes\n            </p><ul>\n              <li>Some <code>meta</code> tags use the <code>http-equiv</code> attribute instead of <code>name</code></li>\n              <li>The <code>meta</code> tag with <code>charset</code> attribute indicates language/character encodings</li>\n            </ul>\n            \n            <p>Using a <code>meta</code> tag <code>Content-Type</code> stops validator \"tentatively valid\" warnings\n            </p>\n          </section>\n\n          <section id=\"favicon-tag\">\n            <h2>Favorites icon (\"favicon\")</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n\n            <div class=\"output\">\n              <img src=\"../img/favicon1.gif\" alt=\"favicon\"> <img src=\"../img/favicon2.gif\" alt=\"favicon\">\n            </div>\n\n            <p>The <code>link</code> tag, placed in the <code>head</code> section, attaches another file to the page\n            </p><ul>\n              <li>In this case, an icon to be placed in the browser title bar and bookmarks</li>\n            </ul>\n            \n            <p>Note for IE6: Doesn't work; must put a file <code>favicon.ico</code> in the root\n            of the web server (<a href=\"http://www.clickfire.com/viewpoints/articles/favicons.php\">info</a>)</p>\n          </section>\n\n\n\n\n          <section id=\"p-tag\">\n            <h2>Paragraph: <a href=\"http://www.w3schools.com/tags/tag_p.asp\"><code>&lt;p&gt;</code></a></h2>\n            <p class=\"term-definition\">paragraphs of text (block)</p>\n            <pre><code class=\"hljs nohighlight small-font\" data-trim>&lt;p&gt;\n  You're not your job.\n  You're not how much money you make in the bank.\n  You're not the car you drive.\n  You're not the content of your wallet.\n  You're not your khakis.\n  You're not the all-singing, all-dancing crap of the world.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p class=\"medium-small-font\">\n              You're not your job.\n              You're not how much money you make in the bank.\n              You're not the car you drive.\n              You're not the content of your wallet. You're not your khakis. You're not the all-singing,\n              all-dancing crap of the world.\n            </p>\n            </div>\n            <p class=\"output-caption\">output</p>\n            <p>Placed in the <code>body</code> of the page</p>\n            <p><a href=\"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_paragraphs2\">More\n               paragraph examples</a></p>\n          </section>\n\n          <section id=\"heading-tags\">\n            <h2>\n              Headings:\n              <a href=\"http://www.w3schools.com/tags/tag_h1.asp\"><code>&lt;h1&gt;</code></a>,\n              <a href=\"http://www.w3schools.com/tags/tag_h2.asp\"><code>&lt;h2&gt;</code></a>, ...,\n              <a href=\"http://www.w3schools.com/tags/tag_h6.asp\"><code>&lt;h6&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">headings to separate major areas of the page\n            (block)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;h1&gt;University of Whoville&lt;/h1&gt;\n&lt;h2&gt;Department of Computer Science&lt;/h2&gt;\n&lt;h3&gt;Sponsored by Micro$oft&lt;/h3&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <h1>University of Whoville</h1>\n              <h2>Department of Computer Science</h2>\n              <h3>Sponsored by Micro$oft</h3>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p><a href=\"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_headers\">More\n              heading examples</a></p>\n          </section>\n\n          <section id=\"header-footer-tags\">\n            <h2><a href=\"https://www.w3schools.com/tags/tag_header.asp\"><code>&lt;header&gt;</code></a>\n              and <a href=\"https://www.w3schools.com/tags/tag_footer.asp\"><code>&lt;footer&gt;</code></a>\n            </h2>\n\n            <p><code>&lt;header&gt;</code> tags usually contain one or more &lt;h1-6&gt;\n            elements, maybe a logo, and authorship information</p>\n            <p><code>&lt;footer&gt;</code> tags might contain site map links, authorship\n            information, copyright information, etc.</p>\n            <pre><code class=\"hljs\" data-trim>&lt;header&gt; more html elements &lt;/header&gt;\n...maybe some other stuff...\n&lt;footer&gt; more html elements &lt;/footer&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>These tags are both block elements</p>\n            <p>Note: <em>not to be confused with the <code>&lt;head&gt;</code> tag, the\n              <code>&lt;header&gt;</code> is designed to contain headings for a\n              document.</em></p>\n          </section>\n\n          <section id=\"article-section-tags\">\n            <h2>\n              <a href=\"https://www.w3schools.com/tags/tag_article.asp\"><code>&lt;article&gt;</code></a> and\n              <a href=\"https://www.w3schools.com/tags/tag_section.asp\"><code>&lt;section&gt;</code></a>\n            </h2>\n\n            <p>The <code>&lt;article&gt;</code> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block)</p>\n            <p>The <code>&lt;section&gt;</code> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block)</p>\n            <pre><code class=\"hljs \" data-trim>&lt;article&gt;&lt;h2&gt;Mowgli's resume:&lt;/h2&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Objective:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Experience:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;References:&lt;/h3&gt; ...\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </section>\n\n          <section id=\"hr-tag\">\n            <h2>\n              Horizontal rule:\n              <a href=\"http://www.w3schools.com/tags/tag_p.asp\"><code>&lt;hr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a horizontal line to visually separate sections of a page (block)</p>\n\n            <pre>\n            <code class=\"hljs\">&lt;&gt;First paragraph&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Third paragraph&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>First paragraph</p>\n              <hr>\n              <p>Second paragraph</p>\n              <hr>\n              <p>Third paragraph</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n            This is the first example we've seen of a void (<q>self-closing</q>) tag:\n            <a href=\"https://www.w3.org/TR/html51/syntax.html#writing-html-documents-elements\">more on HTML Element types</a>\n            </p>\n          </section>\n\n          <section id=\"br-tag\">\n            <h2>\n              Line Break:\n              <a href=\"http://www.w3schools.com/tags/tag_br.asp\"><code>&lt;br /&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">forces a line break in the middle of a block element (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The woods are lovely, dark and deep, &lt;br /&gt;\n  But I have promises to keep, &lt;br /&gt;And miles\n  to go before I sleep, &lt;br /&gt;And miles to go before\n  I sleep.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <p>\n              The woods are lovely, dark and deep, <br>\n              But I have promises to keep, <br>And miles\n              to go before I sleep, <br>And miles to go before\n\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Warning: Don't over-use <code>br</code> (guideline: &gt;= 2 in a row is bad, better to not use any)\n            </p>\n            <p>\n            <code>br</code> tags should not be used to separate paragraphs or used multiple times in a row to create spacing\n            </p>\n          </section>\n\n          <section id=\"a-tag\">\n            <h2>\n              Links:\n              <a href=\"http://www.w3schools.com/tags/tag_h1.asp\"><code>&lt;a&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">links, or \"anchors\", to other pages (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Search for it on <a href=\"http://www.google.com/\">Google</a>!\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Uses the <code>href</code> (Hypertext REFerence) attribute to specify the destination URL\n            </p><ul>\n              <li>\n                Can be absolute (to another web site) or\n                relative (to another page on this site)\n              </li>\n            </ul>\n            \n            <p>Anchors are inline elements; must be placed in a block element such as\n            <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code>\n            </p>\n          </section>\n\n          <section id=\"img-tag\">\n            <h2>\n              Images:\n              <a href=\"http://www.w3schools.com/tags/tag_img.asp\"><code>&lt;img&gt;</code></a>\n            </h2>\n\n            <p>Inserts a graphical image into the page (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\n            <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>The <code>src</code> attribute specifies the image URL</p>\n            <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\n            <a href=\"https://www.w3schools.com/TAGs/att_img_alt.asp\">improves\n              accessibility</a> for users who can't otherwise see it</p>\n          </section>\n\n          <section>\n            <h2>More About Images</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\n  &lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\n   title=\"dumbo!\" /&gt;&lt;/a&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <a href=\"http://en.wikipedia.org/wiki/Koala/\">\n                <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\n              </a>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>If placed in an <code>&lt;a&gt;</code> anchor tag, the image becomes a link</p>\n\n            <p><strong>What's the title attribute?</strong></p>\n            <ul class=\"medium-small-font\">\n              <li title=\"See? Even this bullet right here.\"><code>title</code> attribute is an optional tooltip (on ANY element)</li>\n              <li title=\"Wah wahhhn programming is hard :(\">BUT the <code>title</code> attribute doesn't always work well for mobile and\n                accessibility, so its usage and future are debated</li>\n            </ul>\n          </section>\n\n          <section id=\"em-strong-tags\">\n            <h2>\n              <a href=\"http://www.w3schools.com/tags/tag_phrase_elements.asp\">\n                Phrase elements\n              </a>:\n              <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>\n            </h2>\n\n            <p>\n            <code>em</code>: emphasized text (usually rendered in italic) <br>\n            <code>strong</code>: strongly emphasized text (usually rendered in bold)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>As usual, the tags must be properly nested for a valid page</p>\n          </section>\n\n          <section id=\"del-ins-tags\">\n            <h2>\n              Deletions and insertions:\n              <a href=\"http://www.w3schools.com/tags/tag_del.asp\"><code>&lt;del&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_ins.asp\"><code>&lt;ins&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            content that should be considered deleted or added to the document (inline)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  &lt;del&gt;Final Exam&lt;/del&gt; &lt;ins&gt;Midterm&lt;/ins&gt; is on &lt;del&gt;Aug 29&lt;/del&gt;\n  &lt;ins&gt;Apr 17&lt;/ins&gt;.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del>\n              <ins>Apr 17</ins>.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"abbr-tag\">\n            <h2>\n              Abbreviations:\n              <a href=\"http://www.w3schools.com/tags/tag_abbr.asp\"><code>&lt;abbr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            an abbreviation, acronym, or slang term (inline)\n            </p>\n\n            <pre><code class=\"hljs \" data-trim>&lt;p&gt;\n  Safe divers always remember to check their\n  &lt;abbr title=\"Self-Contained Underwater Breathing Apparatus\"&gt;\n  SCUBA&lt;/abbr&gt; gear.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Safe divers always remember to check their\n              <abbr title=\"Self-Contained Underwater Breathing Apparatus\">\n                SCUBA</abbr> gear.\n              </p>\n              <p class=\"output-caption\">output</p>\n\n            </div>\n          </section>\n\n          <section id=\"ul-li-tags\">\n            <h2>\n              Unordered List:\n              <a href=\"http://www.w3schools.com/tags/tag_ul.asp\"><code>&lt;ul&gt;</code></a>,\n              <a href=\"http://www.w3schools.com/tags/tag_li.asp\"><code>&lt;li&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>ul</code> represents a bulleted list of items (block)<br>\n            <code>li</code> represents a single item within the list (block)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;No shoes&lt;/li&gt;\n  &lt;li&gt;No shirt&lt;/li&gt;\n  &lt;li&gt;No problem&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <ul>\n                <li>No shoes</li>\n                <li>No shirt</li>\n                <li>No problem</li>\n              </ul>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section>\n            <h2>More About Unordered Lists</h2>\n            <p>A list can contain other lists:</p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;Simpsons:\n    &lt;ul&gt;\n      &lt;li&gt;Homer&lt;/li&gt;\n      &lt;li&gt;Marge&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Family Guy:\n    &lt;ul&gt;\n      &lt;li&gt;Peter&lt;/li&gt;\n      &lt;li&gt;Lois&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <ul>\n                  <li>Simpsons:\n                    <ul>\n                      <li>Homer</li>\n                      <li>Marge</li>\n                    </ul>\n                  </li>\n                  <li>Family Guy:\n                    <ul>\n                      <li>Peter</li>\n                      <li>Lois</li>\n                    </ul>\n                  </li>\n                </ul>\n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"ol-tag\">\n            <h2>Ordered List: <a href=\"http://www.w3schools.com/tags/tag_ul.asp\"><code>&lt;ol&gt;</code></a></h2>\n\n            <p class=\"term-definition\">\n            <code>ol</code> represents a numbered list of items (block)\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;p&gt;RIAA business model:&lt;/p&gt;\n&lt;ol&gt;\n  &lt;li&gt;Sue customers&lt;/li&gt;\n  &lt;li&gt;???&lt;/li&gt;\n  &lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right medium-small-font\">\n                <p>RIAA business model:\n                </p><ol>\n                  <li>Sue customers</li>\n                  <li>???</li>\n                  <li>Profit!</li>\n                </ol>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n\n            <p>\n            We can make lists with letters or Roman numerals using CSS (later)\n            </p>\n          </section>\n\n          <section id=\"definition-list-tags\">\n            <h2>Definition list:\n              <a href=\"http://www.w3schools.com/tags/tag_dl.asp\"><code>&lt;dl&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_dt.asp\"><code>&lt;dt&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_dd.asp\"><code>&lt;dd&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>dl</code> represents a list of definitions of terms (block) <br>\n            <code>dt</code> represents each term, and <code>dd</code> its definition\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;dl&gt;\n  &lt;dt&gt;newbie&lt;/dt&gt;\n  &lt;dd&gt;\n    one who does not have\n    mad skills\n  &lt;/dd&gt;\n  &lt;dt&gt;own&lt;/dt&gt;\n  &lt;dd&gt;\n    to soundly defeat (e.g.\n    I owned that newbie!)\n  &lt;/dd&gt;\n  &lt;dt&gt;frag&lt;/dt&gt;\n  &lt;dd&gt;\n    a kill in a shooting game\n  &lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <p>\n                </p><dl>\n                  <dt>newbie</dt>\n                  <dd>one who does not have mad skills</dd>\n                  <dt>own</dt>\n                  <dd>to soundly defeat (e.g. I owned that newbie!)</dd>\n                  <dt>frag</dt>\n                  <dd>a kill in a shooting game</dd>\n                </dl>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>\n          <section id=\"blockquote-tag\">\n            <h2>\n              Quotations: <a href=\"http://www.w3schools.com/tags/tag_blockquote.asp\"><code>&lt;blockquote&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a quotation (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;As Lincoln said in his famous Gettysburg Address:&lt;/p&gt;\n&lt;blockquote&gt;\n  &lt;p&gt;\n    Fourscore and seven years ago, our fathers brought forth\n    on this continent a new nation, conceived in liberty, and\n    dedicated to the proposition that all men are created equal.\n  &lt;/p&gt;\n&lt;/blockquote&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output medium-small-font\">\n              <p>\n              As Lincoln said in his famous Gettysburg Address:\n              </p>\n              <blockquote>\n                <p>\n                Fourscore and seven years ago, our fathers brought forth\n                on this continent a new nation, conceived in liberty, and\n                dedicated to the proposition that all men are created equal.\n                </p>\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"q-tag\">\n            <h2>Inline quotations: <a href=\"http://www.w3schools.com/tags/tag_q.asp\"><code>&lt;q&gt;</code></a></h2>\n\n            <p class=\"term-definition\">a short quotation (inline)</p>\n\n            <pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, &lt;q&gt;Nevermore.&lt;/q&gt;&lt;/p&gt;</code></pre>\n\n            <p class=\"code-caption\">HTML</p>\n            <p>\n            Why not just write the following?<br>\n            </p><pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, \"Nevermore.\"&lt;/p&gt;</code></pre>\n            \n\n            <div>\n              <p>We don't use \" marks for two reasons:</p>\n              <ol>\n                <li>HTML shouldn't contain literal quotation mark characters; they should be written as <code>&amp;quot;</code></li>\n                <li>Using <code>&lt;q&gt;</code> allows us to apply CSS styles to quotations (seen later)</li>\n              </ol>\n            </div>\n          </section>\n\n          <section id=\"code-tag\">\n            <h2>\n              Computer Code:\n              <a href=\"http://www.w3schools.com/tags/tag_phrase_elements.asp\"><code>&lt;code&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            a short section of computer code (usually shown in a fixed-width font)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt;\n  tags make lists.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              The <code>ul</code> and <code>ol</code>\n              tags make lists.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>\n\n          <section id=\"pre-tag\">\n            <h2>\n              Preformatted Text:\n              <a href=\"http://www.w3schools.com/tags/tag_pre.asp\"><code>&lt;pre&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a large section of pre-formatted text (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;pre&gt;\n     Steve Jobs spoke loudly\n      reality distortion\n       Apple fans bow down\n&lt;/pre&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              </p><pre>\n     Steve Jobs speaks loudly\n      reality distortion\n       Apple fans bow down\n              </pre>\n              \n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Displayed with exactly the whitespace / line breaks given in the text</p>\n            <p>Shown in a fixed-width font by default</p>\n            <p>\n              How would it look if we had instead enclosed it in <code>code</code>\n              tags?\n            </p>\n          </section>\n        </section>", "text": "HTML Tags - Table of Common Tags (1/2) There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). Here's a table of the most common ones you'll use in CSE 154, but you can find a comprehensive list here (it's a great bookmark page for reference this quarter!) Unless otherwise specified, all of the tags listed are required to be in the <body> of an HTML page rather than the <head>. Tag Description <title> Page title (in <head>) <meta> Meta information tag (in <head>) <favicon> Icon placed in the browser title bar and bookmarks (in <head>) <p> Paragraph tag <h1> ... <h6> Heading tags <header>, <footer> Header/Footer tags <article>, <section> Article and section tags <hr /> Horizontal rule tag <br /> Line break tag <a> Anchor tag (page links) HTML Tags - Table of Common Tags (2/2) Tag Description <img /> Image tag <em>, <strong> Emphasis (italic) and strong (bold) tags <del>, <ins> Deletion (strikethrough) and insertion tags <abbr> Abbreviation tag <ul>, <ol> Unordered and ordered list tags <li> List item tag (used as children of <ul> or <ol> list tags) <dl>, <dt>, <dd> Definition list tags <blockquote>, <q> Block and inline quotation tags <code> Computer code tag <pre> Preformatting tag Page Title: <title> <title> Chapter 2: HTML Basics</title> HTML Placed within the <head> of the page Displayed in the web browser's title bar and when bookmarking the page, otherwise not visible to the user as page content Web Page Metadata: <meta> information about your page (for a browser, search engine, etc.) <meta charset=\"utf-8\" /><meta name=\"description\" content=\"Authors' web site for Building Java Programs.\" /><meta name=\"keywords\" content=\"java, textbook\" /> HTML Placed in the head section of your HTML page meta tags often have both the name and content attributes Some meta tags use the http-equiv attribute instead of name The meta tag with charset attribute indicates language/character encodings Using a meta tag Content-Type stops validator \"tentatively valid\" warnings Favorites icon (\"favicon\") <link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /> HTML (template) <link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /> HTML (example) The link tag, placed in the head section, attaches another file to the page In this case, an icon to be placed in the browser title bar and bookmarks Note for IE6: Doesn't work; must put a file favicon.ico in the root of the web server (info) Paragraph: <p> paragraphs of text (block) <p> You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world.</p> HTML You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world. output Placed in the body of the page More paragraph examples Headings: <h1>, <h2>, ..., <h6> headings to separate major areas of the page (block) <h1>University of Whoville</h1><h2>Department of Computer Science</h2><h3>Sponsored by Micro$oft</h3>HTML University of Whoville Department of Computer Science Sponsored by Micro$oft output More heading examples <header> and <footer> <header> tags usually contain one or more <h1-6> elements, maybe a logo, and authorship information <footer> tags might contain site map links, authorship information, copyright information, etc. <header> more html elements </header>...maybe some other stuff...<footer> more html elements </footer> HTML These tags are both block elements Note: not to be confused with the <head> tag, the <header> is designed to contain headings for a document. <article> and <section> The <article> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block) The <section> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block) <article><h2>Mowgli's resume:</h2> <section> <h3>Objective:</h3> ... </section> <section> <h3>Experience:</h3> ... </section> <section> <h3>References:</h3> ... </section></article> HTML Horizontal rule: <hr> a horizontal line to visually separate sections of a page (block) <>First paragraph</p><hr /><p>Second paragraph</p><hr><p>Third paragraph</p> HTML First paragraph Second paragraph Third paragraph output This is the first example we've seen of a void (self-closing) tag: more on HTML Element types Line Break: <br /> forces a line break in the middle of a block element (inline) <p> The woods are lovely, dark and deep, <br /> But I have promises to keep, <br />And miles to go before I sleep, <br />And miles to go before I sleep.</p> HTML The woods are lovely, dark and deep, But I have promises to keep, And miles to go before I sleep, And miles to go before output Warning: Don't over-use br (guideline: >= 2 in a row is bad, better to not use any) br tags should not be used to separate paragraphs or used multiple times in a row to create spacing Links: <a> links, or \"anchors\", to other pages (inline) <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML Search for it on Google! output Uses the href (Hypertext REFerence) attribute to specify the destination URL Can be absolute (to another web site) or relative (to another page on this site) Anchors are inline elements; must be placed in a block element such as <p> or <h1> Images: <img> Inserts a graphical image into the page (inline) <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /> HTML output The src attribute specifies the image URL HTML5 also requires an alt attribute describing the image, which improves accessibility for users who can't otherwise see it More About Images <a href=\"http://en.wikipedia.org/wiki/Koala/\"> <img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo!\" /></a> HTML output If placed in an <a> anchor tag, the image becomes a link What's the title attribute? title attribute is an optional tooltip (on ANY element) BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated Phrase elements : <em>, <strong> em: emphasized text (usually rendered in italic) strong: strongly emphasized text (usually rendered in bold) <p> HTML is <em>really</em>, <strong>REALLY</strong> fun!</p> HTML As usual, the tags must be properly nested for a valid page Deletions and insertions: <del>, <ins> content that should be considered deleted or added to the document (inline) <p> <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del> <ins>Apr 17</ins>.</p> HTML Final Exam Midterm is on Aug 29 Apr 17. output Abbreviations: <abbr> an abbreviation, acronym, or slang term (inline) <p> Safe divers always remember to check their <abbr title=\"Self-Contained Underwater Breathing Apparatus\"> SCUBA</abbr> gear.</p> HTML Safe divers always remember to check their SCUBA gear. output Unordered List: <ul>, <li> ul represents a bulleted list of items (block) li represents a single item within the list (block) <ul> <li>No shoes</li> <li>No shirt</li> <li>No problem</li></ul> HTML No shoes No shirt No problem output More About Unordered Lists A list can contain other lists: <ul> <li>Simpsons: <ul> <li>Homer</li> <li>Marge</li> </ul> </li> <li>Family Guy: <ul> <li>Peter</li> <li>Lois</li> </ul> </li></ul> HTML Simpsons: Homer Marge Family Guy: Peter Lois output Ordered List: <ol> ol represents a numbered list of items (block) <p>RIAA business model:</p><ol> <li>Sue customers</li> <li>???</li> <li>Profit!</li></ol> HTML RIAA business model: Sue customers ??? Profit! output We can make lists with letters or Roman numerals using CSS (later) Definition list: <dl>, <dt>, <dd> dl represents a list of definitions of terms (block) dt represents each term, and dd its definition <dl> <dt>newbie</dt> <dd> one who does not have mad skills </dd> <dt>own</dt> <dd> to soundly defeat (e.g. I owned that newbie!) </dd> <dt>frag</dt> <dd> a kill in a shooting game </dd></dl> HTML newbie one who does not have mad skills own to soundly defeat (e.g. I owned that newbie!) frag a kill in a shooting game output Quotations: <blockquote> a quotation (block) <p>As Lincoln said in his famous Gettysburg Address:</p><blockquote> <p> Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. </p></blockquote> HTML As Lincoln said in his famous Gettysburg Address: Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. output Inline quotations: <q> a short quotation (inline) <p>Quoth the Raven, <q>Nevermore.</q></p> HTML Why not just write the following? <p>Quoth the Raven, \"Nevermore.\"</p> We don't use \" marks for two reasons: HTML shouldn't contain literal quotation mark characters; they should be written as &quot; Using <q> allows us to apply CSS styles to quotations (seen later) Computer Code: <code> a short section of computer code (usually shown in a fixed-width font) <p> The <code>ul</code> and <code>ol</code> tags make lists.</p> HTML The ul and ol tags make lists. output Preformatted Text: <pre> a large section of pre-formatted text (block) <pre> Steve Jobs spoke loudly reality distortion Apple fans bow down</pre> HTML Steve Jobs speaks loudly reality distortion Apple fans bow down output Displayed with exactly the whitespace / line breaks given in the text Shown in a fixed-width font by default How would it look if we had instead enclosed it in code tags?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <div id=\"htmlcode\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;GOT FTW&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n  &lt;h1&gt;Game of Thrones Page&lt;/h1&gt;\n  &lt;div id=\"intro\"&gt;\n    &lt;h2&gt;Introduction&lt;/h2&gt;\n    &lt;p&gt;Game of Thrones is the best series ever!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"content\"&gt;\n    &lt;div class=\"bordered\"&gt;\n      &lt;p&gt;\n        There are five books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons.\n      &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;h2&gt;Houses&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li&gt;House Stark&lt;/li&gt;\n      &lt;li&gt;House Targaryen&lt;/li&gt;\n      &lt;li&gt;House Lannister&lt;/li&gt;\n      &lt;li&gt;House Tully&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;h2&gt;Plot&lt;/h2&gt;\n    &lt;p&gt;It's too long to describe. Just read the books!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div id=\"footer\"&gt;\n    &lt;h2 class=\"bordered\"&gt;Thank you!&lt;/h2&gt;\n  &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n          \n          <p class=\"code-caption\">HTML</p>\n          </div>\n\n          <div style=\"width: 30%; float: left;\">\n            <div>\n              <p>\n              Write a CSS selector here for:\n              <input type=\"text\" id=\"selector\" style=\"margin-left: 10px; font-family: monospace; font-size: 60%;\" placeholder=\"type CSS here\">\n              </p>\n            </div>\n            <ol class=\"medium-small-font\">\n              <li>all <code>h2</code> elements</li>\n              <li>element with ID <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>intro</code></li>\n              <li><code>h2</code> elements inside <code>content</code> and <code>footer</code></li>\n              <li><code>p</code> elements inside <code>content</code></li>\n              <li><code>p</code> elements directly inside <code>content</code></li>\n              <li>elements with class <code>bordered</code></li>\n              <li><code>h2</code> elements with class <code>bordered</code></li>\n            </ol>\n            <!-- Text area containing real code, used to preserve spacing-->\n            <textarea id=\"htmlcodeenter\" cols=\"1\" rows=\"1\" style=\"display:none;\">\n    \n    <title>GOT FTW</title>\n    \n    <h1>Game of Thrones Fan Page</h1>\n    <div id=\"intro\">\n      <h2>Introduction</h2>\n      <p>Game of Thrones is the best series ever!</p>\n    </div>\n    <div id=\"content\">\n      <div class=\"bordered\">\n        <p>There are 5 books: A Game of Thrones, A Clash\n           of Kings, a Storm of Swords, a Feast for Crows,\n           and a Dance with Dragons.\n        </p>\n      </div>\n      <h2>Houses:</h2>\n      <ul>\n        <li>House Stark</li>\n        <li>House Targaryen</li>\n        <li>House Lannister</li>\n        <li>House Tully</li>\n      </ul>\n      <h2>Plot</h2>\n      <p>It's too long to describe. Just read the books!</p>\n    </div>\n    <div id=\"footer\">\n      <h2 class=\"bordered\">Thank you!</h2>\n    </div>\n    </textarea>\n          </div>\n        </section>", "text": "<!DOCTYPE html><html> <head><title>GOT FTW</title></head> <body> <h1>Game of Thrones Page</h1> <div id=\"intro\"> <h2>Introduction</h2> <p>Game of Thrones is the best series ever!</p> </div> <div id=\"content\"> <div class=\"bordered\"> <p> There are five books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. </p> </div> <h2>Houses</h2> <ul> <li>House Stark</li> <li>House Targaryen</li> <li>House Lannister</li> <li>House Tully</li> </ul> <h2>Plot</h2> <p>It's too long to describe. Just read the books!</p> </div> <div id=\"footer\"> <h2 class=\"bordered\">Thank you!</h2> </div> </body></html> HTML Write a CSS selector here for: all h2 elements element with ID intro h2 elements inside intro h2 elements inside content and footer p elements inside content p elements directly inside content elements with class bordered h2 elements with class bordered GOT FTW Game of Thrones Fan Page Introduction Game of Thrones is the best series ever! There are 5 books: A Game of Thrones, A Clash of Kings, a Storm of Swords, a Feast for Crows, and a Dance with Dragons. Houses: House Stark House Targaryen House Lannister House Tully Plot It's too long to describe. Just read the books! Thank you!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <h2>GOT Selectors: Solutions</h2>\n          <ol id=\"answer-list\" style=\"float: left; font-size: 20pt; width: 90%\">\n            <li>all <code>h2</code> elements<span class=\"answer\">h2</span></li>\n            <li>element with ID <code>intro</code><span class=\"answer\">#intro</span></li>\n            <li><code>h2</code> elements inside <code>intro</code><span class=\"answer\">#intro\n                h2</span></li>\n            <li><code>h2</code> elements inside <code>content, footer</code><span class=\"answer\">#content h2, #footer h2</span></li>\n            <li><code>p</code> elements inside <code>content</code><span class=\"answer\">#content p</span></li>\n            <li><code>p</code> elements directly inside <code>content</code><span class=\"answer\">#content &gt; p</span></li>\n            <li>elements with class <code>bordered</code><span class=\"answer\">.bordered</span></li>\n            <li><code>h2</code> elements with class <code>bordered</code><span class=\"answer\">h2.bordered</span></li>\n          </ol>\n        </section>", "text": "GOT Selectors: Solutions all h2 elementsh2 element with ID intro#intro h2 elements inside intro#intro h2 h2 elements inside content, footer#content h2, #footer h2 p elements inside content#content p p elements directly inside content#content > p elements with class bordered.bordered h2 elements with class borderedh2.bordered", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n        <section>\n          <h3>Extra practice: (HTML and CSS): CSS Stands For...?</h3>\n          <p class=\"font-18pt\">\n            Given the following HTML, what HTML and CSS would be necessary to produce\n            the expected output below? (You can download the HTML\n            <a href=\"../code/starter/corgis.htmls\" target=\"_blank\">here</a>).\n          </p>\n          <pre><code class=\"hljs\" data-trim>\n            &lt;h1&gt;CSS: Corgis, Short &amp;amp; Sweet&lt;/h1&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\" style=\"background-color: #fff;\">\n            <h2 style=\"color: #444;\">\n              <span style=\"text-decoration: underline; color: green; font-size: 40pt;\">CSS</span>:\n              <span>C</span>orgis,\n              <span style=\"font-size: 14pt; font-family: cursive; text-transform: lowercase;\">Short</span>\n              &amp; <span style=\"font-family: cursive; font-style: italic; color: purple;\">Sweet</span>\n            </h2>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <ul>\n            <li class=\"font-18pt\">\n              The \"CSS\" text is green, underlined and 40pt font.\n            </li>\n            <li class=\"font-18pt\">\n              Both \"Short\" and \"Sweet\" have a cursive font type.\n            </li>\n            <li class=\"font-18pt\">\n              Any text that is not green/purple has a color of <code>#444</code>.\n            </li>\n            <li class=\"font-18pt\">\n              The \"short\" text is all lower-case and has a font-size of 14pt.\n            </li>\n            <li class=\"font-18pt\">\n              The \"Sweet\" text is purple and italicized.\n            </li>\n          </ul>\n          <p class=\"font-18pt\">\n            <strong>\n            <em>Note:</em></strong> you may add\n           <code>&lt;span&gt;</code> tags as appropriate to get the desired\n           output.\n          </p>\n        </section>\n\n        <section>\n          <h3>Exercise 3: Solution</h3>\n\n          <div class=\"side-by-side\">\n            <div style=\"width: 50%;\">\n              <pre><code class=\"hljs small-font\" data-trim>\n                  <h1>\n                    <span id=\"css-abbr\">CSS</span>: Corgis,\n                    <span id=\"short\">Short</span> &amp;amp;\n                    <span id=\"sweet\">Sweet</span>\n                  </h1></code></pre>\n              <p class=\"code-caption\">HTML</p>\n            </div>\n            <div style=\"width: 45%;\">\n\n                <pre><code class=\"hljs small-font\" data-trim>h1 {\n  color: #444;\n}\n\n#css-abbr {\n  color: green;\n  font-size: 40pt;\n  text-decoration: underline;\n}\n\n#short, #sweet {\n  font-family: cursive;\n}\n\n#short {\n  font-size: 14pt;\n  text-transform: lowercase;\n}\n\n#sweet {\n  color: purple;\n  font-style: italic;\n}</code></pre>\n              <p class=\"code-caption\">CSS</p>\n            </div>\n          </div>\n        </section>\n      </section>", "text": "Extra practice: (HTML and CSS): CSS Stands For...? Given the following HTML, what HTML and CSS would be necessary to produce the expected output below? (You can download the HTML here). <h1>CSS: Corgis, Short &amp; Sweet</h1> HTML CSS: Corgis, Short & Sweet output The \"CSS\" text is green, underlined and 40pt font. Both \"Short\" and \"Sweet\" have a cursive font type. Any text that is not green/purple has a color of #444. The \"short\" text is all lower-case and has a font-size of 14pt. The \"Sweet\" text is purple and italicized. Note: you may add <span> tags as appropriate to get the desired output. Exercise 3: Solution CSS: Corgis, Short &amp; Sweet HTML h1 { color: #444;}#css-abbr { color: green; font-size: 40pt; text-decoration: underline;}#short, #sweet { font-family: cursive;}#short { font-size: 14pt; text-transform: lowercase;}#sweet { color: purple; font-style: italic;} CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <h3>Extra practice: (HTML and CSS): CSS Stands For...?</h3>\n          <p class=\"font-18pt\">\n            Given the following HTML, what HTML and CSS would be necessary to produce\n            the expected output below? (You can download the HTML\n            <a href=\"../code/starter/corgis.htmls\" target=\"_blank\">here</a>).\n          </p>\n          <pre><code class=\"hljs\" data-trim>\n            &lt;h1&gt;CSS: Corgis, Short &amp;amp; Sweet&lt;/h1&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <div class=\"output\" style=\"background-color: #fff;\">\n            <h2 style=\"color: #444;\">\n              <span style=\"text-decoration: underline; color: green; font-size: 40pt;\">CSS</span>:\n              <span>C</span>orgis,\n              <span style=\"font-size: 14pt; font-family: cursive; text-transform: lowercase;\">Short</span>\n              &amp; <span style=\"font-family: cursive; font-style: italic; color: purple;\">Sweet</span>\n            </h2>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <ul>\n            <li class=\"font-18pt\">\n              The \"CSS\" text is green, underlined and 40pt font.\n            </li>\n            <li class=\"font-18pt\">\n              Both \"Short\" and \"Sweet\" have a cursive font type.\n            </li>\n            <li class=\"font-18pt\">\n              Any text that is not green/purple has a color of <code>#444</code>.\n            </li>\n            <li class=\"font-18pt\">\n              The \"short\" text is all lower-case and has a font-size of 14pt.\n            </li>\n            <li class=\"font-18pt\">\n              The \"Sweet\" text is purple and italicized.\n            </li>\n          </ul>\n          <p class=\"font-18pt\">\n            <strong>\n            <em>Note:</em></strong> you may add\n           <code>&lt;span&gt;</code> tags as appropriate to get the desired\n           output.\n          </p>\n        </section>", "text": "Extra practice: (HTML and CSS): CSS Stands For...? Given the following HTML, what HTML and CSS would be necessary to produce the expected output below? (You can download the HTML here). <h1>CSS: Corgis, Short &amp; Sweet</h1> HTML CSS: Corgis, Short & Sweet output The \"CSS\" text is green, underlined and 40pt font. Both \"Short\" and \"Sweet\" have a cursive font type. Any text that is not green/purple has a color of #444. The \"short\" text is all lower-case and has a font-size of 14pt. The \"Sweet\" text is purple and italicized. Note: you may add <span> tags as appropriate to get the desired output.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n          <h3>Exercise 3: Solution</h3>\n\n          <div class=\"side-by-side\">\n            <div style=\"width: 50%;\">\n              <pre><code class=\"hljs small-font\" data-trim>\n                  <h1>\n                    <span id=\"css-abbr\">CSS</span>: Corgis,\n                    <span id=\"short\">Short</span> &amp;amp;\n                    <span id=\"sweet\">Sweet</span>\n                  </h1></code></pre>\n              <p class=\"code-caption\">HTML</p>\n            </div>\n            <div style=\"width: 45%;\">\n\n                <pre><code class=\"hljs small-font\" data-trim>h1 {\n  color: #444;\n}\n\n#css-abbr {\n  color: green;\n  font-size: 40pt;\n  text-decoration: underline;\n}\n\n#short, #sweet {\n  font-family: cursive;\n}\n\n#short {\n  font-size: 14pt;\n  text-transform: lowercase;\n}\n\n#sweet {\n  color: purple;\n  font-style: italic;\n}</code></pre>\n              <p class=\"code-caption\">CSS</p>\n            </div>\n          </div>\n        </section>", "text": "Exercise 3: Solution CSS: Corgis, Short &amp; Sweet HTML h1 { color: #444;}#css-abbr { color: green; font-size: 40pt; text-decoration: underline;}#short, #sweet { font-family: cursive;}#short { font-size: 14pt; text-transform: lowercase;}#sweet { color: purple; font-style: italic;} CSS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-thurs/slides/"},
{"html": "<section>\n            <h2>HTML Tags - Table of Common Tags (1/2)</h2>\n            <p class=\"medium-small-font\">\n            There are many different types of HTML tags used to structure web pages (we can't\n            possibly cover all of them within lecture). Here's a table of the most common ones\n            you'll use in CSE 154, but you can find a comprehensive list\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">here</a>\n            (it's a great bookmark page for reference this quarter!) Unless otherwise specified,\n            all of the tags listed are required to be in the <code>&lt;body&gt;</code> of an HTML page\n            rather than the <code>&lt;head&gt;</code>.\n            </p>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#title-tag\"><code>&lt;title&gt;</code></a></td>\n                <td>Page title (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#meta-tag\"><code>&lt;meta&gt;</code></a></td>\n                <td>Meta information tag (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#favicon-tag\"><code>&lt;favicon&gt;</code></a></td>\n                <td>Icon placed in the browser title bar and bookmarks (in <code>&lt;head&gt;</code>)</td>\n              </tr>\n              <tr>\n                <td><a href=\"#p-tag\"><code>&lt;p&gt;</code></a></td>\n                <td>Paragraph tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#heading-tags\"><code>&lt;h1&gt; ... &lt;h6&gt;</code></a></td>\n                <td>Heading tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#header-footer-tags\"><code>&lt;header&gt;, &lt;footer&gt;</code></a></td>\n                <td>Header/Footer tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#article-section-tags\"><code>&lt;article&gt;, &lt;section&gt;</code></a></td>\n                <td>Article and section tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#hr-tag\"><code>&lt;hr /&gt;</code></a></td>\n                <td>Horizontal rule tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#br-tag\"><code>&lt;br /&gt;</code></a></td>\n                <td>Line break tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#a-tag\"><code>&lt;a&gt;</code></a></td>\n                <td>Anchor tag (page links)</td>\n              </tr>\n            </table>\n          </section>", "text": "HTML Tags - Table of Common Tags (1/2) There are many different types of HTML tags used to structure web pages (we can't possibly cover all of them within lecture). Here's a table of the most common ones you'll use in CSE 154, but you can find a comprehensive list here (it's a great bookmark page for reference this quarter!) Unless otherwise specified, all of the tags listed are required to be in the <body> of an HTML page rather than the <head>. Tag Description <title> Page title (in <head>) <meta> Meta information tag (in <head>) <favicon> Icon placed in the browser title bar and bookmarks (in <head>) <p> Paragraph tag <h1> ... <h6> Heading tags <header>, <footer> Header/Footer tags <article>, <section> Article and section tags <hr /> Horizontal rule tag <br /> Line break tag <a> Anchor tag (page links)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h2>HTML Tags - Table of Common Tags (2/2)</h2>\n            <table>\n              <tr>\n                <th>Tag</th>\n                <th>Description</th>\n              </tr>\n              <tr>\n                <td><a href=\"#img-tag\"><code>&lt;img /&gt;</code></a></td>\n                <td>Image tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#em-strong-tags\"><code>&lt;em&gt;, &lt;strong&gt;</code></a></td>\n                <td>Emphasis (italic) and strong (bold) tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#del-ins-tags\"><code>&lt;del&gt;, &lt;ins&gt;</code></a></td>\n                <td>Deletion (strikethrough) and insertion tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#abbr-tags\"><code>&lt;abbr&gt;</code></a></td>\n                <td>Abbreviation tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;ul&gt;</code></a>, <a href=\"#ol-tag\"><code>&lt;ol&gt;</code></a></td>\n                <td>Unordered and ordered list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#ul-li-tags\"><code>&lt;li&gt;</code></a></td>\n                <td>List item tag (used as children of <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> list tags)</td>\n              </tr>\n              <tr>\n                <td>\n                  <a href=\"#definition-list-tags\">\n                    <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code>\n                  </a>\n                  </td><td>Definition list tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#blockquote-tag\"><code>&lt;blockquote&gt;</code></a>,\n                  <a href=\"#q-tag\"><code>&lt;q&gt;</code></a></td>\n                <td>Block and inline quotation tags</td>\n              </tr>\n              <tr>\n                <td><a href=\"#code-tags\"><code>&lt;code&gt;</code></a></td>\n                <td>Computer code tag</td>\n              </tr>\n              <tr>\n                <td><a href=\"#pre-tags\"><code>&lt;pre&gt;</code></a></td>\n                <td>Preformatting tag</td>\n              </tr>\n            </table>\n          </section>", "text": "HTML Tags - Table of Common Tags (2/2) Tag Description <img /> Image tag <em>, <strong> Emphasis (italic) and strong (bold) tags <del>, <ins> Deletion (strikethrough) and insertion tags <abbr> Abbreviation tag <ul>, <ol> Unordered and ordered list tags <li> List item tag (used as children of <ul> or <ol> list tags) <dl>, <dt>, <dd> Definition list tags <blockquote>, <q> Block and inline quotation tags <code> Computer code tag <pre> Preformatting tag", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"title-tag\">\n            <h2>Page Title: <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\">&lt;title&gt;</a></code></h2>\n            <pre>\n<code class=\"hljs\" data-trim>&lt;title&gt;\n  Chapter 2: HTML Basics\n&lt;/title&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed within the <code>&lt;head&gt;</code> of the page</p>\n            <p>\n            Displayed in the web browser's title bar and when bookmarking the page,\n            otherwise not visible to the user as page content\n            </p>\n          </section>", "text": "Page Title: <title> <title> Chapter 2: HTML Basics</title> HTML Placed within the <head> of the page Displayed in the web browser's title bar and when bookmarking the page, otherwise not visible to the user as page content", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"meta-tag\">\n            <h2>\n              Web Page Metadata:\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            information about your page (for a browser, search engine, etc.)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"description\"\n      content=\"Authors' web site for\n      Building Java Programs.\" /&gt;\n&lt;meta name=\"keywords\" content=\"java, textbook\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>Placed in the <code>head</code> section of your HTML page</p>\n            <p><code>meta</code> tags often have both the <code>name</code> and <code>content</code> attributes\n            </p><ul>\n              <li>Some <code>meta</code> tags use the <code>http-equiv</code> attribute instead of <code>name</code></li>\n              <li>The <code>meta</code> tag with <code>charset</code> attribute indicates language/character encodings</li>\n            </ul>\n            \n            <p>Using a <code>meta</code> tag <code>Content-Type</code> stops validator \"tentatively valid\" warnings\n            </p>\n          </section>", "text": "Web Page Metadata: <meta> information about your page (for a browser, search engine, etc.) <meta charset=\"utf-8\" /><meta name=\"description\" content=\"Authors' web site for Building Java Programs.\" /><meta name=\"keywords\" content=\"java, textbook\" /> HTML Placed in the head section of your HTML page meta tags often have both the name and content attributes Some meta tags use the http-equiv attribute instead of name The meta tag with charset attribute indicates language/character encodings Using a meta tag Content-Type stops validator \"tentatively valid\" warnings", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"favicon-tag\">\n            <h2>Favorites icon (\"favicon\")</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (template)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML (example)</p>\n\n            <div class=\"output\">\n              <img src=\"../img/favicon1.gif\" alt=\"favicon\"> <img src=\"../img/favicon2.gif\" alt=\"favicon\">\n            </div>\n\n            <p>The <code>link</code> tag, placed in the <code>head</code> section, attaches another file to the page\n            </p><ul>\n              <li>In this case, an icon to be placed in the browser title bar and bookmarks</li>\n            </ul>\n            \n            <p>Note for IE6: Doesn't work; must put a file <code>favicon.ico</code> in the root\n            of the web server (<a href=\"http://www.clickfire.com/viewpoints/articles/favicons.php\">info</a>)</p>\n          </section>", "text": "Favorites icon (\"favicon\") <link href=\"filename\" type=\"MIME type\" rel=\"shortcut icon\" /> HTML (template) <link href=\"yahoo.gif\" type=\"image/gif\" rel=\"shortcut icon\" /> HTML (example) The link tag, placed in the head section, attaches another file to the page In this case, an icon to be placed in the browser title bar and bookmarks Note for IE6: Doesn't work; must put a file favicon.ico in the root of the web server (info)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"p-tag\">\n            <h2>Paragraph: <a href=\"http://www.w3schools.com/tags/tag_p.asp\"><code>&lt;p&gt;</code></a></h2>\n            <p class=\"term-definition\">paragraphs of text (block)</p>\n            <pre><code class=\"hljs nohighlight small-font\" data-trim>&lt;p&gt;\n  You're not your job.\n  You're not how much money you make in the bank.\n  You're not the car you drive.\n  You're not the content of your wallet.\n  You're not your khakis.\n  You're not the all-singing, all-dancing crap of the world.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p class=\"medium-small-font\">\n              You're not your job.\n              You're not how much money you make in the bank.\n              You're not the car you drive.\n              You're not the content of your wallet. You're not your khakis. You're not the all-singing,\n              all-dancing crap of the world.\n            </p>\n            </div>\n            <p class=\"output-caption\">output</p>\n            <p>Placed in the <code>body</code> of the page</p>\n            <p><a href=\"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_paragraphs2\">More\n               paragraph examples</a></p>\n          </section>", "text": "Paragraph: <p> paragraphs of text (block) <p> You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world.</p> HTML You're not your job. You're not how much money you make in the bank. You're not the car you drive. You're not the content of your wallet. You're not your khakis. You're not the all-singing, all-dancing crap of the world. output Placed in the body of the page More paragraph examples", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"heading-tags\">\n            <h2>\n              Headings:\n              <a href=\"http://www.w3schools.com/tags/tag_h1.asp\"><code>&lt;h1&gt;</code></a>,\n              <a href=\"http://www.w3schools.com/tags/tag_h2.asp\"><code>&lt;h2&gt;</code></a>, ...,\n              <a href=\"http://www.w3schools.com/tags/tag_h6.asp\"><code>&lt;h6&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">headings to separate major areas of the page\n            (block)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;h1&gt;University of Whoville&lt;/h1&gt;\n&lt;h2&gt;Department of Computer Science&lt;/h2&gt;\n&lt;h3&gt;Sponsored by Micro$oft&lt;/h3&gt;</code></pre>\n<p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <h1>University of Whoville</h1>\n              <h2>Department of Computer Science</h2>\n              <h3>Sponsored by Micro$oft</h3>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p><a href=\"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_headers\">More\n              heading examples</a></p>\n          </section>", "text": "Headings: <h1>, <h2>, ..., <h6> headings to separate major areas of the page (block) <h1>University of Whoville</h1><h2>Department of Computer Science</h2><h3>Sponsored by Micro$oft</h3>HTML University of Whoville Department of Computer Science Sponsored by Micro$oft output More heading examples", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"header-footer-tags\">\n            <h2><a href=\"https://www.w3schools.com/tags/tag_header.asp\"><code>&lt;header&gt;</code></a>\n              and <a href=\"https://www.w3schools.com/tags/tag_footer.asp\"><code>&lt;footer&gt;</code></a>\n            </h2>\n\n            <p><code>&lt;header&gt;</code> tags usually contain one or more &lt;h1-6&gt;\n            elements, maybe a logo, and authorship information</p>\n            <p><code>&lt;footer&gt;</code> tags might contain site map links, authorship\n            information, copyright information, etc.</p>\n            <pre><code class=\"hljs\" data-trim>&lt;header&gt; more html elements &lt;/header&gt;\n...maybe some other stuff...\n&lt;footer&gt; more html elements &lt;/footer&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>These tags are both block elements</p>\n            <p>Note: <em>not to be confused with the <code>&lt;head&gt;</code> tag, the\n              <code>&lt;header&gt;</code> is designed to contain headings for a\n              document.</em></p>\n          </section>", "text": "<header> and <footer> <header> tags usually contain one or more <h1-6> elements, maybe a logo, and authorship information <footer> tags might contain site map links, authorship information, copyright information, etc. <header> more html elements </header>...maybe some other stuff...<footer> more html elements </footer> HTML These tags are both block elements Note: not to be confused with the <head> tag, the <header> is designed to contain headings for a document.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"article-section-tags\">\n            <h2>\n              <a href=\"https://www.w3schools.com/tags/tag_article.asp\"><code>&lt;article&gt;</code></a> and\n              <a href=\"https://www.w3schools.com/tags/tag_section.asp\"><code>&lt;section&gt;</code></a>\n            </h2>\n\n            <p>The <code>&lt;article&gt;</code> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block)</p>\n            <p>The <code>&lt;section&gt;</code> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block)</p>\n            <pre><code class=\"hljs \" data-trim>&lt;article&gt;&lt;h2&gt;Mowgli's resume:&lt;/h2&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Objective:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;Experience:&lt;/h3&gt; ...\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h3&gt;References:&lt;/h3&gt; ...\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n          </section>", "text": "<article> and <section> The <article> tag is a standalone piece of content (eg, entire blog post, including title, author, etc) (block) The <section> tag is a piece of content that doesn't make sense on it's own (a chapter, paragraph, etc) (block) <article><h2>Mowgli's resume:</h2> <section> <h3>Objective:</h3> ... </section> <section> <h3>Experience:</h3> ... </section> <section> <h3>References:</h3> ... </section></article> HTML", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"hr-tag\">\n            <h2>\n              Horizontal rule:\n              <a href=\"http://www.w3schools.com/tags/tag_p.asp\"><code>&lt;hr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a horizontal line to visually separate sections of a page (block)</p>\n\n            <pre>\n            <code class=\"hljs\">&lt;&gt;First paragraph&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Third paragraph&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>First paragraph</p>\n              <hr>\n              <p>Second paragraph</p>\n              <hr>\n              <p>Third paragraph</p>\n              <p class=\"output-caption\">output</p>\n            </div>\n            <p>\n            This is the first example we've seen of a void (<q>self-closing</q>) tag:\n            <a href=\"https://www.w3.org/TR/html51/syntax.html#writing-html-documents-elements\">more on HTML Element types</a>\n            </p>\n          </section>", "text": "Horizontal rule: <hr> a horizontal line to visually separate sections of a page (block) <>First paragraph</p><hr /><p>Second paragraph</p><hr><p>Third paragraph</p> HTML First paragraph Second paragraph Third paragraph output This is the first example we've seen of a void (self-closing) tag: more on HTML Element types", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"br-tag\">\n            <h2>\n              Line Break:\n              <a href=\"http://www.w3schools.com/tags/tag_br.asp\"><code>&lt;br /&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">forces a line break in the middle of a block element (inline)</p>\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The woods are lovely, dark and deep, &lt;br /&gt;\n  But I have promises to keep, &lt;br /&gt;And miles\n  to go before I sleep, &lt;br /&gt;And miles to go before\n  I sleep.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <p>\n              The woods are lovely, dark and deep, <br>\n              But I have promises to keep, <br>And miles\n              to go before I sleep, <br>And miles to go before\n\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Warning: Don't over-use <code>br</code> (guideline: &gt;= 2 in a row is bad, better to not use any)\n            </p>\n            <p>\n            <code>br</code> tags should not be used to separate paragraphs or used multiple times in a row to create spacing\n            </p>\n          </section>", "text": "Line Break: <br /> forces a line break in the middle of a block element (inline) <p> The woods are lovely, dark and deep, <br /> But I have promises to keep, <br />And miles to go before I sleep, <br />And miles to go before I sleep.</p> HTML The woods are lovely, dark and deep, But I have promises to keep, And miles to go before I sleep, And miles to go before output Warning: Don't over-use br (guideline: >= 2 in a row is bad, better to not use any) br tags should not be used to separate paragraphs or used multiple times in a row to create spacing", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"a-tag\">\n            <h2>\n              Links:\n              <a href=\"http://www.w3schools.com/tags/tag_h1.asp\"><code>&lt;a&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">links, or \"anchors\", to other pages (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  Search for it on &lt;a href=\"http://www.google.com/\"&gt;Google&lt;/a&gt;!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Search for it on <a href=\"http://www.google.com/\">Google</a>!\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>\n            Uses the <code>href</code> (Hypertext REFerence) attribute to specify the destination URL\n            </p><ul>\n              <li>\n                Can be absolute (to another web site) or\n                relative (to another page on this site)\n              </li>\n            </ul>\n            \n            <p>Anchors are inline elements; must be placed in a block element such as\n            <code>&lt;p&gt;</code> or <code>&lt;h1&gt;</code>\n            </p>\n          </section>", "text": "Links: <a> links, or \"anchors\", to other pages (inline) <p> Search for it on <a href=\"http://www.google.com/\">Google</a>!</p> HTML Search for it on Google! output Uses the href (Hypertext REFerence) attribute to specify the destination URL Can be absolute (to another web site) or relative (to another page on this site) Anchors are inline elements; must be placed in a block element such as <p> or <h1>", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"img-tag\">\n            <h2>\n              Images:\n              <a href=\"http://www.w3schools.com/tags/tag_img.asp\"><code>&lt;img&gt;</code></a>\n            </h2>\n\n            <p>Inserts a graphical image into the page (inline)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <img src=\"../img/koalafications.jpg\" alt=\"Koalified koala\">\n            <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>The <code>src</code> attribute specifies the image URL</p>\n            <p>HTML5 also requires an <code>alt</code> attribute describing the image, which\n            <a href=\"https://www.w3schools.com/TAGs/att_img_alt.asp\">improves\n              accessibility</a> for users who can't otherwise see it</p>\n          </section>", "text": "Images: <img> Inserts a graphical image into the page (inline) <img src=\"img/koalafications.jpg\" alt=\"Koalified koala\" /> HTML output The src attribute specifies the image URL HTML5 also requires an alt attribute describing the image, which improves accessibility for users who can't otherwise see it", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h2>More About Images</h2>\n\n            <pre><code class=\"hljs\" data-trim>&lt;a href=\"http://en.wikipedia.org/wiki/Koala/\"&gt;\n  &lt;img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\"\n   title=\"dumbo!\" /&gt;&lt;/a&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <a href=\"http://en.wikipedia.org/wiki/Koala/\">\n                <img style=\"max-height: 140px\" src=\"../img/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo\">\n              </a>\n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>If placed in an <code>&lt;a&gt;</code> anchor tag, the image becomes a link</p>\n\n            <p><strong>What's the title attribute?</strong></p>\n            <ul class=\"medium-small-font\">\n              <li title=\"See? Even this bullet right here.\"><code>title</code> attribute is an optional tooltip (on ANY element)</li>\n              <li title=\"Wah wahhhn programming is hard :(\">BUT the <code>title</code> attribute doesn't always work well for mobile and\n                accessibility, so its usage and future are debated</li>\n            </ul>\n          </section>", "text": "More About Images <a href=\"http://en.wikipedia.org/wiki/Koala/\"> <img src=\"images/irrelephant.jpg\" alt=\"Irrelephant elephant\" title=\"dumbo!\" /></a> HTML output If placed in an <a> anchor tag, the image becomes a link What's the title attribute? title attribute is an optional tooltip (on ANY element) BUT the title attribute doesn't always work well for mobile and accessibility, so its usage and future are debated", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"em-strong-tags\">\n            <h2>\n              <a href=\"http://www.w3schools.com/tags/tag_phrase_elements.asp\">\n                Phrase elements\n              </a>:\n              <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code>\n            </h2>\n\n            <p>\n            <code>em</code>: emphasized text (usually rendered in italic) <br>\n            <code>strong</code>: strongly emphasized text (usually rendered in bold)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  HTML is &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; fun!\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <p>As usual, the tags must be properly nested for a valid page</p>\n          </section>", "text": "Phrase elements : <em>, <strong> em: emphasized text (usually rendered in italic) strong: strongly emphasized text (usually rendered in bold) <p> HTML is <em>really</em>, <strong>REALLY</strong> fun!</p> HTML As usual, the tags must be properly nested for a valid page", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"del-ins-tags\">\n            <h2>\n              Deletions and insertions:\n              <a href=\"http://www.w3schools.com/tags/tag_del.asp\"><code>&lt;del&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_ins.asp\"><code>&lt;ins&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            content that should be considered deleted or added to the document (inline)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  &lt;del&gt;Final Exam&lt;/del&gt; &lt;ins&gt;Midterm&lt;/ins&gt; is on &lt;del&gt;Aug 29&lt;/del&gt;\n  &lt;ins&gt;Apr 17&lt;/ins&gt;.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del>\n              <ins>Apr 17</ins>.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Deletions and insertions: <del>, <ins> content that should be considered deleted or added to the document (inline) <p> <del>Final Exam</del> <ins>Midterm</ins> is on <del>Aug 29</del> <ins>Apr 17</ins>.</p> HTML Final Exam Midterm is on Aug 29 Apr 17. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"abbr-tag\">\n            <h2>\n              Abbreviations:\n              <a href=\"http://www.w3schools.com/tags/tag_abbr.asp\"><code>&lt;abbr&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            an abbreviation, acronym, or slang term (inline)\n            </p>\n\n            <pre><code class=\"hljs \" data-trim>&lt;p&gt;\n  Safe divers always remember to check their\n  &lt;abbr title=\"Self-Contained Underwater Breathing Apparatus\"&gt;\n  SCUBA&lt;/abbr&gt; gear.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output\">\n              <p>\n              Safe divers always remember to check their\n              <abbr title=\"Self-Contained Underwater Breathing Apparatus\">\n                SCUBA</abbr> gear.\n              </p>\n              <p class=\"output-caption\">output</p>\n\n            </div>\n          </section>", "text": "Abbreviations: <abbr> an abbreviation, acronym, or slang term (inline) <p> Safe divers always remember to check their <abbr title=\"Self-Contained Underwater Breathing Apparatus\"> SCUBA</abbr> gear.</p> HTML Safe divers always remember to check their SCUBA gear. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 6: Practice with JS and the DOM/Events</h3>\n        </section>", "text": "CSE 154 Section 6: Practice with JS and the DOM/Events", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h3>Agenda</h3>\n          <ol>\n            <li>Summarize DOM selection with JS</li>\n            <li>JS practice with DOM and events:\n              <ul>\n                <li>Option 1: Encrypt-It!</li>\n                <li>Option 2: Creative Project worktime</li>\n              </ul>\n            \n          </li></ol>\n          <p>Reminder: Exploration Session today on Bootstrap!</p>\n        </section>", "text": "Agenda Summarize DOM selection with JS JS practice with DOM and events: Option 1: Encrypt-It! Option 2: Creative Project worktime Reminder: Exploration Session today on Bootstrap!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Recall the DOM</h2>\n          <p>Consider the DOM representation of yesterday's <a href=\"../../../lectures/lec08-dom-events/groupizer-starter/groupizer.html\">HTML page</a>:</p>\n          <img class=\"centered-figure w-80\" src=\"hidden/images/groupizer-dom.jpg\" alt=\"Groupizer DOM Tree\">\n          <p>With JS, we can now really appreciate the DOM structure when thinking\n          about\n          <strong>selecting</strong> and <strong>modifying</strong> HTML elements.</p>\n\n        </section>", "text": "Recall the DOM Consider the DOM representation of yesterday's HTML page: With JS, we can now really appreciate the DOM structure when thinking about selecting and modifying HTML elements.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Refreshing our Selector Skills</h2>\n          <img class=\"centered-figure w-80\" src=\"hidden/images/groupizer-dom.jpg\" alt=\"Groupizer DOM Tree\">\n          <p>What CSS selector would you use to select the unordered list on this page?</p>\n          <p>What CSS selector would you use to select the inputs in that list?</p>\n        </section>", "text": "Refreshing our Selector Skills What CSS selector would you use to select the unordered list on this page? What CSS selector would you use to select the inputs in that list?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Using Selectors in JS</h2>\n          <p>Methods in document and other DOM objects:</p>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector#Examples\" target=\"_blank\">querySelector</a>(selector)</td>\n              <td>\n                returns the first element that would be matched by the given CSS selector string\n              </td>\n            </tr>\n            <tr>\n              <td>\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll#Examples\" target=\"_blank\">querySelectorAll</a>(selector)</td>\n              <td>\n                returns an array of all elements that would be matched by the given CSS\n                selector string\n              </td>\n            </tr>\n          </table>\n        </section>", "text": "Using Selectors in JS Methods in document and other DOM objects: Name Description querySelector(selector) returns the first element that would be matched by the given CSS selector string querySelectorAll(selector) returns an array of all elements that would be matched by the given CSS selector string", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Back to groupizer HTML</h2>\n          <p class=\"italic\">What CSS selector would you use to select the unordered list on this page?</p>\n          <p class=\"italic\">What CSS selector would you use to select the inputs in that list?</p>\n          <p>\n            Now try using <code>document.querySelector</code> and <code>querySelectorAll</code> to select the DOM elements\n            <a href=\"../../../lectures/lec08-dom-events/groupizer-starter/groupizer.html\">HTML\n              page</a> using the Chrome Dev Tool!\n          </p>\n        </section>", "text": "Back to groupizer HTML What CSS selector would you use to select the unordered list on this page? What CSS selector would you use to select the inputs in that list? Now try using document.querySelector and querySelectorAll to select the DOM elements HTML page using the Chrome Dev Tool!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Summarize: How to get DOM elements in JS</h2>\n          <ol>\n            <li>Ask for them by id: <code>document.getElementyById(...)</code></li>\n            <li class=\"space-below\">Query for them with CSS style selectors:\n              <ul>\n                <li><code>document.querySelector(...)</code></li>\n                <li><code>document.querySelectorAll(...)</code></li>\n              </ul>\n            </li>\n          </ol>\n        </section>", "text": "Summarize: How to get DOM elements in JS Ask for them by id: document.getElementyById(...) Query for them with CSS style selectors: document.querySelector(...) document.querySelectorAll(...)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Common <code>querySelectorAll</code> issues</h2>\n          <p>\n            Many students forget to write <code>.</code> or <code>#</code> in front of a class or\n            id\n          </p>\n          <pre><code class=\"hljs\" data-trim data-noescape>// get all buttons with a class of \"control\"\n<del class=\"bad\">let gameButtons = document.querySelectorAll(\"control\");</del>\nlet gameButtons = document.querySelectorAll(\".control\");\n</code></pre>\n          <p class=\"code-caption space\">JS</p>\n          <p class=\"space-above-25\">\n            <code>querySelectorAll</code> returns an array, not just a single element; <br>\n            you must loop over the results\n          </p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>// set all buttons with a class of \"control\" to have red text\n<del class=\"bad\">document.querySelectorAll(\".gamebutton\").classList.add(\"hidden\");</del>\nlet gameButtons = document.querySelectorAll(\".gamebutton\");\nfor (let i = 0; i &lt; gameButtons.length; i++) {\n  gameButtons[i].classList.add(\"hidden\");\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n            Q: Can I still select a group of elements using <code>querySelectorAll</code> even if\n            my CSS file doesn't have any style rule for that same group?\n            <span class=\"fragment\">(A: Yes!)</span>\n          </p>\n        </section>", "text": "Common querySelectorAll issues Many students forget to write . or # in front of a class or id // get all buttons with a class of \"control\"let gameButtons = document.querySelectorAll(\"control\");let gameButtons = document.querySelectorAll(\".control\"); JS querySelectorAll returns an array, not just a single element; you must loop over the results // set all buttons with a class of \"control\" to have red textdocument.querySelectorAll(\".gamebutton\").classList.add(\"hidden\");let gameButtons = document.querySelectorAll(\".gamebutton\");for (let i = 0; i < gameButtons.length; i++) { gameButtons[i].classList.add(\"hidden\");} JS Q: Can I still select a group of elements using querySelectorAll even if my CSS file doesn't have any style rule for that same group? (A: Yes!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Getting the first element of a certain type</h2>\n          <p>Use <code>querySelector</code> to highlight the first paragraph in the document:</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>&lt;body&gt;<span class=\"special\">\n  &lt;p&gt;This is the first paragraph&lt;/p&gt;\n  &lt;p&gt;This is the second paragraph&lt;/p&gt;\n  &lt;p&gt;You get the idea...&lt;/p&gt;</span>\n&lt;/body&gt;</code></pre>\n          <p class=\"code-caption\">HTML</p>\n\n          <pre><code class=\"hljs\" data-trim data-noescape>// get all DOM objects that are &lt;p&gt;\nlet para = document.querySelector(\"p\");\npara.classList.add(\"highlighted\");\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n\n\n          <div class=\"output\" id=\"higlight-first-paragraph\">\n\n        \n\n        <!-- <section>\n          <h3>Mamp Setup</h3>\n          <p>\n            If you have not already, install MAMP on your computer. This will allow\n            you to run a local server that can host PHP files and interact with a\n            MySQL database. We will start using this more in the second half of the\n            course, but we want to make sure everything is working now.\n          </p>\n          <p>\n            Note: there is more information on this under \"Local Servers\"\n            on the course website's <a href=\"../../../resources/resources.html\">resources page</a>.\n          </p>\n\n          <p><a href=\"../../../resources/assets/servers/mamptutorial_mac.html\">Mac Setup</a></p>\n          <p><a href=\"../../../resources/assets/servers/mamptutorial_pc.html\">Windows Setup</a></p>\n        </section> -->\n\n\n        <section>\n\t\t\t\t\t<h2>Handy Shortcut Functions</h2>\n\t\t\t\t\t<p>\n          Two methods we will use a LOT are <code>document.getElementById</code> and\n          <code>document.querySelectorAll</code>. It's handy to\n\t\t\t\t\t\tdeclare a shortcut to help us out. You may use the following in your JS\n            programs (these are exceptions to the rule of having description function\n            names):\n\t\t\t\t\t</p>\n\t\t\t\t\t<pre><code class=\"hljs\" data-trim>function id(idName) {\n  return document.getElementById(idName);\n}\n\nfunction qs(selector) { // less common, but you may find it helpful\n  return document.querySelector(selector);\n}\n\nfunction qsa(selector) {\n  return document.querySelectorAll(selector);\n}</code></pre>\n\t\t\t\t\t<p class=\"code-caption\">JS</p>\n\n          \t\t\t\t\t<p class=\"font-18pt\">Example:</p>\n\n                    <pre><code class=\"hijs\" data-trim>&lt;button id=\"encrypt-btn\"&gt;Encrypt-It!&lt;button&gt;\n          </code></pre>\n          \t\t\t\t<p class=\"code-caption\">HTML</p>\n                  <pre><code class=\"hljs\" data-trim>let button  = document.getElementById(\"encrypt-btn\");\nlet button2 = id(\"encrypt-btn\");               // returns the same as above.</code></pre>\n          \t\t\t\t\t<p class=\"code-caption\">JS</p>\n\n                    <p>We will start using these in examples!</p>\n        </section>\n<!--\n        <section>\n          <h2>Creating and Appending New Nodes to the DOM Tree</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>document.<a\n                  href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">createElement(\"tag\")</a></td>\n              <td>creates and returns a new empty DOM node representing an element of that type</td>\n            </tr>\n          </table>\n          <pre><code class=\"hljs\" data-trim>// create a new &lt;h2&gt; node\nlet newHeading = document.createElement(\"h2\");\n// Add text to the node\nnewHeading.innerText = \"This is a heading!\"\nnewHeading.appendChild(newText);</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>\n-->\n        <section>\n          <h2>Rest of Section</h2>\n          <p>Worktime for Encrypt-It lab (following slides) or CP2!</p>\n        </section>\n\n        <section>\n          <h2>Encrypt-It!</h2>\n          <img class=\"centered-figure w-66\" src=\"hidden/images/output-ex.png\" alt=\"Encrypt-It solution output\">\n        </section>\n\n        <section>\n          <h2>Encrypt-It Overview</h2>\n          <p>In this series of exercises, you will be practicing using different UI elements in HTML with\n          a JavaScript program to\n          perform some operations on user input. Specifically, you will finish a\n          cryptogram generator, which takes any message as input and outputs a cipher\n          message in a few different possible outputs.\n          </p>\n          <p>\n            We have provided <a href=\"../code/starter/encrypt-it.zip\"><code>encrypt-it.zip</code></a>\n            with starting <code>HTML</code> for you to use and build upon. We have also included\n            some CSS, although you're free to add styling on your own!\n          </p>\n            <!--\n          <p>Refer to the past few lecture slides for any needed JavaScript review!</p>\n        -->\n        </section>\n        <section>\n          <section>\n            <h2>Overview of HTML Page</h2>\n            <img class=\"centered-figure half-width\" src=\"hidden/images/encrypt-it-starter.png\" alt=\"output\">\n              <p>\n                The slides <strong>below</strong> describe some of the different HTML elements\n                in the starter HTML, which you may find helpful for following the JS requirements\n                (and learn a bit more about common types of UI elements)!\n              </p>\n            </section>\n\n          <section>\n            <h2>Overview of HTML Page: Grouping UI Elements</h2>\n            <p class=\"20pt\">\n              The starter HTML introduces two new elements that are\n              useful for grouping UI controls:\n            </p>\n          <ul>\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"><code>fieldset</code></a>: A container to group UI elements</li>\n            <li><code>legend</code>: A legend for a <code>fieldset</code> which appears by\n              default as the\n              text within the top-left border</li>\n          </ul>\n          <p>\n            Note that we've also seen the <code>form</code> used to group UI elements,\n            but since we're not submitting anything here, we choose to use a <code>fieldset</code>.\n          </p>\n          </section>\n\n          <section>\n            <h2>Overview of HTML Page: User input with <code>textarea</code></h2>\n\n            <p>\n              In the first <code>fieldset</code> we have a <a href=\"\"><code>textarea</code></a>\n              for users to enter large (multi-line) amounts of text. This will be used for the input\n              to generate output ciphers.\n            </p>\n          </section>\n          <section>\n            <h2>Overview of HTML Page: Customization Controls</h2>\n            \n            <p>\n            The second <code>fieldset</code> represents options for the cipher\n            your program will generate from the input text. In this\n            <code>fieldset</code>, we have:\n            </p>\n            <ul>\n              <li>An Encrypt-It! button and a Reset button</li>\n              <li>A\n                <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\">select</a></code>\n                dropdown menu with the <code>option</code>s for Shift Cipher and Randomized.\n              </li>\n              <li>Two\n                 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\"><code>radio\n                   button</code></a> elements with output font size options: 12pt and 24pt.\n              </li>\n              <li>\n                A\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\"><code>checkbox</code></a>\n                element for customizing the upper-case option of the output message.\n              </li>\n            </ul>\n            <p>\n              Note: Wrapping the radio buttons and checkbox elements with their labeled text in a\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"><code>label</code></a>\n              makes it so that a user can click on the text to check/uncheck.\n            </p>\n          </section>\n        </section>\n\n      \n        <section>\n          <h2>Part I: Write the start of <code>encrypt-it.js</code></h2>\n          <p>\n            Now you'll write a bit of JavaScript testing code that logs a message to the console.\n            This is just a test to make sure that your browser is running your JavaScript file,\n            before we move on to the main execises.\n          </p>\n          <ul>\n            <li>The starter zip file includes a\n              <a href=\"../code/starter/encrypt-it.js\" target=\"_blank\">starter JS file</a>, which uses the\n              module-pattern introduced this week.\n            </li>\n            <li>Put the following line of code into the file:\n              <code class=\"hijs\" data-trim>console.log(\"Window loaded!\");</code>\n              such that the message is logged to the console <em>when the page is loaded</em>\n            </li>\n            <li>Link your <code>HTML</code> page to your JavaScript file using a <code>script</code> tag</li>\n            <li>\n              Refresh your page in the browser. Do you see the <code>console</code> message? If so, move on.\n              Otherwise, double-check your <code>script</code> tag syntax or ask a TA for help.\n            </li>\n          </ul>\n        </section>\n        <section>\n          <h2>Part II: Testing a Button</h2>\n          <p>Now let's set up a very basic JS event handler. Modify your JS code and\n          so that the \"Button clicked!\" <code>console</code> message won't\n          output until the user clicks the \"Encrypt-It!\" button.\n          </p>\n          <p>Strategy:</p>\n          <ul>\n            <li>First, make sure you understand why the event listener for <code>window</code>'s\n              <code>load</code> event is needed (remeber we don't have access to the DOM\n              until the page is loaded).\n            </li>\n            <li>\n              Move your <code>console</code> statement inside a new function\n              <code>handleClick</code>.\n            </li>\n            <li>Add an event listener to the the \"Encrypt-It!\" button such that when\n              clicked, your <code>handleClick</code> function is called.\n            </li>\n              <li>Refresh your page in the browser. Click the button. Do you see the\n                <code>console.log</code> message? If so, move on. Otherwise, double-check the syntax and\n                for both of your event listeners (window load and button click), or ask a TA for help</li>\n            </ul>\n        </section>\n        <section>\n          <section>\n            <h2>Part III: Implementing a Basic Shift-Cipher</h2>\n            <p>Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in\n            the input text area will be encrypted using a basic shift-cipher, and output\n            into the page's paragraph element with the id of <code>output</code>.\n            </p>\n            <p>Details:</p>\n            <ul>\n              <li>To get text from the textarea, you'll need to make sure you can access\n                it from JS. Remember you can use <code>document.getElementById</code> or\n                <code>document.querySelector</code> to access a DOM element in JS.\n              </li>\n              <li>Modify (and appropriately rename) your <code>handleClick</code>\n                function so that when called, it now retrieves the textarea's text value and\n                generates a shift cipher (algorithm discussed on the slide below; a\n                solution for this cipher function is provided at the very bottom if\n                you'd like to skip the algorithm part). This generated cipher will be\n                output as text in the <code>#result</code> paragraph.\n              </li>\n            </ul>\n          </section>\n          <section>\n            <h2>Part III: The Shift-Cipher Algorithm</h2>\n            <div class=\"font-18pt\">\n            <p>The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called <em>A</em>. Let the shift-encrypted alphabet be called <em>C</em>. For simplicity, we will shift letters in our encryption function by 1 letter. Then <em>C</em> is defined as mapping each letters in <em>A</em> to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A').</p>\n            <p>Visually, the cipher can be represented as the following:\n            </p>\n            <pre>\ninput letter     a b c d e f g h i j k l m n o p q r s t u v w x y z\n                 | | | | | | | | | | | | | | | | | | | | | | | | | |\n                 v v v v v v v v v v v v v v v v v v v v v v v v v v\noutput letter    b c d e f g h i j k l m n o p q r s t u v w x y z a\n            </pre>\n\n            <p>\n              Your task in this part is to convert the text in the input text area from alphabet <em>A</em>\n              to alphabet <em>C</em>. This is all you need to know to implement the cipher in this lab,\n              but if you would like additional hints, there are some provided in the slide below.\n            </p>\n            </div>\n          </section>\n          <section>\n            <h2>Part III: Hints</h2>\n            <div class=\"font-18pt\">\n            <p>\n              Note that the value you get from the textarea is just a long string. So your goal is to\n              build up a new string that is the result of applying the cipher to each letter in the\n              input text, in order, and adding it to your result string.\n            </p>\n            <p>\n              There are a few ways to go about this, but note that one of the most\n              intuitive approaches would be to use a <code>for</code> loop through the input\n               string and add 1 to each letter (letters are actually represented by numerical values,\n               so this is a natural operation). To handle the z -&gt; a shift, you can add a special case\n               for each letter, or use mod arithmetic to avoid this extra case.\n            </p>\n            <p>\n              You may find <a href=\"https://www.w3schools.com/jsref/jsref_charcodeat.asp\" target=\"_blank\"><code>charCodeAt(index)</code></a> and <a href=\"https://www.w3schools.com/jsref/jsref_fromcharcode.asp\" target=\"_blank\"><code>fromCharCode(asciiNum)</code></a> helpful for this problem.\n            </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own!</p>\n            </div>\n          </section>\n          <section>\n            <h2>Part III: Algorithm Solution</h2>\n            <p class=\"font-18pt\">One function solution is given below (you can also solve this with arrays):</p>\n            <pre class=\"h450px\"><code class=\"hijs font-14pt\" data-trim>/**\n * Returns an encrypted version of the given text, where\n * each letter is shifted alphabetically ahead by 1 letter,\n * and 'z' is shifted to 'a' (creating an alphabetical cycle).\n */\nfunction shiftCipher(text) {\n  text = text.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i &lt; text.length; i++) {\n    if (text[i] &lt; 'a' || text[i] &gt; 'z') {\n      result += text[i];\n    } else if (text[i] == 'z') {\n      result += 'a';\n    } else { // letter is between 'a' and 'y'\n      let letter = text.charCodeAt(i);\n      let resultLetter = String.fromCharCode(letter + 1);\n      result += resultLetter;\n    }\n  }\n  return result;\n}\n</code></pre>\n<p class=\"code-caption space-above\">JS</p>\n          </section>\n        </section>\n        <section>\n          <section>\n            <h2>Part IV: Implement UI Functionality</h2>\n            <div class=\"font-18pt\">\n              <p>\n                Now that you have a cool encryption feature implemented, let's add some features\n                for the user to decorate their encrypted message.\n              </p>\n              <p>We have broken this part into are a few smaller exercises - move down the slides to\n              work through them!\n              </p>\n            </div>\n          </section>\n          <section>\n            <h2>Part IV: Dropdown UI</h2>\n              <p>\n                First, we want to restrict the shift cipher functionality to only work when\n                \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option\n                and then the \"Encrypt-It\" button is clicked should the input text\n                be encrypted.\n              </p>\n              <p>\n              For dropdown menus, you can get the value of the current option\n              using <code>el.value</code>, where <code>el</code> is the DOM element for\n              the <code>select</code> dropdown.\n              </p>\n            </section>\n            <section>\n              <h2>Part IV: Reset Functionality</h2>\n              <p>\n                When the Reset button is clicked, the textarea and the output paragraph should\n                both be cleared (using <code>innerText</code>).\n              </p>\n            </section>\n            <section>\n              <h2>Part IV: Checkbox Elements</h2>\n              <div class=\"font-18pt\">\n              <p>\n                Next, implement a feature such that when the all-caps checkbox is checked,\n                all of the text in the output\n                paragraph appear only in uppercase.\n              </p>\n              <!--\n              <p>You can change styles of a DOM element <code>el</code> by using\n              <code>el.style.cssProperty</code> (where cssProperty is the name of the\n              CSS property you're changing, in camelCasing). For example, to make an\n              element uppercase, you could use <code>el.style.textTransform =\n                \"uppercase\"</code>. However, it's important to minimize adding CSS directly\n              in our JS, and it's preferred to add/remove classes instead.\n            </p>\n              -->\n            <p>To do so, add a CSS file with a class \".uppercase\" that\n                uses <code>text-transform: \"uppercase\";</code> to make an element all-uppercase. When\n                the \"All Caps\" option is checked, the output paragraph should have this\n                class. When unchecked, it should not have this class so that it uses\n                whatever casing was used in the original input text.\n              </p>\n              <p>\n              <strong>Hint 1</strong>: The event corresponding to changing the state of a checkbox input as\n                checked/unchecked is <code>change</code>.\n              </p>\n              <p>\n              <strong>Hint 2</strong>: To update the class list of a DOM element, you can use\n                <code>el.classList.add(\"classname\")</code> and\n                <code>el.classList.remove(\"classname\")</code>. We'll see this more in lecture!\n              </p>\n              </div>\n            </section>\n            <section>\n              <h2>Part V: Radio Button Elements</h2>\n              <p>\n                Implement a feature to such that the text in the output paragraph should have the\n                font size of whatever is currently selected in the radio button group.\n              </p>\n              <p>\n                To minimize changing styles in JavaScript, you can add CSS classes to\n                accomplish font size changes (similar to the previous step).\n              </p>\n          </section>\n        </section>\n        <section>\n          <section>\n            <h2>Part V: Implementing the Randomized Cipher</h2>\n            <p><em>Note:</em> This part is a more challenging feature we have provided if you'd\n            like to explore a more advanced cipher algorithm and and add a few more UI\n            features. We have also suggested other features to try on the next slide!</p>\n            <p>In this part, you will implement the \"Randomized\" cipher option. This is similar\n              to the Shift Cipher, only \"result alphabet\" <em>C</em> is randomly-generated. In other words,\n               each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\").</p>\n          </section>\n          <section>\n            <h2>Part V: Details</h2>\n            <p>First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div.</p>\n            <p>If you would like some hints for writing this algorithm, there are some in the slides below.</p>\n          </section>\n          <section>\n            <h2>Part V: Hints</h2>\n            <p>\n            Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.floor()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.random()</code></a> useful here).\n            </p>\n            <p>\n              Next, <a href=\"https://www.w3schools.com/jsref/jsref_push.asp\" target=\"_blank\">push</a> this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last).\n             </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own.</p>\n          </section>\n          <section>\n            <h2>Part V: Algorithm Solution</h2>\n            <p>One possible solution is given below:</p>\n            <pre class=\"h450px\"><code class=\"hijs\" data-trim style=\"font-size: 14pt;\">function generateCipher(text) {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let cipher = [];\n  // it's poor style to hardcode a magic number like 26\n  let alphabetLength = alphabet.length;\n  for (let i = 0; i &lt; alphabetLength; i++) {\n    let randomIndex = Math.floor(Math.random() * alphabet.length);\n    cipher.push(alphabet.splice(\n      [Math.floor(Math.random() * alphabet.length)], 1));\n  }\n  document.getElementById(\"output\").innerText = cipher;\n  let result = \"\";\n  for (let i = 0; i &lt; outputText.length; i++) {\n    if (text[i] &gt;= 'a' &amp;&amp; text[i] &lt;= 'z') {\n      let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0);\n      result += cipher[letterCode];\n    } else {\n      result += text[i];\n    }\n  }\n  document.getElementById(\"output\").innerText = result.replace(\",\", \"\");\n}</code></pre>\n              <p class=\"code-caption space-above\">JS</p>\n          </section>\n        </section>\n        <section>\n          <h2>Challenge Problems</h2>\n          <p>Did you enjoy making your own encrypted messages? Here are a few other ideas to add to your file:\n          </p>\n            <ul>\n              <li><strong>Add a dropdown menu to select a value to shift by in the Shift Cipher</strong></li>\n              <li><strong>Adjust your ciphers so that digits 0-9 can be encrypted as well as letters</strong></li>\n              <li><strong>Explore <a href=\"http://www.cryptogram.org/resource-area/cipher-types/\" target=\"_blank\">other cipher\n                 types</a></strong></li>\n              <li><strong>Change your cipher to output something other than\n                  letters)</strong>: For example, you could output using emojis, gifs,\n                colored boxes, etc.</li>\n              <li>\n                <strong>Write a \"Decryption\" tool!</strong>\n                This goes beyond the scope of this exercise, but with a <code>.txt</code> file of dictionary words,\n                you can try to write a tool that takes input (probably from a Shift or Randomized cipher) and tries to decode it,\n                matching sequences of characters to words in the dictionary.\n              </li>\n            </ul>\n        </section>\n        <!--\n        <section>\n          <h2>Full Encrypt-It Solution</h2>\n          <p><a href=\"../code/solution/encrypt-it.html\">Encrypt-It Solution</a></p>\n        </section>\n      -->\n      </div>\n    </section>", "text": "Getting the first element of a certain type Use querySelector to highlight the first paragraph in the document: <body> <p>This is the first paragraph</p> <p>This is the second paragraph</p> <p>You get the idea...</p></body> HTML // get all DOM objects that are <p>let para = document.querySelector(\"p\");para.classList.add(\"highlighted\"); JS <!-- Mamp Setup If you have not already, install MAMP on your computer. This will allow you to run a local server that can host PHP files and interact with a MySQL database. We will start using this more in the second half of the course, but we want to make sure everything is working now. Note: there is more information on this under \"Local Servers\" on the course website's resources page. Mac Setup Windows Setup --> \t\t\t\t\tHandy Shortcut Functions\t\t\t\t\t Two methods we will use a LOT are document.getElementById and document.querySelectorAll. It's handy to\t\t\t\t\t\tdeclare a shortcut to help us out. You may use the following in your JS programs (these are exceptions to the rule of having description function names):\t\t\t\t\t\t\t\t\t\tfunction id(idName) { return document.getElementById(idName);}function qs(selector) { // less common, but you may find it helpful return document.querySelector(selector);}function qsa(selector) { return document.querySelectorAll(selector);}\t\t\t\t\tJS \t\t\t\t\tExample: <button id=\"encrypt-btn\">Encrypt-It!<button> \t\t\t\tHTML let button = document.getElementById(\"encrypt-btn\");let button2 = id(\"encrypt-btn\"); // returns the same as above. \t\t\t\t\tJS We will start using these in examples! <!-- Creating and Appending New Nodes to the DOM Tree Name Description document.createElement(\"tag\") creates and returns a new empty DOM node representing an element of that type // create a new <h2> nodelet newHeading = document.createElement(\"h2\");// Add text to the nodenewHeading.innerText = \"This is a heading!\"newHeading.appendChild(newText); JS --> Rest of Section Worktime for Encrypt-It lab (following slides) or CP2! Encrypt-It! Encrypt-It Overview In this series of exercises, you will be practicing using different UI elements in HTML with a JavaScript program to perform some operations on user input. Specifically, you will finish a cryptogram generator, which takes any message as input and outputs a cipher message in a few different possible outputs. We have provided encrypt-it.zip with starting HTML for you to use and build upon. We have also included some CSS, although you're free to add styling on your own! <!-- Refer to the past few lecture slides for any needed JavaScript review! --> Overview of HTML Page The slides below describe some of the different HTML elements in the starter HTML, which you may find helpful for following the JS requirements (and learn a bit more about common types of UI elements)! Overview of HTML Page: Grouping UI Elements The starter HTML introduces two new elements that are useful for grouping UI controls: fieldset: A container to group UI elements legend: A legend for a fieldset which appears by default as the text within the top-left border Note that we've also seen the form used to group UI elements, but since we're not submitting anything here, we choose to use a fieldset. Overview of HTML Page: User input with textarea In the first fieldset we have a textarea for users to enter large (multi-line) amounts of text. This will be used for the input to generate output ciphers. Overview of HTML Page: Customization Controls The second fieldset represents options for the cipher your program will generate from the input text. In this fieldset, we have: An Encrypt-It! button and a Reset button A select dropdown menu with the options for Shift Cipher and Randomized. Two radio button elements with output font size options: 12pt and 24pt. A checkbox element for customizing the upper-case option of the output message. Note: Wrapping the radio buttons and checkbox elements with their labeled text in a label makes it so that a user can click on the text to check/uncheck. Part I: Write the start of encrypt-it.js Now you'll write a bit of JavaScript testing code that logs a message to the console. This is just a test to make sure that your browser is running your JavaScript file, before we move on to the main execises. The starter zip file includes a starter JS file, which uses the module-pattern introduced this week. Put the following line of code into the file: console.log(\"Window loaded!\"); such that the message is logged to the console when the page is loaded Link your HTML page to your JavaScript file using a script tag Refresh your page in the browser. Do you see the console message? If so, move on. Otherwise, double-check your script tag syntax or ask a TA for help. Part II: Testing a Button Now let's set up a very basic JS event handler. Modify your JS code and so that the \"Button clicked!\" console message won't output until the user clicks the \"Encrypt-It!\" button. Strategy: First, make sure you understand why the event listener for window's load event is needed (remeber we don't have access to the DOM until the page is loaded). Move your console statement inside a new function handleClick. Add an event listener to the the \"Encrypt-It!\" button such that when clicked, your handleClick function is called. Refresh your page in the browser. Click the button. Do you see the console.log message? If so, move on. Otherwise, double-check the syntax and for both of your event listeners (window load and button click), or ask a TA for help Part III: Implementing a Basic Shift-Cipher Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in the input text area will be encrypted using a basic shift-cipher, and output into the page's paragraph element with the id of output. Details: To get text from the textarea, you'll need to make sure you can access it from JS. Remember you can use document.getElementById or document.querySelector to access a DOM element in JS. Modify (and appropriately rename) your handleClick function so that when called, it now retrieves the textarea's text value and generates a shift cipher (algorithm discussed on the slide below; a solution for this cipher function is provided at the very bottom if you'd like to skip the algorithm part). This generated cipher will be output as text in the #result paragraph. Part III: The Shift-Cipher Algorithm The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called A. Let the shift-encrypted alphabet be called C. For simplicity, we will shift letters in our encryption function by 1 letter. Then C is defined as mapping each letters in A to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A'). Visually, the cipher can be represented as the following: input letter a b c d e f g h i j k l m n o p q r s t u v w x y z | | | | | | | | | | | | | | | | | | | | | | | | | | v v v v v v v v v v v v v v v v v v v v v v v v v voutput letter b c d e f g h i j k l m n o p q r s t u v w x y z a Your task in this part is to convert the text in the input text area from alphabet A to alphabet C. This is all you need to know to implement the cipher in this lab, but if you would like additional hints, there are some provided in the slide below. Part III: Hints Note that the value you get from the textarea is just a long string. So your goal is to build up a new string that is the result of applying the cipher to each letter in the input text, in order, and adding it to your result string. There are a few ways to go about this, but note that one of the most intuitive approaches would be to use a for loop through the input string and add 1 to each letter (letters are actually represented by numerical values, so this is a natural operation). To handle the z -> a shift, you can add a special case for each letter, or use mod arithmetic to avoid this extra case. You may find charCodeAt(index) and fromCharCode(asciiNum) helpful for this problem. If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own! Part III: Algorithm Solution One function solution is given below (you can also solve this with arrays): /** * Returns an encrypted version of the given text, where * each letter is shifted alphabetically ahead by 1 letter, * and 'z' is shifted to 'a' (creating an alphabetical cycle). */function shiftCipher(text) { text = text.toLowerCase(); let result = \"\"; for (let i = 0; i < text.length; i++) { if (text[i] < 'a' || text[i] > 'z') { result += text[i]; } else if (text[i] == 'z') { result += 'a'; } else { // letter is between 'a' and 'y' let letter = text.charCodeAt(i); let resultLetter = String.fromCharCode(letter + 1); result += resultLetter; } } return result;}JS Part IV: Implement UI Functionality Now that you have a cool encryption feature implemented, let's add some features for the user to decorate their encrypted message. We have broken this part into are a few smaller exercises - move down the slides to work through them! Part IV: Dropdown UI First, we want to restrict the shift cipher functionality to only work when \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option and then the \"Encrypt-It\" button is clicked should the input text be encrypted. For dropdown menus, you can get the value of the current option using el.value, where el is the DOM element for the select dropdown. Part IV: Reset Functionality When the Reset button is clicked, the textarea and the output paragraph should both be cleared (using innerText). Part IV: Checkbox Elements Next, implement a feature such that when the all-caps checkbox is checked, all of the text in the output paragraph appear only in uppercase. <!-- You can change styles of a DOM element el by using el.style.cssProperty (where cssProperty is the name of the CSS property you're changing, in camelCasing). For example, to make an element uppercase, you could use el.style.textTransform = \"uppercase\". However, it's important to minimize adding CSS directly in our JS, and it's preferred to add/remove classes instead. --> To do so, add a CSS file with a class \".uppercase\" that uses text-transform: \"uppercase\"; to make an element all-uppercase. When the \"All Caps\" option is checked, the output paragraph should have this class. When unchecked, it should not have this class so that it uses whatever casing was used in the original input text. Hint 1: The event corresponding to changing the state of a checkbox input as checked/unchecked is change. Hint 2: To update the class list of a DOM element, you can use el.classList.add(\"classname\") and el.classList.remove(\"classname\"). We'll see this more in lecture! Part V: Radio Button Elements Implement a feature to such that the text in the output paragraph should have the font size of whatever is currently selected in the radio button group. To minimize changing styles in JavaScript, you can add CSS classes to accomplish font size changes (similar to the previous step). Part V: Implementing the Randomized Cipher Note: This part is a more challenging feature we have provided if you'd like to explore a more advanced cipher algorithm and and add a few more UI features. We have also suggested other features to try on the next slide! In this part, you will implement the \"Randomized\" cipher option. This is similar to the Shift Cipher, only \"result alphabet\" C is randomly-generated. In other words, each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\"). Part V: Details First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div. If you would like some hints for writing this algorithm, there are some in the slides below. Part V: Hints Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find Math.floor() and Math.random() useful here). Next, push this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last). If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own. Part V: Algorithm Solution One possible solution is given below: function generateCipher(text) { let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\"); let cipher = []; // it's poor style to hardcode a magic number like 26 let alphabetLength = alphabet.length; for (let i = 0; i < alphabetLength; i++) { let randomIndex = Math.floor(Math.random() * alphabet.length); cipher.push(alphabet.splice( [Math.floor(Math.random() * alphabet.length)], 1)); } document.getElementById(\"output\").innerText = cipher; let result = \"\"; for (let i = 0; i < outputText.length; i++) { if (text[i] >= 'a' && text[i] <= 'z') { let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0); result += cipher[letterCode]; } else { result += text[i]; } } document.getElementById(\"output\").innerText = result.replace(\",\", \"\");} JS Challenge Problems Did you enjoy making your own encrypted messages? Here are a few other ideas to add to your file: Add a dropdown menu to select a value to shift by in the Shift Cipher Adjust your ciphers so that digits 0-9 can be encrypted as well as letters Explore other cipher types Change your cipher to output something other than letters): For example, you could output using emojis, gifs, colored boxes, etc. Write a \"Decryption\" tool! This goes beyond the scope of this exercise, but with a .txt file of dictionary words, you can try to write a tool that takes input (probably from a Shift or Randomized cipher) and tries to decode it, matching sequences of characters to words in the dictionary. <!-- Full Encrypt-It Solution Encrypt-It Solution -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n\t\t\t\t\t<h2>Handy Shortcut Functions</h2>\n\t\t\t\t\t<p>\n          Two methods we will use a LOT are <code>document.getElementById</code> and\n          <code>document.querySelectorAll</code>. It's handy to\n\t\t\t\t\t\tdeclare a shortcut to help us out. You may use the following in your JS\n            programs (these are exceptions to the rule of having description function\n            names):\n\t\t\t\t\t</p>\n\t\t\t\t\t<pre><code class=\"hljs\" data-trim>function id(idName) {\n  return document.getElementById(idName);\n}\n\nfunction qs(selector) { // less common, but you may find it helpful\n  return document.querySelector(selector);\n}\n\nfunction qsa(selector) {\n  return document.querySelectorAll(selector);\n}</code></pre>\n\t\t\t\t\t<p class=\"code-caption\">JS</p>\n\n          \t\t\t\t\t<p class=\"font-18pt\">Example:</p>\n\n                    <pre><code class=\"hijs\" data-trim>&lt;button id=\"encrypt-btn\"&gt;Encrypt-It!&lt;button&gt;\n          </code></pre>\n          \t\t\t\t<p class=\"code-caption\">HTML</p>\n                  <pre><code class=\"hljs\" data-trim>let button  = document.getElementById(\"encrypt-btn\");\nlet button2 = id(\"encrypt-btn\");               // returns the same as above.</code></pre>\n          \t\t\t\t\t<p class=\"code-caption\">JS</p>\n\n                    <p>We will start using these in examples!</p>\n        </section>", "text": "Handy Shortcut Functions\t\t\t\t\t Two methods we will use a LOT are document.getElementById and document.querySelectorAll. It's handy to\t\t\t\t\t\tdeclare a shortcut to help us out. You may use the following in your JS programs (these are exceptions to the rule of having description function names):\t\t\t\t\t\t\t\t\t\tfunction id(idName) { return document.getElementById(idName);}function qs(selector) { // less common, but you may find it helpful return document.querySelector(selector);}function qsa(selector) { return document.querySelectorAll(selector);}\t\t\t\t\tJS \t\t\t\t\tExample: <button id=\"encrypt-btn\">Encrypt-It!<button> \t\t\t\tHTML let button = document.getElementById(\"encrypt-btn\");let button2 = id(\"encrypt-btn\"); // returns the same as above. \t\t\t\t\tJS We will start using these in examples!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 12: Mowgli's Caf\u00e9!</h3>\n          <h3>Part I: Forms, Validation, and a bit of <samp>localStorage</samp></h3>\n        </section>", "text": "CSE 154 Section 12: Mowgli's Caf\u00e9! Part I: Forms, Validation, and a bit of localStorage", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Mowgli's Caf\u00e9</h2>\n            <img style=\"width: 90%; display: block; margin: auto auto;\" src=\"hidden/images/htmlcss.png\">\n          </section>", "text": "Mowgli's Caf\u00e9", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section id=\"html-css\">\n            <h2>Restaurant Website Scenario</h2>\n            <div style=\"font-size: 12pt;\">\n              <p>\n                Following your exciting (and sometimes challenging) quarter in CSE 154, you find\n                your first web-dev opportunity in the real world. A new local caf\u00e9 called\n                Mowgli's Caf\u00e9 is\n                joining the online-delivery craze, aiming to provide customers with fresh coffee and\n                breakfast at the click of a button. They've just hired you to create their website.\n              </p>\n              <p>\n                A designer with little web development background has created a PNG using Adobe\n                Illustrator for the site design the manager wants, as well as specifications\n                for desired behavior. The owners hired a small team of developers to start the project,\n                but for personal reasons they had to drop the contract rather quickly leaving you\n                to pick up the with the codebase as it is. They told you to find the\n                starter files <a href=\"../code/starter.zip\">here</a>.\n              </p>\n              <p class=\"small-font\">\n                Note: This scenario is very similar to web projects done by developer \"contractors\" hired\n                on a project-basis like this....\n              </p>\n            </div>\n        </section>", "text": "Restaurant Website Scenario Following your exciting (and sometimes challenging) quarter in CSE 154, you find your first web-dev opportunity in the real world. A new local caf\u00e9 called Mowgli's Caf\u00e9 is joining the online-delivery craze, aiming to provide customers with fresh coffee and breakfast at the click of a button. They've just hired you to create their website. A designer with little web development background has created a PNG using Adobe Illustrator for the site design the manager wants, as well as specifications for desired behavior. The owners hired a small team of developers to start the project, but for personal reasons they had to drop the contract rather quickly leaving you to pick up the with the codebase as it is. They told you to find the starter files here. Note: This scenario is very similar to web projects done by developer \"contractors\" hired on a project-basis like this....", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section id=\"bugs\">\n          <h3>First-Things-First: JS Debugging Strategies</h3>\n          <p>\n            When you find a problem, use the Chrome inspector to help you isolate what the problem\n            is. Some helpful hints are:\n          </p>\n          <ul>\n            <li>\n              Make sure you set breakpoints where you think the code <strong>should</strong>\n              be executing. Did the code that you expected execute?\n            </li>\n            <li>\n              Read all of the errors and warnings thrown by the inspector tool carefully!!!\n            </li>\n            <li>\n              Set breakpoints and observe local and module-global variables to make sure they the\n              values you expect\n            </li>\n            <li>\n              Use console.log to print information out that may help you isolate the problem\n            </li>\n            <li>\n              Use the Networks tab to see what information you're getting back in requests!\n            </li>\n            <li>\n              Talk to your <a href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">Debug duck</a>!\n            </li>\n          </ul>\n        </section>", "text": "First-Things-First: JS Debugging Strategies When you find a problem, use the Chrome inspector to help you isolate what the problem is. Some helpful hints are: Make sure you set breakpoints where you think the code should be executing. Did the code that you expected execute? Read all of the errors and warnings thrown by the inspector tool carefully!!! Set breakpoints and observe local and module-global variables to make sure they the values you expect Use console.log to print information out that may help you isolate the problem Use the Networks tab to see what information you're getting back in requests! Talk to your Debug duck!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n          <section id=\"ajax\">\n            <h2>Part I (JS with AJAX and fetch): Scenario</h2>\n            <div style=\"font-size: 12pt;\">\n              <p>\n                First, the manager asks you to implement the menu, listing all of the current items\n                offered by the caf\u00e9 and their prices.\n              </p><p>\n                They provided you with a brief document which describes\n                <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/mowgliscafe/docs/\">an API</a>\n                that returns all of the data you need to populate the menu.\n              </p>\n              <p>\n                They ask that you maintain the organization in the JSON format as much as possible,\n                grouping the different categories and subcategories nicely so that customers can easily\n                navigate the menu page. The designer has provided you another set of screenshots to guide\n                you, provided on the slide below. Additional instructions and hints are also\n                provided further down the slides.\n              </p>\n            </div>\n\n          </section>\n          <section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 1/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu.png\">\n          </section>\n          <section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 2/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu2.png\">\n          </section>\n          <section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 3/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu3.png\">\n          </section>\n          <section>\n            <h2>Part I (JS with AJAX and fetch): Instructions 1/2</h2>\n            <p>\n              There are a lot of pieces in this task, so taking the time to develop a clear plan-of-action\n              will save you a great deal of hassle and debugging later on.  First, note that the menu\n              the manager provided you through the API in JSON format will most likely be updated in the future\n              depending on supply and demand. You know to avoid hardcoding values in the HTML,\n              but rather use JS to generate the menu when the page loads. This means that the HTML\n              given to you will most likely not change at all here. Fortunately there is already\n              a script tag at the top that points to a .js file with some behavior already written.\n            </p>\n          </section>\n          <section>\n            <h2>Part I (JS with AJAX and fetch): Instructions 2/2</h2>\n            <p>\n              Recall that you can use AJAX with JS to request data from the server and process/return\n              the requested data with a web service. Since the data is conveniently given to you\n              in JSON format, this should be fairly straightforward.\n            </p>\n            <p>\n              Your next step is to look at the\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/mowgliscafe/docs/\">API</a>\n              documentation to understand the JSON that is returned by the service. Then look at the\n              screenshots and see what data can map to the elements that will be on the page.\n            </p>\n          </section>\n          <section>\n            <h2>Part I (AJAX with JS and PHP): Development Strategy</h2>\n            <ol>\n              <li>\n                Identify the key components of each category shown on the screenshots. What classes\n                might you add and style in CSS? What layout techniques have you learned to\n                achieve different layouts?\n              </li>\n              <li>\n                Examine the code that was given to you to see what helper functions are already there.\n                Which functions manipulate the DOM? Which functions potentially create the pieces\n                of the menu that you need to display on the screen?\n              </li>\n              <li>\n                Find where the previous developers stubbed out the AJAX request to the web service\n                to fetch the JSON from the server. The returned JSON will be used to populate the\n                food menu. The previous developers were at least kind and a) commented their code and b)\n                left hints as to where you should complete the code with comments that begin with\n                <code>/**** TO DO: </code>. Now it's your turn to make this work!\n              </li>\n            <ol>\n          </ol></ol></section>\n        </section>", "text": "Part I (JS with AJAX and fetch): Scenario First, the manager asks you to implement the menu, listing all of the current items offered by the caf\u00e9 and their prices. They provided you with a brief document which describes an API that returns all of the data you need to populate the menu. They ask that you maintain the organization in the JSON format as much as possible, grouping the different categories and subcategories nicely so that customers can easily navigate the menu page. The designer has provided you another set of screenshots to guide you, provided on the slide below. Additional instructions and hints are also provided further down the slides. Part I (JS with AJAX and fetch): Screenshot 1/3 Part I (JS with AJAX and fetch): Screenshot 2/3 Part I (JS with AJAX and fetch): Screenshot 3/3 Part I (JS with AJAX and fetch): Instructions 1/2 There are a lot of pieces in this task, so taking the time to develop a clear plan-of-action will save you a great deal of hassle and debugging later on. First, note that the menu the manager provided you through the API in JSON format will most likely be updated in the future depending on supply and demand. You know to avoid hardcoding values in the HTML, but rather use JS to generate the menu when the page loads. This means that the HTML given to you will most likely not change at all here. Fortunately there is already a script tag at the top that points to a .js file with some behavior already written. Part I (JS with AJAX and fetch): Instructions 2/2 Recall that you can use AJAX with JS to request data from the server and process/return the requested data with a web service. Since the data is conveniently given to you in JSON format, this should be fairly straightforward. Your next step is to look at the API documentation to understand the JSON that is returned by the service. Then look at the screenshots and see what data can map to the elements that will be on the page. Part I (AJAX with JS and PHP): Development Strategy Identify the key components of each category shown on the screenshots. What classes might you add and style in CSS? What layout techniques have you learned to achieve different layouts? Examine the code that was given to you to see what helper functions are already there. Which functions manipulate the DOM? Which functions potentially create the pieces of the menu that you need to display on the screen? Find where the previous developers stubbed out the AJAX request to the web service to fetch the JSON from the server. The returned JSON will be used to populate the food menu. The previous developers were at least kind and a) commented their code and b) left hints as to where you should complete the code with comments that begin with /**** TO DO: . Now it's your turn to make this work!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section id=\"ajax\">\n            <h2>Part I (JS with AJAX and fetch): Scenario</h2>\n            <div style=\"font-size: 12pt;\">\n              <p>\n                First, the manager asks you to implement the menu, listing all of the current items\n                offered by the caf\u00e9 and their prices.\n              </p><p>\n                They provided you with a brief document which describes\n                <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/mowgliscafe/docs/\">an API</a>\n                that returns all of the data you need to populate the menu.\n              </p>\n              <p>\n                They ask that you maintain the organization in the JSON format as much as possible,\n                grouping the different categories and subcategories nicely so that customers can easily\n                navigate the menu page. The designer has provided you another set of screenshots to guide\n                you, provided on the slide below. Additional instructions and hints are also\n                provided further down the slides.\n              </p>\n            </div>\n\n          </section>", "text": "Part I (JS with AJAX and fetch): Scenario First, the manager asks you to implement the menu, listing all of the current items offered by the caf\u00e9 and their prices. They provided you with a brief document which describes an API that returns all of the data you need to populate the menu. They ask that you maintain the organization in the JSON format as much as possible, grouping the different categories and subcategories nicely so that customers can easily navigate the menu page. The designer has provided you another set of screenshots to guide you, provided on the slide below. Additional instructions and hints are also provided further down the slides.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 1/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu.png\">\n          </section>", "text": "Part I (JS with AJAX and fetch): Screenshot 1/3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 2/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu2.png\">\n          </section>", "text": "Part I (JS with AJAX and fetch): Screenshot 2/3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (JS with AJAX and fetch): Screenshot 3/3</h2>\n            <img style=\"width: 80%; display: block; margin: auto auto;\" src=\"hidden/images/ajaxmenu3.png\">\n          </section>", "text": "Part I (JS with AJAX and fetch): Screenshot 3/3", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (JS with AJAX and fetch): Instructions 1/2</h2>\n            <p>\n              There are a lot of pieces in this task, so taking the time to develop a clear plan-of-action\n              will save you a great deal of hassle and debugging later on.  First, note that the menu\n              the manager provided you through the API in JSON format will most likely be updated in the future\n              depending on supply and demand. You know to avoid hardcoding values in the HTML,\n              but rather use JS to generate the menu when the page loads. This means that the HTML\n              given to you will most likely not change at all here. Fortunately there is already\n              a script tag at the top that points to a .js file with some behavior already written.\n            </p>\n          </section>", "text": "Part I (JS with AJAX and fetch): Instructions 1/2 There are a lot of pieces in this task, so taking the time to develop a clear plan-of-action will save you a great deal of hassle and debugging later on. First, note that the menu the manager provided you through the API in JSON format will most likely be updated in the future depending on supply and demand. You know to avoid hardcoding values in the HTML, but rather use JS to generate the menu when the page loads. This means that the HTML given to you will most likely not change at all here. Fortunately there is already a script tag at the top that points to a .js file with some behavior already written.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (JS with AJAX and fetch): Instructions 2/2</h2>\n            <p>\n              Recall that you can use AJAX with JS to request data from the server and process/return\n              the requested data with a web service. Since the data is conveniently given to you\n              in JSON format, this should be fairly straightforward.\n            </p>\n            <p>\n              Your next step is to look at the\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/mowgliscafe/docs/\">API</a>\n              documentation to understand the JSON that is returned by the service. Then look at the\n              screenshots and see what data can map to the elements that will be on the page.\n            </p>\n          </section>", "text": "Part I (JS with AJAX and fetch): Instructions 2/2 Recall that you can use AJAX with JS to request data from the server and process/return the requested data with a web service. Since the data is conveniently given to you in JSON format, this should be fairly straightforward. Your next step is to look at the API documentation to understand the JSON that is returned by the service. Then look at the screenshots and see what data can map to the elements that will be on the page.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part I (AJAX with JS and PHP): Development Strategy</h2>\n            <ol>\n              <li>\n                Identify the key components of each category shown on the screenshots. What classes\n                might you add and style in CSS? What layout techniques have you learned to\n                achieve different layouts?\n              </li>\n              <li>\n                Examine the code that was given to you to see what helper functions are already there.\n                Which functions manipulate the DOM? Which functions potentially create the pieces\n                of the menu that you need to display on the screen?\n              </li>\n              <li>\n                Find where the previous developers stubbed out the AJAX request to the web service\n                to fetch the JSON from the server. The returned JSON will be used to populate the\n                food menu. The previous developers were at least kind and a) commented their code and b)\n                left hints as to where you should complete the code with comments that begin with\n                <code>/**** TO DO: </code>. Now it's your turn to make this work!\n              </li>\n            <ol>\n          </ol></ol></section>", "text": "Part I (AJAX with JS and PHP): Development Strategy Identify the key components of each category shown on the screenshots. What classes might you add and style in CSS? What layout techniques have you learned to achieve different layouts? Examine the code that was given to you to see what helper functions are already there. Which functions manipulate the DOM? Which functions potentially create the pieces of the menu that you need to display on the screen? Find where the previous developers stubbed out the AJAX request to the web service to fetch the JSON from the server. The returned JSON will be used to populate the food menu. The previous developers were at least kind and a) commented their code and b) left hints as to where you should complete the code with comments that begin with /**** TO DO: . Now it's your turn to make this work!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part II: Validating and Processing User Input</h2>\n          </section>", "text": "Part II: Validating and Processing User Input", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part II: Scenario</h2>\n            <p>\n            The manager is very happy at the progress you've made and seeing everything start to\n            come together. Now that you have a fairly solid foundation to populate the menu, it's\n            time to work on processing user input on the page using JS.\n            </p>\n          </section>", "text": "Part II: Scenario The manager is very happy at the progress you've made and seeing everything start to come together. Now that you have a fairly solid foundation to populate the menu, it's time to work on processing user input on the page using JS.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h3>Part II: Validating the Order Form (HTML5 Attributes)</h3>\n            <p><em>Note: We aren't going to be POSTing with this form until later!</em></p>\n            <p>\n            For the user's order information at the bottom of the page, all inputs should be\n            required. All user should only be able to\n            enter numbers for the tip, and shouldn't be able to enter negative values. The value they\n            enter for \"State\" should be in the format of a 2-letter state code (e.g., WA for\n            Washington). \n            </p>\n            <p>Can you think of anything else that you can do with HTML5 features for user-friendly \n            validation?</p>\n            <p>Review examples from <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec16-form-requests/index.html#/14\">lecture\n                 yesterday</a> to help get started with different ways inputs\n            can be validated!</p>\n          </section>", "text": "Part II: Validating the Order Form (HTML5 Attributes) Note: We aren't going to be POSTing with this form until later! For the user's order information at the bottom of the page, all inputs should be required. All user should only be able to enter numbers for the tip, and shouldn't be able to enter negative values. The value they enter for \"State\" should be in the format of a 2-letter state code (e.g., WA for Washington). Can you think of anything else that you can do with HTML5 features for user-friendly validation? Review examples from lecture yesterday to help get started with different ways inputs can be validated!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h3>Part II (Processing and Validating Menu Selections in JS)</h3>\n            <p>\n            Ensure that a customer may choose no more than 1 drink item and 1 bakery item (a customer\n            may choose 1 of each). If the customer chooses a drink, the \"sizes\" section of the menu\n            should have an option set to 12oz by default (otherwise no size should be checked\n            if the user hasn't selected a drink item).\n            </p>\n            <p>\n            Whenever a change is made to the selected items on the menu, the price displayed at the\n            bottom of the page, listed as \"Your total (before tip and 8% tax)\", should be updated.\n            The value for the \"final cost\" displayed at the very bottom of the page should be equal\n            to (price * 1.08 + tip), where \"price\" is the price before tip and tax.\n            </p>\n          </section>", "text": "Part II (Processing and Validating Menu Selections in JS) Ensure that a customer may choose no more than 1 drink item and 1 bakery item (a customer may choose 1 of each). If the customer chooses a drink, the \"sizes\" section of the menu should have an option set to 12oz by default (otherwise no size should be checked if the user hasn't selected a drink item). Whenever a change is made to the selected items on the menu, the price displayed at the bottom of the page, listed as \"Your total (before tip and 8% tax)\", should be updated. The value for the \"final cost\" displayed at the very bottom of the page should be equal to (price * 1.08 + tip), where \"price\" is the price before tip and tax.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n          <section id=\"localstorage\">\n            <h2>Part III: Storing your order with localStorage</h2>\n            <p>Work through the instructions for this part to practice with <samp>localStorage</samp> in the slides below!</p>\n          </section>\n          <section>\n            <h2>Part III (Storing your order with localStorage): Scenario </h2>\n            <p>\n            Your manager now asks you to implement a feature to save the customer's last order so\n            it will be easy for them to come back the next time and order again. The order information\n            will contain the drink (if any), size of the drink (if a drink is chosen),\n            baked good (if any), tip, and total cost.\n            </p>\n          </section>\n          <section>\n            <h2>Part III (Storing your order with localStorage): Instructions</h2>\n            <p>\n              Now whenever the user clicks \"Submit Your order\" you should use your\n              <code>window.localStorage</code> to save all of the information the user has entered onto\n              the page: which drink, the size, the baked good, as well as the tip, address, city\n              state and zip code. You do not need to store the total cost, that can be regenerated\n              when you load the information back in from storage.\n            </p>\n            <p>\n              Next, when the page is loaded, reload this information from local storage and update\n              the fields and radio buttons accordingly. Finally once all of the information\n              is reloaded, you can recalculate the cost.\n            </p>\n            <p>\n            You may find the <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/#22\">lecture slides</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">documentation</a>\n              on <samp>localStorage</samp> helpful in reviewing how to set and get an item.\n            </p>\n            <p>\n              Be sure to take a look at the application tab in your developer tools to see that\n              your <samp>localStorage</samp> is being set correctly.\n            </p>\n          </section>\n          </section>", "text": "Part III: Storing your order with localStorage Work through the instructions for this part to practice with localStorage in the slides below! Part III (Storing your order with localStorage): Scenario Your manager now asks you to implement a feature to save the customer's last order so it will be easy for them to come back the next time and order again. The order information will contain the drink (if any), size of the drink (if a drink is chosen), baked good (if any), tip, and total cost. Part III (Storing your order with localStorage): Instructions Now whenever the user clicks \"Submit Your order\" you should use your window.localStorage to save all of the information the user has entered onto the page: which drink, the size, the baked good, as well as the tip, address, city state and zip code. You do not need to store the total cost, that can be regenerated when you load the information back in from storage. Next, when the page is loaded, reload this information from local storage and update the fields and radio buttons accordingly. Finally once all of the information is reloaded, you can recalculate the cost. You may find the lecture slides or documentation on localStorage helpful in reviewing how to set and get an item. Be sure to take a look at the application tab in your developer tools to see that your localStorage is being set correctly.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 8: MAMP Setup and More JS</h3>\n        </section>", "text": "CSE 154 Section 8: MAMP Setup and More JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <p>Setup MAMP (local PHP/MySQL server)</p>\n          <p>Ducky Game</p>\n          <p>Finish prior sections or\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/extra/nonograms/slides/index.html#/\">Nonograms</a>\n            for more practice\n          </p>\n        </section>", "text": "Today's Agenda Setup MAMP (local PHP/MySQL server) Ducky Game Finish prior sections or Nonograms for more practice", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Mamp Setup</h2>\n          <p>\n            If you have not already, install MAMP on your computer. This will allow\n            you to run a local server that can host PHP files and interact with a\n            MySQL database. We will start using this more in the second half of the\n            course, but we want to make sure everything is working now.\n          </p>\n          <p>\n            Note: there is more information on this under \"Local Servers\"\n            on the course website's <a href=\"../../../resources/resources.html\">resources page</a>.\n          </p>\n\n          <p><a href=\"../../../resources/assets/servers/mamptutorial_mac.html\">Mac Setup</a></p>\n          <p><a href=\"../../../resources/assets/servers/mamptutorial_pc.html\">Windows Setup</a></p>\n        </section>", "text": "Mamp Setup If you have not already, install MAMP on your computer. This will allow you to run a local server that can host PHP files and interact with a MySQL database. We will start using this more in the second half of the course, but we want to make sure everything is working now. Note: there is more information on this under \"Local Servers\" on the course website's resources page. Mac Setup Windows Setup", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Rest of Section</h2>\n          <p>Worktime for Ducky Game lab (following slides)</p>\n          <p>Finish prior sections or\n            <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/sections/extra/nonograms/slides/index.html#/\">Nonograms</a>\n            for more practice\n          </p>\n        </section>", "text": "Rest of Section Worktime for Ducky Game lab (following slides) Finish prior sections or Nonograms for more practice", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Ducky Game</h2>\n          <p>\n            We have provided <a href=\"../code/starter/ducky-game/ducky-game.html\">HTML</a>\n            and <a href=\"../code/starter/ducky-game/ducky-game.css\">CSS</a>,\n            and a <a href=\"../code/starter/ducky-game/duck.svg\">duck.svg</a> files for the\n            Ducky Game. You are to implment <code>ducky-game.js</code>, a file that adds\n            interactivity to the game (see following slides).\n          </p>\n          <p>\n            <a href=\"../code/solution/ducky-game/ducky-game.html\">Running Solution</a>\n          </p>\n        </section>", "text": "Ducky Game We have provided HTML and CSS, and a duck.svg files for the Ducky Game. You are to implment ducky-game.js, a file that adds interactivity to the game (see following slides). Running Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Starting the Game</h2>\n          <p>\n            When the page loads, the Ducky Game should start.\n          </p>\n          <ul>\n            <li>\n              Every 200 milliseconds, the ducky should move in a random direction by\n              <code>20px</code>.\n            </li>\n            <li>\n              Try to prevent the duck from having the ability to walk off the edge\n              of the pond!\n            </li>\n            <li>\n              When the ducky is clicked, the player's score should increment by one point.\n            </li>\n          </ul>\n          <p class=\"font-20pt\">\n            Hint: To get the current top and left values of an element, you will need\n            to use window.getComputedStyle(). The reason for this is that we want to get\n            the current value on the screen, not necessarily a value set in CSS (our\n            CSS never even sets top or left values).\n          </p>\n          <pre><code class=\"hljs\">let top = window.getComputedStyle(element).top;\nlet left = window.getComputedStyle(element).left;</code></pre>\n          <p class=\"code-caption\">JS</p>\n        </section>", "text": "Starting the Game When the page loads, the Ducky Game should start. Every 200 milliseconds, the ducky should move in a random direction by 20px. Try to prevent the duck from having the ability to walk off the edge of the pond! When the ducky is clicked, the player's score should increment by one point. Hint: To get the current top and left values of an element, you will need to use window.getComputedStyle(). The reason for this is that we want to get the current value on the screen, not necessarily a value set in CSS (our CSS never even sets top or left values). let top = window.getComputedStyle(element).top;let left = window.getComputedStyle(element).left; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h2>Expanding On The Ducky Game</h2>\n          <p>\n            While fun as it is, the Ducky Game has a lot of room for growth! See if\n            you can add some more features to make the game even more fun! Here are\n            some suggestions of possible features to implment:\n          </p>\n          <ul>\n            <li>\n              The more ducks the better - add more ducks to the game, or let the user\n              choose how many ducks to play with.\n            </li>\n            <li>\n              Allow a user to reset their score or stop the game.\n            </li>\n            <li>\n              Keep track of total time elapsed. Hint, we did this in Skittles!\n            </li>\n            <li>\n              Send the user a message on the screen when they score a point, then remove\n              it after two seconds.\n            </li>\n            <li>\n              Add barriers to the pond that prevent the ducky from moving in certain\n              directions.\n            </li>\n            <li>\n              Penalize the player with negative points for clicking away from\n              the ducky.\n            </li>\n          </ul>\n        </section>", "text": "Expanding On The Ducky Game While fun as it is, the Ducky Game has a lot of room for growth! See if you can add some more features to make the game even more fun! Here are some suggestions of possible features to implment: The more ducks the better - add more ducks to the game, or let the user choose how many ducks to play with. Allow a user to reset their score or stop the game. Keep track of total time elapsed. Hint, we did this in Skittles! Send the user a message on the screen when they score a point, then remove it after two seconds. Add barriers to the pond that prevent the ducky from moving in certain directions. Penalize the player with negative points for clicking away from the ducky.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 5: Introduction to JavaScript</h3>\n        </section>", "text": "CSE 154 Section 5: Introduction to JavaScript", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <p>Experience common JavaScript bugs</p>\n          <p>Review helpful debugging strategies</p>\n          <p>Learn how to write a JavaScript function</p>\n          <p>Learn how to update page content/style with JavaScript (if time)</p>\n        </section>", "text": "Today's Agenda Experience common JavaScript bugs Review helpful debugging strategies Learn how to write a JavaScript function Learn how to update page content/style with JavaScript (if time)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Section Goals</h2>\n          <p>By the end of this section, you should be able to:</p>\n          <ul>\n            <li>Develop a basic JavaScript debugging strategy</li>\n            <li>Identify and fix common JavaScript bugs with debugging strategies</li>\n            <li>Be able to write a JavaScript file and link it to HTML</li>\n            <li>Be able to write JavaScript functions which update a page's content/style</li>\n          </ul>\n        </section>", "text": "Section Goals By the end of this section, you should be able to: Develop a basic JavaScript debugging strategy Identify and fix common JavaScript bugs with debugging strategies Be able to write a JavaScript file and link it to HTML Be able to write JavaScript functions which update a page's content/style", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Debugging</h2>\n            <p>JavaScript is notoriously difficult to debug due to its lack of error messages.\n              We will go over some strategies in today's section, but more debugging strategies can be found below.\n              We <strong>strongly</strong> recommend you read through these, for easier debugging in future assignments.</p>\n          </section>\n\n          <section>\n\t          <h2>CSE154 JSLint</h2>\n            <div>\n\t          \t<p>\n                <strong>JSLint</strong>: an analyzer that checks your JS code, much like\n                a compiler, and points out common errors.\n              </p>\n              <p>\n                Link to CSE154 JSLint:\n                <a href=\"https://oxford.cs.washington.edu/cse154/jslint/\">https://oxford.cs.washington.edu/cse154/jslint/</a></p>\n              \n\t          \t<p>\n                Much like HTML and CSS validation, always pass your code through\n                CSE154 JSLint before turning in assignments.\n              </p>\n            </div>\n          </section>\n          <section>\n            <h2>JavaScript \"strict\" mode</h2>\n            <pre>\n              <code class=\"hijs\" data-trim>\n                \"use strict\";\n\n                your code...\n              </code>\n            </pre>\n            <p>Writing <code>\"use strict\";</code> at the very top of your JS file turns on syntax checking:\n              </p><ul>\n                <li>Shows an error if you try to assign an undeclared variable</li>\n                <li>Stops you from overwriting key JS system libraries</li>\n                <li>Forbids some unsafe or error-prone language features</li>\n              </ul>\n            \n            <p>You should <em>always</em> turn on strict mode for your code in this class</p>\n          </section>\n\n          <section>\n\t          <h2>Debugging JS code in Chrome</h2>\n\t          <div style=\"float: right; width: 75%; margin-right: -100px; padding-left: 50px; margin-top: -10px;\">\n              <a href=\"hidden/step.png\">\n\t          \t  <img src=\"hidden/step.png\" alt=\"Chrome JS Debugging (start)\">\n              </a>\n\t          </div>\n\n            <div>\n              <p>\n\t          \tChrome's Web Inspector debugger can set breakpoints, step through code, examine values (Sources tab)</p>\n\t          \t<p>The interaction pane for typing in arbitrary JS expressions (Console tab; Sources tab with\n              code and variable views [see screenshot])</p>\n              <p>Try it on your own with <a href=\"hidden/debugging.html\">this example</a> (from the\n              screenshots)!</p>\n            </div>\n          </section>\n          <section>\n            <h2>\n              Debugging in Progress\n            </h2>\n            <p>\n              <a href=\"hidden/instep.png\">\n                <img src=\"hidden/instep.png\" alt=\"Chrome debugging finished\">\n              </a>\n            </p>\n          </section>\n          <section>\n            <h2>\n              Debugging Finished\n            </h2>\n            <p>\n              <a href=\"hidden/done.png\">\n                <img src=\"hidden/done.png\" alt=\"Chrome debugging finished\">\n              </a>\n            </p>\n          </section>\n\n          <section>\n            <h2>Other Debugging Strategies</h2>\n            <p><code>alert()</code> and <code>console.log()</code> are useful to include in functions that you are trying to debug, and are probably going to be most helpful when debugging JavaScript in this class.</p>\n            <p>A good strategy is to start with one of these functions in the top of your <code>.js</code> file as a sanity check that your script was correctly linked to the <code>HTML</code> page. Then, add it to the first function that is called to check that the function was called correctly, and continue the process until you reach the line(s) of code that are not working as expected.\n            </p>\n            <p>\n              You may find it useful to pass in variable values throughout this process so that\n              you can check whether your variables (e.g., text in an <code>HTML</code> tag or value\n              in a <code>&lt;input&gt;</code> tag have the correct values.\n            </p>\n          </section>\n          <section>\n            <h2>Debugging Checklist</h2>\n            <p>\n\t            </p><ul>\n\t            \t<li>\n\t            \t\tAre you sure the browser is even loading your JS file at all? <br> Put an <code>alert</code> at the top of it and make sure it appears.\n\t            \t</li>\n\n\t            \t<li>When you change your code, do a <strong>full browser refresh (Shift-Ctrl-R)</strong></li>\n\n\t            \t<li>\n\t            \t\t<img src=\"hidden/chrome-console-error.png\" style=\"float: right; width:\n                  400px\" alt=\"Chrome JS error\">\n\n                  Check bottom-right corner of Chrome console panel for syntax errors\n                  -&gt;\n\t            \t</li>\n\t            \t<li>\n\t            \t\tPaste your code into our <a href=\"https://oxford.cs.washington.edu/cse154/jslint/\">JSLint</a> tool to find problems.\n\t            \t</li>\n\t            \t<li>Type some test code into Chrome's console or use a breakpoint.</li>\n\t            </ul>\n            \n          </section>\n          <section>\n            <h2>General Good Coding Practices</h2>\n            <p>ALWAYS code with Chrome console open (or Firefox)</p>\n            <p>Incremental development: code a little, test a little</p>\n            <p>Follow good general coding principles:</p>\n            <ul>\n              <li>Remove redundant code</li>\n              <li>Make each line short and simple</li>\n            </ul>\n            <p>Use lines and variables liberally:</p>\n            <ul>\n              <li>It's good to save parts of a complex computation as variables</li>\n              <li>Helps to see what part of a long expression was bad/undefined/etc.</li>\n            </ul>\n            <p>Don't fear the Chrome/Firefox debugger</p>\n          </section>\n        </section>", "text": "Debugging JavaScript is notoriously difficult to debug due to its lack of error messages. We will go over some strategies in today's section, but more debugging strategies can be found below. We strongly recommend you read through these, for easier debugging in future assignments. \t CSE154 JSLint \t \t JSLint: an analyzer that checks your JS code, much like a compiler, and points out common errors. Link to CSE154 JSLint: https://oxford.cs.washington.edu/cse154/jslint/ \t \t Much like HTML and CSS validation, always pass your code through CSE154 JSLint before turning in assignments. JavaScript \"strict\" mode \"use strict\"; your code... Writing \"use strict\"; at the very top of your JS file turns on syntax checking: Shows an error if you try to assign an undeclared variable Stops you from overwriting key JS system libraries Forbids some unsafe or error-prone language features You should always turn on strict mode for your code in this class \t Debugging JS code in Chrome\t \t \t \t \t \tChrome's Web Inspector debugger can set breakpoints, step through code, examine values (Sources tab)\t \tThe interaction pane for typing in arbitrary JS expressions (Console tab; Sources tab with code and variable views [see screenshot]) Try it on your own with this example (from the screenshots)! Debugging in Progress Debugging Finished Other Debugging Strategies alert() and console.log() are useful to include in functions that you are trying to debug, and are probably going to be most helpful when debugging JavaScript in this class. A good strategy is to start with one of these functions in the top of your .js file as a sanity check that your script was correctly linked to the HTML page. Then, add it to the first function that is called to check that the function was called correctly, and continue the process until you reach the line(s) of code that are not working as expected. You may find it useful to pass in variable values throughout this process so that you can check whether your variables (e.g., text in an HTML tag or value in a <input> tag have the correct values. Debugging Checklist \t \t \t\t \t\tAre you sure the browser is even loading your JS file at all? Put an alert at the top of it and make sure it appears.\t \t\t \tWhen you change your code, do a full browser refresh (Shift-Ctrl-R)\t \t\t \t\t Check bottom-right corner of Chrome console panel for syntax errors ->\t \t\t \t\t \t\tPaste your code into our JSLint tool to find problems.\t \t\t \tType some test code into Chrome's console or use a breakpoint.\t General Good Coding Practices ALWAYS code with Chrome console open (or Firefox) Incremental development: code a little, test a little Follow good general coding principles: Remove redundant code Make each line short and simple Use lines and variables liberally: It's good to save parts of a complex computation as variables Helps to see what part of a long expression was bad/undefined/etc. Don't fear the Chrome/Firefox debugger", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Debugging</h2>\n            <p>JavaScript is notoriously difficult to debug due to its lack of error messages.\n              We will go over some strategies in today's section, but more debugging strategies can be found below.\n              We <strong>strongly</strong> recommend you read through these, for easier debugging in future assignments.</p>\n          </section>", "text": "Debugging JavaScript is notoriously difficult to debug due to its lack of error messages. We will go over some strategies in today's section, but more debugging strategies can be found below. We strongly recommend you read through these, for easier debugging in future assignments.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n\t          <h2>CSE154 JSLint</h2>\n            <div>\n\t          \t<p>\n                <strong>JSLint</strong>: an analyzer that checks your JS code, much like\n                a compiler, and points out common errors.\n              </p>\n              <p>\n                Link to CSE154 JSLint:\n                <a href=\"https://oxford.cs.washington.edu/cse154/jslint/\">https://oxford.cs.washington.edu/cse154/jslint/</a></p>\n              \n\t          \t<p>\n                Much like HTML and CSS validation, always pass your code through\n                CSE154 JSLint before turning in assignments.\n              </p>\n            </div>\n          </section>", "text": "CSE154 JSLint \t \t JSLint: an analyzer that checks your JS code, much like a compiler, and points out common errors. Link to CSE154 JSLint: https://oxford.cs.washington.edu/cse154/jslint/ \t \t Much like HTML and CSS validation, always pass your code through CSE154 JSLint before turning in assignments.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>JavaScript \"strict\" mode</h2>\n            <pre>\n              <code class=\"hijs\" data-trim>\n                \"use strict\";\n\n                your code...\n              </code>\n            </pre>\n            <p>Writing <code>\"use strict\";</code> at the very top of your JS file turns on syntax checking:\n              </p><ul>\n                <li>Shows an error if you try to assign an undeclared variable</li>\n                <li>Stops you from overwriting key JS system libraries</li>\n                <li>Forbids some unsafe or error-prone language features</li>\n              </ul>\n            \n            <p>You should <em>always</em> turn on strict mode for your code in this class</p>\n          </section>", "text": "JavaScript \"strict\" mode \"use strict\"; your code... Writing \"use strict\"; at the very top of your JS file turns on syntax checking: Shows an error if you try to assign an undeclared variable Stops you from overwriting key JS system libraries Forbids some unsafe or error-prone language features You should always turn on strict mode for your code in this class", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n\t          <h2>Debugging JS code in Chrome</h2>\n\t          <div style=\"float: right; width: 75%; margin-right: -100px; padding-left: 50px; margin-top: -10px;\">\n              <a href=\"hidden/step.png\">\n\t          \t  <img src=\"hidden/step.png\" alt=\"Chrome JS Debugging (start)\">\n              </a>\n\t          </div>\n\n            <div>\n              <p>\n\t          \tChrome's Web Inspector debugger can set breakpoints, step through code, examine values (Sources tab)</p>\n\t          \t<p>The interaction pane for typing in arbitrary JS expressions (Console tab; Sources tab with\n              code and variable views [see screenshot])</p>\n              <p>Try it on your own with <a href=\"hidden/debugging.html\">this example</a> (from the\n              screenshots)!</p>\n            </div>\n          </section>", "text": "Debugging JS code in Chrome\t \t \t \t \t \tChrome's Web Inspector debugger can set breakpoints, step through code, examine values (Sources tab)\t \tThe interaction pane for typing in arbitrary JS expressions (Console tab; Sources tab with code and variable views [see screenshot]) Try it on your own with this example (from the screenshots)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>\n              Debugging in Progress\n            </h2>\n            <p>\n              <a href=\"hidden/instep.png\">\n                <img src=\"hidden/instep.png\" alt=\"Chrome debugging finished\">\n              </a>\n            </p>\n          </section>", "text": "Debugging in Progress", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>\n              Debugging Finished\n            </h2>\n            <p>\n              <a href=\"hidden/done.png\">\n                <img src=\"hidden/done.png\" alt=\"Chrome debugging finished\">\n              </a>\n            </p>\n          </section>", "text": "Debugging Finished", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Other Debugging Strategies</h2>\n            <p><code>alert()</code> and <code>console.log()</code> are useful to include in functions that you are trying to debug, and are probably going to be most helpful when debugging JavaScript in this class.</p>\n            <p>A good strategy is to start with one of these functions in the top of your <code>.js</code> file as a sanity check that your script was correctly linked to the <code>HTML</code> page. Then, add it to the first function that is called to check that the function was called correctly, and continue the process until you reach the line(s) of code that are not working as expected.\n            </p>\n            <p>\n              You may find it useful to pass in variable values throughout this process so that\n              you can check whether your variables (e.g., text in an <code>HTML</code> tag or value\n              in a <code>&lt;input&gt;</code> tag have the correct values.\n            </p>\n          </section>", "text": "Other Debugging Strategies alert() and console.log() are useful to include in functions that you are trying to debug, and are probably going to be most helpful when debugging JavaScript in this class. A good strategy is to start with one of these functions in the top of your .js file as a sanity check that your script was correctly linked to the HTML page. Then, add it to the first function that is called to check that the function was called correctly, and continue the process until you reach the line(s) of code that are not working as expected. You may find it useful to pass in variable values throughout this process so that you can check whether your variables (e.g., text in an HTML tag or value in a <input> tag have the correct values.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Debugging Checklist</h2>\n            <p>\n\t            </p><ul>\n\t            \t<li>\n\t            \t\tAre you sure the browser is even loading your JS file at all? <br> Put an <code>alert</code> at the top of it and make sure it appears.\n\t            \t</li>\n\n\t            \t<li>When you change your code, do a <strong>full browser refresh (Shift-Ctrl-R)</strong></li>\n\n\t            \t<li>\n\t            \t\t<img src=\"hidden/chrome-console-error.png\" style=\"float: right; width:\n                  400px\" alt=\"Chrome JS error\">\n\n                  Check bottom-right corner of Chrome console panel for syntax errors\n                  -&gt;\n\t            \t</li>\n\t            \t<li>\n\t            \t\tPaste your code into our <a href=\"https://oxford.cs.washington.edu/cse154/jslint/\">JSLint</a> tool to find problems.\n\t            \t</li>\n\t            \t<li>Type some test code into Chrome's console or use a breakpoint.</li>\n\t            </ul>\n            \n          </section>", "text": "Debugging Checklist \t \t \t\t \t\tAre you sure the browser is even loading your JS file at all? Put an alert at the top of it and make sure it appears.\t \t\t \tWhen you change your code, do a full browser refresh (Shift-Ctrl-R)\t \t\t \t\t Check bottom-right corner of Chrome console panel for syntax errors ->\t \t\t \t\t \t\tPaste your code into our JSLint tool to find problems.\t \t\t \tType some test code into Chrome's console or use a breakpoint.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>General Good Coding Practices</h2>\n            <p>ALWAYS code with Chrome console open (or Firefox)</p>\n            <p>Incremental development: code a little, test a little</p>\n            <p>Follow good general coding principles:</p>\n            <ul>\n              <li>Remove redundant code</li>\n              <li>Make each line short and simple</li>\n            </ul>\n            <p>Use lines and variables liberally:</p>\n            <ul>\n              <li>It's good to save parts of a complex computation as variables</li>\n              <li>Helps to see what part of a long expression was bad/undefined/etc.</li>\n            </ul>\n            <p>Don't fear the Chrome/Firefox debugger</p>\n          </section>", "text": "General Good Coding Practices ALWAYS code with Chrome console open (or Firefox) Incremental development: code a little, test a little Follow good general coding principles: Remove redundant code Make each line short and simple Use lines and variables liberally: It's good to save parts of a complex computation as variables Helps to see what part of a long expression was bad/undefined/etc. Don't fear the Chrome/Firefox debugger", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Event-driven_programming\">Event-Driven Programming</a></h2>\n          <p>\n            <img src=\"../../../lectures/img/event-driven-programming.png\" alt=\"event-driven programming\">\n          </p>\n          <p>Unlike Java programs, JS programs have no <code>main</code>; they respond to user actions\n          called <strong>events</strong></p>\n          <p><strong>Event-Driven Programming</strong>: writing programs driven by <a href=\"https://codestepbystep.com/problem/view/javascript/events/events\">user events</a></p>\n        </section>", "text": "Event-Driven Programming Unlike Java programs, JS programs have no main; they respond to user actions called events Event-Driven Programming: writing programs driven by user events", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Accessing an Element: <code>document.getElementById</code></h2>\n          <pre><code class=\"hijs\" data-trim>let element = document.getElementById(\"id\");\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p><code>document.getElementById</code> returns the DOM object for an element with a given <code>id</code> (note that you omit the <code>#</code> when giving an id)</p>\n        </section>", "text": "Accessing an Element: document.getElementById let element = document.getElementById(\"id\"); JS document.getElementById returns the DOM object for an element with a given id (note that you omit the # when giving an id)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Handling Events</h2>\n          <pre><code class=\"hijs\" data-trim>// attaching a named function\nelement.addEventListener(\"click\", handleFunction);\n\nfunction handleFunction() { // attaching onclick function\n  // event handler code\n}</code></pre>\n            <p class=\"code-caption\">JS (template)</p>\n\n            <!--\n            <pre><code class=\"hijs\" data-trim>// (alternative) attaching an \"anonymous\" function\nelement.addEventListener(\"click\", function() { // attaching onclick function\n  // event handler code\n});</code></pre>\n          <p class=\"code-caption\">JS (template)</p>\n            -->\n          <p>JavaScript functions can be set as <strong>event handlers</strong></p>\n          <p>When you interact with the element, the function will execute</p>\n          <p><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event\">click</a>\n            is just one of many event types we'll use</p>\n        </section>", "text": "Handling Events // attaching a named functionelement.addEventListener(\"click\", handleFunction);function handleFunction() { // attaching onclick function // event handler code} JS (template) <!-- // (alternative) attaching an \"anonymous\" functionelement.addEventListener(\"click\", function() { // attaching onclick function // event handler code}); JS (template) --> JavaScript functions can be set as event handlers When you interact with the element, the function will execute click is just one of many event types we'll use", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2><code>click</code> Event Handler: an Example</h2>\n          <pre><code class=\"hijs\" data-trim>&lt;img id=\"pokeball\" src=\"images/pokeball.jpg\" alt=\"a pokeball\" /&gt;\n&lt;button id=\"demo-btn\"&gt;Click me!&lt;/button&gt;\n</code></pre>\n          <p class=\"code-caption\">HTML</p>\n          <pre><code class=\"hijs\" data-trim>let demoButton = document.getElementById(\"demo-btn\");\ndemoButton.addEventListener(\"click\", changeImage);\n\nfunction changeImage() {\n  let pokeballImg = document.getElementById(\"pokeball\");\n  pokeballImg.src = \"images/mystery.gif\";\n}\n</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <script>\n            function changeImage() {\n              let pokeballImg = document.getElementById(\"pokeball\");\n              pokeballImg.src = \"../img/mystery.gif\";\n            }\n          </script>\n          <div class=\"output\">\n            <img id=\"pokeball\" style=\"height: 160px; margin-bottom: -10px;\" src=\"../img/pokeball.jpg\" alt=\"a pokeball\">\n            <button style=\"font-size: 18pt; margin-left: 15px; margin-bottom: -25px;\" onclick=\"changeImage();\">Click me!</button>\n            <p class=\"output-caption\">output</p>\n          </div>\n        </section>", "text": "click Event Handler: an Example <img id=\"pokeball\" src=\"images/pokeball.jpg\" alt=\"a pokeball\" /><button id=\"demo-btn\">Click me!</button> HTML let demoButton = document.getElementById(\"demo-btn\");demoButton.addEventListener(\"click\", changeImage);function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"images/mystery.gif\";} JS function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"../img/mystery.gif\"; } Click me! output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section id=\"ul-li-tags\">\n            <h2>\n              Unordered List:\n              <a href=\"http://www.w3schools.com/tags/tag_ul.asp\"><code>&lt;ul&gt;</code></a>,\n              <a href=\"http://www.w3schools.com/tags/tag_li.asp\"><code>&lt;li&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>ul</code> represents a bulleted list of items (block)<br>\n            <code>li</code> represents a single item within the list (block)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;No shoes&lt;/li&gt;\n  &lt;li&gt;No shirt&lt;/li&gt;\n  &lt;li&gt;No problem&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n\n            <div class=\"output medium-small-font\">\n              <ul>\n                <li>No shoes</li>\n                <li>No shirt</li>\n                <li>No problem</li>\n              </ul>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Unordered List: <ul>, <li> ul represents a bulleted list of items (block) li represents a single item within the list (block) <ul> <li>No shoes</li> <li>No shirt</li> <li>No problem</li></ul> HTML No shoes No shirt No problem output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h2>More About Unordered Lists</h2>\n            <p>A list can contain other lists:</p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;ul&gt;\n  &lt;li&gt;Simpsons:\n    &lt;ul&gt;\n      &lt;li&gt;Homer&lt;/li&gt;\n      &lt;li&gt;Marge&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Family Guy:\n    &lt;ul&gt;\n      &lt;li&gt;Peter&lt;/li&gt;\n      &lt;li&gt;Lois&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <ul>\n                  <li>Simpsons:\n                    <ul>\n                      <li>Homer</li>\n                      <li>Marge</li>\n                    </ul>\n                  </li>\n                  <li>Family Guy:\n                    <ul>\n                      <li>Peter</li>\n                      <li>Lois</li>\n                    </ul>\n                  </li>\n                </ul>\n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>", "text": "More About Unordered Lists A list can contain other lists: <ul> <li>Simpsons: <ul> <li>Homer</li> <li>Marge</li> </ul> </li> <li>Family Guy: <ul> <li>Peter</li> <li>Lois</li> </ul> </li></ul> HTML Simpsons: Homer Marge Family Guy: Peter Lois output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"ol-tag\">\n            <h2>Ordered List: <a href=\"http://www.w3schools.com/tags/tag_ul.asp\"><code>&lt;ol&gt;</code></a></h2>\n\n            <p class=\"term-definition\">\n            <code>ol</code> represents a numbered list of items (block)\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;p&gt;RIAA business model:&lt;/p&gt;\n&lt;ol&gt;\n  &lt;li&gt;Sue customers&lt;/li&gt;\n  &lt;li&gt;???&lt;/li&gt;\n  &lt;li&gt;Profit!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right medium-small-font\">\n                <p>RIAA business model:\n                </p><ol>\n                  <li>Sue customers</li>\n                  <li>???</li>\n                  <li>Profit!</li>\n                </ol>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n\n            <p>\n            We can make lists with letters or Roman numerals using CSS (later)\n            </p>\n          </section>", "text": "Ordered List: <ol> ol represents a numbered list of items (block) <p>RIAA business model:</p><ol> <li>Sue customers</li> <li>???</li> <li>Profit!</li></ol> HTML RIAA business model: Sue customers ??? Profit! output We can make lists with letters or Roman numerals using CSS (later)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"definition-list-tags\">\n            <h2>Definition list:\n              <a href=\"http://www.w3schools.com/tags/tag_dl.asp\"><code>&lt;dl&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_dt.asp\"><code>&lt;dt&gt;</code></a>, <a href=\"http://www.w3schools.com/tags/tag_dd.asp\"><code>&lt;dd&gt;</code></a>\n            </h2>\n\n            <p>\n            <code>dl</code> represents a list of definitions of terms (block) <br>\n            <code>dt</code> represents each term, and <code>dd</code> its definition\n            </p>\n\n            <div class=\"side-by-side\">\n              <div class=\"two-panel panel-left\">\n                <pre><code class=\"hljs\" data-trim>&lt;dl&gt;\n  &lt;dt&gt;newbie&lt;/dt&gt;\n  &lt;dd&gt;\n    one who does not have\n    mad skills\n  &lt;/dd&gt;\n  &lt;dt&gt;own&lt;/dt&gt;\n  &lt;dd&gt;\n    to soundly defeat (e.g.\n    I owned that newbie!)\n  &lt;/dd&gt;\n  &lt;dt&gt;frag&lt;/dt&gt;\n  &lt;dd&gt;\n    a kill in a shooting game\n  &lt;/dd&gt;\n&lt;/dl&gt;</code></pre>\n                <p class=\"code-caption\">HTML</p>\n              </div>\n\n              <div class=\"output two-panel panel-right\">\n                <p>\n                </p><dl>\n                  <dt>newbie</dt>\n                  <dd>one who does not have mad skills</dd>\n                  <dt>own</dt>\n                  <dd>to soundly defeat (e.g. I owned that newbie!)</dd>\n                  <dt>frag</dt>\n                  <dd>a kill in a shooting game</dd>\n                </dl>\n                \n                <p class=\"output-caption\">output</p>\n              </div>\n            </div>\n          </section>", "text": "Definition list: <dl>, <dt>, <dd> dl represents a list of definitions of terms (block) dt represents each term, and dd its definition <dl> <dt>newbie</dt> <dd> one who does not have mad skills </dd> <dt>own</dt> <dd> to soundly defeat (e.g. I owned that newbie!) </dd> <dt>frag</dt> <dd> a kill in a shooting game </dd></dl> HTML newbie one who does not have mad skills own to soundly defeat (e.g. I owned that newbie!) frag a kill in a shooting game output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"blockquote-tag\">\n            <h2>\n              Quotations: <a href=\"http://www.w3schools.com/tags/tag_blockquote.asp\"><code>&lt;blockquote&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a quotation (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;As Lincoln said in his famous Gettysburg Address:&lt;/p&gt;\n&lt;blockquote&gt;\n  &lt;p&gt;\n    Fourscore and seven years ago, our fathers brought forth\n    on this continent a new nation, conceived in liberty, and\n    dedicated to the proposition that all men are created equal.\n  &lt;/p&gt;\n&lt;/blockquote&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output medium-small-font\">\n              <p>\n              As Lincoln said in his famous Gettysburg Address:\n              </p>\n              <blockquote>\n                <p>\n                Fourscore and seven years ago, our fathers brought forth\n                on this continent a new nation, conceived in liberty, and\n                dedicated to the proposition that all men are created equal.\n                </p>\n              </blockquote>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Quotations: <blockquote> a quotation (block) <p>As Lincoln said in his famous Gettysburg Address:</p><blockquote> <p> Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. </p></blockquote> HTML As Lincoln said in his famous Gettysburg Address: Fourscore and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"q-tag\">\n            <h2>Inline quotations: <a href=\"http://www.w3schools.com/tags/tag_q.asp\"><code>&lt;q&gt;</code></a></h2>\n\n            <p class=\"term-definition\">a short quotation (inline)</p>\n\n            <pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, &lt;q&gt;Nevermore.&lt;/q&gt;&lt;/p&gt;</code></pre>\n\n            <p class=\"code-caption\">HTML</p>\n            <p>\n            Why not just write the following?<br>\n            </p><pre><code class=\"hljs\">&lt;p&gt;Quoth the Raven, \"Nevermore.\"&lt;/p&gt;</code></pre>\n            \n\n            <div>\n              <p>We don't use \" marks for two reasons:</p>\n              <ol>\n                <li>HTML shouldn't contain literal quotation mark characters; they should be written as <code>&amp;quot;</code></li>\n                <li>Using <code>&lt;q&gt;</code> allows us to apply CSS styles to quotations (seen later)</li>\n              </ol>\n            </div>\n          </section>", "text": "Inline quotations: <q> a short quotation (inline) <p>Quoth the Raven, <q>Nevermore.</q></p> HTML Why not just write the following? <p>Quoth the Raven, \"Nevermore.\"</p> We don't use \" marks for two reasons: HTML shouldn't contain literal quotation mark characters; they should be written as &quot; Using <q> allows us to apply CSS styles to quotations (seen later)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"code-tag\">\n            <h2>\n              Computer Code:\n              <a href=\"http://www.w3schools.com/tags/tag_phrase_elements.asp\"><code>&lt;code&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">\n            a short section of computer code (usually shown in a fixed-width font)\n            </p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;p&gt;\n  The &lt;code&gt;ul&lt;/code&gt; and &lt;code&gt;ol&lt;/code&gt;\n  tags make lists.\n&lt;/p&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              The <code>ul</code> and <code>ol</code>\n              tags make lists.\n              </p>\n              <p class=\"output-caption\">output</p>\n            </div>\n          </section>", "text": "Computer Code: <code> a short section of computer code (usually shown in a fixed-width font) <p> The <code>ul</code> and <code>ol</code> tags make lists.</p> HTML The ul and ol tags make lists. output", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"pre-tag\">\n            <h2>\n              Preformatted Text:\n              <a href=\"http://www.w3schools.com/tags/tag_pre.asp\"><code>&lt;pre&gt;</code></a>\n            </h2>\n\n            <p class=\"term-definition\">a large section of pre-formatted text (block)</p>\n\n            <pre><code class=\"hljs\" data-trim>&lt;pre&gt;\n     Steve Jobs spoke loudly\n      reality distortion\n       Apple fans bow down\n&lt;/pre&gt;</code></pre>\n            <p class=\"code-caption\">HTML</p>\n            <div class=\"output\">\n              <p>\n              </p><pre>\n     Steve Jobs speaks loudly\n      reality distortion\n       Apple fans bow down\n              </pre>\n              \n              <p class=\"output-caption\">output</p>\n            </div>\n\n            <p>Displayed with exactly the whitespace / line breaks given in the text</p>\n            <p>Shown in a fixed-width font by default</p>\n            <p>\n              How would it look if we had instead enclosed it in <code>code</code>\n              tags?\n            </p>\n          </section>", "text": "Preformatted Text: <pre> a large section of pre-formatted text (block) <pre> Steve Jobs spoke loudly reality distortion Apple fans bow down</pre> HTML Steve Jobs speaks loudly reality distortion Apple fans bow down output Displayed with exactly the whitespace / line breaks given in the text Shown in a fixed-width font by default How would it look if we had instead enclosed it in code tags?", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <p>\n          <strong>Reminder:</strong> You will need to finish the requirements for CP1\n            before submitting your cp1-html-css repository to\n            GitGrade Saturday at 11PM. You will do a \"demo submit\" on Thursday.\n          </p>\n        </section>", "text": "Reminder: You will need to finish the requirements for CP1 before submitting your cp1-html-css repository to GitGrade Saturday at 11PM. You will do a \"demo submit\" on Thursday.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <section>\n            <h3>Resource: Command Line Basics</h3>\n            <p>\n            New to the bash terminal? It's just like a text-based alternative to your\n            computer's file-finder GUI, but with a ton of features to edit and run\n            different programs in the same location. Here are some tips for getting around the command\n            line! To learn more, use the handy \"down\" feature of these slides :)</p>\n          </section>\n          <section>\n            <h3>Moving around the command line</h3>\n            <p>list files &amp; directories (linux/mac)</p>\n            <code class=\"hljs\">ls</code>\n            <p>list files &amp; directories (windows)</p>\n            <code class=\"hljs\">dir</code>\n            <p>change directory current working directory</p>\n            <code class=\"hljs\">cd [folder-name]</code>\n          </section>\n          <section>\n            <h3>Current Working Directory</h3>\n            <p>Your current working directory is displayed here</p>\n            <img src=\"https://i.imgur.com/xwXNlqO.png\">\n            <p>By default, commands issued in the Command Line will apply to the current working directory</p>\n          </section>\n          <section>\n            <h3>ls/dir</h3>\n            <ul>\n              <li>Lists files and folders directly inside the current working directory</li>\n              <li>Use in conjunction with cd to navigate filesystem in Command Line</li>\n            </ul>\n          </section>\n          <section>\n            <h3>cd</h3>\n            <p>cd can be used with relative paths (assuming \"folder-name\" is a child of the current working directory)...</p>\n            <code class=\"hljs\">cd [folder-name]</code>\n            <p>...or with absolute paths</p>\n            <code class=\"hljs\">cd C:\\windows\\system32</code>\n            <p>Use cd to move up one directory</p>\n            <code class=\"hljs\">cd ..</code>\n          </section>\n        </section>", "text": "Resource: Command Line Basics New to the bash terminal? It's just like a text-based alternative to your computer's file-finder GUI, but with a ton of features to edit and run different programs in the same location. Here are some tips for getting around the command line! To learn more, use the handy \"down\" feature of these slides :) Moving around the command line list files & directories (linux/mac) ls list files & directories (windows) dir change directory current working directory cd [folder-name] Current Working Directory Your current working directory is displayed here By default, commands issued in the Command Line will apply to the current working directory ls/dir Lists files and folders directly inside the current working directory Use in conjunction with cd to navigate filesystem in Command Line cd cd can be used with relative paths (assuming \"folder-name\" is a child of the current working directory)... cd [folder-name] ...or with absolute paths cd C:\\windows\\system32 Use cd to move up one directory cd ..", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Resource: Command Line Basics</h3>\n            <p>\n            New to the bash terminal? It's just like a text-based alternative to your\n            computer's file-finder GUI, but with a ton of features to edit and run\n            different programs in the same location. Here are some tips for getting around the command\n            line! To learn more, use the handy \"down\" feature of these slides :)</p>\n          </section>", "text": "Resource: Command Line Basics New to the bash terminal? It's just like a text-based alternative to your computer's file-finder GUI, but with a ton of features to edit and run different programs in the same location. Here are some tips for getting around the command line! To learn more, use the handy \"down\" feature of these slides :)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Moving around the command line</h3>\n            <p>list files &amp; directories (linux/mac)</p>\n            <code class=\"hljs\">ls</code>\n            <p>list files &amp; directories (windows)</p>\n            <code class=\"hljs\">dir</code>\n            <p>change directory current working directory</p>\n            <code class=\"hljs\">cd [folder-name]</code>\n          </section>", "text": "Moving around the command line list files & directories (linux/mac) ls list files & directories (windows) dir change directory current working directory cd [folder-name]", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Current Working Directory</h3>\n            <p>Your current working directory is displayed here</p>\n            <img src=\"https://i.imgur.com/xwXNlqO.png\">\n            <p>By default, commands issued in the Command Line will apply to the current working directory</p>\n          </section>", "text": "Current Working Directory Your current working directory is displayed here By default, commands issued in the Command Line will apply to the current working directory", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>ls/dir</h3>\n            <ul>\n              <li>Lists files and folders directly inside the current working directory</li>\n              <li>Use in conjunction with cd to navigate filesystem in Command Line</li>\n            </ul>\n          </section>", "text": "ls/dir Lists files and folders directly inside the current working directory Use in conjunction with cd to navigate filesystem in Command Line", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>cd</h3>\n            <p>cd can be used with relative paths (assuming \"folder-name\" is a child of the current working directory)...</p>\n            <code class=\"hljs\">cd [folder-name]</code>\n            <p>...or with absolute paths</p>\n            <code class=\"hljs\">cd C:\\windows\\system32</code>\n            <p>Use cd to move up one directory</p>\n            <code class=\"hljs\">cd ..</code>\n          </section>", "text": "cd cd can be used with relative paths (assuming \"folder-name\" is a child of the current working directory)... cd [folder-name] ...or with absolute paths cd C:\\windows\\system32 Use cd to move up one directory cd ..", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h4>Resource: Basic CSE 154 Git Workflow Summary</h4>\n          <ol>\n            <li><a href=\"#clone\">Make a copy of the repository locally</a></li>\n            <li>Edit code locally (e.g. writig HTML/CSS with Atom text editor)</li>\n            <li><a href=\"#publish\">Publish your changes on the repository online (remote repository)</a>\n              <ol>\n                <li><a href=\"#add\">Add</a></li>\n                <li><a href=\"#commit\">Commit</a></li>\n                <li><a href=\"#push\">Push</a></li>\n              </ol>\n            </li>\n          </ol>\n        </section>", "text": "Resource: Basic CSE 154 Git Workflow Summary Make a copy of the repository locally Edit code locally (e.g. writig HTML/CSS with Atom text editor) Publish your changes on the repository online (remote repository) Add Commit Push", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"clone\">\n          <section>\n            <h3>Clone a repository</h3>\n            <p>Copy the URL of the repository on GitLab</p>\n            <img src=\"https://i.imgur.com/CFXyXld.png\">\n          </section>\n          <section>\n            <h3>Clone a repository (continued)</h3>\n            <p>Use ls and cd to navigate to the directory where you want to store your Git repositories, then type: </p>\n            <code class=\"hljs\">git clone [insert website url]</code>\n            <p>This creates a copy of the repository in your current working directory</p>\n          </section>\n\n        </section>", "text": "Clone a repository Copy the URL of the repository on GitLab Clone a repository (continued) Use ls and cd to navigate to the directory where you want to store your Git repositories, then type: git clone [insert website url] This creates a copy of the repository in your current working directory", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Clone a repository</h3>\n            <p>Copy the URL of the repository on GitLab</p>\n            <img src=\"https://i.imgur.com/CFXyXld.png\">\n          </section>", "text": "Clone a repository Copy the URL of the repository on GitLab", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Clone a repository (continued)</h3>\n            <p>Use ls and cd to navigate to the directory where you want to store your Git repositories, then type: </p>\n            <code class=\"hljs\">git clone [insert website url]</code>\n            <p>This creates a copy of the repository in your current working directory</p>\n          </section>", "text": "Clone a repository (continued) Use ls and cd to navigate to the directory where you want to store your Git repositories, then type: git clone [insert website url] This creates a copy of the repository in your current working directory", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n        <section id=\"publish\">\n          <h3>Publishing changes</h3>\n          <p>The following commands need to be executed inside the repository folder that you cloned every time you want to update\n          the repository online.</p>\n          <ol>\n            <li><a href=\"#add\">Add</a></li>\n            <li><a href=\"#commit\">Commit</a></li>\n            <li><a href=\"#push\">Push</a></li>\n          </ol>\n          <p>Click each link or press the down key to learn more about each step!</p>\n        </section>\n\n        <section id=\"add\">\n          <section>\n            <h3>Add</h3>\n            <code class=\"hljs\">git add [filename]</code>\n            <p>Proposes changes to be committed</p>\n          </section>\n          <section>\n            <h3>Add (cont.)</h3>\n            <p>Add everything</p>\n            <code class=\"hljs\">git add .</code>\n            <p>Add multiple files</p>\n            <code class=\"hljs\">git add [file1] [file2] [ect...]</code>\n          </section>\n        </section>\n        <section id=\"commit\">\n          <h3>Commit</h3>\n          <code class=\"hljs\">git commit -m \"write a descriptive message\"</code>\n          <p>Commits your changes locally</p>\n        </section>\n        <section id=\"push\">\n          <h3>Push</h3>\n          <code class=\"hljs\">git push origin master</code>\n          <p>Updates the repository online with the changes you committed</p>\n        </section>\n        </section>", "text": "Publishing changes The following commands need to be executed inside the repository folder that you cloned every time you want to update the repository online. Add Commit Push Click each link or press the down key to learn more about each step! Add git add [filename] Proposes changes to be committed Add (cont.) Add everything git add . Add multiple files git add [file1] [file2] [ect...] Commit git commit -m \"write a descriptive message\" Commits your changes locally Push git push origin master Updates the repository online with the changes you committed", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"publish\">\n          <h3>Publishing changes</h3>\n          <p>The following commands need to be executed inside the repository folder that you cloned every time you want to update\n          the repository online.</p>\n          <ol>\n            <li><a href=\"#add\">Add</a></li>\n            <li><a href=\"#commit\">Commit</a></li>\n            <li><a href=\"#push\">Push</a></li>\n          </ol>\n          <p>Click each link or press the down key to learn more about each step!</p>\n        </section>", "text": "Publishing changes The following commands need to be executed inside the repository folder that you cloned every time you want to update the repository online. Add Commit Push Click each link or press the down key to learn more about each step!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 10: Midterm Review</h3>\n        </section>", "text": "CSE 154 Section 10: Midterm Review", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-thurs/slides/"},
{"html": "<section>\n          <h2>Reminders</h2>\n          <p>\n          The midterm will be held Friday from 5:15-6:30PM in GUG 220. Please be in\n          the room by 5:05 so we can get id's checked before the exam.\n          </p>\n          <p>\n          We will provide a detailed cheat sheet for you to use during the exam (see exams\n          page on course website).\n          You may not bring any notes/books to the exam and electronics must be\n          silenced/put away.</p>\n          <p>You may assume id, qs, and qsa are defined for you (shorthand for\n          <code>document.getElementById</code>, <code>document.querySelector</code>, and\n          <code>document.querySelectorAll</code>, respectively)</p>\n          <p>Good luck!</p>\n        </section>", "text": "Reminders The midterm will be held Friday from 5:15-6:30PM in GUG 220. Please be in the room by 5:05 so we can get id's checked before the exam. We will provide a detailed cheat sheet for you to use during the exam (see exams page on course website). You may not bring any notes/books to the exam and electronics must be silenced/put away. You may assume id, qs, and qsa are defined for you (shorthand for document.getElementById, document.querySelector, and document.querySelectorAll, respectively) Good luck!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-thurs/slides/"},
{"html": "<section>\n          <h2>Exam Format</h2>\n          <p>You should expect any of the following topics to be covered in the exam:</p>\n          <ul>\n            <li>HTML (Writing and/or Validating)</li>\n            <li>CSS (Writing CSS and/or Selector Mysteries)</li>\n            <li>DOM visualization (drawing the DOM tree of HTML elements)</li>\n            <li>JavaScript DOM/Events</li>\n            <li>JavaScript Animations With Timers</li>\n            <li>General Web Development Knowledge (short answer questions)</li>\n          </ul>\n        </section>", "text": "Exam Format You should expect any of the following topics to be covered in the exam: HTML (Writing and/or Validating) CSS (Writing CSS and/or Selector Mysteries) DOM visualization (drawing the DOM tree of HTML elements) JavaScript DOM/Events JavaScript Animations With Timers General Web Development Knowledge (short answer questions)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-thurs/slides/"},
{"html": "<section>\n          <h2>Lab: Exam Practice</h2>\n          <ul>\n            <li>\n              <a href=\"../../../exams/assets/19sp-midterm-cheatsheet.pdf\" target=\"_blank\">Midterm\n              Cheatsheet</a> (provided during exam tomorrow)\n            </li><li>\n              <a href=\"../../../exams/assets/18au-midterm.pdf\" target=\"_blank\">Last Quarter's\n              Midterm Exam (PDF)</a>\n            </li>\n          </ul>\n        </section>", "text": "Lab: Exam Practice Midterm Cheatsheet (provided during exam tomorrow) Last Quarter's Midterm Exam (PDF)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-thurs/slides/"},
{"html": "<section>\n          <h2>Good Luck!</h2>\n          <p><img src=\"http://students.washington.edu/medskm/gifs/Pokemon/happy_pikachu.gif\" alt=\"dancing pikachu\">\n          </p><p class=\"small-font right-align\"><em><a href=\"https://tenor.com/view/pokemon-pikachu-dance-dancing-gif-7508512\">Source</a>\n          </em>\n\n        </p></section>", "text": "Good Luck! Source", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 7: JavaScript Timers</h3>\n        </section>", "text": "CSE 154 Section 7: JavaScript Timers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <h2>Today's Agenda</h2>\n          <p>QuickCheck: JavaScript Code Quality</p>\n          <p>Skittles, adding a timer</p>\n          <p>Dice Roll!</p>\n        </section>", "text": "Today's Agenda QuickCheck: JavaScript Code Quality Skittles, adding a timer Dice Roll!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <h2>Section Goals</h2>\n          <p>By the end of this section, you should be able to:</p>\n          <ul>\n            <li>Utilize the code quality guide to improve your JavaScript</li>\n            <li>Identify when and how to use different timer functions</li>\n            <li>\n              Have a better understanding of when to use module-global variables and\n              constants in your JS and how to decompose your program cleanly into functions.\n            </li>\n          </ul>\n        </section>", "text": "Section Goals By the end of this section, you should be able to: Utilize the code quality guide to improve your JavaScript Identify when and how to use different timer functions Have a better understanding of when to use module-global variables and constants in your JS and how to decompose your program cleanly into functions.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <h2>Exploration Session This Week</h2>\n          <h3>3D JavaScript with WebGL</h3>\n          <p>Thursday 4:30pm, MGH389</p>\n          <ul>\n            <li>One HW Extra Credit Point Per Session Attended!</li>\n            <li>\n              If you have a legitmate conflict, fill out the form on the\n              <a href=\"../../../exploration-sessions/exploration-sessions.html\">exploration\n              sessions</a> page of the course website to watch the Panapto and take a\n              short quiz for credit.\n            </li>\n          </ul>\n        </section>", "text": "Exploration Session This Week 3D JavaScript with WebGL Thursday 4:30pm, MGH389 One HW Extra Credit Point Per Session Attended! If you have a legitmate conflict, fill out the form on the exploration sessions page of the course website to watch the Panapto and take a short quiz for credit.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 1: (Back to) Skittles!</h2>\n            <p>\n              We have completed the <a href=\"../code/starter/skittles/skittles.html\" target=\"_blank\">skittles.html</a> and <a href=\"../code/starter/skittles/skittles.css\">skittles.css</a>.\n              Additionallly, we have started a <a href=\"../code/starter/skittles/skittles.js\" target=\"_blank\">skittles.js</a> file that contains most of the functionality for the\n              game except the timers.\n            </p>\n            <p>\n              Given this starter code, add functionality for telling the user how\n              long the game took to complete! (more info below)\n            </p>\n\n            <!-- <p>\n              Given this starter <a href=\"../code/starter/skittles/skittles.html\"\n              target=\"_blank\">skittles.html</a> (and <a href=\"../code/starter/skittles/skittles.css\">skittles.css</a>),\n              we will implement a \"game\" to fill a jar with Skittles and let a user see how quickly they can\n              guess the correct number of Skittles in the with a certain color.\n            </p>\n            <p> -->\n              <img class=\"centered-figure\" width=\"35%\" src=\"hidden/skittles-wrong-guess.png\" alt=\"skittles page expected output\">\n            \n            <p>You can find the runnable example <a href=\"../code/solution/skittles/skittles.html\">here</a>.\n          </p></section>\n          <!-- <section>\n            <h2>The Skittle Rainbow (Provided in CSS)</h2>\n            <img src=\"hidden/skittle-rainbow.png\" class=\"centered-figure\" alt=\"the Skittles rainbow!\"/>\n            <ul>\n            <li>\n              There are 9 possible Skittle colors, each corresponding to a class in the\n              provied CSS: \"red\", \"green\", \"blue\", \"purple\", \"gray\", \"mediumaquamarine\",\n              \"pikachuyellow\", \"blanchedalmond\", and \"tomato\". The class for each of these\n              colors will change the font color of the #color span (in the h1) and the\n              background color of a <code>.skittle</code> element.\n            </li>\n            <li>\n              For each game, the value of the selected radio button determines how many colors are\n              considered, and one of these colors should be used as the color to guess.\n            </li>\n            </ul>\n            </section>\n              <section>\n                <h2>Filling the Skittles Jar</h2>\n                <p>\n                  When a user clicks the \"Start\" button:\n                </p>\n                <ul>\n                  <li>The jar should be filled with a random\n                  number of Skittles (new div elements having a class of\n                  \"skittle\") between 1 and 154. Each Skittle should be given a random color class\n                  using the colors considered in the current game.\n                  </li>\n\n                   <li>\n                     The #color span (in the h1) should have\n                     as text (and a class) one of colors used in the game - that random color will be the Skittle color\n                     to guess a count for in the jar.\n                   </li>\n                   <li>\n                     The #game-ui should be displayed and the #game-setup should be hidden,\n                     along with the #new-game button.\n                   </li>\n                </ul>\n          </section> -->\n          <section>\n            <h2>Adding Timers</h2>\n            <p>A user can input numbers in the input box to guess how many Skittles of the\n            current color are in the jar.\n            </p>\n            <p>\n              If they guess incorrectly, the JavaScript outputs a message stating if\n              they guessed too high or too low. <strong>Delete this message after 2 seconds.</strong>\n            </p>\n            <p>\n              When the user guesses correctly, the game is ended. Tell the user how\n              many seconds the game took (see TODO in code for more information).\n            </p>\n\n          </section>\n          <!-- <section>\n            <h2>Ending a Game</h2>\n            <div class=\"side-by-side\" style=\"align-items: end\">\n              <img src=\"hidden/skittles-win.png\" width=\"35%\" style=\"margin: 10px 10px 0 0\" alt=\"skittles win view\">\n              <div class=\"font-20pt\">\n               <p>\n                When the game is ended:\n              </p>\n              <!-- <ul>\n                <li>\n                  A message in #results should appear in the format\n                  \"You guessed correct in SECONDS seconds!\", where SECONDS is the number of\n                  seconds that passed since the game was started.\n                </li>\n                <li>\n                  The guess input box should be empty and the \"Guess\" button should be\n                  disabled.\n                </li>\n                <li>\n                  The text of the #color span should be empty.\n                </li>\n                <li>The New Game button should be displayed so the user can see the same\n                  view they saw when first visiting the page.</li>\n              </ul>\n              </div>\n            </div>\n            <p class=\"font-20pt\">\n              Note: You can set the (boolean) disabled attribute for UI elements using the following\n              syntax (assume a button with ID \"my-btn\" is defined):\n            </p>\n            <pre><code class=\"hljs\">id(\"my-btn\").disabled = true;</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section> -->\n          <section>\n            <h2>Exercise 1: Solution</h2>\n            <p>\n              Solution: <a href=\"../code/solution/skittles/skittles.js\">JS</a>\n            </p>\n          </section>\n        </section>", "text": "Exercise 1: (Back to) Skittles! We have completed the skittles.html and skittles.css. Additionallly, we have started a skittles.js file that contains most of the functionality for the game except the timers. Given this starter code, add functionality for telling the user how long the game took to complete! (more info below) <!-- Given this starter skittles.html (and skittles.css), we will implement a \"game\" to fill a jar with Skittles and let a user see how quickly they can guess the correct number of Skittles in the with a certain color. --> You can find the runnable example here. <!-- The Skittle Rainbow (Provided in CSS) There are 9 possible Skittle colors, each corresponding to a class in the provied CSS: \"red\", \"green\", \"blue\", \"purple\", \"gray\", \"mediumaquamarine\", \"pikachuyellow\", \"blanchedalmond\", and \"tomato\". The class for each of these colors will change the font color of the #color span (in the h1) and the background color of a .skittle element. For each game, the value of the selected radio button determines how many colors are considered, and one of these colors should be used as the color to guess. Filling the Skittles Jar When a user clicks the \"Start\" button: The jar should be filled with a random number of Skittles (new div elements having a class of \"skittle\") between 1 and 154. Each Skittle should be given a random color class using the colors considered in the current game. The #color span (in the h1) should have as text (and a class) one of colors used in the game - that random color will be the Skittle color to guess a count for in the jar. The #game-ui should be displayed and the #game-setup should be hidden, along with the #new-game button. --> Adding Timers A user can input numbers in the input box to guess how many Skittles of the current color are in the jar. If they guess incorrectly, the JavaScript outputs a message stating if they guessed too high or too low. Delete this message after 2 seconds. When the user guesses correctly, the game is ended. Tell the user how many seconds the game took (see TODO in code for more information). <!-- Ending a Game When the game is ended: <!-- A message in #results should appear in the format \"You guessed correct in SECONDS seconds!\", where SECONDS is the number of seconds that passed since the game was started. The guess input box should be empty and the \"Guess\" button should be disabled. The text of the #color span should be empty. The New Game button should be displayed so the user can see the same view they saw when first visiting the page. Note: You can set the (boolean) disabled attribute for UI elements using the following syntax (assume a button with ID \"my-btn\" is defined): id(\"my-btn\").disabled = true; JS --> Exercise 1: Solution Solution: JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: (Back to) Skittles!</h2>\n            <p>\n              We have completed the <a href=\"../code/starter/skittles/skittles.html\" target=\"_blank\">skittles.html</a> and <a href=\"../code/starter/skittles/skittles.css\">skittles.css</a>.\n              Additionallly, we have started a <a href=\"../code/starter/skittles/skittles.js\" target=\"_blank\">skittles.js</a> file that contains most of the functionality for the\n              game except the timers.\n            </p>\n            <p>\n              Given this starter code, add functionality for telling the user how\n              long the game took to complete! (more info below)\n            </p>\n\n            <!-- <p>\n              Given this starter <a href=\"../code/starter/skittles/skittles.html\"\n              target=\"_blank\">skittles.html</a> (and <a href=\"../code/starter/skittles/skittles.css\">skittles.css</a>),\n              we will implement a \"game\" to fill a jar with Skittles and let a user see how quickly they can\n              guess the correct number of Skittles in the with a certain color.\n            </p>\n            <p> -->\n              <img class=\"centered-figure\" width=\"35%\" src=\"hidden/skittles-wrong-guess.png\" alt=\"skittles page expected output\">\n            \n            <p>You can find the runnable example <a href=\"../code/solution/skittles/skittles.html\">here</a>.\n          </p></section>", "text": "Exercise 1: (Back to) Skittles! We have completed the skittles.html and skittles.css. Additionallly, we have started a skittles.js file that contains most of the functionality for the game except the timers. Given this starter code, add functionality for telling the user how long the game took to complete! (more info below) <!-- Given this starter skittles.html (and skittles.css), we will implement a \"game\" to fill a jar with Skittles and let a user see how quickly they can guess the correct number of Skittles in the with a certain color. --> You can find the runnable example here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Adding Timers</h2>\n            <p>A user can input numbers in the input box to guess how many Skittles of the\n            current color are in the jar.\n            </p>\n            <p>\n              If they guess incorrectly, the JavaScript outputs a message stating if\n              they guessed too high or too low. <strong>Delete this message after 2 seconds.</strong>\n            </p>\n            <p>\n              When the user guesses correctly, the game is ended. Tell the user how\n              many seconds the game took (see TODO in code for more information).\n            </p>\n\n          </section>", "text": "Adding Timers A user can input numbers in the input box to guess how many Skittles of the current color are in the jar. If they guess incorrectly, the JavaScript outputs a message stating if they guessed too high or too low. Delete this message after 2 seconds. When the user guesses correctly, the game is ended. Tell the user how many seconds the game took (see TODO in code for more information).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Solution</h2>\n            <p>\n              Solution: <a href=\"../code/solution/skittles/skittles.js\">JS</a>\n            </p>\n          </section>", "text": "Exercise 1: Solution Solution: JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 2: Dice Roller!</h2>\n            <p>\n              Given this starter <a href=\"../code/starter/dice/dice-roller.html\" target=\"_blank\">dice-roller.html</a> (and <a href=\"../code/starter/dice/dice.css\">dice.css</a>),\n              we will implement an animated dice-rolling feature to roll a specified number of dice\n              having a selected number of sides.\n            </p>\n            <img src=\"hidden/dice-roller.png\" alt=\"dice roller in action\">\n            <p>\n              <a href=\"../code/solution/dice/dice-roller.html\">Running Example</a>\n            </p>\n          </section>\n          <section>\n            <h2>Generating Die</h2>\n            <p>\n              The #dice-area is the container to hold dice - each die should be a div with\n              a \"die\" class added (this class is implemented for you in the provided CSS).\n            </p>\n            <p>\n              When the \"Roll!\" button is clicked, first the input box should be checked for valid\n              input:\n            </p>\n              <ul>\n                <li>\n                  If it is empty or the user gave a negative number,\n                  the page should instead alert a message to the user to indicate\n                  invalid input.\n                </li>\n                <li>\n                  Otherwise,\n                  the selected value in the text box will be used to\n                  determine how many dice to create and add to the #dice-area.\n                </li>\n              </ul>\n          </section>\n          <section>\n            <h2>Rolling the Dice</h2>\n            <div class=\"side-by-side space-below\" style=\"align-items: end;\">\n            <p class=\"font-20pt\">\n              As soon as the dice are added, they should start \"rolling\"\n              by displaying a random number (based on the number of sides) every 200 ms.\n              Whenever dice are rolling, the dropdown, input box, and \"Roll!\" elements\n              should be disabled.\n            </p>\n            <img src=\"hidden/dice-in-roll.png\" width=\"45%\" style=\"margin-left: 10px;\" alt=\"screenshot of page during roll\">\n            </div>\n            <p class=\"font-20pt\">\n              Note: You can set the (boolean) disabled attribute for UI elements using the following\n              syntax (assume a button with ID \"my-btn\" is defined):\n            </p>\n            <pre><code class=\"hljs\">id(\"my-btn\").disabled = true;</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>\n          <section>\n            <h2>Stopping the Rolls</h2>\n            <p>\n              When\n              \"Stop Roll!\" is clicked, the values of all dice in the container should be\n              added and displayed in the results paragraph and the button should be\n              disabled. The previously-disabled elements should be re-enabled so a user\n              can start a new dice roll (possibly with new number of dice and different\n              die types).\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 2: Solution</h2>\n            <p>\n              Solution: <a href=\"../code/solution/dice/dice.js\">JS</a>\n            </p>\n          </section>\n        </section>", "text": "Exercise 2: Dice Roller! Given this starter dice-roller.html (and dice.css), we will implement an animated dice-rolling feature to roll a specified number of dice having a selected number of sides. Running Example Generating Die The #dice-area is the container to hold dice - each die should be a div with a \"die\" class added (this class is implemented for you in the provided CSS). When the \"Roll!\" button is clicked, first the input box should be checked for valid input: If it is empty or the user gave a negative number, the page should instead alert a message to the user to indicate invalid input. Otherwise, the selected value in the text box will be used to determine how many dice to create and add to the #dice-area. Rolling the Dice As soon as the dice are added, they should start \"rolling\" by displaying a random number (based on the number of sides) every 200 ms. Whenever dice are rolling, the dropdown, input box, and \"Roll!\" elements should be disabled. Note: You can set the (boolean) disabled attribute for UI elements using the following syntax (assume a button with ID \"my-btn\" is defined): id(\"my-btn\").disabled = true; JS Stopping the Rolls When \"Stop Roll!\" is clicked, the values of all dice in the container should be added and displayed in the results paragraph and the button should be disabled. The previously-disabled elements should be re-enabled so a user can start a new dice roll (possibly with new number of dice and different die types). Exercise 2: Solution Solution: JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Dice Roller!</h2>\n            <p>\n              Given this starter <a href=\"../code/starter/dice/dice-roller.html\" target=\"_blank\">dice-roller.html</a> (and <a href=\"../code/starter/dice/dice.css\">dice.css</a>),\n              we will implement an animated dice-rolling feature to roll a specified number of dice\n              having a selected number of sides.\n            </p>\n            <img src=\"hidden/dice-roller.png\" alt=\"dice roller in action\">\n            <p>\n              <a href=\"../code/solution/dice/dice-roller.html\">Running Example</a>\n            </p>\n          </section>", "text": "Exercise 2: Dice Roller! Given this starter dice-roller.html (and dice.css), we will implement an animated dice-rolling feature to roll a specified number of dice having a selected number of sides. Running Example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Generating Die</h2>\n            <p>\n              The #dice-area is the container to hold dice - each die should be a div with\n              a \"die\" class added (this class is implemented for you in the provided CSS).\n            </p>\n            <p>\n              When the \"Roll!\" button is clicked, first the input box should be checked for valid\n              input:\n            </p>\n              <ul>\n                <li>\n                  If it is empty or the user gave a negative number,\n                  the page should instead alert a message to the user to indicate\n                  invalid input.\n                </li>\n                <li>\n                  Otherwise,\n                  the selected value in the text box will be used to\n                  determine how many dice to create and add to the #dice-area.\n                </li>\n              </ul>\n          </section>", "text": "Generating Die The #dice-area is the container to hold dice - each die should be a div with a \"die\" class added (this class is implemented for you in the provided CSS). When the \"Roll!\" button is clicked, first the input box should be checked for valid input: If it is empty or the user gave a negative number, the page should instead alert a message to the user to indicate invalid input. Otherwise, the selected value in the text box will be used to determine how many dice to create and add to the #dice-area.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Rolling the Dice</h2>\n            <div class=\"side-by-side space-below\" style=\"align-items: end;\">\n            <p class=\"font-20pt\">\n              As soon as the dice are added, they should start \"rolling\"\n              by displaying a random number (based on the number of sides) every 200 ms.\n              Whenever dice are rolling, the dropdown, input box, and \"Roll!\" elements\n              should be disabled.\n            </p>\n            <img src=\"hidden/dice-in-roll.png\" width=\"45%\" style=\"margin-left: 10px;\" alt=\"screenshot of page during roll\">\n            </div>\n            <p class=\"font-20pt\">\n              Note: You can set the (boolean) disabled attribute for UI elements using the following\n              syntax (assume a button with ID \"my-btn\" is defined):\n            </p>\n            <pre><code class=\"hljs\">id(\"my-btn\").disabled = true;</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>", "text": "Rolling the Dice As soon as the dice are added, they should start \"rolling\" by displaying a random number (based on the number of sides) every 200 ms. Whenever dice are rolling, the dropdown, input box, and \"Roll!\" elements should be disabled. Note: You can set the (boolean) disabled attribute for UI elements using the following syntax (assume a button with ID \"my-btn\" is defined): id(\"my-btn\").disabled = true; JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Stopping the Rolls</h2>\n            <p>\n              When\n              \"Stop Roll!\" is clicked, the values of all dice in the container should be\n              added and displayed in the results paragraph and the button should be\n              disabled. The previously-disabled elements should be re-enabled so a user\n              can start a new dice roll (possibly with new number of dice and different\n              die types).\n            </p>\n          </section>", "text": "Stopping the Rolls When \"Stop Roll!\" is clicked, the values of all dice in the container should be added and displayed in the results paragraph and the button should be disabled. The previously-disabled elements should be re-enabled so a user can start a new dice roll (possibly with new number of dice and different die types).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Solution</h2>\n            <p>\n              Solution: <a href=\"../code/solution/dice/dice.js\">JS</a>\n            </p>\n          </section>", "text": "Exercise 2: Solution Solution: JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week04-tues/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 9: AJAX with Fetch</h3>\n        </section>", "text": "CSE 154 Section 9: AJAX with Fetch", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Section Agenda</h2>\n          <p>QuickCheck: JSON Review</p>\n          <p>\n            Review AJAX: Why is it useful? How do we use it?\n          </p>\n          <p>\n            Practice AJAX with different response formats\n          </p>\n        </section>", "text": "Section Agenda QuickCheck: JSON Review Review AJAX: Why is it useful? How do we use it? Practice AJAX with different response formats", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>AJAX</h2>\n          <p>Why is it useful?</p>\n          <ul>\n            <li>\n              The web is full of data - often, websites \"ask\" for data from servers\n              which hold different types of data (txt, json, images, databases, etc.)</li>\n            <li>\n              What we know about JS so far does not give us any way to process data\n              outside of our JS program. That's where AJAX comes in!\n            </li>\n          </ul>\n          <p>How do we use it?</p>\n          <ul>\n            <li><code>fetch</code>! (a built-in JavaScript function)</li>\n            <li>A touch of Promises to elegantly control success (200) vs. error (non-200)\n            responses from a server</li>\n          </ul>\n        </section>", "text": "AJAX Why is it useful? The web is full of data - often, websites \"ask\" for data from servers which hold different types of data (txt, json, images, databases, etc.) What we know about JS so far does not give us any way to process data outside of our JS program. That's where AJAX comes in! How do we use it? fetch! (a built-in JavaScript function) A touch of Promises to elegantly control success (200) vs. error (non-200) responses from a server", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>\n            Ajax <code>fetch</code> template\n          </h2>\n          <p class=\"font-20pt\">\n            When we make a call to fetch data (whether it's HTML, txt, JSON, etc) we use a\n            function in JavaScript called <code>fetch</code>, which takes a URL path to\n            fetch data from.\n          </p>\n          <p class=\"font-20pt\">\n            Here's the general template you will use for most AJAX code:\n          </p>\n          <pre class=\"h400px\"><code class=\"hljs font-12pt\" data-trim>\nconst URL_BASE = \"http://yourapi.php\";\n\n// Step 1. Write a function to \"fetch\" data from a URL\nfunction callAjax() {\n  let url = URL_BASE + \"?query0=value0\"; // some requests require parameters\n  fetch(url)\n    .then(checkStatus)\n    // .then(JSON.parse) /* include if your data comes in JSON instead of text) */\n    .then(successFunction)\n    .catch(console.log);\n}\n\n// Step 2. Write a function to do something with the response text (a string if\n// you don't have .then(JSON.parse) in the fetch call chain, otherwise an object)\nfunction successFunction(responseData) {\n  // do something with the responseData, like adding to the DOM\n}\n\n// Step 3. Copy/paste the checkStatus function from template\nfunction checkStatus(response) {...}</code></pre>\n          <p class=\"code-caption space-above\">JS (<a href=\"../../../resources/assets/templates/js/ajax-template.js\">full template</a>)</p>\n        </section>", "text": "Ajax fetch template When we make a call to fetch data (whether it's HTML, txt, JSON, etc) we use a function in JavaScript called fetch, which takes a URL path to fetch data from. Here's the general template you will use for most AJAX code: const URL_BASE = \"http://yourapi.php\";// Step 1. Write a function to \"fetch\" data from a URLfunction callAjax() { let url = URL_BASE + \"?query0=value0\"; // some requests require parameters fetch(url) .then(checkStatus) // .then(JSON.parse) /* include if your data comes in JSON instead of text) */ .then(successFunction) .catch(console.log);}// Step 2. Write a function to do something with the response text (a string if// you don't have .then(JSON.parse) in the fetch call chain, otherwise an object)function successFunction(responseData) { // do something with the responseData, like adding to the DOM}// Step 3. Copy/paste the checkStatus function from templatefunction checkStatus(response) {...} JS (full template)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Mechanics</h2>\n          <p>We initiate a <code>fetch</code> of a URL</p>\n          <ul class=\"no-bullets no-space-bottom\">\n            <li class=\"fragment\">A <code>fetch</code> call returns a <code>Promise</code> object</li>\n            <li class=\"fragment\">The <code>.then</code> method on a <code>Promise</code> object returns a <code>Promise</code> object</li>\n            <ul>\n              <li class=\"fragment\">Our first <code>.then(checkStatus)</code>\n                checks the status of the response to makes sure the server responded with an OK. The\n                result of that first <code>.then</code> is another <code>Promise</code> object with\n                the response (text, JSON, ...) as the value of the Promise.\n              </li>\n              <li class=\"fragment\">\n                We may <code>.then(JSON.parse)</code> which also returns\n                a <code>Promise</code> object with a JSON object as the value\n              </li>\n              <li class=\"fragment\">\n                We <code>.then(handleResponse)</code> which will do something with the response\n                from the server.\n              </li>\n              <li class=\"fragment\">\n                If at any time there is an error, the execution falls down to the\n                <code>.catch</code> method on the <code>Promise</code> chain\n              </li>\n            </ul>\n          </ul>\n          <p class=\"fragment no-space-top\">Chaining of Promises gives us a nice data flow, like down a pipe!</p>\n        </section>", "text": "Mechanics We initiate a fetch of a URL A fetch call returns a Promise object The .then method on a Promise object returns a Promise object Our first .then(checkStatus) checks the status of the response to makes sure the server responded with an OK. The result of that first .then is another Promise object with the response (text, JSON, ...) as the value of the Promise. We may .then(JSON.parse) which also returns a Promise object with a JSON object as the value We .then(handleResponse) which will do something with the response from the server. If at any time there is an error, the execution falls down to the .catch method on the Promise chain Chaining of Promises gives us a nice data flow, like down a pipe!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>The Promise Pipeline</h2>\n          <img src=\"../hidden/images/fetchpipeline.png\" alt=\"Visual description of the fetch pipeline\">\n        </section>", "text": "The Promise Pipeline", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Alright, let's play fetch with pets!</h2>\n        </section>", "text": "Alright, let's play fetch with pets!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 1: Ajax Pets</h2>\n            <div class=\"side-by-side\">\n            <p>\n              Given this <a href=\"../code/starter/ajaxpets/ajaxpets-starter.zip\">ajaxpets-starter.zip</a>\n              (HTML, CSS, and JS template), create an AJAX-powered gallery of pet images that\n              allows you to switch between kitty and puppy images without reloading the page. You\n              can view the finished product <a href=\"../code/solution/ajaxpets/ajaxpets.html\" target=\"_blank\">here</a>.\n            </p>\n            <p>\n              <img src=\"https://courses.cs.washington.edu/courses/cse154/webservices/pets/images/puppy23.jpg\" alt=\"super special ajax pets pet\" width=\"900px\" style=\"margin-top: -80px\">\n            </p>\n            </div>\n          </section>\n          <section>\n            <h2>Exercise 1: Ajax Pets API URL</h2>\n            <p>\n              <strong>Service URL</strong>:\n              <samp>https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php</samp>\n            </p>\n            <p>\n              <strong>Query Parameters (required)</strong>:\n              <br>\n              <samp>?animal=<em>value</em></samp>\n            </p>\n            <p>\n              <strong>Details</strong>: <code>animal</code> is the name of the query parameter you need to assign\n              a <code><em>value</em></code> to. This API recognizes either a value of\n              <code>puppy</code> or <code>kitty</code>.\n            </p>\n            <p>\n              <strong>Example Request</strong> (with puppy as the value):\n              <br>\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy\" target=\"_blank\" class=\"medium-small-font\">\n                https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy\n              </a>\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 1: Ajax Pets API Response Format</h2>\n            <p>\n              <strong>Response Format</strong>: Plain Text\n            </p>\n            <pre><code class=\"json\" data-trim>\n\"https://path/to/pet/img0.jpg\"\n\"https://path/to/pet/img1.jpg\"\n\"https://path/to/pet/img2.jpg\"\n\"https://path/to/pet/img3.jpg\"\n...\n            </code></pre>\n            <p class=\"code-caption\">Template Plain Text Response</p>\n          </section>\n          <section>\n            <h2>Exercise 1: Ajax Pets Implementation</h2>\n\n            <p>\n              The provided starter code includes a module-pattern template we've been\n              using to get you started, named <code>ajaxpets.js</code>. You will need to\n              implement the JavaScript to incorporate AJAX and make a request\n              with the Ajax Pets API URL with the parameter <code>animal</code> of value <code>kitty</code>\n              or <code>puppy</code>, depending on which radio button is selected.\n            </p>\n            <p>\n              When a request returns a response successfully with the plain text response\n              of image paths, write JS to add <code>img</code> tags as children to the\n              <code>#pictures</code> div for each image path returned on a new line.\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 1: Solution</h2>\n            <p><a href=\"../code/solution/ajaxpets/ajaxpets.js\">Solution</a> (JavaScript)</p>\n          </section>\n        </section>", "text": "Exercise 1: Ajax Pets Given this ajaxpets-starter.zip (HTML, CSS, and JS template), create an AJAX-powered gallery of pet images that allows you to switch between kitty and puppy images without reloading the page. You can view the finished product here. Exercise 1: Ajax Pets API URL Service URL: https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php Query Parameters (required): ?animal=value Details: animal is the name of the query parameter you need to assign a value to. This API recognizes either a value of puppy or kitty. Example Request (with puppy as the value): https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy Exercise 1: Ajax Pets API Response Format Response Format: Plain Text \"https://path/to/pet/img0.jpg\"\"https://path/to/pet/img1.jpg\"\"https://path/to/pet/img2.jpg\"\"https://path/to/pet/img3.jpg\"... Template Plain Text Response Exercise 1: Ajax Pets Implementation The provided starter code includes a module-pattern template we've been using to get you started, named ajaxpets.js. You will need to implement the JavaScript to incorporate AJAX and make a request with the Ajax Pets API URL with the parameter animal of value kitty or puppy, depending on which radio button is selected. When a request returns a response successfully with the plain text response of image paths, write JS to add img tags as children to the #pictures div for each image path returned on a new line. Exercise 1: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Ajax Pets</h2>\n            <div class=\"side-by-side\">\n            <p>\n              Given this <a href=\"../code/starter/ajaxpets/ajaxpets-starter.zip\">ajaxpets-starter.zip</a>\n              (HTML, CSS, and JS template), create an AJAX-powered gallery of pet images that\n              allows you to switch between kitty and puppy images without reloading the page. You\n              can view the finished product <a href=\"../code/solution/ajaxpets/ajaxpets.html\" target=\"_blank\">here</a>.\n            </p>\n            <p>\n              <img src=\"https://courses.cs.washington.edu/courses/cse154/webservices/pets/images/puppy23.jpg\" alt=\"super special ajax pets pet\" width=\"900px\" style=\"margin-top: -80px\">\n            </p>\n            </div>\n          </section>", "text": "Exercise 1: Ajax Pets Given this ajaxpets-starter.zip (HTML, CSS, and JS template), create an AJAX-powered gallery of pet images that allows you to switch between kitty and puppy images without reloading the page. You can view the finished product here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Ajax Pets API URL</h2>\n            <p>\n              <strong>Service URL</strong>:\n              <samp>https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php</samp>\n            </p>\n            <p>\n              <strong>Query Parameters (required)</strong>:\n              <br>\n              <samp>?animal=<em>value</em></samp>\n            </p>\n            <p>\n              <strong>Details</strong>: <code>animal</code> is the name of the query parameter you need to assign\n              a <code><em>value</em></code> to. This API recognizes either a value of\n              <code>puppy</code> or <code>kitty</code>.\n            </p>\n            <p>\n              <strong>Example Request</strong> (with puppy as the value):\n              <br>\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy\" target=\"_blank\" class=\"medium-small-font\">\n                https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy\n              </a>\n            </p>\n          </section>", "text": "Exercise 1: Ajax Pets API URL Service URL: https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php Query Parameters (required): ?animal=value Details: animal is the name of the query parameter you need to assign a value to. This API recognizes either a value of puppy or kitty. Example Request (with puppy as the value): https://courses.cs.washington.edu/courses/cse154/webservices/pets/ajaxpets.php?animal=puppy", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Ajax Pets API Response Format</h2>\n            <p>\n              <strong>Response Format</strong>: Plain Text\n            </p>\n            <pre><code class=\"json\" data-trim>\n\"https://path/to/pet/img0.jpg\"\n\"https://path/to/pet/img1.jpg\"\n\"https://path/to/pet/img2.jpg\"\n\"https://path/to/pet/img3.jpg\"\n...\n            </code></pre>\n            <p class=\"code-caption\">Template Plain Text Response</p>\n          </section>", "text": "Exercise 1: Ajax Pets API Response Format Response Format: Plain Text \"https://path/to/pet/img0.jpg\"\"https://path/to/pet/img1.jpg\"\"https://path/to/pet/img2.jpg\"\"https://path/to/pet/img3.jpg\"... Template Plain Text Response", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Ajax Pets Implementation</h2>\n\n            <p>\n              The provided starter code includes a module-pattern template we've been\n              using to get you started, named <code>ajaxpets.js</code>. You will need to\n              implement the JavaScript to incorporate AJAX and make a request\n              with the Ajax Pets API URL with the parameter <code>animal</code> of value <code>kitty</code>\n              or <code>puppy</code>, depending on which radio button is selected.\n            </p>\n            <p>\n              When a request returns a response successfully with the plain text response\n              of image paths, write JS to add <code>img</code> tags as children to the\n              <code>#pictures</code> div for each image path returned on a new line.\n            </p>\n          </section>", "text": "Exercise 1: Ajax Pets Implementation The provided starter code includes a module-pattern template we've been using to get you started, named ajaxpets.js. You will need to implement the JavaScript to incorporate AJAX and make a request with the Ajax Pets API URL with the parameter animal of value kitty or puppy, depending on which radio button is selected. When a request returns a response successfully with the plain text response of image paths, write JS to add img tags as children to the #pictures div for each image path returned on a new line.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Solution</h2>\n            <p><a href=\"../code/solution/ajaxpets/ajaxpets.js\">Solution</a> (JavaScript)</p>\n          </section>", "text": "Exercise 1: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 2: Recipes</h2>\n            <p>\n              Given this <a href=\"../code/starter/recipe/recipe-starter.zip\" target=\"_blank\">recipe-starter.zip</a> (HTML, CSS, and JS module template),\n              add ajax to the <samp>recipe.js</samp> that fetches and displays recipe information on\n              the page whenever a different recipe radio button is selected.\n            </p>\n            <img src=\"images/recipes-output.png\" alt=\"expected output for recipes exercise\" class=\"half-width centered-figure space-above\">\n          </section>\n          <section>\n            <h2>Exercise 2: Recipes API URL</h2>\n            <p>\n              <strong>Service URL</strong>:\n              <samp>https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php</samp>\n            </p>\n            <p>\n              <strong>Query Parameters (Required)</strong>:\n              <br>\n              <samp>?recipe=<em>value</em></samp>\n            </p>\n            <p>\n              <strong>Details</strong>: <code>recipe</code> is the name of the query parameter you need to assign\n              a <code><em>value</em></code> to. This API recognizes any of the radio button values on the\n              provided <code>recipe.html</code> page.\n            </p>\n            <p>\n              <strong>Example Request </strong> (with peas as the value):\n              <br>\n\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\" target=\"_blank\" class=\"medium-small-font\">\n                  https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\n              </a>\n            </p>\n          </section>\n          <section>\n            <h3>Exercise 2: Recipes API Response Format</h3>\n            <p>\n              <strong>Response Format</strong>: JSON\n            </p>\n            <div class=\"half-width\">\n              <pre><code class=\"json small-font\" data-trim>{ \"recipe\": {\n    \"information\": {\n      \"name\": ...,\n      \"image\": ...\n    },\n    \"ingredients\": {\n      \"item\": [{\n          \"amount\": ...,\n          \"text\": ...\n        }, ... {\n          \"amount\": ...,\n          \"prep\": ...,\n          \"text\": ...\n        }\n      ]\n    },\n    \"directions\": {\n      \"step\": [\n        ..., ...\n      ]\n    }\n  }\n}</code></pre>\n            <p class=\"code-caption\">Template JSON response (shortened)</p>\n            </div>\n          </section>\n\n          <section>\n            <h2>Exercise 2: Recipes Implementation</h2>\n            <p>\n              When a radio button is clicked make a fetch to the recipes URL with the\n              <samp>recipe</samp> query parameter assigned value of the selected radio button.\n            </p>\n            <p>\n              For example, the radio button for \"peas\" has a value of \"peas\". To get the JSON\n              specific to the peas recipe you'll need to add a query/value pair of\n              <code>recipe=peas</code> to the request URL. <a target=\"_blank\" href=\"https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\">Try it</a>!\n            </p>\n            <p>\n              You must parse the results and fill the <code>#recipes-area</code> section with:\n            </p>\n            <ol>\n              <li>An <samp>img</samp> tag with the recipe's image</li>\n              <li>A <samp>h1</samp> containing the title</li>\n              <li>A <samp>p</samp> containing the recipe's description text</li>\n              <li>A <samp>h2</samp> with the text \"Ingredients:\"</li>\n              <li>A <samp>ul</samp> filled with a list of the recipe's ingredients.</li>\n            </ol>\n            <p>\n              Check out a complete running version\n              <a target=\"_blank\" href=\"../code/solution/recipe/recipe.html\">here</a>.\n            </p>\n          </section>\n\n          <section>\n            <h2>Exercise 2: Solution</h2>\n            <p><a href=\"../code/solution/recipe/recipe.js\" target=\"_blank\">Solution</a> (JavaScript)</p>\n          </section>\n        </section>", "text": "Exercise 2: Recipes Given this recipe-starter.zip (HTML, CSS, and JS module template), add ajax to the recipe.js that fetches and displays recipe information on the page whenever a different recipe radio button is selected. Exercise 2: Recipes API URL Service URL: https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php Query Parameters (Required): ?recipe=value Details: recipe is the name of the query parameter you need to assign a value to. This API recognizes any of the radio button values on the provided recipe.html page. Example Request (with peas as the value): https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas Exercise 2: Recipes API Response Format Response Format: JSON { \"recipe\": { \"information\": { \"name\": ..., \"image\": ... }, \"ingredients\": { \"item\": [{ \"amount\": ..., \"text\": ... }, ... { \"amount\": ..., \"prep\": ..., \"text\": ... } ] }, \"directions\": { \"step\": [ ..., ... ] } }} Template JSON response (shortened) Exercise 2: Recipes Implementation When a radio button is clicked make a fetch to the recipes URL with the recipe query parameter assigned value of the selected radio button. For example, the radio button for \"peas\" has a value of \"peas\". To get the JSON specific to the peas recipe you'll need to add a query/value pair of recipe=peas to the request URL. Try it! You must parse the results and fill the #recipes-area section with: An img tag with the recipe's image A h1 containing the title A p containing the recipe's description text A h2 with the text \"Ingredients:\" A ul filled with a list of the recipe's ingredients. Check out a complete running version here. Exercise 2: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Recipes</h2>\n            <p>\n              Given this <a href=\"../code/starter/recipe/recipe-starter.zip\" target=\"_blank\">recipe-starter.zip</a> (HTML, CSS, and JS module template),\n              add ajax to the <samp>recipe.js</samp> that fetches and displays recipe information on\n              the page whenever a different recipe radio button is selected.\n            </p>\n            <img src=\"images/recipes-output.png\" alt=\"expected output for recipes exercise\" class=\"half-width centered-figure space-above\">\n          </section>", "text": "Exercise 2: Recipes Given this recipe-starter.zip (HTML, CSS, and JS module template), add ajax to the recipe.js that fetches and displays recipe information on the page whenever a different recipe radio button is selected.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Recipes API URL</h2>\n            <p>\n              <strong>Service URL</strong>:\n              <samp>https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php</samp>\n            </p>\n            <p>\n              <strong>Query Parameters (Required)</strong>:\n              <br>\n              <samp>?recipe=<em>value</em></samp>\n            </p>\n            <p>\n              <strong>Details</strong>: <code>recipe</code> is the name of the query parameter you need to assign\n              a <code><em>value</em></code> to. This API recognizes any of the radio button values on the\n              provided <code>recipe.html</code> page.\n            </p>\n            <p>\n              <strong>Example Request </strong> (with peas as the value):\n              <br>\n\n              <a href=\"https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\" target=\"_blank\" class=\"medium-small-font\">\n                  https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\n              </a>\n            </p>\n          </section>", "text": "Exercise 2: Recipes API URL Service URL: https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php Query Parameters (Required): ?recipe=value Details: recipe is the name of the query parameter you need to assign a value to. This API recognizes any of the radio button values on the provided recipe.html page. Example Request (with peas as the value): https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Rest of Section</h2>\n          <p>Worktime for Encrypt-It lab (following slides) or CP2!</p>\n        </section>", "text": "Rest of Section Worktime for Encrypt-It lab (following slides) or CP2!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Encrypt-It!</h2>\n          <img class=\"centered-figure w-66\" src=\"hidden/images/output-ex.png\" alt=\"Encrypt-It solution output\">\n        </section>", "text": "Encrypt-It!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Encrypt-It Overview</h2>\n          <p>In this series of exercises, you will be practicing using different UI elements in HTML with\n          a JavaScript program to\n          perform some operations on user input. Specifically, you will finish a\n          cryptogram generator, which takes any message as input and outputs a cipher\n          message in a few different possible outputs.\n          </p>\n          <p>\n            We have provided <a href=\"../code/starter/encrypt-it.zip\"><code>encrypt-it.zip</code></a>\n            with starting <code>HTML</code> for you to use and build upon. We have also included\n            some CSS, although you're free to add styling on your own!\n          </p>\n            <!--\n          <p>Refer to the past few lecture slides for any needed JavaScript review!</p>\n        -->\n        </section>", "text": "Encrypt-It Overview In this series of exercises, you will be practicing using different UI elements in HTML with a JavaScript program to perform some operations on user input. Specifically, you will finish a cryptogram generator, which takes any message as input and outputs a cipher message in a few different possible outputs. We have provided encrypt-it.zip with starting HTML for you to use and build upon. We have also included some CSS, although you're free to add styling on your own! <!-- Refer to the past few lecture slides for any needed JavaScript review! -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Overview of HTML Page</h2>\n            <img class=\"centered-figure half-width\" src=\"hidden/images/encrypt-it-starter.png\" alt=\"output\">\n              <p>\n                The slides <strong>below</strong> describe some of the different HTML elements\n                in the starter HTML, which you may find helpful for following the JS requirements\n                (and learn a bit more about common types of UI elements)!\n              </p>\n            </section>\n\n          <section>\n            <h2>Overview of HTML Page: Grouping UI Elements</h2>\n            <p class=\"20pt\">\n              The starter HTML introduces two new elements that are\n              useful for grouping UI controls:\n            </p>\n          <ul>\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"><code>fieldset</code></a>: A container to group UI elements</li>\n            <li><code>legend</code>: A legend for a <code>fieldset</code> which appears by\n              default as the\n              text within the top-left border</li>\n          </ul>\n          <p>\n            Note that we've also seen the <code>form</code> used to group UI elements,\n            but since we're not submitting anything here, we choose to use a <code>fieldset</code>.\n          </p>\n          </section>\n\n          <section>\n            <h2>Overview of HTML Page: User input with <code>textarea</code></h2>\n\n            <p>\n              In the first <code>fieldset</code> we have a <a href=\"\"><code>textarea</code></a>\n              for users to enter large (multi-line) amounts of text. This will be used for the input\n              to generate output ciphers.\n            </p>\n          </section>\n          <section>\n            <h2>Overview of HTML Page: Customization Controls</h2>\n            \n            <p>\n            The second <code>fieldset</code> represents options for the cipher\n            your program will generate from the input text. In this\n            <code>fieldset</code>, we have:\n            </p>\n            <ul>\n              <li>An Encrypt-It! button and a Reset button</li>\n              <li>A\n                <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\">select</a></code>\n                dropdown menu with the <code>option</code>s for Shift Cipher and Randomized.\n              </li>\n              <li>Two\n                 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\"><code>radio\n                   button</code></a> elements with output font size options: 12pt and 24pt.\n              </li>\n              <li>\n                A\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\"><code>checkbox</code></a>\n                element for customizing the upper-case option of the output message.\n              </li>\n            </ul>\n            <p>\n              Note: Wrapping the radio buttons and checkbox elements with their labeled text in a\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"><code>label</code></a>\n              makes it so that a user can click on the text to check/uncheck.\n            </p>\n          </section>\n        </section>", "text": "Overview of HTML Page The slides below describe some of the different HTML elements in the starter HTML, which you may find helpful for following the JS requirements (and learn a bit more about common types of UI elements)! Overview of HTML Page: Grouping UI Elements The starter HTML introduces two new elements that are useful for grouping UI controls: fieldset: A container to group UI elements legend: A legend for a fieldset which appears by default as the text within the top-left border Note that we've also seen the form used to group UI elements, but since we're not submitting anything here, we choose to use a fieldset. Overview of HTML Page: User input with textarea In the first fieldset we have a textarea for users to enter large (multi-line) amounts of text. This will be used for the input to generate output ciphers. Overview of HTML Page: Customization Controls The second fieldset represents options for the cipher your program will generate from the input text. In this fieldset, we have: An Encrypt-It! button and a Reset button A select dropdown menu with the options for Shift Cipher and Randomized. Two radio button elements with output font size options: 12pt and 24pt. A checkbox element for customizing the upper-case option of the output message. Note: Wrapping the radio buttons and checkbox elements with their labeled text in a label makes it so that a user can click on the text to check/uncheck.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Overview of HTML Page</h2>\n            <img class=\"centered-figure half-width\" src=\"hidden/images/encrypt-it-starter.png\" alt=\"output\">\n              <p>\n                The slides <strong>below</strong> describe some of the different HTML elements\n                in the starter HTML, which you may find helpful for following the JS requirements\n                (and learn a bit more about common types of UI elements)!\n              </p>\n            </section>", "text": "Overview of HTML Page The slides below describe some of the different HTML elements in the starter HTML, which you may find helpful for following the JS requirements (and learn a bit more about common types of UI elements)!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Overview of HTML Page: Grouping UI Elements</h2>\n            <p class=\"20pt\">\n              The starter HTML introduces two new elements that are\n              useful for grouping UI controls:\n            </p>\n          <ul>\n            <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"><code>fieldset</code></a>: A container to group UI elements</li>\n            <li><code>legend</code>: A legend for a <code>fieldset</code> which appears by\n              default as the\n              text within the top-left border</li>\n          </ul>\n          <p>\n            Note that we've also seen the <code>form</code> used to group UI elements,\n            but since we're not submitting anything here, we choose to use a <code>fieldset</code>.\n          </p>\n          </section>", "text": "Overview of HTML Page: Grouping UI Elements The starter HTML introduces two new elements that are useful for grouping UI controls: fieldset: A container to group UI elements legend: A legend for a fieldset which appears by default as the text within the top-left border Note that we've also seen the form used to group UI elements, but since we're not submitting anything here, we choose to use a fieldset.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Overview of HTML Page: User input with <code>textarea</code></h2>\n\n            <p>\n              In the first <code>fieldset</code> we have a <a href=\"\"><code>textarea</code></a>\n              for users to enter large (multi-line) amounts of text. This will be used for the input\n              to generate output ciphers.\n            </p>\n          </section>", "text": "Overview of HTML Page: User input with textarea In the first fieldset we have a textarea for users to enter large (multi-line) amounts of text. This will be used for the input to generate output ciphers.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Overview of HTML Page: Customization Controls</h2>\n            \n            <p>\n            The second <code>fieldset</code> represents options for the cipher\n            your program will generate from the input text. In this\n            <code>fieldset</code>, we have:\n            </p>\n            <ul>\n              <li>An Encrypt-It! button and a Reset button</li>\n              <li>A\n                <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\">select</a></code>\n                dropdown menu with the <code>option</code>s for Shift Cipher and Randomized.\n              </li>\n              <li>Two\n                 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\"><code>radio\n                   button</code></a> elements with output font size options: 12pt and 24pt.\n              </li>\n              <li>\n                A\n                <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\"><code>checkbox</code></a>\n                element for customizing the upper-case option of the output message.\n              </li>\n            </ul>\n            <p>\n              Note: Wrapping the radio buttons and checkbox elements with their labeled text in a\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"><code>label</code></a>\n              makes it so that a user can click on the text to check/uncheck.\n            </p>\n          </section>", "text": "Overview of HTML Page: Customization Controls The second fieldset represents options for the cipher your program will generate from the input text. In this fieldset, we have: An Encrypt-It! button and a Reset button A select dropdown menu with the options for Shift Cipher and Randomized. Two radio button elements with output font size options: 12pt and 24pt. A checkbox element for customizing the upper-case option of the output message. Note: Wrapping the radio buttons and checkbox elements with their labeled text in a label makes it so that a user can click on the text to check/uncheck.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Part I: Write the start of <code>encrypt-it.js</code></h2>\n          <p>\n            Now you'll write a bit of JavaScript testing code that logs a message to the console.\n            This is just a test to make sure that your browser is running your JavaScript file,\n            before we move on to the main execises.\n          </p>\n          <ul>\n            <li>The starter zip file includes a\n              <a href=\"../code/starter/encrypt-it.js\" target=\"_blank\">starter JS file</a>, which uses the\n              module-pattern introduced this week.\n            </li>\n            <li>Put the following line of code into the file:\n              <code class=\"hijs\" data-trim>console.log(\"Window loaded!\");</code>\n              such that the message is logged to the console <em>when the page is loaded</em>\n            </li>\n            <li>Link your <code>HTML</code> page to your JavaScript file using a <code>script</code> tag</li>\n            <li>\n              Refresh your page in the browser. Do you see the <code>console</code> message? If so, move on.\n              Otherwise, double-check your <code>script</code> tag syntax or ask a TA for help.\n            </li>\n          </ul>\n        </section>", "text": "Part I: Write the start of encrypt-it.js Now you'll write a bit of JavaScript testing code that logs a message to the console. This is just a test to make sure that your browser is running your JavaScript file, before we move on to the main execises. The starter zip file includes a starter JS file, which uses the module-pattern introduced this week. Put the following line of code into the file: console.log(\"Window loaded!\"); such that the message is logged to the console when the page is loaded Link your HTML page to your JavaScript file using a script tag Refresh your page in the browser. Do you see the console message? If so, move on. Otherwise, double-check your script tag syntax or ask a TA for help.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Part II: Testing a Button</h2>\n          <p>Now let's set up a very basic JS event handler. Modify your JS code and\n          so that the \"Button clicked!\" <code>console</code> message won't\n          output until the user clicks the \"Encrypt-It!\" button.\n          </p>\n          <p>Strategy:</p>\n          <ul>\n            <li>First, make sure you understand why the event listener for <code>window</code>'s\n              <code>load</code> event is needed (remeber we don't have access to the DOM\n              until the page is loaded).\n            </li>\n            <li>\n              Move your <code>console</code> statement inside a new function\n              <code>handleClick</code>.\n            </li>\n            <li>Add an event listener to the the \"Encrypt-It!\" button such that when\n              clicked, your <code>handleClick</code> function is called.\n            </li>\n              <li>Refresh your page in the browser. Click the button. Do you see the\n                <code>console.log</code> message? If so, move on. Otherwise, double-check the syntax and\n                for both of your event listeners (window load and button click), or ask a TA for help</li>\n            </ul>\n        </section>", "text": "Part II: Testing a Button Now let's set up a very basic JS event handler. Modify your JS code and so that the \"Button clicked!\" console message won't output until the user clicks the \"Encrypt-It!\" button. Strategy: First, make sure you understand why the event listener for window's load event is needed (remeber we don't have access to the DOM until the page is loaded). Move your console statement inside a new function handleClick. Add an event listener to the the \"Encrypt-It!\" button such that when clicked, your handleClick function is called. Refresh your page in the browser. Click the button. Do you see the console.log message? If so, move on. Otherwise, double-check the syntax and for both of your event listeners (window load and button click), or ask a TA for help", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Part III: Implementing a Basic Shift-Cipher</h2>\n            <p>Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in\n            the input text area will be encrypted using a basic shift-cipher, and output\n            into the page's paragraph element with the id of <code>output</code>.\n            </p>\n            <p>Details:</p>\n            <ul>\n              <li>To get text from the textarea, you'll need to make sure you can access\n                it from JS. Remember you can use <code>document.getElementById</code> or\n                <code>document.querySelector</code> to access a DOM element in JS.\n              </li>\n              <li>Modify (and appropriately rename) your <code>handleClick</code>\n                function so that when called, it now retrieves the textarea's text value and\n                generates a shift cipher (algorithm discussed on the slide below; a\n                solution for this cipher function is provided at the very bottom if\n                you'd like to skip the algorithm part). This generated cipher will be\n                output as text in the <code>#result</code> paragraph.\n              </li>\n            </ul>\n          </section>\n          <section>\n            <h2>Part III: The Shift-Cipher Algorithm</h2>\n            <div class=\"font-18pt\">\n            <p>The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called <em>A</em>. Let the shift-encrypted alphabet be called <em>C</em>. For simplicity, we will shift letters in our encryption function by 1 letter. Then <em>C</em> is defined as mapping each letters in <em>A</em> to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A').</p>\n            <p>Visually, the cipher can be represented as the following:\n            </p>\n            <pre>\ninput letter     a b c d e f g h i j k l m n o p q r s t u v w x y z\n                 | | | | | | | | | | | | | | | | | | | | | | | | | |\n                 v v v v v v v v v v v v v v v v v v v v v v v v v v\noutput letter    b c d e f g h i j k l m n o p q r s t u v w x y z a\n            </pre>\n\n            <p>\n              Your task in this part is to convert the text in the input text area from alphabet <em>A</em>\n              to alphabet <em>C</em>. This is all you need to know to implement the cipher in this lab,\n              but if you would like additional hints, there are some provided in the slide below.\n            </p>\n            </div>\n          </section>\n          <section>\n            <h2>Part III: Hints</h2>\n            <div class=\"font-18pt\">\n            <p>\n              Note that the value you get from the textarea is just a long string. So your goal is to\n              build up a new string that is the result of applying the cipher to each letter in the\n              input text, in order, and adding it to your result string.\n            </p>\n            <p>\n              There are a few ways to go about this, but note that one of the most\n              intuitive approaches would be to use a <code>for</code> loop through the input\n               string and add 1 to each letter (letters are actually represented by numerical values,\n               so this is a natural operation). To handle the z -&gt; a shift, you can add a special case\n               for each letter, or use mod arithmetic to avoid this extra case.\n            </p>\n            <p>\n              You may find <a href=\"https://www.w3schools.com/jsref/jsref_charcodeat.asp\" target=\"_blank\"><code>charCodeAt(index)</code></a> and <a href=\"https://www.w3schools.com/jsref/jsref_fromcharcode.asp\" target=\"_blank\"><code>fromCharCode(asciiNum)</code></a> helpful for this problem.\n            </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own!</p>\n            </div>\n          </section>\n          <section>\n            <h2>Part III: Algorithm Solution</h2>\n            <p class=\"font-18pt\">One function solution is given below (you can also solve this with arrays):</p>\n            <pre class=\"h450px\"><code class=\"hijs font-14pt\" data-trim>/**\n * Returns an encrypted version of the given text, where\n * each letter is shifted alphabetically ahead by 1 letter,\n * and 'z' is shifted to 'a' (creating an alphabetical cycle).\n */\nfunction shiftCipher(text) {\n  text = text.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i &lt; text.length; i++) {\n    if (text[i] &lt; 'a' || text[i] &gt; 'z') {\n      result += text[i];\n    } else if (text[i] == 'z') {\n      result += 'a';\n    } else { // letter is between 'a' and 'y'\n      let letter = text.charCodeAt(i);\n      let resultLetter = String.fromCharCode(letter + 1);\n      result += resultLetter;\n    }\n  }\n  return result;\n}\n</code></pre>\n<p class=\"code-caption space-above\">JS</p>\n          </section>\n        </section>", "text": "Part III: Implementing a Basic Shift-Cipher Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in the input text area will be encrypted using a basic shift-cipher, and output into the page's paragraph element with the id of output. Details: To get text from the textarea, you'll need to make sure you can access it from JS. Remember you can use document.getElementById or document.querySelector to access a DOM element in JS. Modify (and appropriately rename) your handleClick function so that when called, it now retrieves the textarea's text value and generates a shift cipher (algorithm discussed on the slide below; a solution for this cipher function is provided at the very bottom if you'd like to skip the algorithm part). This generated cipher will be output as text in the #result paragraph. Part III: The Shift-Cipher Algorithm The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called A. Let the shift-encrypted alphabet be called C. For simplicity, we will shift letters in our encryption function by 1 letter. Then C is defined as mapping each letters in A to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A'). Visually, the cipher can be represented as the following: input letter a b c d e f g h i j k l m n o p q r s t u v w x y z | | | | | | | | | | | | | | | | | | | | | | | | | | v v v v v v v v v v v v v v v v v v v v v v v v v voutput letter b c d e f g h i j k l m n o p q r s t u v w x y z a Your task in this part is to convert the text in the input text area from alphabet A to alphabet C. This is all you need to know to implement the cipher in this lab, but if you would like additional hints, there are some provided in the slide below. Part III: Hints Note that the value you get from the textarea is just a long string. So your goal is to build up a new string that is the result of applying the cipher to each letter in the input text, in order, and adding it to your result string. There are a few ways to go about this, but note that one of the most intuitive approaches would be to use a for loop through the input string and add 1 to each letter (letters are actually represented by numerical values, so this is a natural operation). To handle the z -> a shift, you can add a special case for each letter, or use mod arithmetic to avoid this extra case. You may find charCodeAt(index) and fromCharCode(asciiNum) helpful for this problem. If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own! Part III: Algorithm Solution One function solution is given below (you can also solve this with arrays): /** * Returns an encrypted version of the given text, where * each letter is shifted alphabetically ahead by 1 letter, * and 'z' is shifted to 'a' (creating an alphabetical cycle). */function shiftCipher(text) { text = text.toLowerCase(); let result = \"\"; for (let i = 0; i < text.length; i++) { if (text[i] < 'a' || text[i] > 'z') { result += text[i]; } else if (text[i] == 'z') { result += 'a'; } else { // letter is between 'a' and 'y' let letter = text.charCodeAt(i); let resultLetter = String.fromCharCode(letter + 1); result += resultLetter; } } return result;}JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part III: Implementing a Basic Shift-Cipher</h2>\n            <p>Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in\n            the input text area will be encrypted using a basic shift-cipher, and output\n            into the page's paragraph element with the id of <code>output</code>.\n            </p>\n            <p>Details:</p>\n            <ul>\n              <li>To get text from the textarea, you'll need to make sure you can access\n                it from JS. Remember you can use <code>document.getElementById</code> or\n                <code>document.querySelector</code> to access a DOM element in JS.\n              </li>\n              <li>Modify (and appropriately rename) your <code>handleClick</code>\n                function so that when called, it now retrieves the textarea's text value and\n                generates a shift cipher (algorithm discussed on the slide below; a\n                solution for this cipher function is provided at the very bottom if\n                you'd like to skip the algorithm part). This generated cipher will be\n                output as text in the <code>#result</code> paragraph.\n              </li>\n            </ul>\n          </section>", "text": "Part III: Implementing a Basic Shift-Cipher Modify your JS code so that when the user clicks \"Encrypt-It!\", the text in the input text area will be encrypted using a basic shift-cipher, and output into the page's paragraph element with the id of output. Details: To get text from the textarea, you'll need to make sure you can access it from JS. Remember you can use document.getElementById or document.querySelector to access a DOM element in JS. Modify (and appropriately rename) your handleClick function so that when called, it now retrieves the textarea's text value and generates a shift cipher (algorithm discussed on the slide below; a solution for this cipher function is provided at the very bottom if you'd like to skip the algorithm part). This generated cipher will be output as text in the #result paragraph.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part III: The Shift-Cipher Algorithm</h2>\n            <div class=\"font-18pt\">\n            <p>The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called <em>A</em>. Let the shift-encrypted alphabet be called <em>C</em>. For simplicity, we will shift letters in our encryption function by 1 letter. Then <em>C</em> is defined as mapping each letters in <em>A</em> to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A').</p>\n            <p>Visually, the cipher can be represented as the following:\n            </p>\n            <pre>\ninput letter     a b c d e f g h i j k l m n o p q r s t u v w x y z\n                 | | | | | | | | | | | | | | | | | | | | | | | | | |\n                 v v v v v v v v v v v v v v v v v v v v v v v v v v\noutput letter    b c d e f g h i j k l m n o p q r s t u v w x y z a\n            </pre>\n\n            <p>\n              Your task in this part is to convert the text in the input text area from alphabet <em>A</em>\n              to alphabet <em>C</em>. This is all you need to know to implement the cipher in this lab,\n              but if you would like additional hints, there are some provided in the slide below.\n            </p>\n            </div>\n          </section>", "text": "Part III: The Shift-Cipher Algorithm The rules of a shift cipher are fairly straightforward. Let the English alphabet we all know and love(?) be called A. Let the shift-encrypted alphabet be called C. For simplicity, we will shift letters in our encryption function by 1 letter. Then C is defined as mapping each letters in A to the letter alphabetically next. For example, 'a' is mapped to 'b', 'b' is mapped to 'c', ... and 'z' is mapped to 'a' (creating a cycle of 26 letters). In this exercise, we will consider uppercase letters and lowercase letters equivalent to one another (ie, 'a' is considered equal to 'A'). Visually, the cipher can be represented as the following: input letter a b c d e f g h i j k l m n o p q r s t u v w x y z | | | | | | | | | | | | | | | | | | | | | | | | | | v v v v v v v v v v v v v v v v v v v v v v v v v voutput letter b c d e f g h i j k l m n o p q r s t u v w x y z a Your task in this part is to convert the text in the input text area from alphabet A to alphabet C. This is all you need to know to implement the cipher in this lab, but if you would like additional hints, there are some provided in the slide below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part III: Hints</h2>\n            <div class=\"font-18pt\">\n            <p>\n              Note that the value you get from the textarea is just a long string. So your goal is to\n              build up a new string that is the result of applying the cipher to each letter in the\n              input text, in order, and adding it to your result string.\n            </p>\n            <p>\n              There are a few ways to go about this, but note that one of the most\n              intuitive approaches would be to use a <code>for</code> loop through the input\n               string and add 1 to each letter (letters are actually represented by numerical values,\n               so this is a natural operation). To handle the z -&gt; a shift, you can add a special case\n               for each letter, or use mod arithmetic to avoid this extra case.\n            </p>\n            <p>\n              You may find <a href=\"https://www.w3schools.com/jsref/jsref_charcodeat.asp\" target=\"_blank\"><code>charCodeAt(index)</code></a> and <a href=\"https://www.w3schools.com/jsref/jsref_fromcharcode.asp\" target=\"_blank\"><code>fromCharCode(asciiNum)</code></a> helpful for this problem.\n            </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own!</p>\n            </div>\n          </section>", "text": "Part III: Hints Note that the value you get from the textarea is just a long string. So your goal is to build up a new string that is the result of applying the cipher to each letter in the input text, in order, and adding it to your result string. There are a few ways to go about this, but note that one of the most intuitive approaches would be to use a for loop through the input string and add 1 to each letter (letters are actually represented by numerical values, so this is a natural operation). To handle the z -> a shift, you can add a special case for each letter, or use mod arithmetic to avoid this extra case. You may find charCodeAt(index) and fromCharCode(asciiNum) helpful for this problem. If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part III: Algorithm Solution</h2>\n            <p class=\"font-18pt\">One function solution is given below (you can also solve this with arrays):</p>\n            <pre class=\"h450px\"><code class=\"hijs font-14pt\" data-trim>/**\n * Returns an encrypted version of the given text, where\n * each letter is shifted alphabetically ahead by 1 letter,\n * and 'z' is shifted to 'a' (creating an alphabetical cycle).\n */\nfunction shiftCipher(text) {\n  text = text.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i &lt; text.length; i++) {\n    if (text[i] &lt; 'a' || text[i] &gt; 'z') {\n      result += text[i];\n    } else if (text[i] == 'z') {\n      result += 'a';\n    } else { // letter is between 'a' and 'y'\n      let letter = text.charCodeAt(i);\n      let resultLetter = String.fromCharCode(letter + 1);\n      result += resultLetter;\n    }\n  }\n  return result;\n}\n</code></pre>\n<p class=\"code-caption space-above\">JS</p>\n          </section>", "text": "Part III: Algorithm Solution One function solution is given below (you can also solve this with arrays): /** * Returns an encrypted version of the given text, where * each letter is shifted alphabetically ahead by 1 letter, * and 'z' is shifted to 'a' (creating an alphabetical cycle). */function shiftCipher(text) { text = text.toLowerCase(); let result = \"\"; for (let i = 0; i < text.length; i++) { if (text[i] < 'a' || text[i] > 'z') { result += text[i]; } else if (text[i] == 'z') { result += 'a'; } else { // letter is between 'a' and 'y' let letter = text.charCodeAt(i); let resultLetter = String.fromCharCode(letter + 1); result += resultLetter; } } return result;}JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Part IV: Implement UI Functionality</h2>\n            <div class=\"font-18pt\">\n              <p>\n                Now that you have a cool encryption feature implemented, let's add some features\n                for the user to decorate their encrypted message.\n              </p>\n              <p>We have broken this part into are a few smaller exercises - move down the slides to\n              work through them!\n              </p>\n            </div>\n          </section>\n          <section>\n            <h2>Part IV: Dropdown UI</h2>\n              <p>\n                First, we want to restrict the shift cipher functionality to only work when\n                \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option\n                and then the \"Encrypt-It\" button is clicked should the input text\n                be encrypted.\n              </p>\n              <p>\n              For dropdown menus, you can get the value of the current option\n              using <code>el.value</code>, where <code>el</code> is the DOM element for\n              the <code>select</code> dropdown.\n              </p>\n            </section>\n            <section>\n              <h2>Part IV: Reset Functionality</h2>\n              <p>\n                When the Reset button is clicked, the textarea and the output paragraph should\n                both be cleared (using <code>innerText</code>).\n              </p>\n            </section>\n            <section>\n              <h2>Part IV: Checkbox Elements</h2>\n              <div class=\"font-18pt\">\n              <p>\n                Next, implement a feature such that when the all-caps checkbox is checked,\n                all of the text in the output\n                paragraph appear only in uppercase.\n              </p>\n              <!--\n              <p>You can change styles of a DOM element <code>el</code> by using\n              <code>el.style.cssProperty</code> (where cssProperty is the name of the\n              CSS property you're changing, in camelCasing). For example, to make an\n              element uppercase, you could use <code>el.style.textTransform =\n                \"uppercase\"</code>. However, it's important to minimize adding CSS directly\n              in our JS, and it's preferred to add/remove classes instead.\n            </p>\n              -->\n            <p>To do so, add a CSS file with a class \".uppercase\" that\n                uses <code>text-transform: \"uppercase\";</code> to make an element all-uppercase. When\n                the \"All Caps\" option is checked, the output paragraph should have this\n                class. When unchecked, it should not have this class so that it uses\n                whatever casing was used in the original input text.\n              </p>\n              <p>\n              <strong>Hint 1</strong>: The event corresponding to changing the state of a checkbox input as\n                checked/unchecked is <code>change</code>.\n              </p>\n              <p>\n              <strong>Hint 2</strong>: To update the class list of a DOM element, you can use\n                <code>el.classList.add(\"classname\")</code> and\n                <code>el.classList.remove(\"classname\")</code>. We'll see this more in lecture!\n              </p>\n              </div>\n            </section>\n            <section>\n              <h2>Part V: Radio Button Elements</h2>\n              <p>\n                Implement a feature to such that the text in the output paragraph should have the\n                font size of whatever is currently selected in the radio button group.\n              </p>\n              <p>\n                To minimize changing styles in JavaScript, you can add CSS classes to\n                accomplish font size changes (similar to the previous step).\n              </p>\n          </section>\n        </section>", "text": "Part IV: Implement UI Functionality Now that you have a cool encryption feature implemented, let's add some features for the user to decorate their encrypted message. We have broken this part into are a few smaller exercises - move down the slides to work through them! Part IV: Dropdown UI First, we want to restrict the shift cipher functionality to only work when \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option and then the \"Encrypt-It\" button is clicked should the input text be encrypted. For dropdown menus, you can get the value of the current option using el.value, where el is the DOM element for the select dropdown. Part IV: Reset Functionality When the Reset button is clicked, the textarea and the output paragraph should both be cleared (using innerText). Part IV: Checkbox Elements Next, implement a feature such that when the all-caps checkbox is checked, all of the text in the output paragraph appear only in uppercase. <!-- You can change styles of a DOM element el by using el.style.cssProperty (where cssProperty is the name of the CSS property you're changing, in camelCasing). For example, to make an element uppercase, you could use el.style.textTransform = \"uppercase\". However, it's important to minimize adding CSS directly in our JS, and it's preferred to add/remove classes instead. --> To do so, add a CSS file with a class \".uppercase\" that uses text-transform: \"uppercase\"; to make an element all-uppercase. When the \"All Caps\" option is checked, the output paragraph should have this class. When unchecked, it should not have this class so that it uses whatever casing was used in the original input text. Hint 1: The event corresponding to changing the state of a checkbox input as checked/unchecked is change. Hint 2: To update the class list of a DOM element, you can use el.classList.add(\"classname\") and el.classList.remove(\"classname\"). We'll see this more in lecture! Part V: Radio Button Elements Implement a feature to such that the text in the output paragraph should have the font size of whatever is currently selected in the radio button group. To minimize changing styles in JavaScript, you can add CSS classes to accomplish font size changes (similar to the previous step).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part IV: Implement UI Functionality</h2>\n            <div class=\"font-18pt\">\n              <p>\n                Now that you have a cool encryption feature implemented, let's add some features\n                for the user to decorate their encrypted message.\n              </p>\n              <p>We have broken this part into are a few smaller exercises - move down the slides to\n              work through them!\n              </p>\n            </div>\n          </section>", "text": "Part IV: Implement UI Functionality Now that you have a cool encryption feature implemented, let's add some features for the user to decorate their encrypted message. We have broken this part into are a few smaller exercises - move down the slides to work through them!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part IV: Dropdown UI</h2>\n              <p>\n                First, we want to restrict the shift cipher functionality to only work when\n                \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option\n                and then the \"Encrypt-It\" button is clicked should the input text\n                be encrypted.\n              </p>\n              <p>\n              For dropdown menus, you can get the value of the current option\n              using <code>el.value</code>, where <code>el</code> is the DOM element for\n              the <code>select</code> dropdown.\n              </p>\n            </section>", "text": "Part IV: Dropdown UI First, we want to restrict the shift cipher functionality to only work when \"Shift Cipher\" is selected in the drop down menu. Only when this is the currently-selected option and then the \"Encrypt-It\" button is clicked should the input text be encrypted. For dropdown menus, you can get the value of the current option using el.value, where el is the DOM element for the select dropdown.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section id=\"localstorage\">\n            <h2>Part III: Storing your order with localStorage</h2>\n            <p>Work through the instructions for this part to practice with <samp>localStorage</samp> in the slides below!</p>\n          </section>", "text": "Part III: Storing your order with localStorage Work through the instructions for this part to practice with localStorage in the slides below!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part III (Storing your order with localStorage): Scenario </h2>\n            <p>\n            Your manager now asks you to implement a feature to save the customer's last order so\n            it will be easy for them to come back the next time and order again. The order information\n            will contain the drink (if any), size of the drink (if a drink is chosen),\n            baked good (if any), tip, and total cost.\n            </p>\n          </section>", "text": "Part III (Storing your order with localStorage): Scenario Your manager now asks you to implement a feature to save the customer's last order so it will be easy for them to come back the next time and order again. The order information will contain the drink (if any), size of the drink (if a drink is chosen), baked good (if any), tip, and total cost.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Part III (Storing your order with localStorage): Instructions</h2>\n            <p>\n              Now whenever the user clicks \"Submit Your order\" you should use your\n              <code>window.localStorage</code> to save all of the information the user has entered onto\n              the page: which drink, the size, the baked good, as well as the tip, address, city\n              state and zip code. You do not need to store the total cost, that can be regenerated\n              when you load the information back in from storage.\n            </p>\n            <p>\n              Next, when the page is loaded, reload this information from local storage and update\n              the fields and radio buttons accordingly. Finally once all of the information\n              is reloaded, you can recalculate the cost.\n            </p>\n            <p>\n            You may find the <a href=\"https://courses.cs.washington.edu/courses/cse154/19sp/lectures/lec15-browser-storage/#22\">lecture slides</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">documentation</a>\n              on <samp>localStorage</samp> helpful in reviewing how to set and get an item.\n            </p>\n            <p>\n              Be sure to take a look at the application tab in your developer tools to see that\n              your <samp>localStorage</samp> is being set correctly.\n            </p>\n          </section>", "text": "Part III (Storing your order with localStorage): Instructions Now whenever the user clicks \"Submit Your order\" you should use your window.localStorage to save all of the information the user has entered onto the page: which drink, the size, the baked good, as well as the tip, address, city state and zip code. You do not need to store the total cost, that can be regenerated when you load the information back in from storage. Next, when the page is loaded, reload this information from local storage and update the fields and radio buttons accordingly. Finally once all of the information is reloaded, you can recalculate the cost. You may find the lecture slides or documentation on localStorage helpful in reviewing how to set and get an item. Be sure to take a look at the application tab in your developer tools to see that your localStorage is being set correctly.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n            <h2>Solution</h2>\n            <p>\n              You can find a runnable HTML solution here: <a href=\"../code/solution/mowglis.html\">mowglis.html</a>\n            </p>\n            <p>\n            You can find one possible JS solution (with some differnet HTML5 validation attributes) here: <a href=\"../code/solution/mowglis.js\">mowglis.js</a>\n            </p>\n        </section>", "text": "Solution You can find a runnable HTML solution here: mowglis.html You can find one possible JS solution (with some differnet HTML5 validation attributes) here: mowglis.js", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-thurs/slides/"},
{"html": "<section>\n          <h2>Putting it all Together: Module Pattern</h2>\n          <p>\n            We've seen an example of adding a \"listener\" to a HTML element (a button) to\n            attach a function (<code>changeImage</code>) to respond to an event (\"click\").\n          </p>\n          <p>\n            We will now introduce a pattern, known as the module pattern, to \"wrap\" this code in our JavaScript file to\n            execute when the page is loaded.\n          </p>\n          <ul>\n            <li>\n              As an example, <a href=\"../code/solution/pokeball/pokeball.html\">here</a>\n              is a running solution of the Pokeball example using the module pattern!\n              Inspect the code to see the full JavaScript solution in Chrome!\n            </li>\n          </ul>\n        </section>", "text": "Putting it all Together: Module Pattern We've seen an example of adding a \"listener\" to a HTML element (a button) to attach a function (changeImage) to respond to an event (\"click\"). We will now introduce a pattern, known as the module pattern, to \"wrap\" this code in our JavaScript file to execute when the page is loaded. As an example, here is a running solution of the Pokeball example using the module pattern! Inspect the code to see the full JavaScript solution in Chrome!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Module Pattern Template</h2>\n          <pre><code class=\"hljs\" data-trim>(function(){\n  \"use strict\";\n\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    // This code is run when the page is loaded\n  }\n\n  // other functions you may define\n})();</code></pre>\n          <p class=\"code-caption\">JS</p>\n          <p>\n            For now, we'll just copy-paste this module function to start our JS files so\n            we can focus on practice with event handlers. Tomorrow, we'll take a focus\n            more on what this pattern actually means and why we need it.\n          </p>\n        </section>", "text": "Module Pattern Template (function(){ \"use strict\"; window.addEventListener(\"load\", init); function init() { // This code is run when the page is loaded } // other functions you may define})(); JS For now, we'll just copy-paste this module function to start our JS files so we can focus on practice with event handlers. Tomorrow, we'll take a focus more on what this pattern actually means and why we need it.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Putting it All Together: Example</h2>\n          <p>\n            When the page is loaded, everything in the\n            attached function (in our example, we call this function <code>init</code> but\n            this isn't a required name, <code>main</code> is also common), is executed, including any the assignment of\n            any other <code>click</code> event listeners!\n          </p>\n          <pre class=\"font-12pt\"><code class=\"hljs font-12pt\" data-trim>(function() {\n  \"use strict\";\n\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    // this code runs after page is loaded!\n    let demoButton = document.getElementById(\"demo-btn\");\n    demoButton.addEventListener(\"click\", changeImage);\n  }\n\n  function changeImage() {\n    let pokeballImg = document.getElementById(\"pokeball\");\n    pokeballImg.src = \"images/mystery.gif\";\n  }\n})();</code></pre>\n          <p class=\"code-caption\">JS (example)</p>\n        </section>", "text": "Putting it All Together: Example When the page is loaded, everything in the attached function (in our example, we call this function init but this isn't a required name, main is also common), is executed, including any the assignment of any other click event listeners! (function() { \"use strict\"; window.addEventListener(\"load\", init); function init() { // this code runs after page is loaded! let demoButton = document.getElementById(\"demo-btn\"); demoButton.addEventListener(\"click\", changeImage); } function changeImage() { let pokeballImg = document.getElementById(\"pokeball\"); pokeballImg.src = \"images/mystery.gif\"; }})(); JS (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 1: Buggy JavaScript</h2>\n            <p>\n            The following webpages have errors that cause their JavaScript not to\n            execute properly. Look at the pages, find the mistakes, and correct the problems.\n            <strong>Note: We don't expect you to understand the module pattern yet, so you can\n              assume the first and last lines of each file (the lines which open/close the\n              \"module\") are correct!</strong>\n            </p>\n            <ol>\n              <li>\n                Buggy Page #1:\n                <a href=\"../code/starter/buggy/buggy1.html\">HTML</a> | <a href=\"../code/starter/buggy/buggy1.js\">JavaScript</a>\n              </li>\n              <li>\n                Buggy Page #2:\n                <a href=\"../code/starter/buggy/buggy2.html\">HTML</a> | <a href=\"../code/starter/buggy/buggy2.js\">JavaScript</a>\n              </li>\n            </ol>\n          </section>\n          <section>\n            <h2>Exercise 1: Solution</h2>\n            <p>\n              You can find the bugs in the comments of each (fixed) HTML/JS file:\n            </p>\n            <ol>\n              <li>\n                Buggy Page #1:\n                <a href=\"../code/solution/buggy/buggy1.html\">HTML</a> |\n                <a href=\"../code/solution/buggy/buggy1.js\">JavaScript</a>\n              </li>\n              <li>\n                Buggy Page #2:\n                <a href=\"../code/solution/buggy/buggy2.html\">HTML</a> |\n                <a href=\"../code/solution/buggy/buggy2.js\">JavaScript</a>\n              </li>\n            </ol>\n          </section>\n        </section>", "text": "Exercise 1: Buggy JavaScript The following webpages have errors that cause their JavaScript not to execute properly. Look at the pages, find the mistakes, and correct the problems. Note: We don't expect you to understand the module pattern yet, so you can assume the first and last lines of each file (the lines which open/close the \"module\") are correct! Buggy Page #1: HTML | JavaScript Buggy Page #2: HTML | JavaScript Exercise 1: Solution You can find the bugs in the comments of each (fixed) HTML/JS file: Buggy Page #1: HTML | JavaScript Buggy Page #2: HTML | JavaScript", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Buggy JavaScript</h2>\n            <p>\n            The following webpages have errors that cause their JavaScript not to\n            execute properly. Look at the pages, find the mistakes, and correct the problems.\n            <strong>Note: We don't expect you to understand the module pattern yet, so you can\n              assume the first and last lines of each file (the lines which open/close the\n              \"module\") are correct!</strong>\n            </p>\n            <ol>\n              <li>\n                Buggy Page #1:\n                <a href=\"../code/starter/buggy/buggy1.html\">HTML</a> | <a href=\"../code/starter/buggy/buggy1.js\">JavaScript</a>\n              </li>\n              <li>\n                Buggy Page #2:\n                <a href=\"../code/starter/buggy/buggy2.html\">HTML</a> | <a href=\"../code/starter/buggy/buggy2.js\">JavaScript</a>\n              </li>\n            </ol>\n          </section>", "text": "Exercise 1: Buggy JavaScript The following webpages have errors that cause their JavaScript not to execute properly. Look at the pages, find the mistakes, and correct the problems. Note: We don't expect you to understand the module pattern yet, so you can assume the first and last lines of each file (the lines which open/close the \"module\") are correct! Buggy Page #1: HTML | JavaScript Buggy Page #2: HTML | JavaScript", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Solution</h2>\n            <p>\n              You can find the bugs in the comments of each (fixed) HTML/JS file:\n            </p>\n            <ol>\n              <li>\n                Buggy Page #1:\n                <a href=\"../code/solution/buggy/buggy1.html\">HTML</a> |\n                <a href=\"../code/solution/buggy/buggy1.js\">JavaScript</a>\n              </li>\n              <li>\n                Buggy Page #2:\n                <a href=\"../code/solution/buggy/buggy2.html\">HTML</a> |\n                <a href=\"../code/solution/buggy/buggy2.js\">JavaScript</a>\n              </li>\n            </ol>\n          </section>", "text": "Exercise 1: Solution You can find the bugs in the comments of each (fixed) HTML/JS file: Buggy Page #1: HTML | JavaScript Buggy Page #2: HTML | JavaScript", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 2: cRaZyCaPs</h2>\n            <p>\n             Write a function named <code>crazyCaps</code> that accepts a string as a\n             parameter and returns a new string with its capitalization altered such that\n             the characters at even indexes are all in lowercase and odd indexes are all in uppercase.\n            </p>\n            <p>\n              For example, if a variable <code>str</code> stores <code>\"Hey!! THERE!\"</code>,\n              the call of <code>crazyCaps(str)</code> should return <code>\"hEy!! tHeRe!\"</code>.\n            </p>\n          </section>\n\n          <section>\n            <h2>Exercise 2: Solution</h2>\n            <pre><code class=\"hljs\" data-trim>\nfunction crazyCaps(str) {\n  let result = \"\";\n  for (let i = 0; i &lt; str.length; i++) {\n    if (i % 2 == 0) {\n      result += str[i].toLowerCase();\n    } else {\n      result += str[i].toUpperCase();\n    }\n  }\n  return result;\n}\n</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>\n        </section>", "text": "Exercise 2: cRaZyCaPs Write a function named crazyCaps that accepts a string as a parameter and returns a new string with its capitalization altered such that the characters at even indexes are all in lowercase and odd indexes are all in uppercase. For example, if a variable str stores \"Hey!! THERE!\", the call of crazyCaps(str) should return \"hEy!! tHeRe!\". Exercise 2: Solution function crazyCaps(str) { let result = \"\"; for (let i = 0; i < str.length; i++) { if (i % 2 == 0) { result += str[i].toLowerCase(); } else { result += str[i].toUpperCase(); } } return result;} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: cRaZyCaPs</h2>\n            <p>\n             Write a function named <code>crazyCaps</code> that accepts a string as a\n             parameter and returns a new string with its capitalization altered such that\n             the characters at even indexes are all in lowercase and odd indexes are all in uppercase.\n            </p>\n            <p>\n              For example, if a variable <code>str</code> stores <code>\"Hey!! THERE!\"</code>,\n              the call of <code>crazyCaps(str)</code> should return <code>\"hEy!! tHeRe!\"</code>.\n            </p>\n          </section>", "text": "Exercise 2: cRaZyCaPs Write a function named crazyCaps that accepts a string as a parameter and returns a new string with its capitalization altered such that the characters at even indexes are all in lowercase and odd indexes are all in uppercase. For example, if a variable str stores \"Hey!! THERE!\", the call of crazyCaps(str) should return \"hEy!! tHeRe!\".", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Solution</h2>\n            <pre><code class=\"hljs\" data-trim>\nfunction crazyCaps(str) {\n  let result = \"\";\n  for (let i = 0; i &lt; str.length; i++) {\n    if (i % 2 == 0) {\n      result += str[i].toLowerCase();\n    } else {\n      result += str[i].toUpperCase();\n    }\n  }\n  return result;\n}\n</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>", "text": "Exercise 2: Solution function crazyCaps(str) { let result = \"\"; for (let i = 0; i < str.length; i++) { if (i % 2 == 0) { result += str[i].toLowerCase(); } else { result += str[i].toUpperCase(); } } return result;} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <h2>Exercise 3: Mystery Box</h2>\n          <img src=\"hidden/mystery-box-initial.png\" style=\"float: left; width: 25%;\n          margin-right: 10px; margin-top: -5px;\" alt=\"Initial Mystery Box View\">\n          <p>\n            We've provided starter HTML, CSS, and JS, and images in <a href=\"../code/starter/mystery-box.zip\">mystery-box.zip</a>\n             Download and unzip the folder fill in the \"TODO\" comments of\n             <code>mystery-box.js</code> so that when the box is clicked, the box image is\n             randomly changed to one of the images in the <code>POWER_UPS</code> array\n             defined in the JS.\n          </p>\n          <p><a href=\"../code/solution/mystery-box/mystery-box.html\" alt=\"Mystery Box\n          example\">Running Example</a></p>\n        </section>", "text": "Exercise 3: Mystery Box We've provided starter HTML, CSS, and JS, and images in mystery-box.zip Download and unzip the folder fill in the \"TODO\" comments of mystery-box.js so that when the box is clicked, the box image is randomly changed to one of the images in the POWER_UPS array defined in the JS. Running Example", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 4: What's Your Color?</h2>\n            <p>\n              We've provided an HTML file <a href=\"../code/starter/colorify/colorifyme.html\">colorifyme.html</a> and a start to a\n              JavaScript file <a href=\"../code/starter/colorify/colorifyme.js\">colorify.js</a> that\n              it links to. Download both files and fill in the \"TODO\" comments of <code>colorify.js</code> so that when the\n              web page's \"colorify\" button\n              is clicked, it randomly decides the color of the page background. That is, it should\n              choose a random hex value for the background between <code>#000000</code> and\n              <code>#FFFFFF</code>. In addition, it should replace any text in the heading tag that\n              has the ID \"my-color\" with the text, \"Your color is RANDOMCOLOR!\",\n              (where RANDOMCOLOR is the hex value randomly-generated for the background).\n            </p>\n            <p>\n              A runnable solution is located <a href=\"../code/solution/colorify/colorifyme.html\">here</a>\n              (don't peek at the solution code!)\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 4: Solution</h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 13pt;\">(function() {\n  \"use strict\";\n  const HEX_DIGITS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n                      \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n  const HEX_LENGTH = 6; // Number of hexidecimal digits in a color code\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    let colorBtn = document.getElementById(\"colorify\");\n    colorBtn.addEventListener(\"click\", changeBackgroundColor);\n  }\n\n  function changeBackgroundColor() {\n    let randomColor = \"#\";\n    for (let i = 0; i &lt; HEX_LENGTH; i++) {\n      randomColor += HEX_DIGITS[Math.floor(Math.random() * HEX_DIGITS.length)];\n    }\n    document.body.style.backgroundColor = randomColor;\n    document.getElementById(\"my-color\").innerText = \"Your color is \" + randomColor + \"!\";\n  }\n})();</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>\n        </section>", "text": "Exercise 4: What's Your Color? We've provided an HTML file colorifyme.html and a start to a JavaScript file colorify.js that it links to. Download both files and fill in the \"TODO\" comments of colorify.js so that when the web page's \"colorify\" button is clicked, it randomly decides the color of the page background. That is, it should choose a random hex value for the background between #000000 and #FFFFFF. In addition, it should replace any text in the heading tag that has the ID \"my-color\" with the text, \"Your color is RANDOMCOLOR!\", (where RANDOMCOLOR is the hex value randomly-generated for the background). A runnable solution is located here (don't peek at the solution code!) Exercise 4: Solution (function() { \"use strict\"; const HEX_DIGITS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]; const HEX_LENGTH = 6; // Number of hexidecimal digits in a color code window.addEventListener(\"load\", init); function init() { let colorBtn = document.getElementById(\"colorify\"); colorBtn.addEventListener(\"click\", changeBackgroundColor); } function changeBackgroundColor() { let randomColor = \"#\"; for (let i = 0; i < HEX_LENGTH; i++) { randomColor += HEX_DIGITS[Math.floor(Math.random() * HEX_DIGITS.length)]; } document.body.style.backgroundColor = randomColor; document.getElementById(\"my-color\").innerText = \"Your color is \" + randomColor + \"!\"; }})(); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 4: What's Your Color?</h2>\n            <p>\n              We've provided an HTML file <a href=\"../code/starter/colorify/colorifyme.html\">colorifyme.html</a> and a start to a\n              JavaScript file <a href=\"../code/starter/colorify/colorifyme.js\">colorify.js</a> that\n              it links to. Download both files and fill in the \"TODO\" comments of <code>colorify.js</code> so that when the\n              web page's \"colorify\" button\n              is clicked, it randomly decides the color of the page background. That is, it should\n              choose a random hex value for the background between <code>#000000</code> and\n              <code>#FFFFFF</code>. In addition, it should replace any text in the heading tag that\n              has the ID \"my-color\" with the text, \"Your color is RANDOMCOLOR!\",\n              (where RANDOMCOLOR is the hex value randomly-generated for the background).\n            </p>\n            <p>\n              A runnable solution is located <a href=\"../code/solution/colorify/colorifyme.html\">here</a>\n              (don't peek at the solution code!)\n            </p>\n          </section>", "text": "Exercise 4: What's Your Color? We've provided an HTML file colorifyme.html and a start to a JavaScript file colorify.js that it links to. Download both files and fill in the \"TODO\" comments of colorify.js so that when the web page's \"colorify\" button is clicked, it randomly decides the color of the page background. That is, it should choose a random hex value for the background between #000000 and #FFFFFF. In addition, it should replace any text in the heading tag that has the ID \"my-color\" with the text, \"Your color is RANDOMCOLOR!\", (where RANDOMCOLOR is the hex value randomly-generated for the background). A runnable solution is located here (don't peek at the solution code!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 4: Solution</h2>\n            <pre><code class=\"hijs\" data-trim style=\"font-size: 13pt;\">(function() {\n  \"use strict\";\n  const HEX_DIGITS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n                      \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n  const HEX_LENGTH = 6; // Number of hexidecimal digits in a color code\n  window.addEventListener(\"load\", init);\n\n  function init() {\n    let colorBtn = document.getElementById(\"colorify\");\n    colorBtn.addEventListener(\"click\", changeBackgroundColor);\n  }\n\n  function changeBackgroundColor() {\n    let randomColor = \"#\";\n    for (let i = 0; i &lt; HEX_LENGTH; i++) {\n      randomColor += HEX_DIGITS[Math.floor(Math.random() * HEX_DIGITS.length)];\n    }\n    document.body.style.backgroundColor = randomColor;\n    document.getElementById(\"my-color\").innerText = \"Your color is \" + randomColor + \"!\";\n  }\n})();</code></pre>\n            <p class=\"code-caption\">JS</p>\n          </section>", "text": "Exercise 4: Solution (function() { \"use strict\"; const HEX_DIGITS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]; const HEX_LENGTH = 6; // Number of hexidecimal digits in a color code window.addEventListener(\"load\", init); function init() { let colorBtn = document.getElementById(\"colorify\"); colorBtn.addEventListener(\"click\", changeBackgroundColor); } function changeBackgroundColor() { let randomColor = \"#\"; for (let i = 0; i < HEX_LENGTH; i++) { randomColor += HEX_DIGITS[Math.floor(Math.random() * HEX_DIGITS.length)]; } document.body.style.backgroundColor = randomColor; document.getElementById(\"my-color\").innerText = \"Your color is \" + randomColor + \"!\"; }})(); JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-tues/slides/"},
{"html": "<section id=\"add\">\n          <section>\n            <h3>Add</h3>\n            <code class=\"hljs\">git add [filename]</code>\n            <p>Proposes changes to be committed</p>\n          </section>\n          <section>\n            <h3>Add (cont.)</h3>\n            <p>Add everything</p>\n            <code class=\"hljs\">git add .</code>\n            <p>Add multiple files</p>\n            <code class=\"hljs\">git add [file1] [file2] [ect...]</code>\n          </section>\n        </section>", "text": "Add git add [filename] Proposes changes to be committed Add (cont.) Add everything git add . Add multiple files git add [file1] [file2] [ect...]", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Add</h3>\n            <code class=\"hljs\">git add [filename]</code>\n            <p>Proposes changes to be committed</p>\n          </section>", "text": "Add git add [filename] Proposes changes to be committed", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Add (cont.)</h3>\n            <p>Add everything</p>\n            <code class=\"hljs\">git add .</code>\n            <p>Add multiple files</p>\n            <code class=\"hljs\">git add [file1] [file2] [ect...]</code>\n          </section>", "text": "Add (cont.) Add everything git add . Add multiple files git add [file1] [file2] [ect...]", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"commit\">\n          <h3>Commit</h3>\n          <code class=\"hljs\">git commit -m \"write a descriptive message\"</code>\n          <p>Commits your changes locally</p>\n        </section>", "text": "Commit git commit -m \"write a descriptive message\" Commits your changes locally", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section id=\"push\">\n          <h3>Push</h3>\n          <code class=\"hljs\">git push origin master</code>\n          <p>Updates the repository online with the changes you committed</p>\n        </section>", "text": "Push git push origin master Updates the repository online with the changes you committed", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Overview of Git Commands</h3>\n          <table>\n            <thead><tr>\n                <th>Command</th>\n                <th>Description</th>\n              </tr></thead>\n              <tbody>\n                <tr>\n                  <td>git clone [link to repository]</td>\n                  <td>make a local copy of a repository</td>\n                </tr>\n                <tr>\n                  <td>git add [filename]</td>\n                  <td>Proposes changes to be committed</td>\n                </tr>\n                <tr>\n                  <td>git commit -m \"message\"</td>\n                  <td>Commits changes locally</td>\n                </tr>\n                <tr>\n                  <td>git push</td>\n                  <td>Pushes to remote repository</td>\n                </tr>\n              </tbody>\n          </table>\n        </section>", "text": "Overview of Git Commands Command Description git clone [link to repository] make a local copy of a repository git add [filename] Proposes changes to be committed git commit -m \"message\" Commits changes locally git push Pushes to remote repository", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h3>Additional Resources</h3>\n          <ul>\n            <li><a href=\"https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html\">Using Git on the Command Line</a></li>\n            <li><a href=\"https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html\">Using SSH keys (optional)</a></li>\n            <li><a href=\"https://docs.gitlab.com/ee/gitlab-basics/command-line-commands.html\">Command Line</a></li>\n          </ul>\n        </section>", "text": "Additional Resources Using Git on the Command Line Using SSH keys (optional) Command Line", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <h2>Extra HTML Practice</h2>\n        </section>", "text": "Extra HTML Practice", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2 class=\"no-space-bottom\">Exercise 1: Dogs!</h2>\n            <p class=\"medium-small-font no-space-top\">Fix the <a href=\"https://validator.w3.org\" target=\"_blank\">validation errors</a> in <code><a href=\"../code/starter/dogs.html\">dogs.html</a></code> and\n                             make it match the <a href=\"../../../resources/codequalityguide/_site/\" target=\"_blank\">CSE 154 code quality guide</a>.\n            </p>\n              <pre><code class=\"hljs small-font\" data-trim>&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;body&gt;\n      &lt;title&gt;Dogs are the Best!&lt;/title&gt;\n      &lt;h1&gt;Dogs are the best!!!&lt;/h1&gt;\n      &lt;h2&gt;Why dogs are &lt;em&gt;the best&lt;/h2&gt;&lt;/em&gt;\n      &lt;p&gt;\n        &lt;ul&gt;\n          &lt;li&gt;Doggos are happy &amp; cuddly&lt;/li&gt;\n          &lt;li&gt;Doggos make people happy too&lt;/li&gt;\n          &lt;li&gt;They're obviously the best&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/p&gt;\n      &lt;h2&gt;Did you know?&lt;/h2&gt;\n      Doggies are the best\n      &lt;h2&gt;Dog pictures:&lt;/h2&gt;\n      &lt;img src=\"images/puppy-mowgli.jpg\"&gt;&lt;/img&gt;\n      &lt;img src=\"images/moar-puppy-mowgli.jpg\"&gt;&lt;/img&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/!DOCTYPE&gt;\n                </code></pre>\n              <p class=\"code-caption\">HTML (Bad)</p>\n          </section>\n\n          <section>\n            <h2 class=\"no-space-bottom\">Exercise 1: Solutions</h2>\n            <pre><code class=\"hijs small-font\" data-trim>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Dogs are the Best!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Dogs are the best!!!&lt;/h1&gt;\n    &lt;h2&gt;Why dogs are &lt;em&gt;the best&lt;/em&gt;&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Doggos are happy &amp;amp; cuddly&lt;/li&gt;\n      &lt;li&gt;Doggos make people happy too&lt;/li&gt;\n      &lt;li&gt;They're obviously the best&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;h2&gt;Did you know?&lt;/h2&gt;\n    &lt;p&gt;Doggies are the best&lt;/p&gt;\n    &lt;h2&gt;Dog pictures:&lt;/h2&gt;\n    &lt;p&gt;\n      &lt;img src=\"images/puppy-mowgli.jpg\" alt=\"cute pupper\"/&gt;\n      &lt;img src=\"images/moar-puppy-mowgli.jpg\" alt=\"moar cute pupper\"/&gt;\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n              </code></pre>\n            <p class=\"code-caption\">HTML (Good)</p>\n          </section>\n        </section>", "text": "Exercise 1: Dogs! Fix the validation errors in dogs.html and make it match the CSE 154 code quality guide. <!DOCTYPE html> <html> <body> <title>Dogs are the Best!</title> <h1>Dogs are the best!!!</h1> <h2>Why dogs are <em>the best</h2></em> <p> <ul> <li>Doggos are happy & cuddly</li> <li>Doggos make people happy too</li> <li>They're obviously the best</li> </ul> </p> <h2>Did you know?</h2> Doggies are the best <h2>Dog pictures:</h2> <img src=\"images/puppy-mowgli.jpg\"></img> <img src=\"images/moar-puppy-mowgli.jpg\"></img> </body> </html></!DOCTYPE> HTML (Bad) Exercise 1: Solutions <!DOCTYPE html><html> <head> <title>Dogs are the Best!</title> </head> <body> <h1>Dogs are the best!!!</h1> <h2>Why dogs are <em>the best</em></h2> <ul> <li>Doggos are happy &amp; cuddly</li> <li>Doggos make people happy too</li> <li>They're obviously the best</li> </ul> <h2>Did you know?</h2> <p>Doggies are the best</p> <h2>Dog pictures:</h2> <p> <img src=\"images/puppy-mowgli.jpg\" alt=\"cute pupper\"/> <img src=\"images/moar-puppy-mowgli.jpg\" alt=\"moar cute pupper\"/> </p> </body></html> HTML (Good)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h2 class=\"no-space-bottom\">Exercise 1: Dogs!</h2>\n            <p class=\"medium-small-font no-space-top\">Fix the <a href=\"https://validator.w3.org\" target=\"_blank\">validation errors</a> in <code><a href=\"../code/starter/dogs.html\">dogs.html</a></code> and\n                             make it match the <a href=\"../../../resources/codequalityguide/_site/\" target=\"_blank\">CSE 154 code quality guide</a>.\n            </p>\n              <pre><code class=\"hljs small-font\" data-trim>&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;body&gt;\n      &lt;title&gt;Dogs are the Best!&lt;/title&gt;\n      &lt;h1&gt;Dogs are the best!!!&lt;/h1&gt;\n      &lt;h2&gt;Why dogs are &lt;em&gt;the best&lt;/h2&gt;&lt;/em&gt;\n      &lt;p&gt;\n        &lt;ul&gt;\n          &lt;li&gt;Doggos are happy &amp; cuddly&lt;/li&gt;\n          &lt;li&gt;Doggos make people happy too&lt;/li&gt;\n          &lt;li&gt;They're obviously the best&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/p&gt;\n      &lt;h2&gt;Did you know?&lt;/h2&gt;\n      Doggies are the best\n      &lt;h2&gt;Dog pictures:&lt;/h2&gt;\n      &lt;img src=\"images/puppy-mowgli.jpg\"&gt;&lt;/img&gt;\n      &lt;img src=\"images/moar-puppy-mowgli.jpg\"&gt;&lt;/img&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/!DOCTYPE&gt;\n                </code></pre>\n              <p class=\"code-caption\">HTML (Bad)</p>\n          </section>", "text": "Exercise 1: Dogs! Fix the validation errors in dogs.html and make it match the CSE 154 code quality guide. <!DOCTYPE html> <html> <body> <title>Dogs are the Best!</title> <h1>Dogs are the best!!!</h1> <h2>Why dogs are <em>the best</h2></em> <p> <ul> <li>Doggos are happy & cuddly</li> <li>Doggos make people happy too</li> <li>They're obviously the best</li> </ul> </p> <h2>Did you know?</h2> Doggies are the best <h2>Dog pictures:</h2> <img src=\"images/puppy-mowgli.jpg\"></img> <img src=\"images/moar-puppy-mowgli.jpg\"></img> </body> </html></!DOCTYPE> HTML (Bad)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h2 class=\"no-space-bottom\">Exercise 1: Solutions</h2>\n            <pre><code class=\"hijs small-font\" data-trim>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Dogs are the Best!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Dogs are the best!!!&lt;/h1&gt;\n    &lt;h2&gt;Why dogs are &lt;em&gt;the best&lt;/em&gt;&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Doggos are happy &amp;amp; cuddly&lt;/li&gt;\n      &lt;li&gt;Doggos make people happy too&lt;/li&gt;\n      &lt;li&gt;They're obviously the best&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;h2&gt;Did you know?&lt;/h2&gt;\n    &lt;p&gt;Doggies are the best&lt;/p&gt;\n    &lt;h2&gt;Dog pictures:&lt;/h2&gt;\n    &lt;p&gt;\n      &lt;img src=\"images/puppy-mowgli.jpg\" alt=\"cute pupper\"/&gt;\n      &lt;img src=\"images/moar-puppy-mowgli.jpg\" alt=\"moar cute pupper\"/&gt;\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n              </code></pre>\n            <p class=\"code-caption\">HTML (Good)</p>\n          </section>", "text": "Exercise 1: Solutions <!DOCTYPE html><html> <head> <title>Dogs are the Best!</title> </head> <body> <h1>Dogs are the best!!!</h1> <h2>Why dogs are <em>the best</em></h2> <ul> <li>Doggos are happy &amp; cuddly</li> <li>Doggos make people happy too</li> <li>They're obviously the best</li> </ul> <h2>Did you know?</h2> <p>Doggies are the best</p> <h2>Dog pictures:</h2> <p> <img src=\"images/puppy-mowgli.jpg\" alt=\"cute pupper\"/> <img src=\"images/moar-puppy-mowgli.jpg\" alt=\"moar cute pupper\"/> </p> </body></html> HTML (Good)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week01-tues/slides/"},
{"html": "<section>\n            <h3>Exercise 2: Recipes API Response Format</h3>\n            <p>\n              <strong>Response Format</strong>: JSON\n            </p>\n            <div class=\"half-width\">\n              <pre><code class=\"json small-font\" data-trim>{ \"recipe\": {\n    \"information\": {\n      \"name\": ...,\n      \"image\": ...\n    },\n    \"ingredients\": {\n      \"item\": [{\n          \"amount\": ...,\n          \"text\": ...\n        }, ... {\n          \"amount\": ...,\n          \"prep\": ...,\n          \"text\": ...\n        }\n      ]\n    },\n    \"directions\": {\n      \"step\": [\n        ..., ...\n      ]\n    }\n  }\n}</code></pre>\n            <p class=\"code-caption\">Template JSON response (shortened)</p>\n            </div>\n          </section>", "text": "Exercise 2: Recipes API Response Format Response Format: JSON { \"recipe\": { \"information\": { \"name\": ..., \"image\": ... }, \"ingredients\": { \"item\": [{ \"amount\": ..., \"text\": ... }, ... { \"amount\": ..., \"prep\": ..., \"text\": ... } ] }, \"directions\": { \"step\": [ ..., ... ] } }} Template JSON response (shortened)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Recipes Implementation</h2>\n            <p>\n              When a radio button is clicked make a fetch to the recipes URL with the\n              <samp>recipe</samp> query parameter assigned value of the selected radio button.\n            </p>\n            <p>\n              For example, the radio button for \"peas\" has a value of \"peas\". To get the JSON\n              specific to the peas recipe you'll need to add a query/value pair of\n              <code>recipe=peas</code> to the request URL. <a target=\"_blank\" href=\"https://courses.cs.washington.edu/courses/cse154/webservices/recipe/recipe.php?recipe=peas\">Try it</a>!\n            </p>\n            <p>\n              You must parse the results and fill the <code>#recipes-area</code> section with:\n            </p>\n            <ol>\n              <li>An <samp>img</samp> tag with the recipe's image</li>\n              <li>A <samp>h1</samp> containing the title</li>\n              <li>A <samp>p</samp> containing the recipe's description text</li>\n              <li>A <samp>h2</samp> with the text \"Ingredients:\"</li>\n              <li>A <samp>ul</samp> filled with a list of the recipe's ingredients.</li>\n            </ol>\n            <p>\n              Check out a complete running version\n              <a target=\"_blank\" href=\"../code/solution/recipe/recipe.html\">here</a>.\n            </p>\n          </section>", "text": "Exercise 2: Recipes Implementation When a radio button is clicked make a fetch to the recipes URL with the recipe query parameter assigned value of the selected radio button. For example, the radio button for \"peas\" has a value of \"peas\". To get the JSON specific to the peas recipe you'll need to add a query/value pair of recipe=peas to the request URL. Try it! You must parse the results and fill the #recipes-area section with: An img tag with the recipe's image A h1 containing the title A p containing the recipe's description text A h2 with the text \"Ingredients:\" A ul filled with a list of the recipe's ingredients. Check out a complete running version here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Solution</h2>\n            <p><a href=\"../code/solution/recipe/recipe.js\" target=\"_blank\">Solution</a> (JavaScript)</p>\n          </section>", "text": "Exercise 2: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <section>\n          <h3>Exercise 3: Number Trivia! (a public API example)</h3>\n          <div>\n          <img src=\"images/numbers-api.png\" class=\"half-width\" style=\"float: left;\n          margin-right: 15px; margin-top: 0px\" alt=\"Numbers API screenshot\">\n          <p>\n            This is a short exercise, but shows how to use one of <em>thousands</em> of\n            API's available publically on the web. Some are more complicated than others\n            (this is a great example of the importance of clear documentation!) and some\n            require tokens or keys (which is good for security reasons, but takes an extra\n            step).\n          </p>\n          </div>\n          <p style=\"clear: both\">\n          The <a href=\"http://numbersapi.com/\" target=\"_blank\">Numbers API</a> is one\n          of the simplest APIs available to get started with fetching data from the web\n          without needing a token.\n          </p>\n        </section>\n        <section>\n          <h2>Numbers API Details</h2>\n          <p>\n            <strong>Service URL</strong>:\n            <samp>http://numbersapi.com/</samp>\n          </p>\n            <p>\n              <strong>Query Parameters (Required)</strong>: <samp><em>number</em></samp>\n            </p>\n            <p class=\"font-18pt\">\n              Note: this API doesn't have the\n              \"query=value\" format we saw in the other two web services - some APIs have\n              a bit of a different format which you can find in the documentation.\n            </p>\n            <p>\n              <strong>Details</strong>: Replace <em>number</em> with any integer number\n              (e.g. <code>154</code>), or\n                  <code>random</code> to get trivia about a number. Response is\n                  returned as a single plain text string.\n            </p>\n            <p>\n              <strong>Example Requests</strong>\n            </p>\n            <ul>\n              <li><a href=\"http://numbersapi.com/154\" target=\"_blank\">http://numbersapi.com/154</a></li>\n              <li><a href=\"http://numbersapi.com/random\" target=\"_blank\">http://numbersapi.com/random</a></li>\n          </ul>\n        </section>\n        <section>\n          <h2>Using the Numbers API: A Simple Example</h2>\n          <img src=\"images/numbers-expected.png\" class=\"two-thirds-width centered-figure\" alt=\"example output of number-trivia\n          exercise\">\n          <p>\n            Given this starter <a href=\"../code/starter/number-trivia/numbers.html\">numbers.html</a>,\n            write a JavaScript program <code>numbers.js</code> to take an integer value from\n            a number text box and fetch a trivia fact about that number when the \"Fetch\n            Number Fact!\" button is clicked, displaying the\n            result text in the #output paragraph.\n          </p>\n          <p>\n            If the button is clicked but the text input is empty, or the \"Fetch Random Number Fact!\" button\n            is clicked, a random number trivia fact should be fetched and displayed.\n          </p>\n          <!-- <p><a href=\"../code/solution/number-trivia/numbers.html\" target=\"_blank\">Running Demo</a></p> -->\n        </section>\n        <section>\n          <h2>Exercise 3: Solution</h2>\n          <p><a href=\"../code/solution/number-trivia/numbers.js\" target=\"_blank\">Solution</a> (JavaScript)</p>\n        </section>\n      </section>", "text": "Exercise 3: Number Trivia! (a public API example) This is a short exercise, but shows how to use one of thousands of API's available publically on the web. Some are more complicated than others (this is a great example of the importance of clear documentation!) and some require tokens or keys (which is good for security reasons, but takes an extra step). The Numbers API is one of the simplest APIs available to get started with fetching data from the web without needing a token. Numbers API Details Service URL: http://numbersapi.com/ Query Parameters (Required): number Note: this API doesn't have the \"query=value\" format we saw in the other two web services - some APIs have a bit of a different format which you can find in the documentation. Details: Replace number with any integer number (e.g. 154), or random to get trivia about a number. Response is returned as a single plain text string. Example Requests http://numbersapi.com/154 http://numbersapi.com/random Using the Numbers API: A Simple Example Given this starter numbers.html, write a JavaScript program numbers.js to take an integer value from a number text box and fetch a trivia fact about that number when the \"Fetch Number Fact!\" button is clicked, displaying the result text in the #output paragraph. If the button is clicked but the text input is empty, or the \"Fetch Random Number Fact!\" button is clicked, a random number trivia fact should be fetched and displayed. <!-- Running Demo --> Exercise 3: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h3>Exercise 3: Number Trivia! (a public API example)</h3>\n          <div>\n          <img src=\"images/numbers-api.png\" class=\"half-width\" style=\"float: left;\n          margin-right: 15px; margin-top: 0px\" alt=\"Numbers API screenshot\">\n          <p>\n            This is a short exercise, but shows how to use one of <em>thousands</em> of\n            API's available publically on the web. Some are more complicated than others\n            (this is a great example of the importance of clear documentation!) and some\n            require tokens or keys (which is good for security reasons, but takes an extra\n            step).\n          </p>\n          </div>\n          <p style=\"clear: both\">\n          The <a href=\"http://numbersapi.com/\" target=\"_blank\">Numbers API</a> is one\n          of the simplest APIs available to get started with fetching data from the web\n          without needing a token.\n          </p>\n        </section>", "text": "Exercise 3: Number Trivia! (a public API example) This is a short exercise, but shows how to use one of thousands of API's available publically on the web. Some are more complicated than others (this is a great example of the importance of clear documentation!) and some require tokens or keys (which is good for security reasons, but takes an extra step). The Numbers API is one of the simplest APIs available to get started with fetching data from the web without needing a token.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Numbers API Details</h2>\n          <p>\n            <strong>Service URL</strong>:\n            <samp>http://numbersapi.com/</samp>\n          </p>\n            <p>\n              <strong>Query Parameters (Required)</strong>: <samp><em>number</em></samp>\n            </p>\n            <p class=\"font-18pt\">\n              Note: this API doesn't have the\n              \"query=value\" format we saw in the other two web services - some APIs have\n              a bit of a different format which you can find in the documentation.\n            </p>\n            <p>\n              <strong>Details</strong>: Replace <em>number</em> with any integer number\n              (e.g. <code>154</code>), or\n                  <code>random</code> to get trivia about a number. Response is\n                  returned as a single plain text string.\n            </p>\n            <p>\n              <strong>Example Requests</strong>\n            </p>\n            <ul>\n              <li><a href=\"http://numbersapi.com/154\" target=\"_blank\">http://numbersapi.com/154</a></li>\n              <li><a href=\"http://numbersapi.com/random\" target=\"_blank\">http://numbersapi.com/random</a></li>\n          </ul>\n        </section>", "text": "Numbers API Details Service URL: http://numbersapi.com/ Query Parameters (Required): number Note: this API doesn't have the \"query=value\" format we saw in the other two web services - some APIs have a bit of a different format which you can find in the documentation. Details: Replace number with any integer number (e.g. 154), or random to get trivia about a number. Response is returned as a single plain text string. Example Requests http://numbersapi.com/154 http://numbersapi.com/random", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Using the Numbers API: A Simple Example</h2>\n          <img src=\"images/numbers-expected.png\" class=\"two-thirds-width centered-figure\" alt=\"example output of number-trivia\n          exercise\">\n          <p>\n            Given this starter <a href=\"../code/starter/number-trivia/numbers.html\">numbers.html</a>,\n            write a JavaScript program <code>numbers.js</code> to take an integer value from\n            a number text box and fetch a trivia fact about that number when the \"Fetch\n            Number Fact!\" button is clicked, displaying the\n            result text in the #output paragraph.\n          </p>\n          <p>\n            If the button is clicked but the text input is empty, or the \"Fetch Random Number Fact!\" button\n            is clicked, a random number trivia fact should be fetched and displayed.\n          </p>\n          <!-- <p><a href=\"../code/solution/number-trivia/numbers.html\" target=\"_blank\">Running Demo</a></p> -->\n        </section>", "text": "Using the Numbers API: A Simple Example Given this starter numbers.html, write a JavaScript program numbers.js to take an integer value from a number text box and fetch a trivia fact about that number when the \"Fetch Number Fact!\" button is clicked, displaying the result text in the #output paragraph. If the button is clicked but the text input is empty, or the \"Fetch Random Number Fact!\" button is clicked, a random number trivia fact should be fetched and displayed. <!-- Running Demo -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n          <h2>Exercise 3: Solution</h2>\n          <p><a href=\"../code/solution/number-trivia/numbers.js\" target=\"_blank\">Solution</a> (JavaScript)</p>\n        </section>", "text": "Exercise 3: Solution Solution (JavaScript)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week05-tues/slides/"},
{"html": "<section>\n              <h2>Part IV: Reset Functionality</h2>\n              <p>\n                When the Reset button is clicked, the textarea and the output paragraph should\n                both be cleared (using <code>innerText</code>).\n              </p>\n            </section>", "text": "Part IV: Reset Functionality When the Reset button is clicked, the textarea and the output paragraph should both be cleared (using innerText).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n              <h2>Part IV: Checkbox Elements</h2>\n              <div class=\"font-18pt\">\n              <p>\n                Next, implement a feature such that when the all-caps checkbox is checked,\n                all of the text in the output\n                paragraph appear only in uppercase.\n              </p>\n              <!--\n              <p>You can change styles of a DOM element <code>el</code> by using\n              <code>el.style.cssProperty</code> (where cssProperty is the name of the\n              CSS property you're changing, in camelCasing). For example, to make an\n              element uppercase, you could use <code>el.style.textTransform =\n                \"uppercase\"</code>. However, it's important to minimize adding CSS directly\n              in our JS, and it's preferred to add/remove classes instead.\n            </p>\n              -->\n            <p>To do so, add a CSS file with a class \".uppercase\" that\n                uses <code>text-transform: \"uppercase\";</code> to make an element all-uppercase. When\n                the \"All Caps\" option is checked, the output paragraph should have this\n                class. When unchecked, it should not have this class so that it uses\n                whatever casing was used in the original input text.\n              </p>\n              <p>\n              <strong>Hint 1</strong>: The event corresponding to changing the state of a checkbox input as\n                checked/unchecked is <code>change</code>.\n              </p>\n              <p>\n              <strong>Hint 2</strong>: To update the class list of a DOM element, you can use\n                <code>el.classList.add(\"classname\")</code> and\n                <code>el.classList.remove(\"classname\")</code>. We'll see this more in lecture!\n              </p>\n              </div>\n            </section>", "text": "Part IV: Checkbox Elements Next, implement a feature such that when the all-caps checkbox is checked, all of the text in the output paragraph appear only in uppercase. <!-- You can change styles of a DOM element el by using el.style.cssProperty (where cssProperty is the name of the CSS property you're changing, in camelCasing). For example, to make an element uppercase, you could use el.style.textTransform = \"uppercase\". However, it's important to minimize adding CSS directly in our JS, and it's preferred to add/remove classes instead. --> To do so, add a CSS file with a class \".uppercase\" that uses text-transform: \"uppercase\"; to make an element all-uppercase. When the \"All Caps\" option is checked, the output paragraph should have this class. When unchecked, it should not have this class so that it uses whatever casing was used in the original input text. Hint 1: The event corresponding to changing the state of a checkbox input as checked/unchecked is change. Hint 2: To update the class list of a DOM element, you can use el.classList.add(\"classname\") and el.classList.remove(\"classname\"). We'll see this more in lecture!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n              <h2>Part V: Radio Button Elements</h2>\n              <p>\n                Implement a feature to such that the text in the output paragraph should have the\n                font size of whatever is currently selected in the radio button group.\n              </p>\n              <p>\n                To minimize changing styles in JavaScript, you can add CSS classes to\n                accomplish font size changes (similar to the previous step).\n              </p>\n          </section>", "text": "Part V: Radio Button Elements Implement a feature to such that the text in the output paragraph should have the font size of whatever is currently selected in the radio button group. To minimize changing styles in JavaScript, you can add CSS classes to accomplish font size changes (similar to the previous step).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Part V: Implementing the Randomized Cipher</h2>\n            <p><em>Note:</em> This part is a more challenging feature we have provided if you'd\n            like to explore a more advanced cipher algorithm and and add a few more UI\n            features. We have also suggested other features to try on the next slide!</p>\n            <p>In this part, you will implement the \"Randomized\" cipher option. This is similar\n              to the Shift Cipher, only \"result alphabet\" <em>C</em> is randomly-generated. In other words,\n               each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\").</p>\n          </section>\n          <section>\n            <h2>Part V: Details</h2>\n            <p>First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div.</p>\n            <p>If you would like some hints for writing this algorithm, there are some in the slides below.</p>\n          </section>\n          <section>\n            <h2>Part V: Hints</h2>\n            <p>\n            Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.floor()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.random()</code></a> useful here).\n            </p>\n            <p>\n              Next, <a href=\"https://www.w3schools.com/jsref/jsref_push.asp\" target=\"_blank\">push</a> this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last).\n             </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own.</p>\n          </section>\n          <section>\n            <h2>Part V: Algorithm Solution</h2>\n            <p>One possible solution is given below:</p>\n            <pre class=\"h450px\"><code class=\"hijs\" data-trim style=\"font-size: 14pt;\">function generateCipher(text) {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let cipher = [];\n  // it's poor style to hardcode a magic number like 26\n  let alphabetLength = alphabet.length;\n  for (let i = 0; i &lt; alphabetLength; i++) {\n    let randomIndex = Math.floor(Math.random() * alphabet.length);\n    cipher.push(alphabet.splice(\n      [Math.floor(Math.random() * alphabet.length)], 1));\n  }\n  document.getElementById(\"output\").innerText = cipher;\n  let result = \"\";\n  for (let i = 0; i &lt; outputText.length; i++) {\n    if (text[i] &gt;= 'a' &amp;&amp; text[i] &lt;= 'z') {\n      let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0);\n      result += cipher[letterCode];\n    } else {\n      result += text[i];\n    }\n  }\n  document.getElementById(\"output\").innerText = result.replace(\",\", \"\");\n}</code></pre>\n              <p class=\"code-caption space-above\">JS</p>\n          </section>\n        </section>", "text": "Part V: Implementing the Randomized Cipher Note: This part is a more challenging feature we have provided if you'd like to explore a more advanced cipher algorithm and and add a few more UI features. We have also suggested other features to try on the next slide! In this part, you will implement the \"Randomized\" cipher option. This is similar to the Shift Cipher, only \"result alphabet\" C is randomly-generated. In other words, each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\"). Part V: Details First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div. If you would like some hints for writing this algorithm, there are some in the slides below. Part V: Hints Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find Math.floor() and Math.random() useful here). Next, push this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last). If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own. Part V: Algorithm Solution One possible solution is given below: function generateCipher(text) { let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\"); let cipher = []; // it's poor style to hardcode a magic number like 26 let alphabetLength = alphabet.length; for (let i = 0; i < alphabetLength; i++) { let randomIndex = Math.floor(Math.random() * alphabet.length); cipher.push(alphabet.splice( [Math.floor(Math.random() * alphabet.length)], 1)); } document.getElementById(\"output\").innerText = cipher; let result = \"\"; for (let i = 0; i < outputText.length; i++) { if (text[i] >= 'a' && text[i] <= 'z') { let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0); result += cipher[letterCode]; } else { result += text[i]; } } document.getElementById(\"output\").innerText = result.replace(\",\", \"\");} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part V: Implementing the Randomized Cipher</h2>\n            <p><em>Note:</em> This part is a more challenging feature we have provided if you'd\n            like to explore a more advanced cipher algorithm and and add a few more UI\n            features. We have also suggested other features to try on the next slide!</p>\n            <p>In this part, you will implement the \"Randomized\" cipher option. This is similar\n              to the Shift Cipher, only \"result alphabet\" <em>C</em> is randomly-generated. In other words,\n               each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\").</p>\n          </section>", "text": "Part V: Implementing the Randomized Cipher Note: This part is a more challenging feature we have provided if you'd like to explore a more advanced cipher algorithm and and add a few more UI features. We have also suggested other features to try on the next slide! In this part, you will implement the \"Randomized\" cipher option. This is similar to the Shift Cipher, only \"result alphabet\" C is randomly-generated. In other words, each letter in the English alphabet is mapped to one of the 25 other letters, but no two letters may have the same mapping (e.g., \"a\" and \"c\" can not both map to \"d\").", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part V: Details</h2>\n            <p>First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div.</p>\n            <p>If you would like some hints for writing this algorithm, there are some in the slides below.</p>\n          </section>", "text": "Part V: Details First, you should modify your button event handler to determine whether the \"Shift Cipher\" or \"Randomized Cipher\" option is selected in the dropdown menu. If the \"Randomized Cipher\" option is selected, it should call a new function which outputs a randomized encrypted version of the input text area to the output div. If you would like some hints for writing this algorithm, there are some in the slides below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part V: Hints</h2>\n            <p>\n            Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.floor()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\"><code>Math.random()</code></a> useful here).\n            </p>\n            <p>\n              Next, <a href=\"https://www.w3schools.com/jsref/jsref_push.asp\" target=\"_blank\">push</a> this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last).\n             </p>\n            <p>If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own.</p>\n          </section>", "text": "Part V: Hints Because we aren't simply adding 1 to each letter (or mapping 'a' to 'z'), you might find an array helpful when creating a random cipher alphabet. One way to randomly-generate the cipher is to keep track of unchosen letters in the English alphabet using a string or array. Then, randomly choose one of the unchosen letters (you may find Math.floor() and Math.random() useful here). Next, push this randomly-chosen letter to the end of the cipher array. Continue this process until you have removed all letters from your English alphabet and have 26 letters in your cipher array (where the first index is the letter randomly-chosen first, and the last index is the letter that was chosen last). If you get stuck on this function, you may refer to a sample solution on the slide below. But it's strongly recommended you implement it on your own.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n            <h2>Part V: Algorithm Solution</h2>\n            <p>One possible solution is given below:</p>\n            <pre class=\"h450px\"><code class=\"hijs\" data-trim style=\"font-size: 14pt;\">function generateCipher(text) {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let cipher = [];\n  // it's poor style to hardcode a magic number like 26\n  let alphabetLength = alphabet.length;\n  for (let i = 0; i &lt; alphabetLength; i++) {\n    let randomIndex = Math.floor(Math.random() * alphabet.length);\n    cipher.push(alphabet.splice(\n      [Math.floor(Math.random() * alphabet.length)], 1));\n  }\n  document.getElementById(\"output\").innerText = cipher;\n  let result = \"\";\n  for (let i = 0; i &lt; outputText.length; i++) {\n    if (text[i] &gt;= 'a' &amp;&amp; text[i] &lt;= 'z') {\n      let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0);\n      result += cipher[letterCode];\n    } else {\n      result += text[i];\n    }\n  }\n  document.getElementById(\"output\").innerText = result.replace(\",\", \"\");\n}</code></pre>\n              <p class=\"code-caption space-above\">JS</p>\n          </section>", "text": "Part V: Algorithm Solution One possible solution is given below: function generateCipher(text) { let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\"); let cipher = []; // it's poor style to hardcode a magic number like 26 let alphabetLength = alphabet.length; for (let i = 0; i < alphabetLength; i++) { let randomIndex = Math.floor(Math.random() * alphabet.length); cipher.push(alphabet.splice( [Math.floor(Math.random() * alphabet.length)], 1)); } document.getElementById(\"output\").innerText = cipher; let result = \"\"; for (let i = 0; i < outputText.length; i++) { if (text[i] >= 'a' && text[i] <= 'z') { let letterCode = text.charCodeAt(i) - 'a'.charCodeAt(0); result += cipher[letterCode]; } else { result += text[i]; } } document.getElementById(\"output\").innerText = result.replace(\",\", \"\");} JS", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h2>Challenge Problems</h2>\n          <p>Did you enjoy making your own encrypted messages? Here are a few other ideas to add to your file:\n          </p>\n            <ul>\n              <li><strong>Add a dropdown menu to select a value to shift by in the Shift Cipher</strong></li>\n              <li><strong>Adjust your ciphers so that digits 0-9 can be encrypted as well as letters</strong></li>\n              <li><strong>Explore <a href=\"http://www.cryptogram.org/resource-area/cipher-types/\" target=\"_blank\">other cipher\n                 types</a></strong></li>\n              <li><strong>Change your cipher to output something other than\n                  letters)</strong>: For example, you could output using emojis, gifs,\n                colored boxes, etc.</li>\n              <li>\n                <strong>Write a \"Decryption\" tool!</strong>\n                This goes beyond the scope of this exercise, but with a <code>.txt</code> file of dictionary words,\n                you can try to write a tool that takes input (probably from a Shift or Randomized cipher) and tries to decode it,\n                matching sequences of characters to words in the dictionary.\n              </li>\n            </ul>\n        </section>", "text": "Challenge Problems Did you enjoy making your own encrypted messages? Here are a few other ideas to add to your file: Add a dropdown menu to select a value to shift by in the Shift Cipher Adjust your ciphers so that digits 0-9 can be encrypted as well as letters Explore other cipher types Change your cipher to output something other than letters): For example, you could output using emojis, gifs, colored boxes, etc. Write a \"Decryption\" tool! This goes beyond the scope of this exercise, but with a .txt file of dictionary words, you can try to write a tool that takes input (probably from a Shift or Randomized cipher) and tries to decode it, matching sequences of characters to words in the dictionary.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week03-thurs/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 11: Post Requests</h3>\n        </section>", "text": "CSE 154 Section 11: Post Requests", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <h2>Section Agenda</h2>\n          <p>QuickCheck: Ajax Review</p>\n          <p>Review: GET vs. POST</p>\n          <p>Making Post Requests With Postman</p>\n        </section>", "text": "Section Agenda QuickCheck: Ajax Review Review: GET vs. POST Making Post Requests With Postman", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <h2>Exploration Session This Week</h2>\n          <h3>April Fools!</h3>\n          <p><strong>When/Where:</strong> Wednesday 4:30pm, BAG154</p>\n          <p><strong>Description:</strong> How did Jeremy hack our website with CSS and Javascript? Come find out! Likely there will be ponies.</p>\n          <ul>\n            <li>One HW Extra Credit Point Per Session Attended!</li>\n            <li>\n              If you have a legitmate conflict, fill out the form on the\n              <a href=\"../../../exploration-sessions/exploration-sessions.html\">exploration\n              sessions</a> page of the course website to watch the Panapto and take a\n              short quiz for credit.\n            </li>\n          </ul>\n          <p><strong>Note:</strong> this is at a different time and location than usual!</p>\n        </section>", "text": "Exploration Session This Week April Fools! When/Where: Wednesday 4:30pm, BAG154 Description: How did Jeremy hack our website with CSS and Javascript? Come find out! Likely there will be ponies. One HW Extra Credit Point Per Session Attended! If you have a legitmate conflict, fill out the form on the exploration sessions page of the course website to watch the Panapto and take a short quiz for credit. Note: this is at a different time and location than usual!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <h2>Review: GET and POST</h2>\n          <p>\n            There are two common ways to make AJAX requests to a server.\n          </p>\n          <ul>\n            <li>\n              GET requests\n              <ul>\n                <li>are the default, most of what we've seen have been GET requests</li>\n                <li>retrieve or <em>get</em> information from the server</li>\n              </ul>\n            </li><li>POST requests\n              <ul>\n                <li><em>send</em> information to the server</li>\n                <li>often change information on the server</li>\n              </ul>\n            </li>\n          </ul>\n        </section>", "text": "Review: GET and POST There are two common ways to make AJAX requests to a server. GET requests are the default, most of what we've seen have been GET requests retrieve or get information from the server POST requests send information to the server often change information on the server", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <section id=\"ex-x\">\n            <h2>Exercise 1: Posting with Postman</h2>\n            <p>\n              Recall how you would need to make API calls:\n            </p>\n            <p>\n              For GET requests, you can directly visit the URL on your browser and see the response.\n            </p>\n            <p>\n              For POST requests, that would be a bit more complicated. We've told\n              you to test your POSTs by creating <code>fetch</code> calls with\n              <code>FormData</code>. <em>(See the slides below)</em>\n            </p>\n          </section>\n          <section>\n            <p>\n              The following testing code is enough to make a POST request:\n            </p>\n        <pre class=\"font-16pt\"><code data-trim class=\"javascript\">\n        // data parameters gets appended in FormData for POST requests (not in the url!)\n        let params =  new FormData();\n        params.append(\"location\", \"Equestira\");\n        params.append(\"group\", \"CSE 154 Wonderlads\");\n        params.append(\"members\", \"8\");\n        // make a POST request to httpbin.org/post with parameters attached\n        fetch(\"https://httpbin.org/post\", {method: \"POST\", body: params});\n            </code></pre>\n            <p class=\"code-caption\">JS</p>\n            <div class=\"side-by-side\">\n            <p class=\"font-20pt space-right one-third-width\">\n              Running the code above in the Chrome Developer Tools console will yield a POST request.\n              <br>\n              You can view the server response under the Network tab (<em>click the image to\n                the right for a larger view</em>).\n            </p>\n            <div class=\"two-thirds-width\">\n              <a href=\"../images/chromepostrequest.png\">\n                <img src=\"../images/chromepostrequest.png\" alt=\"Making a post request in chrome dev tools\">\n              </a>\n            </div>\n            </div>\n          </section>\n          <section>\n            <p class=\"font-18pt\">\n              Now there is an another way to test your APIs. Instead of venturing with the\n              Chrome Developer tools or experimenting the URLs (which can be error prone\n              at times), we can make calls with a dedicated program.\n            </p>\n            <p class=\"fragment\">\n              Introducing... <strong>Postman</strong>!<br>\n              <a href=\"../images/postmanpostex.png\">\n              <img class=\"two-thirds-width centered-figure space-above\" src=\"../images/postmanpostex.png\">\n        </a>\n            </p>\n          </section>\n          <section>\n            <h3>Ready, Set, Postman!</h3>\n            <ol>\n              <li>To download Postman, visit <a href=\"https://www.getpostman.com/\" target=\"_blank\">https://www.getpostman.com/</a> and click on <strong>Download the App</strong> button.</li>\n              <li>Under your operating system, click on the download button. Download will begin shortly.</li>\n              <li>Depending on which operating system,\n                <ul>\n                  <li>For Macintosh: you will need to unzip the zip and drag Postman to your Applications folder.</li>\n                  <li>For Windows, you will need to double click the executable and follow the installation process.</li>\n                </ul>\n              </li>\n            </ol>\n          </section>\n          <section>\n            <ol start=\"4\">\n              <li class=\"font-16pt\">\n                Once Postman is launched, you will need to <strong>skip signing in</strong> by clicking on the \"Skip signing in and take me straight to the app\" link at the very bottom of the login form.\n                <img src=\"../images/postmansignin.png\">\n              </li>\n            </ol>\n          </section>\n          <section>\n            <ol start=\"5\">\n              <li>\n                Close this welcome screen and you will be ready to make requests!\n                <img src=\"../images/postmancreatenew.png\">\n              </li>\n            </ol>\n          </section>\n          <section>\n            <h3>Making GET requests</h3>\n            <p>The simplest of the request can be performed with Postman. By typing the URL into the bar and clicking on <strong>Send</strong> will make a GET request to the server.</p>\n            <p class=\"font-18pt\">\n              Example 1 - GET the course website (https://courses.cs.washington.edu/courses/cse154/19sp/)\n              <a href=\"../images/postmangetcourseweb.png\">\n              <img src=\"../images/postmangetcourseweb.png\" class=\"space-above two-thirds-width\n              centered-figure\"></a>\n            </p>\n          </section>\n          <section>\n            <p>You can also insert query parameters (the stuff that goes after the url) to your GET request. They go into the <strong>Params</strong> input boxes.</p>\n            <p class=\"font-18pt\">\n              Example 2 - GET https://httpbin.org/get w/ params: pony=rainbowdash and pokemon=ponyta\n              <a href=\"../images/postmangetwithparams.png\">\n              <img src=\"../images/postmangetwithparams.png\" class=\"width-eighty-perc\n              centered-figure space-above\">\n              </a>\n            </p>\n          </section>\n          <section>\n            <p>Most of the time you will be looking at the <em>Body</em> tab to see the output from the server. Occasionally you will need to see if the server is sending the correct Content-Type header. The headers can be accessed from the <strong>Headers tab</strong>.</p>\n            <p class=\"font-18pt\">\n              Example 3 - Viewing headers\n              <a href=\"../images/postmangetheaders.png\">\n              <img src=\"../images/postmangetheaders.png\" class=\"width-eighty-perc\n              centered-figure space-above\">\n              </a>\n            </p>\n          </section>\n          <section>\n            <h3>Practicing GET requests</h3>\n            <p>Can you do the following?</p>\n            <ul class=\"font-20pt\">\n              <li>Send a request to GET your favorite site. (if you don't have an example,\n                go for <br><code>http://www.csszengarden.com/</code>) Admire their HTML source. <a href=\"../images/solution-getzengarden.png\" target=\"_blank\">(Solution)</a></li>\n              <li>Send a GET request to <br><code class=\"font-16pt\" id=\"webservice-getphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/get.php</code> <a href=\"../images/solution-getgetphp.png\" target=\"_blank\"><br>(Solution)</a></li>\n              <li>Send a GET request to <br><code class=\"font-16pt\" id=\"webservice-getparamsphp1\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/getwithparams.php</code> <a href=\"../images/solution-getwparams1.png\" target=\"_blank\">(Solution)</a>\n              <ul><li>Looks like the server has rejected because we're missing parameters. Send a request with a <code>user</code> parameter of the value <code>ponyta</code>. <a href=\"../images/solution-getwparams2.png\" target=\"_blank\">(Solution)</a></li>\n                <li>Oof so close! How about setting the user as <code>rainbowdash</code>? <a href=\"../images/solution-getwparams3.png\" target=\"_blank\">(Solution)</a></li>\n\n</ul></li></ul>\n            \n          </section>\n          <section>\n            <h3>Making POST requests</h3>\n            <p class=\"font-18pt\">\n              Building POST requests on Postman is no more difficult than creating GET requests. Select <strong>POST</strong> from the <em>dropdown list</em> to the left of the URL box. Enter a POST URL into the box and hit send. You've just made your first POST request on Postman!\n            </p>\n            <p class=\"font-18pt\">\n              Example 4 - Making a POST request to https://httpbin.org/post\n              <a href=\"../images/postmanpost.png\">\n              <img src=\"../images/postmanpost.png\" class=\"width-eighty-perc space-above\n              centered-figure\">\n              </a>\n            </p>\n          </section>\n          <section>\n            <p class=\"font-18pt\">\n              Since POST requests uses FormData instead of query parameters, we need to switch to the body tab in Postman. Select form-data from the radio buttons and enter your parameters.\n            </p>\n            <p class=\"font-18pt\">\n              Example 5 - Making a POST request to https://httpbin.org/post with data: name=rainbowdash, coolness=20-percent-cooler, and postman=rocks!\n              <a href=\"../images/postmanwithparams.png\">\n              <img src=\"../images/postmanwithparams.png\" class=\"width-eighty-perc space-above\n              centered-figure\">\n              </a>\n            </p>\n          </section>\n          <section>\n            <h3>Practicing POST requests</h3>\n            <p>Can you do the following?</p>\n            <ul class=\"font-18pt\">\n              <li>Make a post request to\n                <code class=\"font-14pt\" id=\"webservice-postphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/post.php</code><br>\n                <a href=\"../images/solution-postpostphp.png\" target=\"_blank\">(Solution)</a>\n              </li>\n              <li>Make a post request to\n                <code class=\"font-14pt\" id=\"webservice-postparamsphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php</code>.<br>\n                <a href=\"../images/solution-postwparams1.png\" target=\"_blank\">(Solution)</a>\n                <ul>\n                  <li>Let's try logging in with\n                    <code>user</code>\n                    as\n                    <code>rainbowdash</code>.\n                    <a href=\"../images/solution-postwparams2.png\" target=\"_blank\">(Solution)</a>\n                  </li>\n                  <li>Rainbow Dash has told me her password is\n                    <code>ponyta</code>. Set the\n                    <code>password</code>\n                    FormData as ponyta.\n                    <a href=\"../images/solution-postwparams3.png\" target=\"_blank\">(Solution)</a>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </section>\n        </section>", "text": "Exercise 1: Posting with Postman Recall how you would need to make API calls: For GET requests, you can directly visit the URL on your browser and see the response. For POST requests, that would be a bit more complicated. We've told you to test your POSTs by creating fetch calls with FormData. (See the slides below) The following testing code is enough to make a POST request: // data parameters gets appended in FormData for POST requests (not in the url!) let params = new FormData(); params.append(\"location\", \"Equestira\"); params.append(\"group\", \"CSE 154 Wonderlads\"); params.append(\"members\", \"8\"); // make a POST request to httpbin.org/post with parameters attached fetch(\"https://httpbin.org/post\", {method: \"POST\", body: params}); JS Running the code above in the Chrome Developer Tools console will yield a POST request. You can view the server response under the Network tab (click the image to the right for a larger view). Now there is an another way to test your APIs. Instead of venturing with the Chrome Developer tools or experimenting the URLs (which can be error prone at times), we can make calls with a dedicated program. Introducing... Postman! Ready, Set, Postman! To download Postman, visit https://www.getpostman.com/ and click on Download the App button. Under your operating system, click on the download button. Download will begin shortly. Depending on which operating system, For Macintosh: you will need to unzip the zip and drag Postman to your Applications folder. For Windows, you will need to double click the executable and follow the installation process. Once Postman is launched, you will need to skip signing in by clicking on the \"Skip signing in and take me straight to the app\" link at the very bottom of the login form. Close this welcome screen and you will be ready to make requests! Making GET requests The simplest of the request can be performed with Postman. By typing the URL into the bar and clicking on Send will make a GET request to the server. Example 1 - GET the course website (https://courses.cs.washington.edu/courses/cse154/19sp/) You can also insert query parameters (the stuff that goes after the url) to your GET request. They go into the Params input boxes. Example 2 - GET https://httpbin.org/get w/ params: pony=rainbowdash and pokemon=ponyta Most of the time you will be looking at the Body tab to see the output from the server. Occasionally you will need to see if the server is sending the correct Content-Type header. The headers can be accessed from the Headers tab. Example 3 - Viewing headers Practicing GET requests Can you do the following? Send a request to GET your favorite site. (if you don't have an example, go for http://www.csszengarden.com/) Admire their HTML source. (Solution) Send a GET request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/get.php (Solution) Send a GET request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/getwithparams.php (Solution) Looks like the server has rejected because we're missing parameters. Send a request with a user parameter of the value ponyta. (Solution) Oof so close! How about setting the user as rainbowdash? (Solution) Making POST requests Building POST requests on Postman is no more difficult than creating GET requests. Select POST from the dropdown list to the left of the URL box. Enter a POST URL into the box and hit send. You've just made your first POST request on Postman! Example 4 - Making a POST request to https://httpbin.org/post Since POST requests uses FormData instead of query parameters, we need to switch to the body tab in Postman. Select form-data from the radio buttons and enter your parameters. Example 5 - Making a POST request to https://httpbin.org/post with data: name=rainbowdash, coolness=20-percent-cooler, and postman=rocks! Practicing POST requests Can you do the following? Make a post request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/post.php (Solution) Make a post request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php. (Solution) Let's try logging in with user as rainbowdash. (Solution) Rainbow Dash has told me her password is ponyta. Set the password FormData as ponyta. (Solution)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section id=\"ex-x\">\n            <h2>Exercise 1: Posting with Postman</h2>\n            <p>\n              Recall how you would need to make API calls:\n            </p>\n            <p>\n              For GET requests, you can directly visit the URL on your browser and see the response.\n            </p>\n            <p>\n              For POST requests, that would be a bit more complicated. We've told\n              you to test your POSTs by creating <code>fetch</code> calls with\n              <code>FormData</code>. <em>(See the slides below)</em>\n            </p>\n          </section>", "text": "Exercise 1: Posting with Postman Recall how you would need to make API calls: For GET requests, you can directly visit the URL on your browser and see the response. For POST requests, that would be a bit more complicated. We've told you to test your POSTs by creating fetch calls with FormData. (See the slides below)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <p>\n              The following testing code is enough to make a POST request:\n            </p>\n        <pre class=\"font-16pt\"><code data-trim class=\"javascript\">\n        // data parameters gets appended in FormData for POST requests (not in the url!)\n        let params =  new FormData();\n        params.append(\"location\", \"Equestira\");\n        params.append(\"group\", \"CSE 154 Wonderlads\");\n        params.append(\"members\", \"8\");\n        // make a POST request to httpbin.org/post with parameters attached\n        fetch(\"https://httpbin.org/post\", {method: \"POST\", body: params});\n            </code></pre>\n            <p class=\"code-caption\">JS</p>\n            <div class=\"side-by-side\">\n            <p class=\"font-20pt space-right one-third-width\">\n              Running the code above in the Chrome Developer Tools console will yield a POST request.\n              <br>\n              You can view the server response under the Network tab (<em>click the image to\n                the right for a larger view</em>).\n            </p>\n            <div class=\"two-thirds-width\">\n              <a href=\"../images/chromepostrequest.png\">\n                <img src=\"../images/chromepostrequest.png\" alt=\"Making a post request in chrome dev tools\">\n              </a>\n            </div>\n            </div>\n          </section>", "text": "The following testing code is enough to make a POST request: // data parameters gets appended in FormData for POST requests (not in the url!) let params = new FormData(); params.append(\"location\", \"Equestira\"); params.append(\"group\", \"CSE 154 Wonderlads\"); params.append(\"members\", \"8\"); // make a POST request to httpbin.org/post with parameters attached fetch(\"https://httpbin.org/post\", {method: \"POST\", body: params}); JS Running the code above in the Chrome Developer Tools console will yield a POST request. You can view the server response under the Network tab (click the image to the right for a larger view).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <p class=\"font-18pt\">\n              Now there is an another way to test your APIs. Instead of venturing with the\n              Chrome Developer tools or experimenting the URLs (which can be error prone\n              at times), we can make calls with a dedicated program.\n            </p>\n            <p class=\"fragment\">\n              Introducing... <strong>Postman</strong>!<br>\n              <a href=\"../images/postmanpostex.png\">\n              <img class=\"two-thirds-width centered-figure space-above\" src=\"../images/postmanpostex.png\">\n        </a>\n            </p>\n          </section>", "text": "Now there is an another way to test your APIs. Instead of venturing with the Chrome Developer tools or experimenting the URLs (which can be error prone at times), we can make calls with a dedicated program. Introducing... Postman!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Ready, Set, Postman!</h3>\n            <ol>\n              <li>To download Postman, visit <a href=\"https://www.getpostman.com/\" target=\"_blank\">https://www.getpostman.com/</a> and click on <strong>Download the App</strong> button.</li>\n              <li>Under your operating system, click on the download button. Download will begin shortly.</li>\n              <li>Depending on which operating system,\n                <ul>\n                  <li>For Macintosh: you will need to unzip the zip and drag Postman to your Applications folder.</li>\n                  <li>For Windows, you will need to double click the executable and follow the installation process.</li>\n                </ul>\n              </li>\n            </ol>\n          </section>", "text": "Ready, Set, Postman! To download Postman, visit https://www.getpostman.com/ and click on Download the App button. Under your operating system, click on the download button. Download will begin shortly. Depending on which operating system, For Macintosh: you will need to unzip the zip and drag Postman to your Applications folder. For Windows, you will need to double click the executable and follow the installation process.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <ol start=\"4\">\n              <li class=\"font-16pt\">\n                Once Postman is launched, you will need to <strong>skip signing in</strong> by clicking on the \"Skip signing in and take me straight to the app\" link at the very bottom of the login form.\n                <img src=\"../images/postmansignin.png\">\n              </li>\n            </ol>\n          </section>", "text": "Once Postman is launched, you will need to skip signing in by clicking on the \"Skip signing in and take me straight to the app\" link at the very bottom of the login form.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <ol start=\"5\">\n              <li>\n                Close this welcome screen and you will be ready to make requests!\n                <img src=\"../images/postmancreatenew.png\">\n              </li>\n            </ol>\n          </section>", "text": "Close this welcome screen and you will be ready to make requests!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Making GET requests</h3>\n            <p>The simplest of the request can be performed with Postman. By typing the URL into the bar and clicking on <strong>Send</strong> will make a GET request to the server.</p>\n            <p class=\"font-18pt\">\n              Example 1 - GET the course website (https://courses.cs.washington.edu/courses/cse154/19sp/)\n              <a href=\"../images/postmangetcourseweb.png\">\n              <img src=\"../images/postmangetcourseweb.png\" class=\"space-above two-thirds-width\n              centered-figure\"></a>\n            </p>\n          </section>", "text": "Making GET requests The simplest of the request can be performed with Postman. By typing the URL into the bar and clicking on Send will make a GET request to the server. Example 1 - GET the course website (https://courses.cs.washington.edu/courses/cse154/19sp/)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <p>You can also insert query parameters (the stuff that goes after the url) to your GET request. They go into the <strong>Params</strong> input boxes.</p>\n            <p class=\"font-18pt\">\n              Example 2 - GET https://httpbin.org/get w/ params: pony=rainbowdash and pokemon=ponyta\n              <a href=\"../images/postmangetwithparams.png\">\n              <img src=\"../images/postmangetwithparams.png\" class=\"width-eighty-perc\n              centered-figure space-above\">\n              </a>\n            </p>\n          </section>", "text": "You can also insert query parameters (the stuff that goes after the url) to your GET request. They go into the Params input boxes. Example 2 - GET https://httpbin.org/get w/ params: pony=rainbowdash and pokemon=ponyta", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <p>Most of the time you will be looking at the <em>Body</em> tab to see the output from the server. Occasionally you will need to see if the server is sending the correct Content-Type header. The headers can be accessed from the <strong>Headers tab</strong>.</p>\n            <p class=\"font-18pt\">\n              Example 3 - Viewing headers\n              <a href=\"../images/postmangetheaders.png\">\n              <img src=\"../images/postmangetheaders.png\" class=\"width-eighty-perc\n              centered-figure space-above\">\n              </a>\n            </p>\n          </section>", "text": "Most of the time you will be looking at the Body tab to see the output from the server. Occasionally you will need to see if the server is sending the correct Content-Type header. The headers can be accessed from the Headers tab. Example 3 - Viewing headers", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Practicing GET requests</h3>\n            <p>Can you do the following?</p>\n            <ul class=\"font-20pt\">\n              <li>Send a request to GET your favorite site. (if you don't have an example,\n                go for <br><code>http://www.csszengarden.com/</code>) Admire their HTML source. <a href=\"../images/solution-getzengarden.png\" target=\"_blank\">(Solution)</a></li>\n              <li>Send a GET request to <br><code class=\"font-16pt\" id=\"webservice-getphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/get.php</code> <a href=\"../images/solution-getgetphp.png\" target=\"_blank\"><br>(Solution)</a></li>\n              <li>Send a GET request to <br><code class=\"font-16pt\" id=\"webservice-getparamsphp1\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/getwithparams.php</code> <a href=\"../images/solution-getwparams1.png\" target=\"_blank\">(Solution)</a>\n              <ul><li>Looks like the server has rejected because we're missing parameters. Send a request with a <code>user</code> parameter of the value <code>ponyta</code>. <a href=\"../images/solution-getwparams2.png\" target=\"_blank\">(Solution)</a></li>\n                <li>Oof so close! How about setting the user as <code>rainbowdash</code>? <a href=\"../images/solution-getwparams3.png\" target=\"_blank\">(Solution)</a></li>\n\n</ul></li></ul>\n            \n          </section>", "text": "Practicing GET requests Can you do the following? Send a request to GET your favorite site. (if you don't have an example, go for http://www.csszengarden.com/) Admire their HTML source. (Solution) Send a GET request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/get.php (Solution) Send a GET request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/getwithparams.php (Solution) Looks like the server has rejected because we're missing parameters. Send a request with a user parameter of the value ponyta. (Solution) Oof so close! How about setting the user as rainbowdash? (Solution)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Making POST requests</h3>\n            <p class=\"font-18pt\">\n              Building POST requests on Postman is no more difficult than creating GET requests. Select <strong>POST</strong> from the <em>dropdown list</em> to the left of the URL box. Enter a POST URL into the box and hit send. You've just made your first POST request on Postman!\n            </p>\n            <p class=\"font-18pt\">\n              Example 4 - Making a POST request to https://httpbin.org/post\n              <a href=\"../images/postmanpost.png\">\n              <img src=\"../images/postmanpost.png\" class=\"width-eighty-perc space-above\n              centered-figure\">\n              </a>\n            </p>\n          </section>", "text": "Making POST requests Building POST requests on Postman is no more difficult than creating GET requests. Select POST from the dropdown list to the left of the URL box. Enter a POST URL into the box and hit send. You've just made your first POST request on Postman! Example 4 - Making a POST request to https://httpbin.org/post", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <p class=\"font-18pt\">\n              Since POST requests uses FormData instead of query parameters, we need to switch to the body tab in Postman. Select form-data from the radio buttons and enter your parameters.\n            </p>\n            <p class=\"font-18pt\">\n              Example 5 - Making a POST request to https://httpbin.org/post with data: name=rainbowdash, coolness=20-percent-cooler, and postman=rocks!\n              <a href=\"../images/postmanwithparams.png\">\n              <img src=\"../images/postmanwithparams.png\" class=\"width-eighty-perc space-above\n              centered-figure\">\n              </a>\n            </p>\n          </section>", "text": "Since POST requests uses FormData instead of query parameters, we need to switch to the body tab in Postman. Select form-data from the radio buttons and enter your parameters. Example 5 - Making a POST request to https://httpbin.org/post with data: name=rainbowdash, coolness=20-percent-cooler, and postman=rocks!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Practicing POST requests</h3>\n            <p>Can you do the following?</p>\n            <ul class=\"font-18pt\">\n              <li>Make a post request to\n                <code class=\"font-14pt\" id=\"webservice-postphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/post.php</code><br>\n                <a href=\"../images/solution-postpostphp.png\" target=\"_blank\">(Solution)</a>\n              </li>\n              <li>Make a post request to\n                <code class=\"font-14pt\" id=\"webservice-postparamsphp\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php</code>.<br>\n                <a href=\"../images/solution-postwparams1.png\" target=\"_blank\">(Solution)</a>\n                <ul>\n                  <li>Let's try logging in with\n                    <code>user</code>\n                    as\n                    <code>rainbowdash</code>.\n                    <a href=\"../images/solution-postwparams2.png\" target=\"_blank\">(Solution)</a>\n                  </li>\n                  <li>Rainbow Dash has told me her password is\n                    <code>ponyta</code>. Set the\n                    <code>password</code>\n                    FormData as ponyta.\n                    <a href=\"../images/solution-postwparams3.png\" target=\"_blank\">(Solution)</a>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </section>", "text": "Practicing POST requests Can you do the following? Make a post request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/post.php (Solution) Make a post request to https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php. (Solution) Let's try logging in with user as rainbowdash. (Solution) Rainbow Dash has told me her password is ponyta. Set the password FormData as ponyta. (Solution)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 2: Posting with Fetch</h2>\n            <p>Great work! Now it's time to try to replicate what you just did using JavaScript!</p>\n            <p>\n              <strong>Note:</strong> One popular strategy for working with APIs is to use\n              Postman to understand the API you are working with then duplicate the\n              request with JavaScript.\n            </p>\n          </section>\n          <section>\n            <h3>Posting With Fetch</h3>\n            <p>\n              We have created a <a href=\"../code/starter.zip\">starter project</a> for you\n              to work with. It contains all the HTML and CSS needed as well as a\n              starter JS file.\n            </p>\n            <p>\n              All you should need to do is make a POST request to the API with\n              rainbowdash's username and password as you did in Postman.\n            </p>\n            <p>\n              <code class=\"font-14pt\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php</code>\n            </p>\n            <p>\n              <a href=\"../code/solution/post.html\">Solution</a>\n            </p>\n          </section>\n        </section>", "text": "Exercise 2: Posting with Fetch Great work! Now it's time to try to replicate what you just did using JavaScript! Note: One popular strategy for working with APIs is to use Postman to understand the API you are working with then duplicate the request with JavaScript. Posting With Fetch We have created a starter project for you to work with. It contains all the HTML and CSS needed as well as a starter JS file. All you should need to do is make a POST request to the API with rainbowdash's username and password as you did in Postman. https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Posting with Fetch</h2>\n            <p>Great work! Now it's time to try to replicate what you just did using JavaScript!</p>\n            <p>\n              <strong>Note:</strong> One popular strategy for working with APIs is to use\n              Postman to understand the API you are working with then duplicate the\n              request with JavaScript.\n            </p>\n          </section>", "text": "Exercise 2: Posting with Fetch Great work! Now it's time to try to replicate what you just did using JavaScript! Note: One popular strategy for working with APIs is to use Postman to understand the API you are working with then duplicate the request with JavaScript.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n            <h3>Posting With Fetch</h3>\n            <p>\n              We have created a <a href=\"../code/starter.zip\">starter project</a> for you\n              to work with. It contains all the HTML and CSS needed as well as a\n              starter JS file.\n            </p>\n            <p>\n              All you should need to do is make a POST request to the API with\n              rainbowdash's username and password as you did in Postman.\n            </p>\n            <p>\n              <code class=\"font-14pt\">https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php</code>\n            </p>\n            <p>\n              <a href=\"../code/solution/post.html\">Solution</a>\n            </p>\n          </section>", "text": "Posting With Fetch We have created a starter project for you to work with. It contains all the HTML and CSS needed as well as a starter JS file. All you should need to do is make a POST request to the API with rainbowdash's username and password as you did in Postman. https://courses.cs.washington.edu/courses/cse154/webservices/postmantest/postwithparams.php Solution", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week06-tues/slides/"},
{"html": "<section>\n          <h1>CSE 154</h1>\n          <h3>Section 13: Intro to PHP and Web Services</h3>\n        </section>", "text": "CSE 154 Section 13: Intro to PHP and Web Services", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2>PHP Review</h2>\n          <p>\n          PHP is a <em>server-side</em> scripting language. We will use it in this class to build web servers clients can request data from in different formats (plain text, JSON, etc.).\n          </p>\n          <p>\n            Today, we will get more practice writing simple PHP programs. Soon, we will use these basics to\n            create our own fully-functional API!\n          </p>\n          <p>\n            Here's a handy PHP\n            <a href=\"../../../resources/assets/cheatsheets/php-cheatsheet.pdf\" target=\"_blank\">language cheatsheet</a>\n            and list of\n            <a href=\"../../../resources/assets/cheatsheets/php-debugging-tips.pdf\" target=\"_blank\">common PHP bugs</a>\n            you might find helpful these next few weeks!\n          </p>\n          <p>You can also set improved PHP error reporting with MAMP - instructions <a href=\"../../../resources/assets/servers/mamp-php-error-display.pdf\">here</a>.</p>\n        </section>", "text": "PHP Review PHP is a server-side scripting language. We will use it in this class to build web servers clients can request data from in different formats (plain text, JSON, etc.). Today, we will get more practice writing simple PHP programs. Soon, we will use these basics to create our own fully-functional API! Here's a handy PHP language cheatsheet and list of common PHP bugs you might find helpful these next few weeks! You can also set improved PHP error reporting with MAMP - instructions here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2>Section Agenda</h2>\n            <p><a href=\"#/part-i\">Part I</a>: Functions and Simple Arrays</p>\n            <p><a href=\"#/part-ii\">Part II</a>: PHP GET Web Services</p>\n            <p><a href=\"#/part-iii\">Part III</a>: Web Services with Associative Arrays (Precursor to\n            JSON APIs!)</p>\n        </section>", "text": "Section Agenda Part I: Functions and Simple Arrays Part II: PHP GET Web Services Part III: Web Services with Associative Arrays (Precursor to JSON APIs!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <section id=\"part-i\">\n            <h2>Part I: Functions and Simple Arrays in PHP</h2>\n            <ol>\n              <li><a href=\"#/part-i-0a\"><code>array_mystery</code></a></li>\n              <li><a href=\"#/part-i-2\"><code>longest_string</code></a></li>\n              <li><a href=\"#/part-i-3\"><code>switch_pairs</code></a> (challenge)</li>\n            </ol>\n            <p>(go <a href=\"#\" class=\"navigate-down\">down</a> to work on these!)\n          </p></section>\n          <section id=\"part-i-0a\">\n            <h2>Part I: <code>array_mystery</code></h2>\n            <p>Consider the following PHP code:</p>\n            <pre><code class=\"medium-small-font\" data-trim>function array_mystery($arr) {\n  for ($i = 1; $i &lt; count($arr); $i++) {\n    $arr[$i] = $arr[$i] + $arr[$i - 1];\n  }\n  return $arr;\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n            <p class=\"medium-small-font\">\n            Indicate in the right-hand column what values would be stored in the returned array after the\n            function <code>array_mystery</code> executes if the array in the left-hand column is passed as a parameter\n            to <code>array_mystery</code>. Include your answers in the format of <code>[a, b,\n              c]</code> where a,\n            b, and c are numbers in the array result (for a 3-element array).\n\n            </p>\n            <ol id=\"arrayMysteryInputs\">\n              <li>\n                <code class=\"arrayA input\">[8]</code> :\n                <input class=\"arrayA answer\" placeholder=\"[a, b, c]\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayB input\">[6, 3]</code> :\n                <input class=\"arrayB answer\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayC input\">[1, 2, 3, 4]</code> :\n                <input class=\"arrayC answer\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayD input\">[7, 10, 12, 12, 17]</code> :\n                <input class=\"arrayD answer\" type=\"text\">\n              </li>\n            </ol>\n            <p><button id=\"arrayMysterySubmit\">Check Your Answers!</button></p>\n            <p id=\"arrayMysteryResults\"></p>\n          </section>\n          <section id=\"part-i-2\">\n            <h2>Part I: <code>longest_string</code></h2>\n            <p>\n              You can find the specification for writing the <code>longest_string</code> function on CodeStepByStep\n              <a href=\"https://www.codestepbystep.com/problem/view/php/collections/arrays/longest_string\" target=\"blank\">here</a>.\n              You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called\n              <code>longestString.php</code> and test the solution on the browser with your local\n              server running.\n            </p>\n          </section>\n          <section id=\"part-i-3\">\n            <h2>Part I: <code>switch_pairs</code> (challenge problem)</h2>\n            <p>\n              You can find the specification for writing the <code>switch_pairs</code> function on CodeStepByStep\n              <a href=\"https://www.codestepbystep.com/problem/view/php/collections/arrays/switch_pairs\" target=\"blank\">here</a>.\n              You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called\n              <code>switchPairs.php</code>.\n            </p>\n          </section>\n          <!--\n          <section>\n            <h2>Part I: <code>switch_pairs</code> Solution</h2>\n            <p>Running solution <a href=\"../code/solution/switchPairs.php\">here</a></p>\n            <p>Source code <a href=\"../code/solution/switchPairs.phps\">here</a></p>\n          </section>\n          -->\n        </section>", "text": "Part I: Functions and Simple Arrays in PHP array_mystery longest_string switch_pairs (challenge) (go down to work on these!) Part I: array_mystery Consider the following PHP code: function array_mystery($arr) { for ($i = 1; $i < count($arr); $i++) { $arr[$i] = $arr[$i] + $arr[$i - 1]; } return $arr;} PHP Indicate in the right-hand column what values would be stored in the returned array after the function array_mystery executes if the array in the left-hand column is passed as a parameter to array_mystery. Include your answers in the format of [a, b, c] where a, b, and c are numbers in the array result (for a 3-element array). [8] : [6, 3] : [1, 2, 3, 4] : [7, 10, 12, 12, 17] : Check Your Answers! Part I: longest_string You can find the specification for writing the longest_string function on CodeStepByStep here. You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called longestString.php and test the solution on the browser with your local server running. Part I: switch_pairs (challenge problem) You can find the specification for writing the switch_pairs function on CodeStepByStep here. You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called switchPairs.php. <!-- Part I: switch_pairs Solution Running solution here Source code here -->", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-i\">\n            <h2>Part I: Functions and Simple Arrays in PHP</h2>\n            <ol>\n              <li><a href=\"#/part-i-0a\"><code>array_mystery</code></a></li>\n              <li><a href=\"#/part-i-2\"><code>longest_string</code></a></li>\n              <li><a href=\"#/part-i-3\"><code>switch_pairs</code></a> (challenge)</li>\n            </ol>\n            <p>(go <a href=\"#\" class=\"navigate-down\">down</a> to work on these!)\n          </p></section>", "text": "Part I: Functions and Simple Arrays in PHP array_mystery longest_string switch_pairs (challenge) (go down to work on these!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-i-0a\">\n            <h2>Part I: <code>array_mystery</code></h2>\n            <p>Consider the following PHP code:</p>\n            <pre><code class=\"medium-small-font\" data-trim>function array_mystery($arr) {\n  for ($i = 1; $i &lt; count($arr); $i++) {\n    $arr[$i] = $arr[$i] + $arr[$i - 1];\n  }\n  return $arr;\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n            <p class=\"medium-small-font\">\n            Indicate in the right-hand column what values would be stored in the returned array after the\n            function <code>array_mystery</code> executes if the array in the left-hand column is passed as a parameter\n            to <code>array_mystery</code>. Include your answers in the format of <code>[a, b,\n              c]</code> where a,\n            b, and c are numbers in the array result (for a 3-element array).\n\n            </p>\n            <ol id=\"arrayMysteryInputs\">\n              <li>\n                <code class=\"arrayA input\">[8]</code> :\n                <input class=\"arrayA answer\" placeholder=\"[a, b, c]\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayB input\">[6, 3]</code> :\n                <input class=\"arrayB answer\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayC input\">[1, 2, 3, 4]</code> :\n                <input class=\"arrayC answer\" type=\"text\">\n              </li>\n              <li>\n                <code class=\"arrayD input\">[7, 10, 12, 12, 17]</code> :\n                <input class=\"arrayD answer\" type=\"text\">\n              </li>\n            </ol>\n            <p><button id=\"arrayMysterySubmit\">Check Your Answers!</button></p>\n            <p id=\"arrayMysteryResults\"></p>\n          </section>", "text": "Part I: array_mystery Consider the following PHP code: function array_mystery($arr) { for ($i = 1; $i < count($arr); $i++) { $arr[$i] = $arr[$i] + $arr[$i - 1]; } return $arr;} PHP Indicate in the right-hand column what values would be stored in the returned array after the function array_mystery executes if the array in the left-hand column is passed as a parameter to array_mystery. Include your answers in the format of [a, b, c] where a, b, and c are numbers in the array result (for a 3-element array). [8] : [6, 3] : [1, 2, 3, 4] : [7, 10, 12, 12, 17] : Check Your Answers!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-i-2\">\n            <h2>Part I: <code>longest_string</code></h2>\n            <p>\n              You can find the specification for writing the <code>longest_string</code> function on CodeStepByStep\n              <a href=\"https://www.codestepbystep.com/problem/view/php/collections/arrays/longest_string\" target=\"blank\">here</a>.\n              You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called\n              <code>longestString.php</code> and test the solution on the browser with your local\n              server running.\n            </p>\n          </section>", "text": "Part I: longest_string You can find the specification for writing the longest_string function on CodeStepByStep here. You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called longestString.php and test the solution on the browser with your local server running.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-i-3\">\n            <h2>Part I: <code>switch_pairs</code> (challenge problem)</h2>\n            <p>\n              You can find the specification for writing the <code>switch_pairs</code> function on CodeStepByStep\n              <a href=\"https://www.codestepbystep.com/problem/view/php/collections/arrays/switch_pairs\" target=\"blank\">here</a>.\n              You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called\n              <code>switchPairs.php</code>.\n            </p>\n          </section>", "text": "Part I: switch_pairs (challenge problem) You can find the specification for writing the switch_pairs function on CodeStepByStep here. You may either solve the problem on CSBS (which will run tests for you) or you may write a PHP file called switchPairs.php.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <section id=\"part-ii\">\n            <h2>Part II: PHP Web Services</h2>\n            <p>\n              With a server-side language like PHP, we can now write web services like the ones we\n              were clients of in JS. Most of our web services will make use GET requests.\n            </p>\n            <p>\n              To access GET parameters passed through the URL to a PHP web service, we can use the $_GET\n              \"superglobal\" array.\n            </p>\n            <pre><code>$name = $_GET[\"name\"];\necho \"Hello {$name}!\";</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>\n          <section>\n            <h2>Essential Ingredients for a PHP Web Service</h2>\n            <ul>\n              <li>1. Checking for missing query parameters with <code>isset</code></li>\n              <li>Specifying response header options with <code>header</code>:\n                <ul>\n                  <li>2. Content type of response output (text or JSON)</li>\n                  <li>3. Error code/messages for invalid requests (usually 400 Invalid Request)</li>\n                </ul>\n              </li>\n            </ul>\n          </section>\n          <section>\n            <h2>1. Handling Missing Query Parameters with <code>isset</code></h2>\n            <p>\n              To respond to GET requests made to our web services, we can't just assume the user\n              passes the correct query parameter. To check whether a parameter has been passed in\n              the URL, we use the <code>isset($val)</code> function, which returns true only if\n              <code>$val</code> is not NULL (in other words, it is a key found in the $_GET \n              array).\n            </p>\n            <pre><code>if (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>\n  \t\t\t\t<section>\n            <h2>Setting Content Type and Response Errors with <code>header</code></h2>\n            <p><code>header</code> is a PHP function to set different information in the response\n            header. In our web services, we will use it to: \n            </p>\n            <ol>\n              <li>Specify the content type of the response (e.g. <code>text/plain</code>)</li>\n              <li>Specify a 400 error status with status text \"Invalid Request\"</li>\n            </ol>\n  \t\t\t\t</section>\n          <section>\n            <h2>1. Using <code>header</code> to Set the Output Type</h2>\n            <p>Remember that the default output is HTML, which we don't want in our PHP web\n            services. For now, we're only using plain text as our response type (<strong>before any\n              echo/print statements</strong>) - later we will\n            learn how to output JSON responses:</p>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>\n          <section>\n            <h2>Inspecting Header Information in Networks Tab</h2>\n            <img src=\"hidden/hello-no-content.png\" class=\"w80 centered-figure\">\n            <p>This example shows the default Content-Type as text/html</p>\n          </section>\n          <section>\n            <h2>Inspecting Header Information in Networks Tab</h2>\n            <img src=\"hidden/hello-text.png\" class=\"w-80 centered-figure\">\n            <p>This example shows the result of setting Content-Type as text/plain</p>\n            <img src=\"hidden/hello-text-response.png\" class=\"w-80 centered-figure\">\n            <p>and the plain text in the response</p>\n          </section>\n          <section>\n            <h2>Using <code>header</code> to Set Error Response Codes</h2>\n            <p>Remember the 400 errors you've seen as a client (JS) of web services?\n            We also use the <code>header</code> to specify the response code to handle these.</p>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  header(\"HTTP/1.1 400 Invalid Request\");\n  # This error is also sent as plain text due to the first line\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>\n          <section>\n            <h3>Inspecting Header Information in Networks Tab</h3>\n            <img src=\"hidden/hello-error.png\" class=\"w-80 centered-figure\">\n            <p>This example shows the result of setting the 400 error (note the invalid name2\n            parameter sent by the client!)</p>\n            <img src=\"hidden/hello-error-response.png\" class=\"w-80 centered-figure\">\n            <p>and the plain text in the response (for a more user-friendly error message)</p>\n          </section>\n          <section>\n            <h2>Exercise: <samp>greeter.php</samp></h2>\n            <p>\n            Write a PHP web service <samp>greeter.php</samp> that takes two GET parameters, <samp>firstname</samp> and\n              <samp>lastname</samp> and outputs a little greeting (in plain text). The greeting should be in the\n              format of \"Hello, Firstname, L.!\" where only the first letter of the first name\n              capitalized and the last name is replaced with its capitalized first letter.\n            </p>\n            <p>\n              For example, a call to <code>greeter.php?firstname=aSH&amp;lastname=ketchum</code>\n              should output the message: \"Hello, Ash K.!\"\n            </p>\n            <p>\n            If the <samp>firstname</samp> parameter is missing, respond with a 400 error message \"Missing required\n            firstname parameter\". Otherwise if the <code>lastname</code> parameter is missing, the\n            printed greeting should be in the format \"Hello, Firstname!\". You can find a runnable example\n            <a href=\"../code/solution/greeter.php\" target=\"_blank\">here</a>.\n            </p>\n          </section>\n          <section>\n            <h2>Exercise: <samp>menu.php</samp></h2>\n            <p>\n              Write a PHP web service <samp>menu.php</samp> that defines arrays with a few of your favorite foods\n              (<samp>$drinks</samp>, <samp>$bakery</samp>, etc.). When passed a GET parameter\n              \"category\", this service should print as plain text a bracketed string\n              representation of the array of foods for the category.\n            </p>\n            <p>\n              For example, a call to <code>menu.php?category=drinks</code>\n              should output the array of drinks: \"[coffee, tea, water]\" if those are the drinks\n              defined in your web service.\n            </p>\n            <p>If <samp>category</samp> is not passed or the value for <samp>category</samp> does\n            not correspond to one of your categories, output a helpful 400 error message.</p>\n            <p>You can start with this <a href=\"../code/starter/menu.phps\" target=\"_blank\">menu.php</a> file which\n            includes the <code>to_string</code> function we did in lecture yesterday.</p>\n          </section>\n          <section>\n            <h2><samp>menu.php</samp>: Solution</h2>\n            <p>One solution can be found <a href=\"../code/solution/menu.phps\" target=\"_blank\">here</a>.</p>\n          </section>\n        </section>", "text": "Part II: PHP Web Services With a server-side language like PHP, we can now write web services like the ones we were clients of in JS. Most of our web services will make use GET requests. To access GET parameters passed through the URL to a PHP web service, we can use the $_GET \"superglobal\" array. $name = $_GET[\"name\"];echo \"Hello {$name}!\"; PHP Essential Ingredients for a PHP Web Service 1. Checking for missing query parameters with isset Specifying response header options with header: 2. Content type of response output (text or JSON) 3. Error code/messages for invalid requests (usually 400 Invalid Request) 1. Handling Missing Query Parameters with isset To respond to GET requests made to our web services, we can't just assume the user passes the correct query parameter. To check whether a parameter has been passed in the URL, we use the isset($val) function, which returns true only if $val is not NULL (in other words, it is a key found in the $_GET array). if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP \t\t\t\t Setting Content Type and Response Errors with header header is a PHP function to set different information in the response header. In our web services, we will use it to: Specify the content type of the response (e.g. text/plain) Specify a 400 error status with status text \"Invalid Request\" \t\t\t\t 1. Using header to Set the Output Type Remember that the default output is HTML, which we don't want in our PHP web services. For now, we're only using plain text as our response type (before any echo/print statements) - later we will learn how to output JSON responses: header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP Inspecting Header Information in Networks Tab This example shows the default Content-Type as text/html Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as text/plain and the plain text in the response Using header to Set Error Response Codes Remember the 400 errors you've seen as a client (JS) of web services? We also use the header to specify the response code to handle these. header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { header(\"HTTP/1.1 400 Invalid Request\"); # This error is also sent as plain text due to the first line echo \"Missing required name parameter!\";} PHP Inspecting Header Information in Networks Tab This example shows the result of setting the 400 error (note the invalid name2 parameter sent by the client!) and the plain text in the response (for a more user-friendly error message) Exercise: greeter.php Write a PHP web service greeter.php that takes two GET parameters, firstname and lastname and outputs a little greeting (in plain text). The greeting should be in the format of \"Hello, Firstname, L.!\" where only the first letter of the first name capitalized and the last name is replaced with its capitalized first letter. For example, a call to greeter.php?firstname=aSH&lastname=ketchum should output the message: \"Hello, Ash K.!\" If the firstname parameter is missing, respond with a 400 error message \"Missing required firstname parameter\". Otherwise if the lastname parameter is missing, the printed greeting should be in the format \"Hello, Firstname!\". You can find a runnable example here. Exercise: menu.php Write a PHP web service menu.php that defines arrays with a few of your favorite foods ($drinks, $bakery, etc.). When passed a GET parameter \"category\", this service should print as plain text a bracketed string representation of the array of foods for the category. For example, a call to menu.php?category=drinks should output the array of drinks: \"[coffee, tea, water]\" if those are the drinks defined in your web service. If category is not passed or the value for category does not correspond to one of your categories, output a helpful 400 error message. You can start with this menu.php file which includes the to_string function we did in lecture yesterday. menu.php: Solution One solution can be found here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-ii\">\n            <h2>Part II: PHP Web Services</h2>\n            <p>\n              With a server-side language like PHP, we can now write web services like the ones we\n              were clients of in JS. Most of our web services will make use GET requests.\n            </p>\n            <p>\n              To access GET parameters passed through the URL to a PHP web service, we can use the $_GET\n              \"superglobal\" array.\n            </p>\n            <pre><code>$name = $_GET[\"name\"];\necho \"Hello {$name}!\";</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Part II: PHP Web Services With a server-side language like PHP, we can now write web services like the ones we were clients of in JS. Most of our web services will make use GET requests. To access GET parameters passed through the URL to a PHP web service, we can use the $_GET \"superglobal\" array. $name = $_GET[\"name\"];echo \"Hello {$name}!\"; PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Essential Ingredients for a PHP Web Service</h2>\n            <ul>\n              <li>1. Checking for missing query parameters with <code>isset</code></li>\n              <li>Specifying response header options with <code>header</code>:\n                <ul>\n                  <li>2. Content type of response output (text or JSON)</li>\n                  <li>3. Error code/messages for invalid requests (usually 400 Invalid Request)</li>\n                </ul>\n              </li>\n            </ul>\n          </section>", "text": "Essential Ingredients for a PHP Web Service 1. Checking for missing query parameters with isset Specifying response header options with header: 2. Content type of response output (text or JSON) 3. Error code/messages for invalid requests (usually 400 Invalid Request)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>1. Handling Missing Query Parameters with <code>isset</code></h2>\n            <p>\n              To respond to GET requests made to our web services, we can't just assume the user\n              passes the correct query parameter. To check whether a parameter has been passed in\n              the URL, we use the <code>isset($val)</code> function, which returns true only if\n              <code>$val</code> is not NULL (in other words, it is a key found in the $_GET \n              array).\n            </p>\n            <pre><code>if (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "1. Handling Missing Query Parameters with isset To respond to GET requests made to our web services, we can't just assume the user passes the correct query parameter. To check whether a parameter has been passed in the URL, we use the isset($val) function, which returns true only if $val is not NULL (in other words, it is a key found in the $_GET array). if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Setting Content Type and Response Errors with <code>header</code></h2>\n            <p><code>header</code> is a PHP function to set different information in the response\n            header. In our web services, we will use it to: \n            </p>\n            <ol>\n              <li>Specify the content type of the response (e.g. <code>text/plain</code>)</li>\n              <li>Specify a 400 error status with status text \"Invalid Request\"</li>\n            </ol>\n  \t\t\t\t</section>", "text": "Setting Content Type and Response Errors with header header is a PHP function to set different information in the response header. In our web services, we will use it to: Specify the content type of the response (e.g. text/plain) Specify a 400 error status with status text \"Invalid Request\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>1. Using <code>header</code> to Set the Output Type</h2>\n            <p>Remember that the default output is HTML, which we don't want in our PHP web\n            services. For now, we're only using plain text as our response type (<strong>before any\n              echo/print statements</strong>) - later we will\n            learn how to output JSON responses:</p>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "1. Using header to Set the Output Type Remember that the default output is HTML, which we don't want in our PHP web services. For now, we're only using plain text as our response type (before any echo/print statements) - later we will learn how to output JSON responses: header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Inspecting Header Information in Networks Tab</h2>\n            <img src=\"hidden/hello-no-content.png\" class=\"w80 centered-figure\">\n            <p>This example shows the default Content-Type as text/html</p>\n          </section>", "text": "Inspecting Header Information in Networks Tab This example shows the default Content-Type as text/html", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Inspecting Header Information in Networks Tab</h2>\n            <img src=\"hidden/hello-text.png\" class=\"w-80 centered-figure\">\n            <p>This example shows the result of setting Content-Type as text/plain</p>\n            <img src=\"hidden/hello-text-response.png\" class=\"w-80 centered-figure\">\n            <p>and the plain text in the response</p>\n          </section>", "text": "Inspecting Header Information in Networks Tab This example shows the result of setting Content-Type as text/plain and the plain text in the response", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Using <code>header</code> to Set Error Response Codes</h2>\n            <p>Remember the 400 errors you've seen as a client (JS) of web services?\n            We also use the <code>header</code> to specify the response code to handle these.</p>\n            <pre><code>header(\"Content-type: text/plain\");\nif (isset($_GET[\"name\"])) {\n  $name = $_GET[\"name\"];\n  echo \"Hello {$name}!\";\n} else {\n  header(\"HTTP/1.1 400 Invalid Request\");\n  # This error is also sent as plain text due to the first line\n  echo \"Missing required name parameter!\";\n}</code></pre>\n            <p class=\"code-caption\">PHP</p>\n          </section>", "text": "Using header to Set Error Response Codes Remember the 400 errors you've seen as a client (JS) of web services? We also use the header to specify the response code to handle these. header(\"Content-type: text/plain\");if (isset($_GET[\"name\"])) { $name = $_GET[\"name\"]; echo \"Hello {$name}!\";} else { header(\"HTTP/1.1 400 Invalid Request\"); # This error is also sent as plain text due to the first line echo \"Missing required name parameter!\";} PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h3>Inspecting Header Information in Networks Tab</h3>\n            <img src=\"hidden/hello-error.png\" class=\"w-80 centered-figure\">\n            <p>This example shows the result of setting the 400 error (note the invalid name2\n            parameter sent by the client!)</p>\n            <img src=\"hidden/hello-error-response.png\" class=\"w-80 centered-figure\">\n            <p>and the plain text in the response (for a more user-friendly error message)</p>\n          </section>", "text": "Inspecting Header Information in Networks Tab This example shows the result of setting the 400 error (note the invalid name2 parameter sent by the client!) and the plain text in the response (for a more user-friendly error message)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Exercise: <samp>greeter.php</samp></h2>\n            <p>\n            Write a PHP web service <samp>greeter.php</samp> that takes two GET parameters, <samp>firstname</samp> and\n              <samp>lastname</samp> and outputs a little greeting (in plain text). The greeting should be in the\n              format of \"Hello, Firstname, L.!\" where only the first letter of the first name\n              capitalized and the last name is replaced with its capitalized first letter.\n            </p>\n            <p>\n              For example, a call to <code>greeter.php?firstname=aSH&amp;lastname=ketchum</code>\n              should output the message: \"Hello, Ash K.!\"\n            </p>\n            <p>\n            If the <samp>firstname</samp> parameter is missing, respond with a 400 error message \"Missing required\n            firstname parameter\". Otherwise if the <code>lastname</code> parameter is missing, the\n            printed greeting should be in the format \"Hello, Firstname!\". You can find a runnable example\n            <a href=\"../code/solution/greeter.php\" target=\"_blank\">here</a>.\n            </p>\n          </section>", "text": "Exercise: greeter.php Write a PHP web service greeter.php that takes two GET parameters, firstname and lastname and outputs a little greeting (in plain text). The greeting should be in the format of \"Hello, Firstname, L.!\" where only the first letter of the first name capitalized and the last name is replaced with its capitalized first letter. For example, a call to greeter.php?firstname=aSH&lastname=ketchum should output the message: \"Hello, Ash K.!\" If the firstname parameter is missing, respond with a 400 error message \"Missing required firstname parameter\". Otherwise if the lastname parameter is missing, the printed greeting should be in the format \"Hello, Firstname!\". You can find a runnable example here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2>Exercise: <samp>menu.php</samp></h2>\n            <p>\n              Write a PHP web service <samp>menu.php</samp> that defines arrays with a few of your favorite foods\n              (<samp>$drinks</samp>, <samp>$bakery</samp>, etc.). When passed a GET parameter\n              \"category\", this service should print as plain text a bracketed string\n              representation of the array of foods for the category.\n            </p>\n            <p>\n              For example, a call to <code>menu.php?category=drinks</code>\n              should output the array of drinks: \"[coffee, tea, water]\" if those are the drinks\n              defined in your web service.\n            </p>\n            <p>If <samp>category</samp> is not passed or the value for <samp>category</samp> does\n            not correspond to one of your categories, output a helpful 400 error message.</p>\n            <p>You can start with this <a href=\"../code/starter/menu.phps\" target=\"_blank\">menu.php</a> file which\n            includes the <code>to_string</code> function we did in lecture yesterday.</p>\n          </section>", "text": "Exercise: menu.php Write a PHP web service menu.php that defines arrays with a few of your favorite foods ($drinks, $bakery, etc.). When passed a GET parameter \"category\", this service should print as plain text a bracketed string representation of the array of foods for the category. For example, a call to menu.php?category=drinks should output the array of drinks: \"[coffee, tea, water]\" if those are the drinks defined in your web service. If category is not passed or the value for category does not correspond to one of your categories, output a helpful 400 error message. You can start with this menu.php file which includes the to_string function we did in lecture yesterday.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n            <h2><samp>menu.php</samp>: Solution</h2>\n            <p>One solution can be found <a href=\"../code/solution/menu.phps\" target=\"_blank\">here</a>.</p>\n          </section>", "text": "menu.php: Solution One solution can be found here.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section id=\"part-iii\">\n          <section>\n          <h2>Part III: Associative Arrays in PHP</h2>\n          <p>Associative arrays are arrays that have keys with assigned values (similar to Maps in\n          Java, dictionaries in Python, or JSON objects in JS)</p>\n          <pre><code class=\"hljs\" data-trim>$tas = array(\"AA\" =&gt; \"Daniel Hsu\", \"AB\" =&gt; \"Chao Hsu Lin\",\n             \"AC\" =&gt; \"Jack Venberg\", \"AD\" =&gt; \"Sandy Yang\",\n             \"AE\" =&gt; \"Ann Shan\", \"AF\" =&gt; \"Manchen Jin\",\n             \"AG\" =&gt; \"Hudson Gilmore\", \"AH\" =&gt; \"Manny Munoz\",\n             \"AI\" =&gt; \"Will Bigelow\", \"AJ\" =&gt; \"Zach Wu\");\n$tas[\"ZZ\"] = \"Jeremy Zhang\";\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>\n        <section>\n          <h3>Looping through key/values: the foreach loop</h3>\n          <p>A convenient way to loop over each element of an array without indices!</p>\n          <pre><code class=\"hljs\" data-trim>foreach ($array_name as $value) {\n  echo \"Found value: {$value}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>Alternatively, you can do this when you want to use both the key and value:</p>\n          <pre><code class=\"hljs\" data-trim>foreach ($array_name as $key =&gt; $value) {\n  echo \"The value for the key {$key} is {$value}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n        </section>\n        <section>\n          <h2>Exercise: <samp>tas.php</samp></h2>\n          <p>\n            Using the starter PHP file <a href=\"../code/starter/tas.phps\">tas.php</a> which defines the associative array of\n            TA's from the previous slide, implement the program as a PHP web service to associate\n            TA's with their section code (and vice versa).\n          </p>\n          <p>You can try the running solution <a href=\"../code/solution/tas.php\" target=\"_blank\">here</a> (note that\n          it handles case-insensitivity!)</p>\n        </section>\n        <section>\n          <h2><samp>tas.php</samp> (1/2)</h2>\n          <p>First, we'll handle one of two possible GET parameters in our web service.</p>\n          <p>\n            If a GET parameter <code>section</code> is passed, output the full name of the\n            TA who teaches that section (ignoring letter casing). If the section does not exist in\n            the $tas array, print an error message, \"Passed section code not found.\".\n          </p>\n          <p>\n            Hint: To check if a key $key exists in an associative array $arr, you can use:\n          </p>\n          <pre class=\"hljs\" data-trim><code>\nif (isset($arr[$key])) {\n  ...\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>When you're done, move on to Part 2 on the slide below.</p>\n        </section>\n        <section>\n          <h2><samp>tas.php</samp> Part 2</h2>\n          <p>\n            Next we'll handle a second option for our web service. If a GET parameter <code>name</code> is passed, output the section code\n            for the TA who the passed value as their first name (ignoring letter-casing). If no TA\n            has the first name, print an error message, \"No TA found with given first name\".\n          </p>\n        </section>\n        <section>\n          <h2><samp>tas.php</samp>: Solution</h2>\n          <p>You can find a solution <a href=\"../code/solution/tas.phps\" target=\"_blank\">here</a>\n          (with example PHP documentation)</p>\n        </section>\n        </section>", "text": "Part III: Associative Arrays in PHP Associative arrays are arrays that have keys with assigned values (similar to Maps in Java, dictionaries in Python, or JSON objects in JS) $tas = array(\"AA\" => \"Daniel Hsu\", \"AB\" => \"Chao Hsu Lin\", \"AC\" => \"Jack Venberg\", \"AD\" => \"Sandy Yang\", \"AE\" => \"Ann Shan\", \"AF\" => \"Manchen Jin\", \"AG\" => \"Hudson Gilmore\", \"AH\" => \"Manny Munoz\", \"AI\" => \"Will Bigelow\", \"AJ\" => \"Zach Wu\");$tas[\"ZZ\"] = \"Jeremy Zhang\"; PHP Looping through key/values: the foreach loop A convenient way to loop over each element of an array without indices! foreach ($array_name as $value) { echo \"Found value: {$value}\\n\";} PHP (example) Alternatively, you can do this when you want to use both the key and value: foreach ($array_name as $key => $value) { echo \"The value for the key {$key} is {$value}\\n\";} PHP (example) Exercise: tas.php Using the starter PHP file tas.php which defines the associative array of TA's from the previous slide, implement the program as a PHP web service to associate TA's with their section code (and vice versa). You can try the running solution here (note that it handles case-insensitivity!) tas.php (1/2) First, we'll handle one of two possible GET parameters in our web service. If a GET parameter section is passed, output the full name of the TA who teaches that section (ignoring letter casing). If the section does not exist in the $tas array, print an error message, \"Passed section code not found.\". Hint: To check if a key $key exists in an associative array $arr, you can use: if (isset($arr[$key])) { ...} PHP When you're done, move on to Part 2 on the slide below. tas.php Part 2 Next we'll handle a second option for our web service. If a GET parameter name is passed, output the section code for the TA who the passed value as their first name (ignoring letter-casing). If no TA has the first name, print an error message, \"No TA found with given first name\". tas.php: Solution You can find a solution here (with example PHP documentation)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2>Part III: Associative Arrays in PHP</h2>\n          <p>Associative arrays are arrays that have keys with assigned values (similar to Maps in\n          Java, dictionaries in Python, or JSON objects in JS)</p>\n          <pre><code class=\"hljs\" data-trim>$tas = array(\"AA\" =&gt; \"Daniel Hsu\", \"AB\" =&gt; \"Chao Hsu Lin\",\n             \"AC\" =&gt; \"Jack Venberg\", \"AD\" =&gt; \"Sandy Yang\",\n             \"AE\" =&gt; \"Ann Shan\", \"AF\" =&gt; \"Manchen Jin\",\n             \"AG\" =&gt; \"Hudson Gilmore\", \"AH\" =&gt; \"Manny Munoz\",\n             \"AI\" =&gt; \"Will Bigelow\", \"AJ\" =&gt; \"Zach Wu\");\n$tas[\"ZZ\"] = \"Jeremy Zhang\";\n</code></pre>\n          <p class=\"code-caption\">PHP</p>\n        </section>", "text": "Part III: Associative Arrays in PHP Associative arrays are arrays that have keys with assigned values (similar to Maps in Java, dictionaries in Python, or JSON objects in JS) $tas = array(\"AA\" => \"Daniel Hsu\", \"AB\" => \"Chao Hsu Lin\", \"AC\" => \"Jack Venberg\", \"AD\" => \"Sandy Yang\", \"AE\" => \"Ann Shan\", \"AF\" => \"Manchen Jin\", \"AG\" => \"Hudson Gilmore\", \"AH\" => \"Manny Munoz\", \"AI\" => \"Will Bigelow\", \"AJ\" => \"Zach Wu\");$tas[\"ZZ\"] = \"Jeremy Zhang\"; PHP", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h3>Looping through key/values: the foreach loop</h3>\n          <p>A convenient way to loop over each element of an array without indices!</p>\n          <pre><code class=\"hljs\" data-trim>foreach ($array_name as $value) {\n  echo \"Found value: {$value}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n          <p>Alternatively, you can do this when you want to use both the key and value:</p>\n          <pre><code class=\"hljs\" data-trim>foreach ($array_name as $key =&gt; $value) {\n  echo \"The value for the key {$key} is {$value}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP (example)</p>\n        </section>", "text": "Looping through key/values: the foreach loop A convenient way to loop over each element of an array without indices! foreach ($array_name as $value) { echo \"Found value: {$value}\\n\";} PHP (example) Alternatively, you can do this when you want to use both the key and value: foreach ($array_name as $key => $value) { echo \"The value for the key {$key} is {$value}\\n\";} PHP (example)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2>Exercise: <samp>tas.php</samp></h2>\n          <p>\n            Using the starter PHP file <a href=\"../code/starter/tas.phps\">tas.php</a> which defines the associative array of\n            TA's from the previous slide, implement the program as a PHP web service to associate\n            TA's with their section code (and vice versa).\n          </p>\n          <p>You can try the running solution <a href=\"../code/solution/tas.php\" target=\"_blank\">here</a> (note that\n          it handles case-insensitivity!)</p>\n        </section>", "text": "Exercise: tas.php Using the starter PHP file tas.php which defines the associative array of TA's from the previous slide, implement the program as a PHP web service to associate TA's with their section code (and vice versa). You can try the running solution here (note that it handles case-insensitivity!)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2><samp>tas.php</samp> (1/2)</h2>\n          <p>First, we'll handle one of two possible GET parameters in our web service.</p>\n          <p>\n            If a GET parameter <code>section</code> is passed, output the full name of the\n            TA who teaches that section (ignoring letter casing). If the section does not exist in\n            the $tas array, print an error message, \"Passed section code not found.\".\n          </p>\n          <p>\n            Hint: To check if a key $key exists in an associative array $arr, you can use:\n          </p>\n          <pre class=\"hljs\" data-trim><code>\nif (isset($arr[$key])) {\n  ...\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>When you're done, move on to Part 2 on the slide below.</p>\n        </section>", "text": "tas.php (1/2) First, we'll handle one of two possible GET parameters in our web service. If a GET parameter section is passed, output the full name of the TA who teaches that section (ignoring letter casing). If the section does not exist in the $tas array, print an error message, \"Passed section code not found.\". Hint: To check if a key $key exists in an associative array $arr, you can use: if (isset($arr[$key])) { ...} PHP When you're done, move on to Part 2 on the slide below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2><samp>tas.php</samp> Part 2</h2>\n          <p>\n            Next we'll handle a second option for our web service. If a GET parameter <code>name</code> is passed, output the section code\n            for the TA who the passed value as their first name (ignoring letter-casing). If no TA\n            has the first name, print an error message, \"No TA found with given first name\".\n          </p>\n        </section>", "text": "tas.php Part 2 Next we'll handle a second option for our web service. If a GET parameter name is passed, output the section code for the TA who the passed value as their first name (ignoring letter-casing). If no TA has the first name, print an error message, \"No TA found with given first name\".", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2><samp>tas.php</samp>: Solution</h2>\n          <p>You can find a solution <a href=\"../code/solution/tas.phps\" target=\"_blank\">here</a>\n          (with example PHP documentation)</p>\n        </section>", "text": "tas.php: Solution You can find a solution here (with example PHP documentation)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-tues/slides/"},
{"html": "<section>\n          <h2>Section 14: PHP File I/O and Web Services</h2>\n        </section>", "text": "Section 14: PHP File I/O and Web Services", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h3>Section Goals</h3>\n          <p>By the end of this section, you should be able to:</p>\n          <ul>\n            <li>Develop basic PHP debugging strategies (Remember to turn on\n              <a href=\"../../../resources/assets/servers/mamp-php-error-display.pdf\">PHP debugging in MAMP</a>,\n              ask your TA if you still need help)</li>\n            <li>Appropriately specify header information with content type (plain text or JSON) and\n              400 invalid request errors</li>\n            <li>Find and process files within a directory</li>\n            <li>Write a PHP web service that outputs a response based on different GET query parameters</li>\n            <li>Practice outputting JSON format</li>\n          </ul>\n        </section>", "text": "Section Goals By the end of this section, you should be able to: Develop basic PHP debugging strategies (Remember to turn on PHP debugging in MAMP, ask your TA if you still need help) Appropriately specify header information with content type (plain text or JSON) and 400 invalid request errors Find and process files within a directory Write a PHP web service that outputs a response based on different GET query parameters Practice outputting JSON format", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2>Setting Response Error Codes with PHP</h2>\n          <p>\n            Just like any other program you may write, it's important to cleanly handle errors\n            with your PHP web service implementation to help clients know what went wrong. Often,\n            errors come from mis-typing query parameters, passing in parameter values that don't\n            correspond to data that was found on the server, etc.\n          </p>\n          <p>\n            When something goes wrong based on a client's invalid request, we use the 400 error\n            code:\n          </p>\n          <pre><code data-trim>\nheader(\"HTTP/1.1 400 Invalid Request\");\nheader(\"Content-type: text/plain\");</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>\n            Note that in case of an error, you may still need to specify the\n            <samp>Content-Type</samp>.\n          </p>\n        </section>", "text": "Setting Response Error Codes with PHP Just like any other program you may write, it's important to cleanly handle errors with your PHP web service implementation to help clients know what went wrong. Often, errors come from mis-typing query parameters, passing in parameter values that don't correspond to data that was found on the server, etc. When something goes wrong based on a client's invalid request, we use the 400 error code: header(\"HTTP/1.1 400 Invalid Request\");header(\"Content-type: text/plain\"); PHP Note that in case of an error, you may still need to specify the Content-Type.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2>From Yesterday: Reading/Writing Files</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th><strong>contents of foo.txt</strong></th>\n              <th><strong>file(\"foo.txt\")</strong></th>\n              <th><strong>file_get_contents(\"foo.txt\")</strong></th>\n            </tr>\n            <tr>\n              <td>\n                <pre>Hello\n      how r u?\n\n      I'm fine\n\n                    </pre>\n                  </td>\n                  <td>\n                    <pre>array(\"Hello\\n\", #0\n      \"how r u?\\n\",    #1\n      \"\\n\",            #2\n      \"I'm fine\\n\"     #3\n)\n                    </pre>\n                  </td>\n                  <td>\n                    <pre>\"Hello\\n\n      how r u\\n    # a single\n      \\n           # string\n      I'm fine\\n\"\n                    </pre>\n                  </td>\n                </tr>\n              </table>\n              <p>\n                The <code>file</code> function returns lines of a file as an array (\\n at end of each).\n              </p>\n              <p><code>file_get_contents</code> returns entire contents of a file as a single string.</p>\n              <p><code>file_put_contents</code> writes a string into a file.</p>\n            </section>", "text": "From Yesterday: Reading/Writing Files contents of foo.txt file(\"foo.txt\") file_get_contents(\"foo.txt\") Hello how r u? I'm fine array(\"Hello\\n\", #0 \"how r u?\\n\", #1 \"\\n\", #2 \"I'm fine\\n\" #3) \"Hello\\n how r u\\n # a single \\n # string I'm fine\\n\" The file function returns lines of a file as an array (\\n at end of each). file_get_contents returns entire contents of a file as a single string. file_put_contents writes a string into a file.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n              <h2>Example: Reading/Writing an Entire File</h2>\n              <pre><code data-trim># reverse a file\n$text = file_get_contents(\"poem.txt\");\n$text = strrev($text);\nfile_put_contents(\"poem.txt\", $text);</code></pre>\n              <p class=\"code-caption\">PHP</p>\n              <p><code>file_get_contents</code> returns entire contents of a file as a string</p>\n              <ul>\n                <li>If the file doesn't exist, you will get a warning and an empty return string</li>\n              </ul>\n              <p><code>file_put_contents</code> writes a string into a file, <em>replacing its old\n                contents</em></p>\n              <ul>\n                <li>If the file doesn't exist, it will be created</li>\n              </ul>\n            </section>", "text": "Example: Reading/Writing an Entire File # reverse a file$text = file_get_contents(\"poem.txt\");$text = strrev($text);file_put_contents(\"poem.txt\", $text); PHP file_get_contents returns entire contents of a file as a string If the file doesn't exist, you will get a warning and an empty return string file_put_contents writes a string into a file, replacing its old contents If the file doesn't exist, it will be created", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n              <h2>Appending to a File</h2>\n              <pre><code data-trim># add a new line to a file\n$new_text = \"P.S. ILY, GTG TTYL!~\";\nfile_put_contents(\"poem.txt\", $new_text, FILE_APPEND);</code></pre>\n              <p class=\"code-caption\">PHP</p>\n              <table>\n                <tr>\n                  <th><strong>old contents</strong></th>\n                  <th><strong>new contents</strong></th>\n                </tr>\n                <tr>\n                  <td>\n                    Roses are red\n                    <br>\n                    Violets are blue\n                    <br>\n                    All my base\n                    <br>\n                    Are belong to you.\n                    <br>\n                  </td>\n                  <td>\n                    Roses are red\n                    <br>\n                    Violets are blue\n                    <br>\n                    All my base\n                    <br>\n                    Are belong to you.\n                    <br>\n                    P.S. ILY, GTG TTYL!~\n                  </td>\n                </tr>\n              </table>\n              <p><code>file_put_contents</code> can be called with an optional third parameter to append\n              (add to\n              end) rather than overwrite.</p>\n            </section>", "text": "Appending to a File # add a new line to a file$new_text = \"P.S. ILY, GTG TTYL!~\";file_put_contents(\"poem.txt\", $new_text, FILE_APPEND); PHP old contents new contents Roses are red Violets are blue All my base Are belong to you. Roses are red Violets are blue All my base Are belong to you. P.S. ILY, GTG TTYL!~ file_put_contents can be called with an optional third parameter to append (add to end) rather than overwrite.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2>Reading Directories</h2>\n          <table class=\"code-table\">\n            <tr>\n              <th>function</th>\n              <th>description</th>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_glob.asp\" target=\"_blank\">glob</a></td>\n              <td>returns an array of all file names that match a given pattern\n              (returns a file path and name, such as \"foo/bar/myfile.txt\")</td>\n            </tr>\n            <tr>\n              <td><a href=\"https://www.w3schools.com/php/func_filesystem_scandir.asp\" target=\"_blank\">scandir</a></td>\n              <td>\n                returns an array of all file names in a given directory\n                (returns just the file names, such as \"myfile.txt\")</td>\n            </tr>\n          </table>\n          <p>Can accept a general path with the * wildcard (more powerful).</p>\n        </section>", "text": "Reading Directories function description glob returns an array of all file names that match a given pattern (returns a file path and name, such as \"foo/bar/myfile.txt\") scandir returns an array of all file names in a given directory (returns just the file names, such as \"myfile.txt\") Can accept a general path with the * wildcard (more powerful).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2><code>glob</code> Example</h2>\n          <pre><code data-trim># reverse all poems in the poetry directory\n$poems = glob(\"poetry/poem*.dat\");\nforeach ($poems as $poemfile) {\n  $text = file_get_contents($poemfile);\n  file_put_contents($poemfile, strrev($text));\n  echo \"I just reversed \" . basename($poemfile) . \"\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <p>glob can match a wildcard path with the * character</p>\n          <ul>\n            <li><code>glob(\"foo/bar/*.doc\")</code> returns all .doc files in the foo/bar\n              subdirectory</li>\n            <li><code>glob(\"food*\")</code> returns all files whose names begin with \"food\"</li>\n          </ul>\n          <p>The <code>basename</code> function strips any leading directory from a file path</p>\n          <ul>\n            <li><code>basename(\"foo/bar/baz.txt\")</code> returns \"baz.txt\"</li>\n          </ul>\n        </section>", "text": "glob Example # reverse all poems in the poetry directory$poems = glob(\"poetry/poem*.dat\");foreach ($poems as $poemfile) { $text = file_get_contents($poemfile); file_put_contents($poemfile, strrev($text)); echo \"I just reversed \" . basename($poemfile) . \"\\n\";} PHP glob can match a wildcard path with the * character glob(\"foo/bar/*.doc\") returns all .doc files in the foo/bar subdirectory glob(\"food*\") returns all files whose names begin with \"food\" The basename function strips any leading directory from a file path basename(\"foo/bar/baz.txt\") returns \"baz.txt\"", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2><code>scandir</code> Example</h2>\n          <pre><code data-trim>foreach (scandir(\"taxes/old\") as $filename) {\n  echo \"I found a file: {$filename}\\n\";\n}</code></pre>\n          <p class=\"code-caption\">PHP</p>\n          <div class=\"output\">\n            <p>I found a file: .</p>\n            <p>I found a file: ..</p>\n            <p>I found a file: 2007_w2.pdf</p>\n            <p>I found a file: 2006_1099.doc</p>\n            <p class=\"output-caption\">output</p>\n          </div>\n          <p><code>scandir</code> includes current directory (\".\") and parent (\"..\") in the array.</p>\n          <p>Don't need <code>basename</code> with <code>scandir</code>; returns file names only\n          without directory</p>\n        </section>", "text": "scandir Example foreach (scandir(\"taxes/old\") as $filename) { echo \"I found a file: {$filename}\\n\";} PHP I found a file: . I found a file: .. I found a file: 2007_w2.pdf I found a file: 2006_1099.doc output scandir includes current directory (\".\") and parent (\"..\") in the array. Don't need basename with scandir; returns file names only without directory", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h3><code>scandir</code> vs. <code>glob</code> Practice</h3>\n          <p>\n            For more practice, you can try\n            <a href=\"https://www.codestepbystep.com/problem/view/php/fileio/scandir_vs_glob0\">scandir_vs_glob0</a>\n            on CodeStepByStep!\n          </p>\n        </section>", "text": "scandir vs. glob Practice For more practice, you can try scandir_vs_glob0 on CodeStepByStep!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n\t\t\t\t  <section>\n\t\t\t\t\t\t  <h2>Pair Programming Opportunity</h2>\n  <p>In this lab, we are encouraging students to work with a peer (e.g. your neighbor) to discuss\n  and work through writing some neat PHP web services. If you'd like to try your\n     hand at a challenging but popular pair programming technique known as \"driver and navigator\", read the slide below and try\n     it out on one or both of the following exercises - ask your neighbors if they are interested!</p>\n\t\t\t\t\t</section>\n          <section>\n<h2>What is Pair Programming?</h2>\n  <p>A challenging programming technique that involves two people working together\n     on a single computer. It provides an opportunity to explore new problem solving approaches,\n     especially when learning a new language.</p>\n  <table class=\"code-table\">\n    <tbody><tr>\n      <th>Role</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Driver</td>\n      <td>The person at the keyboard that takes instructions from the navigator</td>\n    </tr>\n    <tr>\n      <td>Navigator</td>\n      <td>The person providing instruction (code and text editor commands) to the driver</td>\n    </tr>\n  </tbody></table>\n          </section>\n          <section>\n            <h2>\"Driver\" vs. \"Navigator\"</h2>\n            <p class=\"font-20pt\">In order to have an effective pair programming experience, it's good to refer to\n            the details of these roles (which in practice, alternate between tasks)</p>\n            <h4 style=\"margin-bottom: 0\">Drivers</h4>\n  <ul class=\"font-20pt\">\n    <li>Your main objective is simply to follow your navigator's instructions.</li>\n    <li>If you don't understand what a navigator is telling you, ask questions. However,\n        if you don't understand why they're telling you something, wait until you're done\n        with that section of code to ask questions.</li>\n  </ul>\n            <h4 style=\"margin-bottom: 0\">Navigators</h4>\n  <ul class=\"font-20pt\">\n    <li>Communicate your ideas in a meaningful way that the driver can understand.</li>\n    <li>Make sure that the driver is only ever given 1 command to implement at a time.</li>\n  </ul>\n  <p class=\"font-20pt\">If you're a navigator and you don't know what to do next, or you're a driver and you have an idea you'd like to try implementing, then switch roles with your partner.</p>\n          </section>\n        </section>", "text": "Pair Programming Opportunity In this lab, we are encouraging students to work with a peer (e.g. your neighbor) to discuss and work through writing some neat PHP web services. If you'd like to try your hand at a challenging but popular pair programming technique known as \"driver and navigator\", read the slide below and try it out on one or both of the following exercises - ask your neighbors if they are interested!\t\t\t\t\t What is Pair Programming? A challenging programming technique that involves two people working together on a single computer. It provides an opportunity to explore new problem solving approaches, especially when learning a new language. Role Description Driver The person at the keyboard that takes instructions from the navigator Navigator The person providing instruction (code and text editor commands) to the driver \"Driver\" vs. \"Navigator\" In order to have an effective pair programming experience, it's good to refer to the details of these roles (which in practice, alternate between tasks) Drivers Your main objective is simply to follow your navigator's instructions. If you don't understand what a navigator is telling you, ask questions. However, if you don't understand why they're telling you something, wait until you're done with that section of code to ask questions. Navigators Communicate your ideas in a meaningful way that the driver can understand. Make sure that the driver is only ever given 1 command to implement at a time. If you're a navigator and you don't know what to do next, or you're a driver and you have an idea you'd like to try implementing, then switch roles with your partner.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n\t\t\t\t\t\t  <h2>Pair Programming Opportunity</h2>\n  <p>In this lab, we are encouraging students to work with a peer (e.g. your neighbor) to discuss\n  and work through writing some neat PHP web services. If you'd like to try your\n     hand at a challenging but popular pair programming technique known as \"driver and navigator\", read the slide below and try\n     it out on one or both of the following exercises - ask your neighbors if they are interested!</p>\n\t\t\t\t\t</section>", "text": "Pair Programming Opportunity In this lab, we are encouraging students to work with a peer (e.g. your neighbor) to discuss and work through writing some neat PHP web services. If you'd like to try your hand at a challenging but popular pair programming technique known as \"driver and navigator\", read the slide below and try it out on one or both of the following exercises - ask your neighbors if they are interested!", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n<h2>What is Pair Programming?</h2>\n  <p>A challenging programming technique that involves two people working together\n     on a single computer. It provides an opportunity to explore new problem solving approaches,\n     especially when learning a new language.</p>\n  <table class=\"code-table\">\n    <tbody><tr>\n      <th>Role</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Driver</td>\n      <td>The person at the keyboard that takes instructions from the navigator</td>\n    </tr>\n    <tr>\n      <td>Navigator</td>\n      <td>The person providing instruction (code and text editor commands) to the driver</td>\n    </tr>\n  </tbody></table>\n          </section>", "text": "What is Pair Programming? A challenging programming technique that involves two people working together on a single computer. It provides an opportunity to explore new problem solving approaches, especially when learning a new language. Role Description Driver The person at the keyboard that takes instructions from the navigator Navigator The person providing instruction (code and text editor commands) to the driver", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>\"Driver\" vs. \"Navigator\"</h2>\n            <p class=\"font-20pt\">In order to have an effective pair programming experience, it's good to refer to\n            the details of these roles (which in practice, alternate between tasks)</p>\n            <h4 style=\"margin-bottom: 0\">Drivers</h4>\n  <ul class=\"font-20pt\">\n    <li>Your main objective is simply to follow your navigator's instructions.</li>\n    <li>If you don't understand what a navigator is telling you, ask questions. However,\n        if you don't understand why they're telling you something, wait until you're done\n        with that section of code to ask questions.</li>\n  </ul>\n            <h4 style=\"margin-bottom: 0\">Navigators</h4>\n  <ul class=\"font-20pt\">\n    <li>Communicate your ideas in a meaningful way that the driver can understand.</li>\n    <li>Make sure that the driver is only ever given 1 command to implement at a time.</li>\n  </ul>\n  <p class=\"font-20pt\">If you're a navigator and you don't know what to do next, or you're a driver and you have an idea you'd like to try implementing, then switch roles with your partner.</p>\n          </section>", "text": "\"Driver\" vs. \"Navigator\" In order to have an effective pair programming experience, it's good to refer to the details of these roles (which in practice, alternate between tasks) Drivers Your main objective is simply to follow your navigator's instructions. If you don't understand what a navigator is telling you, ask questions. However, if you don't understand why they're telling you something, wait until you're done with that section of code to ask questions. Navigators Communicate your ideas in a meaningful way that the driver can understand. Make sure that the driver is only ever given 1 command to implement at a time. If you're a navigator and you don't know what to do next, or you're a driver and you have an idea you'd like to try implementing, then switch roles with your partner.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 1: Recipe Generator</h2>\n            <p>\n              It's always fun to try new things. When it comes to cooking, sometimes it's hard to\n              find that spark of inspiration. In this exercise, you'll use folder and file processing to\n              create a web service that takes in a single parameter <code>name</code> and outputs a\n              randomly-generated recipe idea based on the letters in the name.\n            </p>\n            <p>\n              The first letter of the name will correspond to the first letter of the recipe name,\n              and the rest of the letters of the name will each correspond to a randomly-generated\n              ingredient for that recipe. The final recipe will be output in plain text.\n            </p>\n            <p>Go \"down\" to work through the slides specific to this exercise.</p>\n          </section>\n          <section>\n            <h2>Exercise 1: Provided Files</h2>\n            <p>\n              Download and unzip the provided <code><a href=\"../code/starter/recipe-generator.zip\">recipe-generator.zip</a></code>.\n              In this folder, there are two sub-directories, <code>foods</code> and\n              <code>ingredients</code>. Each contains exactly 26 txt files each corresponding to a\n              lower-cased letter of the English alphabet. <code>foods</code> includes txt files listing recipe\n              names, and <code>ingredients</code> includes txt files include ingredients.\n            </p>\n            <p>\n              There is\n              also a starting <code>recipe-generator.php</code> provided with comments for you to\n              fill in as well as two helper functions. In this exercise, you will work through the\n              steps outlined in those comments, but there are more details in the slides below.\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 1: Example file in <code>foods</code></h2>\n            <pre><code data-trim>\nMacaroni\nManicotti\nMantou\nMarmalade\nMasala\nMilkshake\nMinestrone Soup\nMochi\nMooncake\nMuffin</code></pre>\n            <p class=\"code-caption\">foods/m.txt contents</p>\n          </section>\n          <section>\n            <h2>Exercise 1: Example file in <code>ingredients</code></h2>\n            <pre><code class=\"no-synax-highlight\" data-trim>\n1 cup rolled Oats\n1 Okra\n1 Olive\n1 Orange\n1 tsp Oregano\n1 Oreo\n1 box of Oreos\n1 cup Onions\n1 cup Orzo\n1 Oyster</code></pre>\n            <p class=\"code-caption\">ingredients/o.txt contents</p>\n            <p>\n              Note that each ingredient file contains a list of possible ingredients starting with the corresponding letter.\n              To help generate a \"reasonable\" recipe, each ingredient option includes a unit (e.g. for the ingredient \"Oreo\"\n              in <samp>ingredients/o.txt</samp>, it may be listed as \"1 Oreo\", but there is also an\n              option for \"1 box of Oreos\" for extra oreo-ness in your recipe). Your code should not\n              depend on this format though, it just makes the output nicer.\n            </p>\n          </section>\n            <section>\n              <h2>Exercise 1: Example Output</h2>\n              <p>\n                The following is an example (random) output for a request to\n                <br>\n                <code>recipe-generator.php?name=Mowgli</code>:\n              </p>\n              <pre><code class=\"no-syntax-highlight\" data-trim>\nMowgli's Muffin\nDirections:\nIn a bowl, mix:\n  1 Oreo\n  1 gallon of Water\n  1 oz of Green peas\n  1 Lentil\n  1 Ice cube\n\nCook for 6 minutes and serve!\n              </code></pre>\n              <p class=\"code-caption\">Example output (plain text)</p>\n          </section>\n          <section>\n            <h2>Exercise 1: Generating and Outputting the Recipe</h2>\n            <p>\n              Now that we know the format of the files we have in the two directories, let's\n              implement the recipe generator. Make sure to write your\n              <code>recipe-generator.php</code> file in the same directory as the two\n              subdirectories. Follow the steps in the provided starting code to finish the web\n              service. Hints and expected behavior of each step are included below (remaining steps\n              included in the following two slides below).\n            </p>\n            <p>\n              In Step 1, check for a valid GET parameter, otherwise output a 400 error with a helpful\n              error message of your choice.\n            </p>\n            <p>\n              In Step 2, set the appropriate <code>header</code> type for the web service before\n              printing your output. This is used to specify what type of data your web service is\n              outputting (in this case, plain text).\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 1: Steps 3 and 4</h2>\n            <p>\n              In Step 3, generate a random recipe name based on the first letter of the passed name and\n              print the recipe name as the first line. Remember that you'll only need to use\n              <code>foods/</code> in this step (the recipe name should be in the format of\n              <code>&lt;name&gt;'s &lt;foodname&gt;</code>, replace &lt;name&gt; with the value\n              of the passed parameter, and &lt;foodname&gt; with the randomly-chosen food name).\n            </p>\n            <p>\n              In Step 4,\n              output the intermediate text, \"Directions:\" and \"In a bowl, mix:\", each on new\n              lines, to introduce the ingredients. We have provided a helper function for you\n              for you to use.\n            </p>\n            </section>\n            <section>\n              <h2>Exercise 1: Steps 5 and 6</h2>\n              <p>\n                In Step 5, generate a list of randomly-chosen ingredients based on the rest of the letters in\n                the name. Each ingredient should be printed on a new line, prepending \"  \"\n                (two spaces) for indentation. Remember that you'll only need to use <code>ingredients/</code> in this\n                step.\n              </p>\n              <p>\n                In Step 6, output the final line of the recipe, indicating how long to cook before serving. A\n                recipe should be listed to cook for X minutes, where X is the length of the name\n                parameter.\n              </p>\n            </section>\n            <section>\n              <h2>Exercise 1: Solution</h2>\n              <p><a href=\"../code/solution/recipe-generator/recipe-generator.phps\">Source</a> (PHP)</p>\n              <p><a href=\"../code/solution/recipe-generator/recipe-generator.php\">Running Version</a> (PHP)</p>\n            </section>\n        </section>", "text": "Exercise 1: Recipe Generator It's always fun to try new things. When it comes to cooking, sometimes it's hard to find that spark of inspiration. In this exercise, you'll use folder and file processing to create a web service that takes in a single parameter name and outputs a randomly-generated recipe idea based on the letters in the name. The first letter of the name will correspond to the first letter of the recipe name, and the rest of the letters of the name will each correspond to a randomly-generated ingredient for that recipe. The final recipe will be output in plain text. Go \"down\" to work through the slides specific to this exercise. Exercise 1: Provided Files Download and unzip the provided recipe-generator.zip. In this folder, there are two sub-directories, foods and ingredients. Each contains exactly 26 txt files each corresponding to a lower-cased letter of the English alphabet. foods includes txt files listing recipe names, and ingredients includes txt files include ingredients. There is also a starting recipe-generator.php provided with comments for you to fill in as well as two helper functions. In this exercise, you will work through the steps outlined in those comments, but there are more details in the slides below. Exercise 1: Example file in foods MacaroniManicottiMantouMarmaladeMasalaMilkshakeMinestrone SoupMochiMooncakeMuffin foods/m.txt contents Exercise 1: Example file in ingredients 1 cup rolled Oats1 Okra1 Olive1 Orange1 tsp Oregano1 Oreo1 box of Oreos1 cup Onions1 cup Orzo1 Oyster ingredients/o.txt contents Note that each ingredient file contains a list of possible ingredients starting with the corresponding letter. To help generate a \"reasonable\" recipe, each ingredient option includes a unit (e.g. for the ingredient \"Oreo\" in ingredients/o.txt, it may be listed as \"1 Oreo\", but there is also an option for \"1 box of Oreos\" for extra oreo-ness in your recipe). Your code should not depend on this format though, it just makes the output nicer. Exercise 1: Example Output The following is an example (random) output for a request to recipe-generator.php?name=Mowgli: Mowgli's MuffinDirections:In a bowl, mix: 1 Oreo 1 gallon of Water 1 oz of Green peas 1 Lentil 1 Ice cubeCook for 6 minutes and serve! Example output (plain text) Exercise 1: Generating and Outputting the Recipe Now that we know the format of the files we have in the two directories, let's implement the recipe generator. Make sure to write your recipe-generator.php file in the same directory as the two subdirectories. Follow the steps in the provided starting code to finish the web service. Hints and expected behavior of each step are included below (remaining steps included in the following two slides below). In Step 1, check for a valid GET parameter, otherwise output a 400 error with a helpful error message of your choice. In Step 2, set the appropriate header type for the web service before printing your output. This is used to specify what type of data your web service is outputting (in this case, plain text). Exercise 1: Steps 3 and 4 In Step 3, generate a random recipe name based on the first letter of the passed name and print the recipe name as the first line. Remember that you'll only need to use foods/ in this step (the recipe name should be in the format of <name>'s <foodname>, replace <name> with the value of the passed parameter, and <foodname> with the randomly-chosen food name). In Step 4, output the intermediate text, \"Directions:\" and \"In a bowl, mix:\", each on new lines, to introduce the ingredients. We have provided a helper function for you for you to use. Exercise 1: Steps 5 and 6 In Step 5, generate a list of randomly-chosen ingredients based on the rest of the letters in the name. Each ingredient should be printed on a new line, prepending \" \" (two spaces) for indentation. Remember that you'll only need to use ingredients/ in this step. In Step 6, output the final line of the recipe, indicating how long to cook before serving. A recipe should be listed to cook for X minutes, where X is the length of the name parameter. Exercise 1: Solution Source (PHP) Running Version (PHP)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Recipe Generator</h2>\n            <p>\n              It's always fun to try new things. When it comes to cooking, sometimes it's hard to\n              find that spark of inspiration. In this exercise, you'll use folder and file processing to\n              create a web service that takes in a single parameter <code>name</code> and outputs a\n              randomly-generated recipe idea based on the letters in the name.\n            </p>\n            <p>\n              The first letter of the name will correspond to the first letter of the recipe name,\n              and the rest of the letters of the name will each correspond to a randomly-generated\n              ingredient for that recipe. The final recipe will be output in plain text.\n            </p>\n            <p>Go \"down\" to work through the slides specific to this exercise.</p>\n          </section>", "text": "Exercise 1: Recipe Generator It's always fun to try new things. When it comes to cooking, sometimes it's hard to find that spark of inspiration. In this exercise, you'll use folder and file processing to create a web service that takes in a single parameter name and outputs a randomly-generated recipe idea based on the letters in the name. The first letter of the name will correspond to the first letter of the recipe name, and the rest of the letters of the name will each correspond to a randomly-generated ingredient for that recipe. The final recipe will be output in plain text. Go \"down\" to work through the slides specific to this exercise.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Provided Files</h2>\n            <p>\n              Download and unzip the provided <code><a href=\"../code/starter/recipe-generator.zip\">recipe-generator.zip</a></code>.\n              In this folder, there are two sub-directories, <code>foods</code> and\n              <code>ingredients</code>. Each contains exactly 26 txt files each corresponding to a\n              lower-cased letter of the English alphabet. <code>foods</code> includes txt files listing recipe\n              names, and <code>ingredients</code> includes txt files include ingredients.\n            </p>\n            <p>\n              There is\n              also a starting <code>recipe-generator.php</code> provided with comments for you to\n              fill in as well as two helper functions. In this exercise, you will work through the\n              steps outlined in those comments, but there are more details in the slides below.\n            </p>\n          </section>", "text": "Exercise 1: Provided Files Download and unzip the provided recipe-generator.zip. In this folder, there are two sub-directories, foods and ingredients. Each contains exactly 26 txt files each corresponding to a lower-cased letter of the English alphabet. foods includes txt files listing recipe names, and ingredients includes txt files include ingredients. There is also a starting recipe-generator.php provided with comments for you to fill in as well as two helper functions. In this exercise, you will work through the steps outlined in those comments, but there are more details in the slides below.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Example file in <code>foods</code></h2>\n            <pre><code data-trim>\nMacaroni\nManicotti\nMantou\nMarmalade\nMasala\nMilkshake\nMinestrone Soup\nMochi\nMooncake\nMuffin</code></pre>\n            <p class=\"code-caption\">foods/m.txt contents</p>\n          </section>", "text": "Exercise 1: Example file in foods MacaroniManicottiMantouMarmaladeMasalaMilkshakeMinestrone SoupMochiMooncakeMuffin foods/m.txt contents", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Example file in <code>ingredients</code></h2>\n            <pre><code class=\"no-synax-highlight\" data-trim>\n1 cup rolled Oats\n1 Okra\n1 Olive\n1 Orange\n1 tsp Oregano\n1 Oreo\n1 box of Oreos\n1 cup Onions\n1 cup Orzo\n1 Oyster</code></pre>\n            <p class=\"code-caption\">ingredients/o.txt contents</p>\n            <p>\n              Note that each ingredient file contains a list of possible ingredients starting with the corresponding letter.\n              To help generate a \"reasonable\" recipe, each ingredient option includes a unit (e.g. for the ingredient \"Oreo\"\n              in <samp>ingredients/o.txt</samp>, it may be listed as \"1 Oreo\", but there is also an\n              option for \"1 box of Oreos\" for extra oreo-ness in your recipe). Your code should not\n              depend on this format though, it just makes the output nicer.\n            </p>\n          </section>", "text": "Exercise 1: Example file in ingredients 1 cup rolled Oats1 Okra1 Olive1 Orange1 tsp Oregano1 Oreo1 box of Oreos1 cup Onions1 cup Orzo1 Oyster ingredients/o.txt contents Note that each ingredient file contains a list of possible ingredients starting with the corresponding letter. To help generate a \"reasonable\" recipe, each ingredient option includes a unit (e.g. for the ingredient \"Oreo\" in ingredients/o.txt, it may be listed as \"1 Oreo\", but there is also an option for \"1 box of Oreos\" for extra oreo-ness in your recipe). Your code should not depend on this format though, it just makes the output nicer.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n              <h2>Exercise 1: Example Output</h2>\n              <p>\n                The following is an example (random) output for a request to\n                <br>\n                <code>recipe-generator.php?name=Mowgli</code>:\n              </p>\n              <pre><code class=\"no-syntax-highlight\" data-trim>\nMowgli's Muffin\nDirections:\nIn a bowl, mix:\n  1 Oreo\n  1 gallon of Water\n  1 oz of Green peas\n  1 Lentil\n  1 Ice cube\n\nCook for 6 minutes and serve!\n              </code></pre>\n              <p class=\"code-caption\">Example output (plain text)</p>\n          </section>", "text": "Exercise 1: Example Output The following is an example (random) output for a request to recipe-generator.php?name=Mowgli: Mowgli's MuffinDirections:In a bowl, mix: 1 Oreo 1 gallon of Water 1 oz of Green peas 1 Lentil 1 Ice cubeCook for 6 minutes and serve! Example output (plain text)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Generating and Outputting the Recipe</h2>\n            <p>\n              Now that we know the format of the files we have in the two directories, let's\n              implement the recipe generator. Make sure to write your\n              <code>recipe-generator.php</code> file in the same directory as the two\n              subdirectories. Follow the steps in the provided starting code to finish the web\n              service. Hints and expected behavior of each step are included below (remaining steps\n              included in the following two slides below).\n            </p>\n            <p>\n              In Step 1, check for a valid GET parameter, otherwise output a 400 error with a helpful\n              error message of your choice.\n            </p>\n            <p>\n              In Step 2, set the appropriate <code>header</code> type for the web service before\n              printing your output. This is used to specify what type of data your web service is\n              outputting (in this case, plain text).\n            </p>\n          </section>", "text": "Exercise 1: Generating and Outputting the Recipe Now that we know the format of the files we have in the two directories, let's implement the recipe generator. Make sure to write your recipe-generator.php file in the same directory as the two subdirectories. Follow the steps in the provided starting code to finish the web service. Hints and expected behavior of each step are included below (remaining steps included in the following two slides below). In Step 1, check for a valid GET parameter, otherwise output a 400 error with a helpful error message of your choice. In Step 2, set the appropriate header type for the web service before printing your output. This is used to specify what type of data your web service is outputting (in this case, plain text).", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 1: Steps 3 and 4</h2>\n            <p>\n              In Step 3, generate a random recipe name based on the first letter of the passed name and\n              print the recipe name as the first line. Remember that you'll only need to use\n              <code>foods/</code> in this step (the recipe name should be in the format of\n              <code>&lt;name&gt;'s &lt;foodname&gt;</code>, replace &lt;name&gt; with the value\n              of the passed parameter, and &lt;foodname&gt; with the randomly-chosen food name).\n            </p>\n            <p>\n              In Step 4,\n              output the intermediate text, \"Directions:\" and \"In a bowl, mix:\", each on new\n              lines, to introduce the ingredients. We have provided a helper function for you\n              for you to use.\n            </p>\n            </section>", "text": "Exercise 1: Steps 3 and 4 In Step 3, generate a random recipe name based on the first letter of the passed name and print the recipe name as the first line. Remember that you'll only need to use foods/ in this step (the recipe name should be in the format of <name>'s <foodname>, replace <name> with the value of the passed parameter, and <foodname> with the randomly-chosen food name). In Step 4, output the intermediate text, \"Directions:\" and \"In a bowl, mix:\", each on new lines, to introduce the ingredients. We have provided a helper function for you for you to use.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n              <h2>Exercise 1: Steps 5 and 6</h2>\n              <p>\n                In Step 5, generate a list of randomly-chosen ingredients based on the rest of the letters in\n                the name. Each ingredient should be printed on a new line, prepending \"  \"\n                (two spaces) for indentation. Remember that you'll only need to use <code>ingredients/</code> in this\n                step.\n              </p>\n              <p>\n                In Step 6, output the final line of the recipe, indicating how long to cook before serving. A\n                recipe should be listed to cook for X minutes, where X is the length of the name\n                parameter.\n              </p>\n            </section>", "text": "Exercise 1: Steps 5 and 6 In Step 5, generate a list of randomly-chosen ingredients based on the rest of the letters in the name. Each ingredient should be printed on a new line, prepending \" \" (two spaces) for indentation. Remember that you'll only need to use ingredients/ in this step. In Step 6, output the final line of the recipe, indicating how long to cook before serving. A recipe should be listed to cook for X minutes, where X is the length of the name parameter.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n              <h2>Exercise 1: Solution</h2>\n              <p><a href=\"../code/solution/recipe-generator/recipe-generator.phps\">Source</a> (PHP)</p>\n              <p><a href=\"../code/solution/recipe-generator/recipe-generator.php\">Running Version</a> (PHP)</p>\n            </section>", "text": "Exercise 1: Solution Source (PHP) Running Version (PHP)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <h2>Exercise 2: Modifying JSONTest</h2>\n          <p>\n            JSONTest is a simple example from lecture that demonstrates how an\n            API can output JSON vs plain text. Let's modify it to learn how PHP arrays\n            relate to JSON output.\n          </p>\n          <ul class=\"font-16pt\">\n            <li>\n              Download <a href=\"../../../lectures/lec19-php-iii/examples/jsontest.zip\">jsontest.zip</a>.\n              Unzip the folder in your web server directory.\n            </li>\n            <li>\n              Browse to <code>localhost/&lt;web-dir&gt;/jsontest/jsontest-solution.php</code>  or\n                <code>localhost:8888/&lt;web-dir&gt;/jsontest/jsontest-solution.php</code> to ensure\n              its working\n            </li>\n            <li>\n              Use Network tab to view the headers and response from jsontest-solution.php.\n              See <a href=\"../../../lectures/lec19-php-iii/#/8/1\">this page</a> what this might look like.\n            </li>\n            <li>\n              Write your own version of jsontest.php using the comments as a guide (jsontest-solution.php\n              has hints). You can choose to use the same\n              structure for the <code>$output</code> array, or change it to\n              something else (maybe something you might use for your CP4!)\n            </li>\n            <li>Test your API by navigating through the browser to jsontest.php - is the JSON output you expect?\n            </li>\n            <li>\n              Now modify jsontest.js to accomodate any changes you made in the structure of the\n              JSON output you created from jsontest.php.\n            </li>\n          </ul>\n        </section>", "text": "Exercise 2: Modifying JSONTest JSONTest is a simple example from lecture that demonstrates how an API can output JSON vs plain text. Let's modify it to learn how PHP arrays relate to JSON output. Download jsontest.zip. Unzip the folder in your web server directory. Browse to localhost/<web-dir>/jsontest/jsontest-solution.php or localhost:8888/<web-dir>/jsontest/jsontest-solution.php to ensure its working Use Network tab to view the headers and response from jsontest-solution.php. See this page what this might look like. Write your own version of jsontest.php using the comments as a guide (jsontest-solution.php has hints). You can choose to use the same structure for the $output array, or change it to something else (maybe something you might use for your CP4!) Test your API by navigating through the browser to jsontest.php - is the JSON output you expect? Now modify jsontest.js to accomodate any changes you made in the structure of the JSON output you created from jsontest.php.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n          <section>\n            <h2>Exercise 3: Gallery of Thrones</h2>\n            <p>\n              Given a directory of character pictures (<a href=\"../code/starter/got.zip\">got.zip</a>), write a PHP web service which vends\n              these photos. These pictures represent characters in one of three \"houses\" (or\n              families) in the Game of Thrones series: House Lannister, House Stark, and House\n              Targaryen.\n            </p>\n            <p>\n              There are two parts in this exercise. The first outputs all image names in the images\n              folder, and the second filters the output based on an optional query parameter\n              (<code>house</code>).\n            </p>\n            <p>Go \"down\" to work through the slides specific to this exercise.</p>\n          </section>\n          <section>\n            <h2>Exercise 2: Part 1 (Default Output)</h2>\n            <p>\n              First, write your web service such that it simply prints out (in plain text) a list of\n              image names in the provided <code>images</code> folder.\n              When the PHP page is executed, all of the file names in the <code>images</code>\n              directory should be output, each on its own line.\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<strong>Expected Output:</strong>\n            </p>\n            <pre><code data-trim class=\"medium-small-font hljs\">images/lannister1.jpg\nimages/lannister2.jpg\nimages/lannister3.jpg\nimages/lannister4.jpg\nimages/stark1.jpg\nimages/stark2.jpg\nimages/stark3.jpg\nimages/stark4.jpg\nimages/stark5.jpg\nimages/targaryen2.jpg\nimages/targaryen3.jpg\nimages/targaryen4.jpg\n</code></pre>\n          <p class=\"code-caption\">Expected output (plain text)</p>\n          </section>\n\n          <section>\n            <h2>Exercise 2: Handling an Optional Query Parameter</h2>\n            <p>\n              After implementing the behavior when no query parameter is passed, add a query parameter handler to let a user filter the\n              outputted images based on a house name. There are three three houses (\"lannister\", \"stark\", or \"targaryen\")\n              that correspond to images in the images folder. If a value for <code>house</code> is\n              included as a query parameter, your code should\n              print only the images which are related to a specific house.\n            </p>\n\n            <p>\n              Print out the list of files including the <code>images/</code> directory. This is loosely based on the assumption that your\n              PHP webservice and your HTML/CSS/JS application would be served out of the same directory where <code>images/</code> sits.\n            </p>\n          </section>\n          <section>\n            <h2>Exercise 2: Solution</h2>\n            <p><a href=\"../code/solution/got/got.phps\">Source</a> (PHP)</p>\n            <p><a href=\"../code/solution/got/got.php\">Running Version</a> (PHP)</p>\n          </section>\n        </section>", "text": "Exercise 3: Gallery of Thrones Given a directory of character pictures (got.zip), write a PHP web service which vends these photos. These pictures represent characters in one of three \"houses\" (or families) in the Game of Thrones series: House Lannister, House Stark, and House Targaryen. There are two parts in this exercise. The first outputs all image names in the images folder, and the second filters the output based on an optional query parameter (house). Go \"down\" to work through the slides specific to this exercise. Exercise 2: Part 1 (Default Output) First, write your web service such that it simply prints out (in plain text) a list of image names in the provided images folder. When the PHP page is executed, all of the file names in the images directory should be output, each on its own line.\t\t\t\t\t\t\t\t\t\t\t\t\t\tExpected Output: images/lannister1.jpgimages/lannister2.jpgimages/lannister3.jpgimages/lannister4.jpgimages/stark1.jpgimages/stark2.jpgimages/stark3.jpgimages/stark4.jpgimages/stark5.jpgimages/targaryen2.jpgimages/targaryen3.jpgimages/targaryen4.jpg Expected output (plain text) Exercise 2: Handling an Optional Query Parameter After implementing the behavior when no query parameter is passed, add a query parameter handler to let a user filter the outputted images based on a house name. There are three three houses (\"lannister\", \"stark\", or \"targaryen\") that correspond to images in the images folder. If a value for house is included as a query parameter, your code should print only the images which are related to a specific house. Print out the list of files including the images/ directory. This is loosely based on the assumption that your PHP webservice and your HTML/CSS/JS application would be served out of the same directory where images/ sits. Exercise 2: Solution Source (PHP) Running Version (PHP)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 3: Gallery of Thrones</h2>\n            <p>\n              Given a directory of character pictures (<a href=\"../code/starter/got.zip\">got.zip</a>), write a PHP web service which vends\n              these photos. These pictures represent characters in one of three \"houses\" (or\n              families) in the Game of Thrones series: House Lannister, House Stark, and House\n              Targaryen.\n            </p>\n            <p>\n              There are two parts in this exercise. The first outputs all image names in the images\n              folder, and the second filters the output based on an optional query parameter\n              (<code>house</code>).\n            </p>\n            <p>Go \"down\" to work through the slides specific to this exercise.</p>\n          </section>", "text": "Exercise 3: Gallery of Thrones Given a directory of character pictures (got.zip), write a PHP web service which vends these photos. These pictures represent characters in one of three \"houses\" (or families) in the Game of Thrones series: House Lannister, House Stark, and House Targaryen. There are two parts in this exercise. The first outputs all image names in the images folder, and the second filters the output based on an optional query parameter (house). Go \"down\" to work through the slides specific to this exercise.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Part 1 (Default Output)</h2>\n            <p>\n              First, write your web service such that it simply prints out (in plain text) a list of\n              image names in the provided <code>images</code> folder.\n              When the PHP page is executed, all of the file names in the <code>images</code>\n              directory should be output, each on its own line.\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<strong>Expected Output:</strong>\n            </p>\n            <pre><code data-trim class=\"medium-small-font hljs\">images/lannister1.jpg\nimages/lannister2.jpg\nimages/lannister3.jpg\nimages/lannister4.jpg\nimages/stark1.jpg\nimages/stark2.jpg\nimages/stark3.jpg\nimages/stark4.jpg\nimages/stark5.jpg\nimages/targaryen2.jpg\nimages/targaryen3.jpg\nimages/targaryen4.jpg\n</code></pre>\n          <p class=\"code-caption\">Expected output (plain text)</p>\n          </section>", "text": "Exercise 2: Part 1 (Default Output) First, write your web service such that it simply prints out (in plain text) a list of image names in the provided images folder. When the PHP page is executed, all of the file names in the images directory should be output, each on its own line.\t\t\t\t\t\t\t\t\t\t\t\t\t\tExpected Output: images/lannister1.jpgimages/lannister2.jpgimages/lannister3.jpgimages/lannister4.jpgimages/stark1.jpgimages/stark2.jpgimages/stark3.jpgimages/stark4.jpgimages/stark5.jpgimages/targaryen2.jpgimages/targaryen3.jpgimages/targaryen4.jpg Expected output (plain text)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Handling an Optional Query Parameter</h2>\n            <p>\n              After implementing the behavior when no query parameter is passed, add a query parameter handler to let a user filter the\n              outputted images based on a house name. There are three three houses (\"lannister\", \"stark\", or \"targaryen\")\n              that correspond to images in the images folder. If a value for <code>house</code> is\n              included as a query parameter, your code should\n              print only the images which are related to a specific house.\n            </p>\n\n            <p>\n              Print out the list of files including the <code>images/</code> directory. This is loosely based on the assumption that your\n              PHP webservice and your HTML/CSS/JS application would be served out of the same directory where <code>images/</code> sits.\n            </p>\n          </section>", "text": "Exercise 2: Handling an Optional Query Parameter After implementing the behavior when no query parameter is passed, add a query parameter handler to let a user filter the outputted images based on a house name. There are three three houses (\"lannister\", \"stark\", or \"targaryen\") that correspond to images in the images folder. If a value for house is included as a query parameter, your code should print only the images which are related to a specific house. Print out the list of files including the images/ directory. This is loosely based on the assumption that your PHP webservice and your HTML/CSS/JS application would be served out of the same directory where images/ sits.", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"},
{"html": "<section>\n            <h2>Exercise 2: Solution</h2>\n            <p><a href=\"../code/solution/got/got.phps\">Source</a> (PHP)</p>\n            <p><a href=\"../code/solution/got/got.php\">Running Version</a> (PHP)</p>\n          </section>", "text": "Exercise 2: Solution Source (PHP) Running Version (PHP)", "source": "https://courses.cs.washington.edu/courses/cse154/19sp/sections/week07-thurs/slides/"}
]